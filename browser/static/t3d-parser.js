/*
Copyright Â© 2024 T3D project contributors.

This file is part of the T3D Parser.

T3D Parser is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

T3D Parser is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with the T3D Parser. If not, see <http://www.gnu.org/licenses/>.
*/

var T3DParser = (function (exports) {
    'use strict';

    var BaseType;
    (function (BaseType) {
        BaseType["Float32"] = "Float32";
        BaseType["Float64"] = "Float64";
        BaseType["Uint8"] = "Uint8";
        BaseType["Uint16"] = "Uint16";
        BaseType["Uint32"] = "Uint32";
        BaseType["Uint64"] = "Uint64";
        BaseType["RefString"] = "RefString";
        BaseType["CString"] = "CString";
        BaseType["FixedArray"] = "FixedArray";
        BaseType["DynArray"] = "DynArray";
        BaseType["RefArray"] = "RefArray";
        BaseType["Pointer"] = "Pointer";
        BaseType["RefString16"] = "RefString16";
        BaseType["Filename"] = "Filename";
        BaseType["Fileref"] = "Fileref";
        BaseType["Unknown"] = "Unknown";
    })(BaseType || (BaseType = {}));
    var Float32 = {
        baseType: BaseType.Float32,
        declarationType: "number",
    };
    ({
        baseType: BaseType.Float64,
        declarationType: "number",
    });
    var Uint8 = {
        baseType: BaseType.Uint8,
        declarationType: "number",
    };
    var Uint16 = {
        baseType: BaseType.Uint16,
        declarationType: "number",
    };
    var Uint32 = {
        baseType: BaseType.Uint32,
        declarationType: "number",
    };
    var Uint64 = {
        baseType: BaseType.Uint64,
        declarationType: "bigint",
    };
    function CString(length) {
        return {
            baseType: BaseType.CString,
            length: length,
            declarationType: "string",
        };
    }
    function RefString() {
        return {
            baseType: BaseType.RefString,
            declarationType: "string",
        };
    }
    function FixedArray(subType, length) {
        var nativeClass = getNativeArray(subType);
        if (nativeClass) {
            return {
                baseType: BaseType.FixedArray,
                subType: subType,
                length: length,
                declarationType: nativeClass.name,
            };
        }
        return {
            baseType: BaseType.FixedArray,
            subType: subType,
            length: length,
            declarationType: "Array<".concat(typeof subType === "string" ? subType : subType.declarationType, ">"),
        };
    }
    function DynArray(subType) {
        var nativeClass = getNativeArray(subType);
        if (nativeClass) {
            return {
                baseType: BaseType.DynArray,
                subType: subType,
                declarationType: nativeClass.name,
            };
        }
        return {
            baseType: BaseType.DynArray,
            subType: subType,
            declarationType: "Array<".concat(typeof subType === "string" ? subType : subType.declarationType, ">"),
        };
    }
    function RefArray(subType) {
        return {
            baseType: BaseType.RefArray,
            subType: subType,
            declarationType: "Array<".concat(typeof subType === "string" ? subType : subType.declarationType, ">"),
        };
    }
    function Pointer(subType) {
        return {
            baseType: BaseType.Pointer,
            subType: subType,
            declarationType: "".concat(typeof subType === "string" ? subType : subType.declarationType),
        };
    }
    function RefString16() {
        return {
            baseType: BaseType.RefString16,
            declarationType: "string",
        };
    }
    function Filename() {
        return {
            baseType: BaseType.Filename,
            declarationType: "number",
        };
    }
    function Fileref() {
        return {
            baseType: BaseType.Fileref,
            declarationType: "number",
        };
    }
    function getNativeArray(type) {
        if (typeof type === "string") {
            return undefined;
        }
        switch (type.baseType) {
            case BaseType.Float32:
                return Float32Array;
            case BaseType.Float64:
                return Float64Array;
            case BaseType.Uint8:
                return Uint8Array;
            case BaseType.Uint16:
                return Uint16Array;
            case BaseType.Uint32:
                return Uint32Array;
            case BaseType.Uint64:
                return BigUint64Array;
        }
    }

    var V0$16 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV0",
        version: 0,
        definitions: {
            HandlerDataV0: {
                byteCode: DynArray(Uint8),
                flags: Uint32,
                name: Uint64
            },
            MetaSoundDataV0: {
                attenuation: Pointer("AttenuationDataV0"),
                category: Uint64,
                channelMode: Uint8,
                channelPriority: Uint8,
                depth: "DynamicParamDataV0",
                dsp: DynArray("DspDataV0"),
                endCue: Uint64,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                fileIterateMode: Uint8,
                fileName: DynArray("FileNameDataV0"),
                flags: Uint32,
                initialDelay: "RangeDataV0",
                loopCount: Uint32,
                loopMode: Uint8,
                name: Uint64,
                pan: "DynamicParamDataV0",
                pitch: "DynamicParamDataV0",
                playbackMode: Uint8,
                playLength: "RangeDataV0",
                playlistId: Uint64,
                positionMode: Uint8,
                positionOffset: FixedArray(Float32, 3),
                positionOffsetAngle: "RangeDataV0",
                positionRange: "RangeDataV0",
                repeatCount: "RangeDataV0",
                repeatTime: "RangeDataV0",
                startTimeOffset: "RangeDataV0",
                repeatTimeFrom: Uint8,
                volume: "DynamicParamDataV0"
            },
            AttenuationDataV0: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV0",
                pan3D: "DynamicParamDataV0",
                spread3D: "DynamicParamDataV0",
                volumeA: "DynamicParamDataV0"
            },
            DynamicParamDataV0: {
                envelopeData: Pointer("EnvelopeDataV0"),
                randomParamData: Pointer("RandomParamDataV0"),
                type: Uint8,
                value: Float32
            },
            EnvelopeDataV0: {
                envelopePoint: DynArray("EnvelopePointDataV0"),
                offsetType: Uint8,
                offsetParameter: Uint64
            },
            EnvelopePointDataV0: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV0: {
                time: "RangeDataV0",
                value: "RangeDataV0"
            },
            RangeDataV0: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            DspDataV0: {
                param: DynArray("DynamicParamDataV0"),
                type: Uint8
            },
            FileNameDataV0: {
                audioType: Uint8,
                fileName: Filename(),
                language: Uint64,
                weight: Float32
            },
            ScriptRefDataV0: {
                fileName: Filename(),
                name: Uint64
            },
            TriggerKeyDataV0: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV0")
            },
            TriggerMarkerDataV0: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            fadeInTime: Float32,
            flags: Uint32,
            handler: DynArray("HandlerDataV0"),
            metaSound: DynArray("MetaSoundDataV0"),
            scriptRef: DynArray("ScriptRefDataV0"),
            triggerKey: DynArray("TriggerKeyDataV0"),
            volume: Float32
        }
    };
    var V1$N = {
        chunkName: "AMSP",
        name: "ScriptFileDataV1",
        version: 1,
        definitions: {
            AudioSettingsDataV1: {
                category: DynArray("CategoryDataV1"),
                distanceScale: Float32,
                voiceBankFileName: Filename(),
                volumeGroup: DynArray("VolumeGroupDataV1")
            },
            CategoryDataV1: {
                attenuation: Pointer("AttenuationDataV1"),
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8,
                muteFadeTime: Float32,
                name: Uint64,
                volumeA: Float32,
                volumeAThreshold: Float32,
                volumeB: Float32,
                volumeBThreshold: Float32,
                volumeChangeRate: Float32,
                volumeDucking: Float32,
                volumeDuckingTimeAttack: Float32,
                volumeDuckingTimeRelease: Float32,
                volumeGroupName: Uint64
            },
            AttenuationDataV1: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV1",
                pan3D: "DynamicParamDataV1",
                spread3D: "DynamicParamDataV1",
                volumeA: "DynamicParamDataV1"
            },
            DynamicParamDataV1: {
                envelopeData: Pointer("EnvelopeDataV1"),
                randomParamData: Pointer("RandomParamDataV1"),
                type: Uint8,
                value: Float32
            },
            EnvelopeDataV1: {
                envelopePoint: DynArray("EnvelopePointDataV1"),
                offsetType: Uint8,
                offsetParameter: Uint64
            },
            EnvelopePointDataV1: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV1: {
                time: "RangeDataV1",
                value: "RangeDataV1"
            },
            RangeDataV1: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            VolumeGroupDataV1: {
                flags: Uint32,
                name: Uint64,
                parentName: Uint64,
                volume: Float32
            },
            HandlerDataV1: {
                byteCode: DynArray(Uint8),
                flags: Uint32,
                name: Uint64
            },
            MetaSoundDataV1: {
                attenuation: Pointer("AttenuationDataV1"),
                category: Uint64,
                channelMode: Uint8,
                channelPriority: Uint8,
                depth: "DynamicParamDataV1",
                dsp: DynArray("DspDataV1"),
                endCue: Uint64,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                fileIterateMode: Uint8,
                fileName: DynArray("FileNameDataV1"),
                flags: Uint32,
                initialDelay: "RangeDataV1",
                loopCount: Uint32,
                loopMode: Uint8,
                name: Uint64,
                pan: "DynamicParamDataV1",
                pitch: "DynamicParamDataV1",
                playbackMode: Uint8,
                playLength: "RangeDataV1",
                playlistId: Uint64,
                positionMode: Uint8,
                positionOffset: FixedArray(Float32, 3),
                positionOffsetAngle: "RangeDataV1",
                positionRange: "RangeDataV1",
                repeatCount: "RangeDataV1",
                repeatTime: "RangeDataV1",
                startTimeOffset: "RangeDataV1",
                repeatTimeFrom: Uint8,
                volume: "DynamicParamDataV1"
            },
            DspDataV1: {
                param: DynArray("DynamicParamDataV1"),
                type: Uint8
            },
            FileNameDataV1: {
                audioType: Uint8,
                fileName: Filename(),
                language: Uint64,
                weight: Float32
            },
            ScriptRefDataV1: {
                fileName: Filename(),
                name: Uint64
            },
            TriggerKeyDataV1: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV1")
            },
            TriggerMarkerDataV1: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            audioSettings: Pointer("AudioSettingsDataV1"),
            fadeInTime: Float32,
            flags: Uint32,
            handler: DynArray("HandlerDataV1"),
            metaSound: DynArray("MetaSoundDataV1"),
            scriptRef: DynArray("ScriptRefDataV1"),
            triggerKey: DynArray("TriggerKeyDataV1"),
            volume: Float32
        }
    };
    var V2$C = {
        chunkName: "AMSP",
        name: "ScriptFileDataV2",
        version: 2,
        definitions: {
            AudioSettingsDataV2: {
                volumeGroup: DynArray("VolumeGroupDataV2"),
                category: DynArray("CategoryDataV2"),
                distanceScale: Float32,
                voiceBankFileName: Filename()
            },
            VolumeGroupDataV2: {
                name: Uint64,
                parentName: Uint64,
                flags: Uint32,
                volume: Float32
            },
            CategoryDataV2: {
                name: Uint64,
                volumeGroupName: Uint64,
                attenuation: Pointer("AttenuationDataV2"),
                muteFadeTime: Float32,
                volumeA: Float32,
                volumeAThreshold: Float32,
                volumeB: Float32,
                volumeBThreshold: Float32,
                volumeChangeRate: Float32,
                volumeDucking: Float32,
                volumeDuckingTimeAttack: Float32,
                volumeDuckingTimeRelease: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV2: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV2",
                pan3D: "DynamicParamDataV2",
                spread3D: "DynamicParamDataV2",
                volumeA: "DynamicParamDataV2"
            },
            DynamicParamDataV2: {
                envelopeData: Pointer("EnvelopeDataV2"),
                randomParamData: Pointer("RandomParamDataV2"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV2: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV2"),
                offsetType: Uint8
            },
            EnvelopePointDataV2: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV2: {
                time: "RangeDataV2",
                value: "RangeDataV2"
            },
            RangeDataV2: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            HandlerDataV2: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV2: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV2"),
                attenuation: Pointer("AttenuationDataV2"),
                fileName: DynArray("FileNameDataV2"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV2",
                pan: "DynamicParamDataV2",
                pitch: "DynamicParamDataV2",
                pitchMS: "DynamicParamDataV2",
                volume: "DynamicParamDataV2",
                volumeMS: "DynamicParamDataV2",
                initialDelay: "RangeDataV2",
                playLength: "RangeDataV2",
                positionOffsetAngle: "RangeDataV2",
                positionRange: "RangeDataV2",
                repeatCount: "RangeDataV2",
                repeatTime: "RangeDataV2",
                startTimeOffset: "RangeDataV2",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            DspDataV2: {
                param: DynArray("DynamicParamDataV2"),
                type: Uint8
            },
            FileNameDataV2: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV2: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV2: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV2")
            },
            TriggerMarkerDataV2: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV2"),
            handler: DynArray("HandlerDataV2"),
            metaSound: DynArray("MetaSoundDataV2"),
            scriptRef: DynArray("ScriptRefDataV2"),
            triggerKey: DynArray("TriggerKeyDataV2"),
            flags: Uint32,
            fadeInTime: Float32,
            volume: Float32
        }
    };
    var V3$w = {
        chunkName: "AMSP",
        name: "ScriptFileDataV3",
        version: 3,
        definitions: {
            AudioSettingsDataV3: {
                volumeGroup: DynArray("VolumeGroupDataV3"),
                category: DynArray("CategoryDataV3"),
                distanceScale: Float32,
                voiceBankFileName: Filename()
            },
            VolumeGroupDataV3: {
                name: Uint64,
                parentName: Uint64,
                flags: Uint32,
                volume: Float32
            },
            CategoryDataV3: {
                name: Uint64,
                volumeGroupName: Uint64,
                attenuation: Pointer("AttenuationDataV3"),
                muteFadeTime: Float32,
                volumeA: Float32,
                volumeAThreshold: Float32,
                volumeB: Float32,
                volumeBThreshold: Float32,
                volumeChangeRate: Float32,
                volumeDucking: Float32,
                volumeDuckingTimeAttack: Float32,
                volumeDuckingTimeRelease: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV3: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV3",
                pan3D: "DynamicParamDataV3",
                spread3D: "DynamicParamDataV3",
                volumeA: "DynamicParamDataV3"
            },
            DynamicParamDataV3: {
                envelopeData: Pointer("EnvelopeDataV3"),
                randomParamData: Pointer("RandomParamDataV3"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV3: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV3"),
                offsetType: Uint8
            },
            EnvelopePointDataV3: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV3: {
                time: "RangeDataV3",
                value: "RangeDataV3"
            },
            RangeDataV3: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            HandlerDataV3: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV3: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV3"),
                attenuation: Pointer("AttenuationDataV3"),
                fileName: DynArray("FileNameDataV3"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV3",
                pan: "DynamicParamDataV3",
                pitch: "DynamicParamDataV3",
                pitchMS: "DynamicParamDataV3",
                volume: "DynamicParamDataV3",
                volumeMS: "DynamicParamDataV3",
                initialDelay: "RangeDataV3",
                playLength: "RangeDataV3",
                positionOffsetAngle: "RangeDataV3",
                positionRange: "RangeDataV3",
                repeatCount: "RangeDataV3",
                repeatTime: "RangeDataV3",
                startTimeOffset: "RangeDataV3",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            DspDataV3: {
                param: DynArray("DynamicParamDataV3"),
                type: Uint8
            },
            FileNameDataV3: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV3: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV3: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV3")
            },
            TriggerMarkerDataV3: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            endCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV3"),
            handler: DynArray("HandlerDataV3"),
            metaSound: DynArray("MetaSoundDataV3"),
            scriptRef: DynArray("ScriptRefDataV3"),
            triggerKey: DynArray("TriggerKeyDataV3"),
            flags: Uint32,
            fadeInTime: Float32,
            volume: Float32
        }
    };
    var V4$l = {
        chunkName: "AMSP",
        name: "ScriptFileDataV4",
        version: 4,
        definitions: {
            AudioSettingsDataV4: {
                volumeGroup: DynArray("VolumeGroupDataV4"),
                category: DynArray("CategoryDataV4"),
                distanceScale: Float32,
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename()
            },
            VolumeGroupDataV4: {
                name: Uint64,
                parentName: Uint64,
                flags: Uint32,
                volume: Float32
            },
            CategoryDataV4: {
                name: Uint64,
                volumeGroupName: Uint64,
                attenuation: Pointer("AttenuationDataV4"),
                muteFadeTime: Float32,
                volumeA: Float32,
                volumeAThreshold: Float32,
                volumeB: Float32,
                volumeBThreshold: Float32,
                volumeChangeRate: Float32,
                volumeDucking: Float32,
                volumeDuckingTimeAttack: Float32,
                volumeDuckingTimeRelease: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV4: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV4",
                pan3D: "DynamicParamDataV4",
                spread3D: "DynamicParamDataV4",
                volumeA: "DynamicParamDataV4"
            },
            DynamicParamDataV4: {
                envelopeData: Pointer("EnvelopeDataV4"),
                randomParamData: Pointer("RandomParamDataV4"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV4: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV4"),
                offsetType: Uint8
            },
            EnvelopePointDataV4: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV4: {
                time: "RangeDataV4",
                value: "RangeDataV4"
            },
            RangeDataV4: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            HandlerDataV4: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV4: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV4"),
                attenuation: Pointer("AttenuationDataV4"),
                fileName: DynArray("FileNameDataV4"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV4",
                pan: "DynamicParamDataV4",
                pitch: "DynamicParamDataV4",
                pitchMS: "DynamicParamDataV4",
                volume: "DynamicParamDataV4",
                volumeMS: "DynamicParamDataV4",
                initialDelay: "RangeDataV4",
                playLength: "RangeDataV4",
                positionOffsetAngle: "RangeDataV4",
                positionRange: "RangeDataV4",
                repeatCount: "RangeDataV4",
                repeatTime: "RangeDataV4",
                startTimeOffset: "RangeDataV4",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            DspDataV4: {
                param: DynArray("DynamicParamDataV4"),
                type: Uint8
            },
            FileNameDataV4: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV4: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV4: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV4")
            },
            TriggerMarkerDataV4: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            endCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV4"),
            handler: DynArray("HandlerDataV4"),
            metaSound: DynArray("MetaSoundDataV4"),
            scriptRef: DynArray("ScriptRefDataV4"),
            triggerKey: DynArray("TriggerKeyDataV4"),
            flags: Uint32,
            fadeInTime: Float32,
            volume: Float32
        }
    };
    var V5$h = {
        chunkName: "AMSP",
        name: "ScriptFileDataV5",
        version: 5,
        definitions: {
            AudioSettingsDataV5: {
                defaultBuss: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                category: DynArray("CategoryDataV5"),
                snapshot: DynArray("SnapshotDataV5"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename()
            },
            CategoryDataV5: {
                name: Uint64,
                volumeGroupName: Uint64,
                attenuation: Pointer("AttenuationDataV5"),
                muteFadeTime: Float32,
                volumeA: Float32,
                volumeAThreshold: Float32,
                volumeB: Float32,
                volumeBThreshold: Float32,
                volumeChangeRate: Float32,
                volumeDucking: Float32,
                volumeDuckingTimeAttack: Float32,
                volumeDuckingTimeRelease: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV5: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV5",
                pan3D: "DynamicParamDataV5",
                spread3D: "DynamicParamDataV5",
                volumeA: "DynamicParamDataV5"
            },
            DynamicParamDataV5: {
                envelopeData: Pointer("EnvelopeDataV5"),
                randomParamData: Pointer("RandomParamDataV5"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV5: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV5"),
                offsetType: Uint8
            },
            EnvelopePointDataV5: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV5: {
                time: "RangeDataV5",
                value: "RangeDataV5"
            },
            RangeDataV5: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            SnapshotDataV5: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDataV5")
            },
            BussDataV5: {
                name: Uint64,
                output: Uint64,
                flags: Uint32,
                dsp: DynArray("DspDataV5"),
                volume: Float32
            },
            DspDataV5: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            HandlerDataV5: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV5: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV5"),
                attenuation: Pointer("AttenuationDataV5"),
                fileName: DynArray("FileNameDataV5"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV5",
                pan: "DynamicParamDataV5",
                pitch: "DynamicParamDataV5",
                pitchMS: "DynamicParamDataV5",
                volume: "DynamicParamDataV5",
                volumeMS: "DynamicParamDataV5",
                initialDelay: "RangeDataV5",
                playLength: "RangeDataV5",
                positionOffsetAngle: "RangeDataV5",
                positionRange: "RangeDataV5",
                repeatCount: "RangeDataV5",
                repeatTime: "RangeDataV5",
                startTimeOffset: "RangeDataV5",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV5: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV5: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV5: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV5")
            },
            TriggerMarkerDataV5: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            endCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV5"),
            handler: DynArray("HandlerDataV5"),
            metaSound: DynArray("MetaSoundDataV5"),
            scriptRef: DynArray("ScriptRefDataV5"),
            triggerKey: DynArray("TriggerKeyDataV5"),
            flags: Uint32,
            fadeInTime: Float32,
            volume: Float32
        }
    };
    var V6$h = {
        chunkName: "AMSP",
        name: "ScriptFileDataV6",
        version: 6,
        definitions: {
            AudioSettingsDataV6: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                buss: DynArray("BussDataV6"),
                category: DynArray("CategoryDataV6"),
                snapshot: DynArray("SnapshotDataV6"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename()
            },
            BussDataV6: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV6")
            },
            BussDynamicDataV6: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV6")
            },
            DspDataV6: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV6: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV6"),
                muteFadeTime: Float32,
                volumeA: Float32,
                volumeAThreshold: Float32,
                volumeB: Float32,
                volumeBThreshold: Float32,
                volumeChangeRate: Float32,
                volumeDucking: Float32,
                volumeDuckingTimeAttack: Float32,
                volumeDuckingTimeRelease: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV6: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV6",
                pan3D: "DynamicParamDataV6",
                spread3D: "DynamicParamDataV6",
                volumeA: "DynamicParamDataV6"
            },
            DynamicParamDataV6: {
                envelopeData: Pointer("EnvelopeDataV6"),
                randomParamData: Pointer("RandomParamDataV6"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV6: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV6"),
                offsetType: Uint8
            },
            EnvelopePointDataV6: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV6: {
                time: "RangeDataV6",
                value: "RangeDataV6"
            },
            RangeDataV6: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            SnapshotDataV6: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV6")
            },
            HandlerDataV6: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV6: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV6"),
                attenuation: Pointer("AttenuationDataV6"),
                fileName: DynArray("FileNameDataV6"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV6",
                pan: "DynamicParamDataV6",
                pitch: "DynamicParamDataV6",
                pitchMS: "DynamicParamDataV6",
                volume: "DynamicParamDataV6",
                volumeMS: "DynamicParamDataV6",
                initialDelay: "RangeDataV6",
                playLength: "RangeDataV6",
                positionOffsetAngle: "RangeDataV6",
                positionRange: "RangeDataV6",
                repeatCount: "RangeDataV6",
                repeatTime: "RangeDataV6",
                startTimeOffset: "RangeDataV6",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV6: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV6: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV6: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV6")
            },
            TriggerMarkerDataV6: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            endCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV6"),
            handler: DynArray("HandlerDataV6"),
            metaSound: DynArray("MetaSoundDataV6"),
            scriptRef: DynArray("ScriptRefDataV6"),
            triggerKey: DynArray("TriggerKeyDataV6"),
            flags: Uint32,
            fadeInTime: Float32,
            volume: Float32
        }
    };
    var V7$e = {
        chunkName: "AMSP",
        name: "ScriptFileDataV7",
        version: 7,
        definitions: {
            AudioSettingsDataV7: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV7"),
                category: DynArray("CategoryDataV7"),
                snapshot: DynArray("SnapshotDataV7"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename()
            },
            BussDataV7: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV7")
            },
            BussDynamicDataV7: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV7")
            },
            DspDataV7: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV7: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV7"),
                dynamicData: Pointer("CategoryDynamicDataV7"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV7: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV7",
                pan3D: "DynamicParamDataV7",
                spread3D: "DynamicParamDataV7",
                volumeA: "DynamicParamDataV7",
                volumeB: "DynamicParamDataV7"
            },
            DynamicParamDataV7: {
                envelopeData: Pointer("EnvelopeDataV7"),
                randomParamData: Pointer("RandomParamDataV7"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV7: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV7"),
                offsetType: Uint8
            },
            EnvelopePointDataV7: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV7: {
                time: "RangeDataV7",
                value: "RangeDataV7"
            },
            RangeDataV7: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV7: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                flags: Uint32
            },
            SnapshotDataV7: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV7"),
                category: DynArray("CategoryDynamicDataV7")
            },
            HandlerDataV7: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV7: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV7"),
                attenuation: Pointer("AttenuationDataV7"),
                fileName: DynArray("FileNameDataV7"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV7",
                pan: "DynamicParamDataV7",
                pitch: "DynamicParamDataV7",
                pitchMS: "DynamicParamDataV7",
                volume: "DynamicParamDataV7",
                volumeMS: "DynamicParamDataV7",
                initialDelay: "RangeDataV7",
                playLength: "RangeDataV7",
                positionOffsetAngle: "RangeDataV7",
                positionRange: "RangeDataV7",
                repeatCount: "RangeDataV7",
                repeatTime: "RangeDataV7",
                startTimeOffset: "RangeDataV7",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV7: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV7: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV7: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV7")
            },
            TriggerMarkerDataV7: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            endCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV7"),
            handler: DynArray("HandlerDataV7"),
            metaSound: DynArray("MetaSoundDataV7"),
            scriptRef: DynArray("ScriptRefDataV7"),
            triggerKey: DynArray("TriggerKeyDataV7"),
            flags: Uint32,
            fadeInTime: Float32,
            volume: Float32
        }
    };
    var V8$e = {
        chunkName: "AMSP",
        name: "ScriptFileDataV8",
        version: 8,
        definitions: {
            AudioSettingsDataV8: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV8"),
                category: DynArray("CategoryDataV8"),
                reverb: DynArray("ReverbDataV8"),
                snapshot: DynArray("SnapshotDataV8"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename()
            },
            BussDataV8: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV8")
            },
            BussDynamicDataV8: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV8")
            },
            DspDataV8: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV8: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV8"),
                dynamicData: Pointer("CategoryDynamicDataV8"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV8: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV8",
                pan3D: "DynamicParamDataV8",
                spread3D: "DynamicParamDataV8",
                volumeA: "DynamicParamDataV8",
                volumeB: "DynamicParamDataV8"
            },
            DynamicParamDataV8: {
                envelopeData: Pointer("EnvelopeDataV8"),
                randomParamData: Pointer("RandomParamDataV8"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV8: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV8"),
                offsetType: Uint8
            },
            EnvelopePointDataV8: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV8: {
                time: "RangeDataV8",
                value: "RangeDataV8"
            },
            RangeDataV8: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV8: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV8: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32
            },
            SnapshotDataV8: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV8"),
                category: DynArray("CategoryDynamicDataV8")
            },
            HandlerDataV8: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV8: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV8"),
                attenuation: Pointer("AttenuationDataV8"),
                fileName: DynArray("FileNameDataV8"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV8",
                pan: "DynamicParamDataV8",
                pitch: "DynamicParamDataV8",
                pitchMS: "DynamicParamDataV8",
                volume: "DynamicParamDataV8",
                volumeMS: "DynamicParamDataV8",
                initialDelay: "RangeDataV8",
                playLength: "RangeDataV8",
                positionOffsetAngle: "RangeDataV8",
                positionRange: "RangeDataV8",
                repeatCount: "RangeDataV8",
                repeatTime: "RangeDataV8",
                startTimeOffset: "RangeDataV8",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV8: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV8: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV8: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV8")
            },
            TriggerMarkerDataV8: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            endCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV8"),
            handler: DynArray("HandlerDataV8"),
            metaSound: DynArray("MetaSoundDataV8"),
            scriptRef: DynArray("ScriptRefDataV8"),
            triggerKey: DynArray("TriggerKeyDataV8"),
            flags: Uint32,
            fadeInTime: Float32,
            volume: Float32
        }
    };
    var V9$c = {
        chunkName: "AMSP",
        name: "ScriptFileDataV9",
        version: 9,
        definitions: {
            AudioSettingsDataV9: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV9"),
                category: DynArray("CategoryDataV9"),
                reverb: DynArray("ReverbDataV9"),
                snapshot: DynArray("SnapshotDataV9"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename()
            },
            BussDataV9: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV9")
            },
            BussDynamicDataV9: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV9")
            },
            DspDataV9: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV9: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                soundPoolCategory: Uint64,
                attenuation: Pointer("AttenuationDataV9"),
                dynamicData: Pointer("CategoryDynamicDataV9"),
                muteFadeTime: Float32,
                soundPoolDelay: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                soundPoolCount: Uint32,
                maxAudibleBehavior: Uint8,
                soundPoolCountBehavior: Uint8,
                soundPoolMode: Uint8
            },
            AttenuationDataV9: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV9",
                pan3D: "DynamicParamDataV9",
                spread3D: "DynamicParamDataV9",
                volumeA: "DynamicParamDataV9",
                volumeB: "DynamicParamDataV9"
            },
            DynamicParamDataV9: {
                envelopeData: Pointer("EnvelopeDataV9"),
                randomParamData: Pointer("RandomParamDataV9"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV9: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV9"),
                offsetType: Uint8
            },
            EnvelopePointDataV9: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV9: {
                time: "RangeDataV9",
                value: "RangeDataV9"
            },
            RangeDataV9: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV9: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV9: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32
            },
            SnapshotDataV9: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV9"),
                category: DynArray("CategoryDynamicDataV9")
            },
            HandlerDataV9: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV9: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV9"),
                attenuation: Pointer("AttenuationDataV9"),
                fileName: DynArray("FileNameDataV9"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV9",
                pan: "DynamicParamDataV9",
                pitch: "DynamicParamDataV9",
                pitchMS: "DynamicParamDataV9",
                volume: "DynamicParamDataV9",
                volumeMS: "DynamicParamDataV9",
                initialDelay: "RangeDataV9",
                playLength: "RangeDataV9",
                positionOffsetAngle: "RangeDataV9",
                positionRange: "RangeDataV9",
                repeatCount: "RangeDataV9",
                repeatTime: "RangeDataV9",
                startTimeOffset: "RangeDataV9",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV9: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV9: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV9: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV9")
            },
            TriggerMarkerDataV9: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            endCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV9"),
            handler: DynArray("HandlerDataV9"),
            metaSound: DynArray("MetaSoundDataV9"),
            scriptRef: DynArray("ScriptRefDataV9"),
            triggerKey: DynArray("TriggerKeyDataV9"),
            flags: Uint32,
            fadeInTime: Float32,
            volume: Float32
        }
    };
    var V10$d = {
        chunkName: "AMSP",
        name: "ScriptFileDataV10",
        version: 10,
        definitions: {
            AudioSettingsDataV10: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV10"),
                category: DynArray("CategoryDataV10"),
                reverb: DynArray("ReverbDataV10"),
                snapshot: DynArray("SnapshotDataV10"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename()
            },
            BussDataV10: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV10")
            },
            BussDynamicDataV10: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV10")
            },
            DspDataV10: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV10: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV10"),
                dynamicData: Pointer("CategoryDynamicDataV10"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV10: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV10",
                pan3D: "DynamicParamDataV10",
                spread3D: "DynamicParamDataV10",
                volumeA: "DynamicParamDataV10",
                volumeB: "DynamicParamDataV10"
            },
            DynamicParamDataV10: {
                envelopeData: Pointer("EnvelopeDataV10"),
                randomParamData: Pointer("RandomParamDataV10"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV10: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV10"),
                offsetType: Uint8
            },
            EnvelopePointDataV10: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV10: {
                time: "RangeDataV10",
                value: "RangeDataV10"
            },
            RangeDataV10: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV10: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV10: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32
            },
            SnapshotDataV10: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV10"),
                category: DynArray("CategoryDynamicDataV10")
            },
            HandlerDataV10: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV10: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV10"),
                attenuation: Pointer("AttenuationDataV10"),
                fileName: DynArray("FileNameDataV10"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV10",
                pan: "DynamicParamDataV10",
                pitch: "DynamicParamDataV10",
                pitchMS: "DynamicParamDataV10",
                volume: "DynamicParamDataV10",
                volumeMS: "DynamicParamDataV10",
                initialDelay: "RangeDataV10",
                playLength: "RangeDataV10",
                positionOffsetAngle: "RangeDataV10",
                positionRange: "RangeDataV10",
                repeatCount: "RangeDataV10",
                repeatTime: "RangeDataV10",
                startTimeOffset: "RangeDataV10",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV10: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV10: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV10: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV10")
            },
            TriggerMarkerDataV10: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV10"),
            handler: DynArray("HandlerDataV10"),
            metaSound: DynArray("MetaSoundDataV10"),
            scriptRef: DynArray("ScriptRefDataV10"),
            triggerKey: DynArray("TriggerKeyDataV10"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32
        }
    };
    var V11$c = {
        chunkName: "AMSP",
        name: "ScriptFileDataV11",
        version: 11,
        definitions: {
            AudioSettingsDataV11: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV11"),
                category: DynArray("CategoryDataV11"),
                reverb: DynArray("ReverbDataV11"),
                snapshot: DynArray("SnapshotDataV11"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV11: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV11")
            },
            BussDynamicDataV11: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV11")
            },
            DspDataV11: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV11: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV11"),
                dynamicData: Pointer("CategoryDynamicDataV11"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV11: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV11",
                pan3D: "DynamicParamDataV11",
                spread3D: "DynamicParamDataV11",
                volumeA: "DynamicParamDataV11",
                volumeB: "DynamicParamDataV11"
            },
            DynamicParamDataV11: {
                envelopeData: Pointer("EnvelopeDataV11"),
                randomParamData: Pointer("RandomParamDataV11"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV11: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV11"),
                offsetType: Uint8
            },
            EnvelopePointDataV11: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV11: {
                time: "RangeDataV11",
                value: "RangeDataV11"
            },
            RangeDataV11: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV11: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV11: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32
            },
            SnapshotDataV11: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV11"),
                category: DynArray("CategoryDynamicDataV11")
            },
            HandlerDataV11: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV11: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV11"),
                attenuation: Pointer("AttenuationDataV11"),
                fileName: DynArray("FileNameDataV11"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV11",
                pan: "DynamicParamDataV11",
                pitch: "DynamicParamDataV11",
                pitchMS: "DynamicParamDataV11",
                volume: "DynamicParamDataV11",
                volumeMS: "DynamicParamDataV11",
                initialDelay: "RangeDataV11",
                playLength: "RangeDataV11",
                positionOffsetAngle: "RangeDataV11",
                positionRange: "RangeDataV11",
                repeatCount: "RangeDataV11",
                repeatTime: "RangeDataV11",
                startTimeOffset: "RangeDataV11",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV11: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV11: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV11: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV11")
            },
            TriggerMarkerDataV11: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV11"),
            handler: DynArray("HandlerDataV11"),
            metaSound: DynArray("MetaSoundDataV11"),
            scriptRef: DynArray("ScriptRefDataV11"),
            triggerKey: DynArray("TriggerKeyDataV11"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32
        }
    };
    var V12$b = {
        chunkName: "AMSP",
        name: "ScriptFileDataV12",
        version: 12,
        definitions: {
            AudioSettingsDataV12: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV12"),
                category: DynArray("CategoryDataV12"),
                reverb: DynArray("ReverbDataV12"),
                snapshot: DynArray("SnapshotDataV12"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV12: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV12")
            },
            BussDynamicDataV12: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV12")
            },
            DspDataV12: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV12: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV12"),
                dynamicData: Pointer("CategoryDynamicDataV12"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV12: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV12",
                pan3D: "DynamicParamDataV12",
                spread3D: "DynamicParamDataV12",
                volumeA: "DynamicParamDataV12",
                volumeB: "DynamicParamDataV12"
            },
            DynamicParamDataV12: {
                envelopeData: Pointer("EnvelopeDataV12"),
                randomParamData: Pointer("RandomParamDataV12"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV12: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV12"),
                offsetType: Uint8
            },
            EnvelopePointDataV12: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV12: {
                time: "RangeDataV12",
                value: "RangeDataV12"
            },
            RangeDataV12: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV12: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV12: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32
            },
            SnapshotDataV12: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV12"),
                category: DynArray("CategoryDynamicDataV12")
            },
            HandlerDataV12: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV12: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV12"),
                attenuation: Pointer("AttenuationDataV12"),
                fileName: DynArray("FileNameDataV12"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV12",
                pan: "DynamicParamDataV12",
                pitch: "DynamicParamDataV12",
                pitchMS: "DynamicParamDataV12",
                volume: "DynamicParamDataV12",
                volumeMS: "DynamicParamDataV12",
                initialDelay: "RangeDataV12",
                playLength: "RangeDataV12",
                positionOffsetAngle: "RangeDataV12",
                positionRange: "RangeDataV12",
                repeatCount: "RangeDataV12",
                repeatTime: "RangeDataV12",
                startTimeOffset: "RangeDataV12",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV12: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV12: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV12: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV12")
            },
            TriggerMarkerDataV12: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            audioSettings: Pointer("AudioSettingsDataV12"),
            handler: DynArray("HandlerDataV12"),
            metaSound: DynArray("MetaSoundDataV12"),
            scriptRef: DynArray("ScriptRefDataV12"),
            triggerKey: DynArray("TriggerKeyDataV12"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V13$b = {
        chunkName: "AMSP",
        name: "ScriptFileDataV13",
        version: 13,
        definitions: {
            AudioSettingsDataV13: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV13"),
                category: DynArray("CategoryDataV13"),
                reverb: DynArray("ReverbDataV13"),
                snapshot: DynArray("SnapshotDataV13"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV13: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV13")
            },
            BussDynamicDataV13: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV13")
            },
            DspDataV13: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV13: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV13"),
                dynamicData: Pointer("CategoryDynamicDataV13"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV13: {
                coneInsideAngle: Float32,
                coneOutsideAngle: Float32,
                coneOutsideVolume: Float32,
                lowPass: "DynamicParamDataV13",
                pan3D: "DynamicParamDataV13",
                spread3D: "DynamicParamDataV13",
                volumeA: "DynamicParamDataV13",
                volumeB: "DynamicParamDataV13"
            },
            DynamicParamDataV13: {
                envelopeData: Pointer("EnvelopeDataV13"),
                randomParamData: Pointer("RandomParamDataV13"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV13: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV13"),
                offsetType: Uint8
            },
            EnvelopePointDataV13: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV13: {
                time: "RangeDataV13",
                value: "RangeDataV13"
            },
            RangeDataV13: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV13: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV13: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32
            },
            SnapshotDataV13: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV13"),
                category: DynArray("CategoryDynamicDataV13")
            },
            HandlerDataV13: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV13: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV13"),
                attenuation: Pointer("AttenuationDataV13"),
                fileName: DynArray("FileNameDataV13"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV13",
                pan: "DynamicParamDataV13",
                pitch: "DynamicParamDataV13",
                pitchMS: "DynamicParamDataV13",
                volume: "DynamicParamDataV13",
                volumeMS: "DynamicParamDataV13",
                initialDelay: "RangeDataV13",
                playLength: "RangeDataV13",
                positionOffsetAngle: "RangeDataV13",
                positionRange: "RangeDataV13",
                repeatCount: "RangeDataV13",
                repeatTime: "RangeDataV13",
                startTimeOffset: "RangeDataV13",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV13: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV13: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV13: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV13")
            },
            TriggerMarkerDataV13: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            audioSettings: Pointer("AudioSettingsDataV13"),
            handler: DynArray("HandlerDataV13"),
            metaSound: DynArray("MetaSoundDataV13"),
            scriptRef: DynArray("ScriptRefDataV13"),
            triggerKey: DynArray("TriggerKeyDataV13"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V14$b = {
        chunkName: "AMSP",
        name: "ScriptFileDataV14",
        version: 14,
        definitions: {
            AudioSettingsDataV14: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV14"),
                category: DynArray("CategoryDataV14"),
                reverb: DynArray("ReverbDataV14"),
                snapshot: DynArray("SnapshotDataV14"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV14: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV14")
            },
            BussDynamicDataV14: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV14")
            },
            DspDataV14: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV14: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV14"),
                dynamicData: Pointer("CategoryDynamicDataV14"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV14: {
                doppler: Float32,
                lowPass: "DynamicParamDataV14",
                pan3D: "DynamicParamDataV14",
                spread3D: "DynamicParamDataV14",
                volumeA: "DynamicParamDataV14",
                volumeB: "DynamicParamDataV14"
            },
            DynamicParamDataV14: {
                envelopeData: Pointer("EnvelopeDataV14"),
                randomParamData: Pointer("RandomParamDataV14"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV14: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV14"),
                offsetType: Uint8
            },
            EnvelopePointDataV14: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV14: {
                time: "RangeDataV14",
                value: "RangeDataV14"
            },
            RangeDataV14: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV14: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV14: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32
            },
            SnapshotDataV14: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV14"),
                category: DynArray("CategoryDynamicDataV14")
            },
            HandlerDataV14: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV14: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV14"),
                attenuation: Pointer("AttenuationDataV14"),
                fileName: DynArray("FileNameDataV14"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV14",
                pan: "DynamicParamDataV14",
                pitch: "DynamicParamDataV14",
                pitchMS: "DynamicParamDataV14",
                volume: "DynamicParamDataV14",
                volumeMS: "DynamicParamDataV14",
                initialDelay: "RangeDataV14",
                playLength: "RangeDataV14",
                positionOffsetAngle: "RangeDataV14",
                positionRange: "RangeDataV14",
                repeatCount: "RangeDataV14",
                repeatTime: "RangeDataV14",
                startTimeOffset: "RangeDataV14",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV14: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV14: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV14: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV14")
            },
            TriggerMarkerDataV14: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            audioSettings: Pointer("AudioSettingsDataV14"),
            handler: DynArray("HandlerDataV14"),
            metaSound: DynArray("MetaSoundDataV14"),
            scriptRef: DynArray("ScriptRefDataV14"),
            triggerKey: DynArray("TriggerKeyDataV14"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V15$b = {
        chunkName: "AMSP",
        name: "ScriptFileDataV15",
        version: 15,
        definitions: {
            AudioSettingsDataV15: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV15"),
                category: DynArray("CategoryDataV15"),
                reverb: DynArray("ReverbDataV15"),
                snapshot: DynArray("SnapshotDataV15"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV15: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV15")
            },
            BussDynamicDataV15: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV15")
            },
            DspDataV15: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV15: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV15"),
                dynamicData: Pointer("CategoryDynamicDataV15"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV15: {
                doppler: Float32,
                lowPass: "DynamicParamDataV15",
                pan3D: "DynamicParamDataV15",
                reverb: "DynamicParamDataV15",
                spread3D: "DynamicParamDataV15",
                volumeA: "DynamicParamDataV15",
                volumeB: "DynamicParamDataV15"
            },
            DynamicParamDataV15: {
                envelopeData: Pointer("EnvelopeDataV15"),
                randomParamData: Pointer("RandomParamDataV15"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV15: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV15"),
                offsetType: Uint8
            },
            EnvelopePointDataV15: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV15: {
                time: "RangeDataV15",
                value: "RangeDataV15"
            },
            RangeDataV15: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV15: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV15: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32
            },
            SnapshotDataV15: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV15"),
                category: DynArray("CategoryDynamicDataV15")
            },
            HandlerDataV15: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV15: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV15"),
                attenuation: Pointer("AttenuationDataV15"),
                fileName: DynArray("FileNameDataV15"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV15",
                pan: "DynamicParamDataV15",
                pitch: "DynamicParamDataV15",
                pitchMS: "DynamicParamDataV15",
                volume: "DynamicParamDataV15",
                volumeMS: "DynamicParamDataV15",
                initialDelay: "RangeDataV15",
                playLength: "RangeDataV15",
                positionOffsetAngle: "RangeDataV15",
                positionRange: "RangeDataV15",
                repeatCount: "RangeDataV15",
                repeatTime: "RangeDataV15",
                startTimeOffset: "RangeDataV15",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV15: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV15: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV15: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV15")
            },
            TriggerMarkerDataV15: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            audioSettings: Pointer("AudioSettingsDataV15"),
            handler: DynArray("HandlerDataV15"),
            metaSound: DynArray("MetaSoundDataV15"),
            scriptRef: DynArray("ScriptRefDataV15"),
            triggerKey: DynArray("TriggerKeyDataV15"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V16$a = {
        chunkName: "AMSP",
        name: "ScriptFileDataV16",
        version: 16,
        definitions: {
            AudioSettingsDataV16: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV16"),
                category: DynArray("CategoryDataV16"),
                reverb: DynArray("ReverbDataV16"),
                snapshot: DynArray("SnapshotDataV16"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV16: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV16")
            },
            BussDynamicDataV16: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV16")
            },
            DspDataV16: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV16: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV16"),
                dynamicData: Pointer("CategoryDynamicDataV16"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV16: {
                doppler: Float32,
                lowPass: "DynamicParamDataV16",
                pan3D: "DynamicParamDataV16",
                reverb: "DynamicParamDataV16",
                spread3D: "DynamicParamDataV16",
                volumeA: "DynamicParamDataV16",
                volumeB: "DynamicParamDataV16"
            },
            DynamicParamDataV16: {
                envelopeData: Pointer("EnvelopeDataV16"),
                randomParamData: Pointer("RandomParamDataV16"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV16: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV16"),
                offsetType: Uint8
            },
            EnvelopePointDataV16: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV16: {
                time: "RangeDataV16",
                value: "RangeDataV16"
            },
            RangeDataV16: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV16: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV16: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV16: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV16"),
                category: DynArray("CategoryDynamicDataV16")
            },
            HandlerDataV16: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV16: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV16"),
                attenuation: Pointer("AttenuationDataV16"),
                fileName: DynArray("FileNameDataV16"),
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV16",
                pan: "DynamicParamDataV16",
                pitch: "DynamicParamDataV16",
                pitchMS: "DynamicParamDataV16",
                volume: "DynamicParamDataV16",
                volumeMS: "DynamicParamDataV16",
                initialDelay: "RangeDataV16",
                playLength: "RangeDataV16",
                positionOffsetAngle: "RangeDataV16",
                positionRange: "RangeDataV16",
                repeatCount: "RangeDataV16",
                repeatTime: "RangeDataV16",
                startTimeOffset: "RangeDataV16",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV16: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV16: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV16: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV16")
            },
            TriggerMarkerDataV16: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            audioSettings: Pointer("AudioSettingsDataV16"),
            handler: DynArray("HandlerDataV16"),
            metaSound: DynArray("MetaSoundDataV16"),
            scriptRef: DynArray("ScriptRefDataV16"),
            triggerKey: DynArray("TriggerKeyDataV16"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V17$7 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV17",
        version: 17,
        definitions: {
            AudioSettingsDataV17: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV17"),
                category: DynArray("CategoryDataV17"),
                reverb: DynArray("ReverbDataV17"),
                snapshot: DynArray("SnapshotDataV17"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV17: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV17")
            },
            BussDynamicDataV17: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV17")
            },
            DspDataV17: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV17: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV17"),
                dynamicData: Pointer("CategoryDynamicDataV17"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV17: {
                doppler: Float32,
                lowPass: "DynamicParamDataV17",
                pan3D: "DynamicParamDataV17",
                reverb: "DynamicParamDataV17",
                spread3D: "DynamicParamDataV17",
                volumeA: "DynamicParamDataV17",
                volumeB: "DynamicParamDataV17"
            },
            DynamicParamDataV17: {
                envelopeData: Pointer("EnvelopeDataV17"),
                randomParamData: Pointer("RandomParamDataV17"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV17: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV17"),
                offsetType: Uint8
            },
            EnvelopePointDataV17: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV17: {
                time: "RangeDataV17",
                value: "RangeDataV17"
            },
            RangeDataV17: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV17: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV17: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV17: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV17"),
                category: DynArray("CategoryDynamicDataV17")
            },
            HandlerDataV17: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV17: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV17"),
                attenuation: Pointer("AttenuationDataV17"),
                fileName: DynArray("FileNameDataV17"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV17",
                pan: "DynamicParamDataV17",
                pitch: "DynamicParamDataV17",
                pitchMS: "DynamicParamDataV17",
                volume: "DynamicParamDataV17",
                volumeMS: "DynamicParamDataV17",
                initialDelay: "RangeDataV17",
                playLength: "RangeDataV17",
                positionOffsetAngle: "RangeDataV17",
                positionRange: "RangeDataV17",
                repeatCount: "RangeDataV17",
                repeatTime: "RangeDataV17",
                startTimeOffset: "RangeDataV17",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV17: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV17: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV17: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV17")
            },
            TriggerMarkerDataV17: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            audioSettings: Pointer("AudioSettingsDataV17"),
            handler: DynArray("HandlerDataV17"),
            metaSound: DynArray("MetaSoundDataV17"),
            scriptRef: DynArray("ScriptRefDataV17"),
            triggerKey: DynArray("TriggerKeyDataV17"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V18$7 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV18",
        version: 18,
        definitions: {
            AudioSettingsDataV18: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV18"),
                category: DynArray("CategoryDataV18"),
                reverb: DynArray("ReverbDataV18"),
                snapshot: DynArray("SnapshotDataV18"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV18: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV18")
            },
            BussDynamicDataV18: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV18")
            },
            DspDataV18: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV18: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV18"),
                dynamicData: Pointer("CategoryDynamicDataV18"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV18: {
                doppler: Float32,
                lowPass: "DynamicParamDataV18",
                pan3D: "DynamicParamDataV18",
                reverb: "DynamicParamDataV18",
                spread3D: "DynamicParamDataV18",
                volumeA: "DynamicParamDataV18",
                volumeB: "DynamicParamDataV18"
            },
            DynamicParamDataV18: {
                envelopeData: Pointer("EnvelopeDataV18"),
                randomParamData: Pointer("RandomParamDataV18"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV18: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV18"),
                offsetType: Uint8
            },
            EnvelopePointDataV18: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV18: {
                time: "RangeDataV18",
                value: "RangeDataV18"
            },
            RangeDataV18: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV18: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV18: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV18: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV18"),
                category: DynArray("CategoryDynamicDataV18")
            },
            HandlerDataV18: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV18: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV18"),
                attenuation: Pointer("AttenuationDataV18"),
                fileName: DynArray("FileNameDataV18"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV18",
                pan: "DynamicParamDataV18",
                pitch: "DynamicParamDataV18",
                pitchMS: "DynamicParamDataV18",
                volume: "DynamicParamDataV18",
                volumeMS: "DynamicParamDataV18",
                initialDelay: "RangeDataV18",
                playLength: "RangeDataV18",
                positionOffsetAngle: "RangeDataV18",
                positionRange: "RangeDataV18",
                repeatCount: "RangeDataV18",
                repeatTime: "RangeDataV18",
                startTimeOffset: "RangeDataV18",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV18: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV18: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV18: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV18")
            },
            TriggerMarkerDataV18: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            audioSettings: Pointer("AudioSettingsDataV18"),
            handler: DynArray("HandlerDataV18"),
            metaSound: DynArray("MetaSoundDataV18"),
            scriptRef: DynArray("ScriptRefDataV18"),
            triggerKey: DynArray("TriggerKeyDataV18"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V19$7 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV19",
        version: 19,
        definitions: {
            AudioSettingsDataV19: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV19"),
                category: DynArray("CategoryDataV19"),
                reverb: DynArray("ReverbDataV19"),
                snapshot: DynArray("SnapshotDataV19"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV19: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV19")
            },
            BussDynamicDataV19: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV19")
            },
            DspDataV19: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV19: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV19"),
                dynamicData: Pointer("CategoryDynamicDataV19"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV19: {
                doppler: Float32,
                lowPass: "DynamicParamDataV19",
                pan3D: "DynamicParamDataV19",
                reverb: "DynamicParamDataV19",
                spread3D: "DynamicParamDataV19",
                volumeA: "DynamicParamDataV19",
                volumeB: "DynamicParamDataV19"
            },
            DynamicParamDataV19: {
                envelopeData: Pointer("EnvelopeDataV19"),
                randomParamData: Pointer("RandomParamDataV19"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV19: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV19"),
                offsetType: Uint8
            },
            EnvelopePointDataV19: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV19: {
                time: "RangeDataV19",
                value: "RangeDataV19"
            },
            RangeDataV19: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV19: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV19: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV19: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV19"),
                category: DynArray("CategoryDynamicDataV19"),
                priority: Uint8
            },
            HandlerDataV19: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV19: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV19"),
                attenuation: Pointer("AttenuationDataV19"),
                fileName: DynArray("FileNameDataV19"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV19",
                pan: "DynamicParamDataV19",
                pitch: "DynamicParamDataV19",
                pitchMS: "DynamicParamDataV19",
                volume: "DynamicParamDataV19",
                volumeMS: "DynamicParamDataV19",
                initialDelay: "RangeDataV19",
                playLength: "RangeDataV19",
                positionOffsetAngle: "RangeDataV19",
                positionRange: "RangeDataV19",
                repeatCount: "RangeDataV19",
                repeatTime: "RangeDataV19",
                startTimeOffset: "RangeDataV19",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV19: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV19: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV19: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV19")
            },
            TriggerMarkerDataV19: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            audioSettings: Pointer("AudioSettingsDataV19"),
            handler: DynArray("HandlerDataV19"),
            metaSound: DynArray("MetaSoundDataV19"),
            scriptRef: DynArray("ScriptRefDataV19"),
            triggerKey: DynArray("TriggerKeyDataV19"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V20$5 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV20",
        version: 20,
        definitions: {
            AudioSettingsDataV20: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV20"),
                category: DynArray("CategoryDataV20"),
                reverb: DynArray("ReverbDataV20"),
                snapshot: DynArray("SnapshotDataV20"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV20: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV20")
            },
            BussDynamicDataV20: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV20")
            },
            DspDataV20: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV20: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV20"),
                dynamicData: Pointer("CategoryDynamicDataV20"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV20: {
                doppler: Float32,
                lowPass: "DynamicParamDataV20",
                pan3D: "DynamicParamDataV20",
                reverb: "DynamicParamDataV20",
                spread3D: "DynamicParamDataV20",
                volumeA: "DynamicParamDataV20",
                volumeB: "DynamicParamDataV20"
            },
            DynamicParamDataV20: {
                envelopeData: Pointer("EnvelopeDataV20"),
                randomParamData: Pointer("RandomParamDataV20"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV20: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV20"),
                offsetType: Uint8
            },
            EnvelopePointDataV20: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV20: {
                time: "RangeDataV20",
                value: "RangeDataV20"
            },
            RangeDataV20: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV20: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            ReverbDataV20: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV20: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV20"),
                category: DynArray("CategoryDynamicDataV20"),
                priority: Uint8
            },
            HandlerDataV20: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV20: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV20"),
                attenuation: Pointer("AttenuationDataV20"),
                fileName: DynArray("FileNameDataV20"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV20",
                pan: "DynamicParamDataV20",
                pitch: "DynamicParamDataV20",
                pitchMS: "DynamicParamDataV20",
                volume: "DynamicParamDataV20",
                volumeMS: "DynamicParamDataV20",
                initialDelay: "RangeDataV20",
                playLength: "RangeDataV20",
                positionOffsetAngle: "RangeDataV20",
                positionRange: "RangeDataV20",
                repeatCount: "RangeDataV20",
                repeatTime: "RangeDataV20",
                startTimeOffset: "RangeDataV20",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            FileNameDataV20: {
                language: Uint64,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ScriptRefDataV20: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV20: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV20")
            },
            TriggerMarkerDataV20: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV20"),
            handler: DynArray("HandlerDataV20"),
            metaSound: DynArray("MetaSoundDataV20"),
            scriptRef: DynArray("ScriptRefDataV20"),
            triggerKey: DynArray("TriggerKeyDataV20"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V21$5 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV21",
        version: 21,
        definitions: {
            AudioSettingsDataV21: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV21"),
                category: DynArray("CategoryDataV21"),
                musicCondition: DynArray("MusicConditionDataV21"),
                musicPlaylist: DynArray("MusicPlaylistDataV21"),
                reverb: DynArray("ReverbDataV21"),
                snapshot: DynArray("SnapshotDataV21"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV21: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV21")
            },
            BussDynamicDataV21: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV21")
            },
            DspDataV21: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV21: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV21"),
                dynamicData: Pointer("CategoryDynamicDataV21"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV21: {
                doppler: Float32,
                lowPass: "DynamicParamDataV21",
                pan3D: "DynamicParamDataV21",
                reverb: "DynamicParamDataV21",
                spread3D: "DynamicParamDataV21",
                volumeA: "DynamicParamDataV21",
                volumeB: "DynamicParamDataV21"
            },
            DynamicParamDataV21: {
                envelopeData: Pointer("EnvelopeDataV21"),
                randomParamData: Pointer("RandomParamDataV21"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV21: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV21"),
                offsetType: Uint8
            },
            EnvelopePointDataV21: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV21: {
                time: "RangeDataV21",
                value: "RangeDataV21"
            },
            RangeDataV21: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV21: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            MusicConditionDataV21: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV21: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV21"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV21",
                intervalSilence: "RangeDataV21",
                maxPlayLength: "RangeDataV21",
                volume: "DynamicParamDataV21",
                fileIterateMode: Uint8
            },
            FileNameDataV21: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ReverbDataV21: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV21: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV21"),
                category: DynArray("CategoryDynamicDataV21"),
                priority: Uint8
            },
            HandlerDataV21: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV21: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV21"),
                attenuation: Pointer("AttenuationDataV21"),
                fileName: DynArray("FileNameDataV21"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV21",
                pan: "DynamicParamDataV21",
                pitch: "DynamicParamDataV21",
                pitchMS: "DynamicParamDataV21",
                volume: "DynamicParamDataV21",
                volumeMS: "DynamicParamDataV21",
                initialDelay: "RangeDataV21",
                playLength: "RangeDataV21",
                positionOffsetAngle: "RangeDataV21",
                positionRange: "RangeDataV21",
                repeatCount: "RangeDataV21",
                repeatTime: "RangeDataV21",
                startTimeOffset: "RangeDataV21",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            ScriptRefDataV21: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV21: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV21")
            },
            TriggerMarkerDataV21: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV21"),
            handler: DynArray("HandlerDataV21"),
            metaSound: DynArray("MetaSoundDataV21"),
            scriptRef: DynArray("ScriptRefDataV21"),
            triggerKey: DynArray("TriggerKeyDataV21"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V22$4 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV22",
        version: 22,
        definitions: {
            AudioSettingsDataV22: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV22"),
                category: DynArray("CategoryDataV22"),
                musicCondition: DynArray("MusicConditionDataV22"),
                musicPlaylist: DynArray("MusicPlaylistDataV22"),
                reverb: DynArray("ReverbDataV22"),
                snapshot: DynArray("SnapshotDataV22"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV22: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV22")
            },
            BussDynamicDataV22: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV22")
            },
            DspDataV22: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV22: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV22"),
                dynamicData: Pointer("CategoryDynamicDataV22"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV22: {
                doppler: Float32,
                lowPass: "DynamicParamDataV22",
                highPass: "DynamicParamDataV22",
                pan3D: "DynamicParamDataV22",
                reverb: "DynamicParamDataV22",
                spread3D: "DynamicParamDataV22",
                volumeA: "DynamicParamDataV22",
                volumeB: "DynamicParamDataV22"
            },
            DynamicParamDataV22: {
                envelopeData: Pointer("EnvelopeDataV22"),
                randomParamData: Pointer("RandomParamDataV22"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV22: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV22"),
                offsetType: Uint8
            },
            EnvelopePointDataV22: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV22: {
                time: "RangeDataV22",
                value: "RangeDataV22"
            },
            RangeDataV22: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV22: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            MusicConditionDataV22: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV22: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV22"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV22",
                intervalSilence: "RangeDataV22",
                maxPlayLength: "RangeDataV22",
                volume: "DynamicParamDataV22",
                fileIterateMode: Uint8
            },
            FileNameDataV22: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ReverbDataV22: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV22: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV22"),
                category: DynArray("CategoryDynamicDataV22"),
                priority: Uint8
            },
            HandlerDataV22: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV22: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV22"),
                attenuation: Pointer("AttenuationDataV22"),
                fileName: DynArray("FileNameDataV22"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV22",
                pan: "DynamicParamDataV22",
                pitch: "DynamicParamDataV22",
                pitchMS: "DynamicParamDataV22",
                volume: "DynamicParamDataV22",
                volumeMS: "DynamicParamDataV22",
                initialDelay: "RangeDataV22",
                playLength: "RangeDataV22",
                positionOffsetAngle: "RangeDataV22",
                positionRange: "RangeDataV22",
                repeatCount: "RangeDataV22",
                repeatTime: "RangeDataV22",
                startTimeOffset: "RangeDataV22",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            ScriptRefDataV22: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV22: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV22")
            },
            TriggerMarkerDataV22: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV22"),
            handler: DynArray("HandlerDataV22"),
            metaSound: DynArray("MetaSoundDataV22"),
            scriptRef: DynArray("ScriptRefDataV22"),
            triggerKey: DynArray("TriggerKeyDataV22"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8
        }
    };
    var V23$3 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV23",
        version: 23,
        definitions: {
            AudioSettingsDataV23: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV23"),
                category: DynArray("CategoryDataV23"),
                musicCondition: DynArray("MusicConditionDataV23"),
                musicPlaylist: DynArray("MusicPlaylistDataV23"),
                reverb: DynArray("ReverbDataV23"),
                snapshot: DynArray("SnapshotDataV23"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV23: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV23")
            },
            BussDynamicDataV23: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV23")
            },
            DspDataV23: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV23: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV23"),
                dynamicData: Pointer("CategoryDynamicDataV23"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV23: {
                doppler: Float32,
                lowPass: "DynamicParamDataV23",
                highPass: "DynamicParamDataV23",
                pan3D: "DynamicParamDataV23",
                reverb: "DynamicParamDataV23",
                spread3D: "DynamicParamDataV23",
                volumeA: "DynamicParamDataV23",
                volumeB: "DynamicParamDataV23"
            },
            DynamicParamDataV23: {
                envelopeData: Pointer("EnvelopeDataV23"),
                randomParamData: Pointer("RandomParamDataV23"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV23: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV23"),
                offsetType: Uint8
            },
            EnvelopePointDataV23: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV23: {
                time: "RangeDataV23",
                value: "RangeDataV23"
            },
            RangeDataV23: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV23: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            MusicConditionDataV23: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV23: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV23"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV23",
                intervalSilence: "RangeDataV23",
                maxPlayLength: "RangeDataV23",
                volume: "DynamicParamDataV23",
                fileIterateMode: Uint8
            },
            FileNameDataV23: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8
            },
            ReverbDataV23: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV23: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV23"),
                category: DynArray("CategoryDynamicDataV23"),
                priority: Uint8
            },
            HandlerDataV23: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV23: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV23"),
                attenuation: Pointer("AttenuationDataV23"),
                fileName: DynArray("FileNameDataV23"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV23",
                pan: "DynamicParamDataV23",
                pitch: "DynamicParamDataV23",
                pitchMS: "DynamicParamDataV23",
                volume: "DynamicParamDataV23",
                volumeMS: "DynamicParamDataV23",
                initialDelay: "RangeDataV23",
                playLength: "RangeDataV23",
                positionOffsetAngle: "RangeDataV23",
                positionRange: "RangeDataV23",
                repeatCount: "RangeDataV23",
                repeatTime: "RangeDataV23",
                startTimeOffset: "RangeDataV23",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            ScriptRefDataV23: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV23: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV23")
            },
            TriggerMarkerDataV23: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV23"),
            handler: DynArray("HandlerDataV23"),
            metaSound: DynArray("MetaSoundDataV23"),
            scriptRef: DynArray("ScriptRefDataV23"),
            triggerKey: DynArray("TriggerKeyDataV23"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8
        }
    };
    var V24$3 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV24",
        version: 24,
        definitions: {
            AudioSettingsDataV24: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV24"),
                category: DynArray("CategoryDataV24"),
                musicCondition: DynArray("MusicConditionDataV24"),
                musicPlaylist: DynArray("MusicPlaylistDataV24"),
                reverb: DynArray("ReverbDataV24"),
                snapshot: DynArray("SnapshotDataV24"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV24: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV24")
            },
            BussDynamicDataV24: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV24")
            },
            DspDataV24: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV24: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV24"),
                dynamicData: Pointer("CategoryDynamicDataV24"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV24: {
                doppler: Float32,
                lowPass: "DynamicParamDataV24",
                highPass: "DynamicParamDataV24",
                pan3D: "DynamicParamDataV24",
                reverb: "DynamicParamDataV24",
                spread3D: "DynamicParamDataV24",
                volumeA: "DynamicParamDataV24",
                volumeB: "DynamicParamDataV24"
            },
            DynamicParamDataV24: {
                envelopeData: Pointer("EnvelopeDataV24"),
                randomParamData: Pointer("RandomParamDataV24"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV24: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV24"),
                offsetType: Uint8
            },
            EnvelopePointDataV24: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV24: {
                time: "RangeDataV24",
                value: "RangeDataV24"
            },
            RangeDataV24: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV24: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            MusicConditionDataV24: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV24: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV24"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV24",
                intervalSilence: "RangeDataV24",
                maxPlayLength: "RangeDataV24",
                volume: "DynamicParamDataV24",
                fileIterateMode: Uint8
            },
            FileNameDataV24: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8,
                noteBase: Uint8,
                noteMin: Uint8,
                noteMax: Uint8
            },
            ReverbDataV24: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV24: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV24"),
                category: DynArray("CategoryDynamicDataV24"),
                priority: Uint8
            },
            HandlerDataV24: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV24: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV24"),
                attenuation: Pointer("AttenuationDataV24"),
                fileName: DynArray("FileNameDataV24"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV24",
                pan: "DynamicParamDataV24",
                pitch: "DynamicParamDataV24",
                pitchMS: "DynamicParamDataV24",
                volume: "DynamicParamDataV24",
                volumeMS: "DynamicParamDataV24",
                initialDelay: "RangeDataV24",
                playLength: "RangeDataV24",
                positionOffsetAngle: "RangeDataV24",
                positionRange: "RangeDataV24",
                repeatCount: "RangeDataV24",
                repeatTime: "RangeDataV24",
                startTimeOffset: "RangeDataV24",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            ScriptRefDataV24: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV24: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV24")
            },
            TriggerMarkerDataV24: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV24"),
            handler: DynArray("HandlerDataV24"),
            metaSound: DynArray("MetaSoundDataV24"),
            scriptRef: DynArray("ScriptRefDataV24"),
            triggerKey: DynArray("TriggerKeyDataV24"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8
        }
    };
    var V25$3 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV25",
        version: 25,
        definitions: {
            AudioSettingsDataV25: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                buss: DynArray("BussDataV25"),
                category: DynArray("CategoryDataV25"),
                material: DynArray("MaterialDataV25"),
                musicCondition: DynArray("MusicConditionDataV25"),
                musicPlaylist: DynArray("MusicPlaylistDataV25"),
                reverb: DynArray("ReverbDataV25"),
                snapshot: DynArray("SnapshotDataV25"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV25: {
                name: Uint64,
                flags: Uint32,
                output: Uint64,
                dynamicData: Pointer("BussDynamicDataV25")
            },
            BussDynamicDataV25: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV25")
            },
            DspDataV25: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV25: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV25"),
                dynamicData: Pointer("CategoryDynamicDataV25"),
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8
            },
            AttenuationDataV25: {
                doppler: Float32,
                lowPass: "DynamicParamDataV25",
                highPass: "DynamicParamDataV25",
                pan3D: "DynamicParamDataV25",
                reverb: "DynamicParamDataV25",
                spread3D: "DynamicParamDataV25",
                volumeA: "DynamicParamDataV25",
                volumeB: "DynamicParamDataV25"
            },
            DynamicParamDataV25: {
                envelopeData: Pointer("EnvelopeDataV25"),
                randomParamData: Pointer("RandomParamDataV25"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV25: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV25"),
                offsetType: Uint8
            },
            EnvelopePointDataV25: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV25: {
                time: "RangeDataV25",
                value: "RangeDataV25"
            },
            RangeDataV25: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV25: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32
            },
            MaterialDataV25: {
                name: Uint64,
                flags: Uint32,
                absorptionLF: Float32,
                absorptionMF: Float32,
                absorptionHF: Float32,
                occlusion: Float32
            },
            MusicConditionDataV25: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV25: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV25"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV25",
                intervalSilence: "RangeDataV25",
                maxPlayLength: "RangeDataV25",
                volume: "DynamicParamDataV25",
                fileIterateMode: Uint8
            },
            FileNameDataV25: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8,
                noteBase: Uint8,
                noteMin: Uint8,
                noteMax: Uint8
            },
            ReverbDataV25: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV25: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV25"),
                category: DynArray("CategoryDynamicDataV25"),
                priority: Uint8
            },
            HandlerDataV25: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV25: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV25"),
                attenuation: Pointer("AttenuationDataV25"),
                fileName: DynArray("FileNameDataV25"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV25",
                pan: "DynamicParamDataV25",
                pitch: "DynamicParamDataV25",
                pitchMS: "DynamicParamDataV25",
                volume: "DynamicParamDataV25",
                volumeMS: "DynamicParamDataV25",
                initialDelay: "RangeDataV25",
                playLength: "RangeDataV25",
                positionOffsetAngle: "RangeDataV25",
                positionRange: "RangeDataV25",
                repeatCount: "RangeDataV25",
                repeatTime: "RangeDataV25",
                startTimeOffset: "RangeDataV25",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            ScriptRefDataV25: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV25: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV25")
            },
            TriggerMarkerDataV25: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV25"),
            handler: DynArray("HandlerDataV25"),
            metaSound: DynArray("MetaSoundDataV25"),
            scriptRef: DynArray("ScriptRefDataV25"),
            triggerKey: DynArray("TriggerKeyDataV25"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8
        }
    };
    var V26$2 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV26",
        version: 26,
        definitions: {
            AudioSettingsDataV26: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                focusTransition: Float32,
                memoryPool: Float32,
                reverbLevel: Float32,
                minChannelsLQ: Uint32,
                maxChannelsLQ: Uint32,
                buss: DynArray("BussDataV26"),
                category: DynArray("CategoryDataV26"),
                material: DynArray("MaterialDataV26"),
                musicCondition: DynArray("MusicConditionDataV26"),
                musicPlaylist: DynArray("MusicPlaylistDataV26"),
                reverb: DynArray("ReverbDataV26"),
                snapshot: DynArray("SnapshotDataV26"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV26: {
                name: Uint64,
                output: Uint64,
                flags: Uint32,
                normalizeFadeTime: Float32,
                normalizeThreshold: Float32,
                normalizeMaxAmp: Float32,
                compressorThreshold: Float32,
                compressorAttack: Float32,
                compressorRelease: Float32,
                compressorGainMakeup: Float32,
                dynamicData: Pointer("BussDynamicDataV26")
            },
            BussDynamicDataV26: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV26")
            },
            DspDataV26: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV26: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV26"),
                dynamicData: Pointer("CategoryDynamicDataV26"),
                focusReserve: Float32,
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8,
                priority: Uint8
            },
            AttenuationDataV26: {
                doppler: Float32,
                lowPass: "DynamicParamDataV26",
                highPass: "DynamicParamDataV26",
                pan3D: "DynamicParamDataV26",
                reverb: "DynamicParamDataV26",
                spread3D: "DynamicParamDataV26",
                volumeA: "DynamicParamDataV26",
                volumeB: "DynamicParamDataV26",
                lfe: "DynamicParamDataV26"
            },
            DynamicParamDataV26: {
                envelopeData: Pointer("EnvelopeDataV26"),
                randomParamData: Pointer("RandomParamDataV26"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV26: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV26"),
                offsetType: Uint8
            },
            EnvelopePointDataV26: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV26: {
                time: "RangeDataV26",
                value: "RangeDataV26"
            },
            RangeDataV26: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV26: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32,
                minAudible: Uint32,
                maxAudibleLQ: Uint32,
                maxAudibleHG: Uint32
            },
            MaterialDataV26: {
                name: Uint64,
                flags: Uint32,
                absorptionLF: Float32,
                absorptionMF: Float32,
                absorptionHF: Float32,
                occlusion: Float32
            },
            MusicConditionDataV26: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV26: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV26"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV26",
                intervalSilence: "RangeDataV26",
                maxPlayLength: "RangeDataV26",
                volume: "DynamicParamDataV26",
                fileIterateMode: Uint8
            },
            FileNameDataV26: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8,
                noteBase: Uint8,
                noteMin: Uint8,
                noteMax: Uint8
            },
            ReverbDataV26: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            SnapshotDataV26: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV26"),
                category: DynArray("CategoryDynamicDataV26"),
                priority: Uint8
            },
            HandlerDataV26: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV26: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV26"),
                attenuation: Pointer("AttenuationDataV26"),
                fileName: DynArray("FileNameDataV26"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV26",
                pan: "DynamicParamDataV26",
                pitch: "DynamicParamDataV26",
                pitchMS: "DynamicParamDataV26",
                volume: "DynamicParamDataV26",
                volumeMS: "DynamicParamDataV26",
                initialDelay: "RangeDataV26",
                playLength: "RangeDataV26",
                positionOffsetAngle: "RangeDataV26",
                positionRange: "RangeDataV26",
                repeatCount: "RangeDataV26",
                repeatTime: "RangeDataV26",
                startTimeOffset: "RangeDataV26",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            ScriptRefDataV26: {
                name: Uint64,
                fileName: Filename()
            },
            TriggerKeyDataV26: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV26")
            },
            TriggerMarkerDataV26: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV26"),
            handler: DynArray("HandlerDataV26"),
            metaSound: DynArray("MetaSoundDataV26"),
            scriptRef: DynArray("ScriptRefDataV26"),
            triggerKey: DynArray("TriggerKeyDataV26"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8
        }
    };
    var V27$2 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV27",
        version: 27,
        definitions: {
            AudioSettingsDataV27: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                echoLevel: Float32,
                focusTransition: Float32,
                memoryPool: Float32,
                reverbLevel: Float32,
                minChannelsLQ: Uint32,
                maxChannelsLQ: Uint32,
                buss: DynArray("BussDataV27"),
                category: DynArray("CategoryDataV27"),
                material: DynArray("MaterialDataV27"),
                musicCondition: DynArray("MusicConditionDataV27"),
                musicPlaylist: DynArray("MusicPlaylistDataV27"),
                property: DynArray("PropertyDataV27"),
                reverb: DynArray("ReverbDataV27"),
                scriptRef: DynArray("ScriptRefDataV27"),
                snapshot: DynArray("SnapshotDataV27"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV27: {
                name: Uint64,
                output: Uint64,
                flags: Uint32,
                normalizeFadeTime: Float32,
                normalizeThreshold: Float32,
                normalizeMaxAmp: Float32,
                compressorThreshold: Float32,
                compressorAttack: Float32,
                compressorRelease: Float32,
                compressorGainMakeup: Float32,
                dynamicData: Pointer("BussDynamicDataV27")
            },
            BussDynamicDataV27: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV27")
            },
            DspDataV27: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV27: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV27"),
                dynamicData: Pointer("CategoryDynamicDataV27"),
                focusReserve: Float32,
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8,
                priority: Uint8
            },
            AttenuationDataV27: {
                doppler: Float32,
                lowPass: "DynamicParamDataV27",
                highPass: "DynamicParamDataV27",
                pan3D: "DynamicParamDataV27",
                reverb: "DynamicParamDataV27",
                spread3D: "DynamicParamDataV27",
                volumeA: "DynamicParamDataV27",
                volumeB: "DynamicParamDataV27",
                lfe: "DynamicParamDataV27"
            },
            DynamicParamDataV27: {
                envelopeData: Pointer("EnvelopeDataV27"),
                randomParamData: Pointer("RandomParamDataV27"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV27: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV27"),
                offsetType: Uint8
            },
            EnvelopePointDataV27: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV27: {
                time: "RangeDataV27",
                value: "RangeDataV27"
            },
            RangeDataV27: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV27: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32,
                minAudible: Uint32,
                maxAudibleLQ: Uint32,
                maxAudibleHG: Uint32
            },
            MaterialDataV27: {
                name: Uint64,
                flags: Uint32,
                absorptionLF: Float32,
                absorptionMF: Float32,
                absorptionHF: Float32,
                occlusion: Float32
            },
            MusicConditionDataV27: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV27: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV27"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV27",
                intervalSilence: "RangeDataV27",
                maxPlayLength: "RangeDataV27",
                volume: "DynamicParamDataV27",
                fileIterateMode: Uint8
            },
            FileNameDataV27: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8,
                noteBase: Uint8,
                noteMin: Uint8,
                noteMax: Uint8
            },
            PropertyDataV27: {
                name: Uint64,
                tokenValue: Uint64,
                floatValue: Float32
            },
            ReverbDataV27: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            ScriptRefDataV27: {
                name: Uint64,
                fileName: Filename()
            },
            SnapshotDataV27: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV27"),
                category: DynArray("CategoryDynamicDataV27"),
                priority: Uint8
            },
            HandlerDataV27: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV27: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV27"),
                attenuation: Pointer("AttenuationDataV27"),
                fileName: DynArray("FileNameDataV27"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV27",
                pan: "DynamicParamDataV27",
                pitch: "DynamicParamDataV27",
                pitchMS: "DynamicParamDataV27",
                volume: "DynamicParamDataV27",
                volumeMS: "DynamicParamDataV27",
                initialDelay: "RangeDataV27",
                playLength: "RangeDataV27",
                positionOffsetAngle: "RangeDataV27",
                positionRange: "RangeDataV27",
                repeatCount: "RangeDataV27",
                repeatTime: "RangeDataV27",
                startTimeOffset: "RangeDataV27",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            TriggerKeyDataV27: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV27")
            },
            TriggerMarkerDataV27: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV27"),
            handler: DynArray("HandlerDataV27"),
            metaSound: DynArray("MetaSoundDataV27"),
            scriptRef: DynArray("ScriptRefDataV27"),
            triggerKey: DynArray("TriggerKeyDataV27"),
            property: DynArray("PropertyDataV27"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8
        }
    };
    var V28$2 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV28",
        version: 28,
        definitions: {
            AudioSettingsDataV28: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                echoLevel: Float32,
                focusTransition: Float32,
                memoryPool: Float32,
                reverbLevel: Float32,
                minChannelsLQ: Uint32,
                maxChannelsLQ: Uint32,
                buss: DynArray("BussDataV28"),
                category: DynArray("CategoryDataV28"),
                material: DynArray("MaterialDataV28"),
                musicCondition: DynArray("MusicConditionDataV28"),
                musicPlaylist: DynArray("MusicPlaylistDataV28"),
                property: DynArray("PropertyDataV28"),
                reverb: DynArray("ReverbDataV28"),
                scriptRef: DynArray("ScriptRefDataV28"),
                snapshot: DynArray("SnapshotDataV28"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename()
            },
            BussDataV28: {
                name: Uint64,
                output: Uint64,
                flags: Uint32,
                normalizeFadeTime: Float32,
                normalizeThreshold: Float32,
                normalizeMaxAmp: Float32,
                compressorThreshold: Float32,
                compressorAttack: Float32,
                compressorRelease: Float32,
                compressorGainMakeup: Float32,
                dynamicData: Pointer("BussDynamicDataV28")
            },
            BussDynamicDataV28: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV28")
            },
            DspDataV28: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV28: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV28"),
                dynamicData: Pointer("CategoryDynamicDataV28"),
                focusReserve: Float32,
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8,
                priority: Uint8
            },
            AttenuationDataV28: {
                doppler: Float32,
                lowPass: "DynamicParamDataV28",
                highPass: "DynamicParamDataV28",
                pan3D: "DynamicParamDataV28",
                reverb: "DynamicParamDataV28",
                spread3D: "DynamicParamDataV28",
                volumeA: "DynamicParamDataV28",
                volumeB: "DynamicParamDataV28",
                lfe: "DynamicParamDataV28"
            },
            DynamicParamDataV28: {
                envelopeData: Pointer("EnvelopeDataV28"),
                randomParamData: Pointer("RandomParamDataV28"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV28: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV28"),
                offsetType: Uint8
            },
            EnvelopePointDataV28: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV28: {
                time: "RangeDataV28",
                value: "RangeDataV28"
            },
            RangeDataV28: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV28: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32,
                minAudible: Uint32,
                maxAudibleLQ: Uint32,
                maxAudibleHG: Uint32
            },
            MaterialDataV28: {
                name: Uint64,
                flags: Uint32,
                absorptionLF: Float32,
                absorptionMF: Float32,
                absorptionHF: Float32,
                occlusion: Float32
            },
            MusicConditionDataV28: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV28: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV28"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV28",
                intervalSilence: "RangeDataV28",
                maxPlayLength: "RangeDataV28",
                volume: "DynamicParamDataV28",
                fileIterateMode: Uint8
            },
            FileNameDataV28: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8,
                noteBase: Uint8,
                noteMin: Uint8,
                noteMax: Uint8
            },
            PropertyDataV28: {
                name: Uint64,
                tokenValue: Uint64,
                floatValue: Float32
            },
            ReverbDataV28: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            ScriptRefDataV28: {
                name: Uint64,
                fileName: Filename()
            },
            SnapshotDataV28: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV28"),
                category: DynArray("CategoryDynamicDataV28"),
                priority: Uint8
            },
            HandlerDataV28: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV28: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV28"),
                attenuation: Pointer("AttenuationDataV28"),
                fileName: DynArray("FileNameDataV28"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV28",
                pan: "DynamicParamDataV28",
                pitch: "DynamicParamDataV28",
                pitchMS: "DynamicParamDataV28",
                volume: "DynamicParamDataV28",
                volumeMS: "DynamicParamDataV28",
                initialDelay: "RangeDataV28",
                playLength: "RangeDataV28",
                positionOffsetAngle: "RangeDataV28",
                positionRange: "RangeDataV28",
                repeatCount: "RangeDataV28",
                repeatTime: "RangeDataV28",
                replayDelay: "RangeDataV28",
                startTimeOffset: "RangeDataV28",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            TriggerKeyDataV28: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV28")
            },
            TriggerMarkerDataV28: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV28"),
            handler: DynArray("HandlerDataV28"),
            metaSound: DynArray("MetaSoundDataV28"),
            scriptRef: DynArray("ScriptRefDataV28"),
            triggerKey: DynArray("TriggerKeyDataV28"),
            property: DynArray("PropertyDataV28"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8,
            soundPoolMode: Uint8
        }
    };
    var V29$3 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV29",
        version: 29,
        definitions: {
            AudioSettingsDataV29: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                echoLevel: Float32,
                focusTransition: Float32,
                memoryPool: Float32,
                reverbLevel: Float32,
                minChannelsLQ: Uint32,
                maxChannelsLQ: Uint32,
                buss: DynArray("BussDataV29"),
                category: DynArray("CategoryDataV29"),
                material: DynArray("MaterialDataV29"),
                musicCondition: DynArray("MusicConditionDataV29"),
                musicPlaylist: DynArray("MusicPlaylistDataV29"),
                property: DynArray("PropertyDataV29"),
                reverb: DynArray("ReverbDataV29"),
                scriptRef: DynArray("ScriptRefDataV29"),
                snapshot: DynArray("SnapshotDataV29"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename(),
                musicExternal: DynArray("MusicExternalDataV29")
            },
            BussDataV29: {
                name: Uint64,
                output: Uint64,
                flags: Uint32,
                normalizeFadeTime: Float32,
                normalizeThreshold: Float32,
                normalizeMaxAmp: Float32,
                compressorThreshold: Float32,
                compressorAttack: Float32,
                compressorRelease: Float32,
                compressorGainMakeup: Float32,
                dynamicData: Pointer("BussDynamicDataV29")
            },
            BussDynamicDataV29: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV29")
            },
            DspDataV29: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV29: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV29"),
                dynamicData: Pointer("CategoryDynamicDataV29"),
                focusReserve: Float32,
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8,
                priority: Uint8
            },
            AttenuationDataV29: {
                doppler: Float32,
                lowPass: "DynamicParamDataV29",
                highPass: "DynamicParamDataV29",
                pan3D: "DynamicParamDataV29",
                reverb: "DynamicParamDataV29",
                spread3D: "DynamicParamDataV29",
                volumeA: "DynamicParamDataV29",
                volumeB: "DynamicParamDataV29",
                lfe: "DynamicParamDataV29"
            },
            DynamicParamDataV29: {
                envelopeData: Pointer("EnvelopeDataV29"),
                randomParamData: Pointer("RandomParamDataV29"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV29: {
                offsetParameter: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV29"),
                offsetType: Uint8
            },
            EnvelopePointDataV29: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV29: {
                time: "RangeDataV29",
                value: "RangeDataV29"
            },
            RangeDataV29: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV29: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32,
                minAudible: Uint32,
                maxAudibleLQ: Uint32,
                maxAudibleHG: Uint32
            },
            MaterialDataV29: {
                name: Uint64,
                flags: Uint32,
                absorptionLF: Float32,
                absorptionMF: Float32,
                absorptionHF: Float32,
                occlusion: Float32
            },
            MusicConditionDataV29: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV29: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV29"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV29",
                intervalSilence: "RangeDataV29",
                maxPlayLength: "RangeDataV29",
                volume: "DynamicParamDataV29",
                fileIterateMode: Uint8
            },
            FileNameDataV29: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8,
                noteBase: Uint8,
                noteMin: Uint8,
                noteMax: Uint8
            },
            PropertyDataV29: {
                name: Uint64,
                tokenValue: Uint64,
                floatValue: Float32
            },
            ReverbDataV29: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            ScriptRefDataV29: {
                name: Uint64,
                fileName: Filename()
            },
            SnapshotDataV29: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV29"),
                category: DynArray("CategoryDynamicDataV29"),
                priority: Uint8
            },
            MusicExternalDataV29: {
                name: Uint64,
                externalPlaylist: RefString16()
            },
            HandlerDataV29: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV29: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV29"),
                attenuation: Pointer("AttenuationDataV29"),
                fileName: DynArray("FileNameDataV29"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV29",
                pan: "DynamicParamDataV29",
                pitch: "DynamicParamDataV29",
                pitchMS: "DynamicParamDataV29",
                volume: "DynamicParamDataV29",
                volumeMS: "DynamicParamDataV29",
                initialDelay: "RangeDataV29",
                playLength: "RangeDataV29",
                positionOffsetAngle: "RangeDataV29",
                positionRange: "RangeDataV29",
                repeatCount: "RangeDataV29",
                repeatTime: "RangeDataV29",
                replayDelay: "RangeDataV29",
                startTimeOffset: "RangeDataV29",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            TriggerKeyDataV29: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV29")
            },
            TriggerMarkerDataV29: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV29"),
            handler: DynArray("HandlerDataV29"),
            metaSound: DynArray("MetaSoundDataV29"),
            scriptRef: DynArray("ScriptRefDataV29"),
            triggerKey: DynArray("TriggerKeyDataV29"),
            property: DynArray("PropertyDataV29"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8,
            soundPoolMode: Uint8
        }
    };
    var V30$3 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV30",
        version: 30,
        definitions: {
            AudioSettingsDataV30: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                echoLevel: Float32,
                focusTransition: Float32,
                memoryPool: Float32,
                reverbLevel: Float32,
                minChannelsLQ: Uint32,
                maxChannelsLQ: Uint32,
                buss: DynArray("BussDataV30"),
                category: DynArray("CategoryDataV30"),
                material: DynArray("MaterialDataV30"),
                musicCondition: DynArray("MusicConditionDataV30"),
                musicPlaylist: DynArray("MusicPlaylistDataV30"),
                property: DynArray("PropertyDataV30"),
                reverb: DynArray("ReverbDataV30"),
                scriptRef: DynArray("ScriptRefDataV30"),
                snapshot: DynArray("SnapshotDataV30"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename(),
                musicExternal: DynArray("MusicExternalDataV30")
            },
            BussDataV30: {
                name: Uint64,
                output: Uint64,
                flags: Uint32,
                normalizeFadeTime: Float32,
                normalizeThreshold: Float32,
                normalizeMaxAmp: Float32,
                compressorThreshold: Float32,
                compressorAttack: Float32,
                compressorRelease: Float32,
                compressorGainMakeup: Float32,
                dynamicData: Pointer("BussDynamicDataV30")
            },
            BussDynamicDataV30: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV30")
            },
            DspDataV30: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV30: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV30"),
                dynamicData: Pointer("CategoryDynamicDataV30"),
                focusReserve: Float32,
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8,
                priority: Uint8
            },
            AttenuationDataV30: {
                doppler: Float32,
                lowPass: "DynamicParamDataV30",
                highPass: "DynamicParamDataV30",
                pan3D: "DynamicParamDataV30",
                reverb: "DynamicParamDataV30",
                spread3D: "DynamicParamDataV30",
                volumeA: "DynamicParamDataV30",
                volumeB: "DynamicParamDataV30",
                lfe: "DynamicParamDataV30"
            },
            DynamicParamDataV30: {
                envelopeData: Pointer("EnvelopeDataV30"),
                randomParamData: Pointer("RandomParamDataV30"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV30: {
                inputOffset: Float32,
                inputOffsetProperty: Uint64,
                inputParameter: Uint64,
                inputScale: Float32,
                inputScaleProperty: Uint64,
                inputType: Uint8,
                outputOffset: Float32,
                outputOffsetProperty: Uint64,
                outputScale: Float32,
                outputScaleProperty: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV30")
            },
            EnvelopePointDataV30: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV30: {
                time: "RangeDataV30",
                value: "RangeDataV30"
            },
            RangeDataV30: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV30: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32,
                minAudible: Uint32,
                maxAudibleLQ: Uint32,
                maxAudibleHG: Uint32
            },
            MaterialDataV30: {
                name: Uint64,
                flags: Uint32,
                absorptionLF: Float32,
                absorptionMF: Float32,
                absorptionHF: Float32,
                occlusion: Float32
            },
            MusicConditionDataV30: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV30: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV30"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV30",
                intervalSilence: "RangeDataV30",
                maxPlayLength: "RangeDataV30",
                volume: "DynamicParamDataV30",
                fileIterateMode: Uint8
            },
            FileNameDataV30: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8,
                noteBase: Uint8,
                noteMin: Uint8,
                noteMax: Uint8
            },
            PropertyDataV30: {
                name: Uint64,
                tokenValue: Uint64,
                floatValue: Float32
            },
            ReverbDataV30: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            ScriptRefDataV30: {
                name: Uint64,
                fileName: Filename()
            },
            SnapshotDataV30: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV30"),
                category: DynArray("CategoryDynamicDataV30"),
                priority: Uint8
            },
            MusicExternalDataV30: {
                name: Uint64,
                externalPlaylist: RefString16()
            },
            HandlerDataV30: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV30: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV30"),
                attenuation: Pointer("AttenuationDataV30"),
                fileName: DynArray("FileNameDataV30"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV30",
                pan: "DynamicParamDataV30",
                pitch: "DynamicParamDataV30",
                pitchMS: "DynamicParamDataV30",
                volume: "DynamicParamDataV30",
                volumeMS: "DynamicParamDataV30",
                initialDelay: "RangeDataV30",
                playLength: "RangeDataV30",
                positionOffsetAngle: "RangeDataV30",
                positionRange: "RangeDataV30",
                repeatCount: "RangeDataV30",
                repeatTime: "RangeDataV30",
                replayDelay: "RangeDataV30",
                startTimeOffset: "RangeDataV30",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            TriggerKeyDataV30: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV30")
            },
            TriggerMarkerDataV30: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV30"),
            handler: DynArray("HandlerDataV30"),
            metaSound: DynArray("MetaSoundDataV30"),
            scriptRef: DynArray("ScriptRefDataV30"),
            triggerKey: DynArray("TriggerKeyDataV30"),
            property: DynArray("PropertyDataV30"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8,
            soundPoolMode: Uint8
        }
    };
    var V31$3 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV31",
        version: 31,
        definitions: {
            AudioSettingsDataV31: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                echoLevel: Float32,
                focusTransition: Float32,
                memoryPool: Float32,
                reverbLevel: Float32,
                minChannelsLQ: Uint32,
                maxChannelsLQ: Uint32,
                buss: DynArray("BussDataV31"),
                category: DynArray("CategoryDataV31"),
                material: DynArray("MaterialDataV31"),
                musicCondition: DynArray("MusicConditionDataV31"),
                musicPlaylist: DynArray("MusicPlaylistDataV31"),
                property: DynArray("PropertyDataV31"),
                reverb: DynArray("ReverbDataV31"),
                scriptRef: DynArray("ScriptRefDataV31"),
                snapshot: DynArray("SnapshotDataV31"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename(),
                musicExternal: DynArray("MusicExternalDataV31")
            },
            BussDataV31: {
                name: Uint64,
                output: Uint64,
                flags: Uint32,
                normalizeFadeTime: Float32,
                normalizeThreshold: Float32,
                normalizeMaxAmp: Float32,
                compressorThreshold: Float32,
                compressorAttack: Float32,
                compressorRelease: Float32,
                compressorGainMakeup: Float32,
                dynamicData: Pointer("BussDynamicDataV31")
            },
            BussDynamicDataV31: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV31")
            },
            DspDataV31: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV31: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV31"),
                dynamicData: Pointer("CategoryDynamicDataV31"),
                focusReserve: Float32,
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8,
                priority: Uint8
            },
            AttenuationDataV31: {
                doppler: Float32,
                lowPass: "DynamicParamDataV31",
                highPass: "DynamicParamDataV31",
                pan3D: "DynamicParamDataV31",
                reverb: "DynamicParamDataV31",
                spread3D: "DynamicParamDataV31",
                volumeA: "DynamicParamDataV31",
                volumeB: "DynamicParamDataV31",
                lfe: "DynamicParamDataV31"
            },
            DynamicParamDataV31: {
                envelopeData: Pointer("EnvelopeDataV31"),
                randomParamData: Pointer("RandomParamDataV31"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV31: {
                inputOffset: Float32,
                inputOffsetProperty: Uint64,
                inputParameter: Uint64,
                inputScale: Float32,
                inputScaleProperty: Uint64,
                inputType: Uint8,
                outputOffset: Float32,
                outputOffsetProperty: Uint64,
                outputScale: Float32,
                outputScaleProperty: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV31")
            },
            EnvelopePointDataV31: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV31: {
                time: "RangeDataV31",
                value: "RangeDataV31"
            },
            RangeDataV31: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV31: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32,
                minAudible: Uint32,
                maxAudibleLQ: Uint32,
                maxAudibleHG: Uint32
            },
            MaterialDataV31: {
                name: Uint64,
                flags: Uint32,
                absorptionLF: Float32,
                absorptionMF: Float32,
                absorptionHF: Float32,
                occlusion: Float32
            },
            MusicConditionDataV31: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV31: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV31"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV31",
                intervalSilence: "RangeDataV31",
                maxPlayLength: "RangeDataV31",
                volume: "DynamicParamDataV31",
                fileIterateMode: Uint8
            },
            FileNameDataV31: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8,
                noteBase: Uint8,
                noteMin: Uint8,
                noteMax: Uint8
            },
            PropertyDataV31: {
                name: Uint64,
                tokenValue: Uint64,
                floatValue: Float32
            },
            ReverbDataV31: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            ScriptRefDataV31: {
                name: Uint64,
                fileName: Filename()
            },
            SnapshotDataV31: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV31"),
                category: DynArray("CategoryDynamicDataV31"),
                priority: Uint8
            },
            MusicExternalDataV31: {
                name: Uint64,
                externalPlaylist: RefString16()
            },
            HandlerDataV31: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV31: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV31"),
                attenuation: Pointer("AttenuationDataV31"),
                fileName: DynArray("FileNameDataV31"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                modelScaleSizeFactor: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV31",
                pan: "DynamicParamDataV31",
                pitch: "DynamicParamDataV31",
                pitchMS: "DynamicParamDataV31",
                volume: "DynamicParamDataV31",
                volumeMS: "DynamicParamDataV31",
                initialDelay: "RangeDataV31",
                playLength: "RangeDataV31",
                positionOffsetAngle: "RangeDataV31",
                positionRange: "RangeDataV31",
                repeatCount: "RangeDataV31",
                repeatTime: "RangeDataV31",
                replayDelay: "RangeDataV31",
                startTimeOffset: "RangeDataV31",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            TriggerKeyDataV31: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV31")
            },
            TriggerMarkerDataV31: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV31"),
            handler: DynArray("HandlerDataV31"),
            metaSound: DynArray("MetaSoundDataV31"),
            scriptRef: DynArray("ScriptRefDataV31"),
            triggerKey: DynArray("TriggerKeyDataV31"),
            property: DynArray("PropertyDataV31"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8,
            soundPoolMode: Uint8
        }
    };
    var V32$3 = {
        chunkName: "AMSP",
        name: "ScriptFileDataV32",
        version: 32,
        definitions: {
            AudioSettingsDataV31: {
                defaultSnapshot: Uint64,
                effectsBuss: Uint64,
                distanceScale: Float32,
                dopplerScale: Float32,
                echoLevel: Float32,
                focusTransition: Float32,
                memoryPool: Float32,
                reverbLevel: Float32,
                minChannelsLQ: Uint32,
                maxChannelsLQ: Uint32,
                buss: DynArray("BussDataV31"),
                category: DynArray("CategoryDataV31"),
                material: DynArray("MaterialDataV31"),
                musicCondition: DynArray("MusicConditionDataV31"),
                musicPlaylist: DynArray("MusicPlaylistDataV31"),
                property: DynArray("PropertyDataV31"),
                reverb: DynArray("ReverbDataV31"),
                scriptRef: DynArray("ScriptRefDataV31"),
                snapshot: DynArray("SnapshotDataV31"),
                bankIndexFileName: Filename(),
                bankScriptFileName: Filename(),
                musicScriptFileName: Filename(),
                musicExternal: DynArray("MusicExternalDataV31")
            },
            BussDataV31: {
                name: Uint64,
                output: Uint64,
                flags: Uint32,
                normalizeFadeTime: Float32,
                normalizeThreshold: Float32,
                normalizeMaxAmp: Float32,
                compressorThreshold: Float32,
                compressorAttack: Float32,
                compressorRelease: Float32,
                compressorGainMakeup: Float32,
                dynamicData: Pointer("BussDynamicDataV31")
            },
            BussDynamicDataV31: {
                name: Uint64,
                flags: Uint32,
                volume: Float32,
                dsp: DynArray("DspDataV31")
            },
            DspDataV31: {
                type: Uint32,
                flags: Uint32,
                property: DynArray(Float32)
            },
            CategoryDataV31: {
                name: Uint64,
                volumeGroupName: Uint64,
                outputBussName: Uint64,
                attenuation: Pointer("AttenuationDataV31"),
                dynamicData: Pointer("CategoryDynamicDataV31"),
                focusReserve: Float32,
                muteFadeTime: Float32,
                flags: Uint32,
                maxAudible: Uint32,
                maxAudibleBehavior: Uint8,
                priority: Uint8
            },
            AttenuationDataV31: {
                doppler: Float32,
                lowPass: "DynamicParamDataV31",
                highPass: "DynamicParamDataV31",
                pan3D: "DynamicParamDataV31",
                reverb: "DynamicParamDataV31",
                spread3D: "DynamicParamDataV31",
                volumeA: "DynamicParamDataV31",
                volumeB: "DynamicParamDataV31",
                lfe: "DynamicParamDataV31"
            },
            DynamicParamDataV31: {
                envelopeData: Pointer("EnvelopeDataV31"),
                randomParamData: Pointer("RandomParamDataV31"),
                value: Float32,
                type: Uint8
            },
            EnvelopeDataV31: {
                inputOffset: Float32,
                inputOffsetProperty: Uint64,
                inputParameter: Uint64,
                inputScale: Float32,
                inputScaleProperty: Uint64,
                inputType: Uint8,
                outputOffset: Float32,
                outputOffsetProperty: Uint64,
                outputScale: Float32,
                outputScaleProperty: Uint64,
                envelopePoint: DynArray("EnvelopePointDataV31")
            },
            EnvelopePointDataV31: {
                offset: Float32,
                value: Float32
            },
            RandomParamDataV31: {
                time: "RangeDataV31",
                value: "RangeDataV31"
            },
            RangeDataV31: {
                max: Float32,
                min: Float32,
                min_: Uint8
            },
            CategoryDynamicDataV31: {
                name: Uint64,
                volume: Float32,
                nonFocusGain: Float32,
                lowPass: Float32,
                highPass: Float32,
                reverbDirect: Float32,
                reverbRoom: Float32,
                flags: Uint32,
                minAudible: Uint32,
                maxAudibleLQ: Uint32,
                maxAudibleHG: Uint32
            },
            MaterialDataV31: {
                name: Uint64,
                flags: Uint32,
                absorptionLF: Float32,
                absorptionMF: Float32,
                absorptionHF: Float32,
                occlusion: Float32
            },
            MusicConditionDataV31: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MusicPlaylistDataV31: {
                category: Uint64,
                name: Uint64,
                primaryPlaylistId: Uint64,
                secondaryPlaylistId: Uint64,
                fileName: DynArray("FileNameDataV31"),
                fadeInTime: Float32,
                fadeOutTime: Float32,
                flags: Uint32,
                initialSilence: "RangeDataV31",
                intervalSilence: "RangeDataV31",
                maxPlayLength: "RangeDataV31",
                volume: "DynamicParamDataV31",
                fileIterateMode: Uint8
            },
            FileNameDataV31: {
                condition: Uint64,
                language: Uint64,
                volume: Float32,
                weight: Float32,
                fileName: Filename(),
                audioType: Uint8,
                noteBase: Uint8,
                noteMin: Uint8,
                noteMax: Uint8
            },
            PropertyDataV31: {
                name: Uint64,
                tokenValue: Uint64,
                floatValue: Float32
            },
            ReverbDataV31: {
                name: Uint64,
                flags: Uint32,
                room: Float32,
                roomHF: Float32,
                roomLF: Float32,
                decayTime: Float32,
                decayHFRatio: Float32,
                reflections: Float32,
                reflectionsDelay: Float32,
                reverb: Float32,
                reverbDelay: Float32,
                referenceHF: Float32,
                referenceLF: Float32,
                diffusion: Float32,
                density: Float32,
                echoDelay: Float32,
                echoDecayRatio: Float32,
                echoWetMix: Float32,
                echoDryMix: Float32
            },
            ScriptRefDataV31: {
                name: Uint64,
                fileName: Filename()
            },
            SnapshotDataV31: {
                name: Uint64,
                blendInTime: Float32,
                blendOutTime: Float32,
                flags: Uint32,
                buss: DynArray("BussDynamicDataV31"),
                category: DynArray("CategoryDynamicDataV31"),
                priority: Uint8
            },
            MusicExternalDataV31: {
                name: Uint64,
                externalPlaylist: RefString16()
            },
            HandlerDataV31: {
                name: Uint64,
                flags: Uint32,
                byteCode: DynArray(Uint8)
            },
            MetaSoundDataV31: {
                category: Uint64,
                endCue: Uint64,
                name: Uint64,
                offsetBone: Uint64,
                playlistId: Uint64,
                dsp: DynArray("DspDataV31"),
                attenuation: Pointer("AttenuationDataV31"),
                fileName: DynArray("FileNameDataV31"),
                channelFadeIn: Float32,
                channelFadeOut: Float32,
                endCueOffset: Float32,
                fadeInTime: Float32,
                fadeOutTime: Float32,
                modelScaleSizeFactor: Float32,
                positionOffset: FixedArray(Float32, 3),
                channelMax: Uint32,
                flags: Uint32,
                loopCount: Uint32,
                depth: "DynamicParamDataV31",
                pan: "DynamicParamDataV31",
                pitch: "DynamicParamDataV31",
                pitchMS: "DynamicParamDataV31",
                volume: "DynamicParamDataV31",
                volumeMS: "DynamicParamDataV31",
                initialDelay: "RangeDataV31",
                playLength: "RangeDataV31",
                positionOffsetAngle: "RangeDataV31",
                positionRange: "RangeDataV31",
                repeatCount: "RangeDataV31",
                repeatTime: "RangeDataV31",
                replayDelay: "RangeDataV31",
                startTimeOffset: "RangeDataV31",
                channelMode: Uint8,
                channelPriority: Uint8,
                fileIterateMode: Uint8,
                loopMode: Uint8,
                musicPriority: Uint8,
                playbackMode: Uint8,
                positionMode: Uint8,
                repeatTimeFrom: Uint8
            },
            TriggerKeyDataV31: {
                name: Uint64,
                triggerMarker: DynArray("TriggerMarkerDataV31")
            },
            TriggerMarkerDataV31: {
                cue: Uint64,
                end: Uint64,
                time: Float32,
                type: Uint8
            }
        },
        root: {
            musicCue: Uint64,
            reverbOverride: Uint64,
            snapshot: Uint64,
            audioSettings: Pointer("AudioSettingsDataV31"),
            handler: DynArray("HandlerDataV31"),
            metaSound: DynArray("MetaSoundDataV31"),
            scriptRef: DynArray("ScriptRefDataV31"),
            triggerKey: DynArray("TriggerKeyDataV31"),
            property: DynArray("PropertyDataV31"),
            flags: Uint32,
            soundPoolCount: Uint32,
            fadeInTime: Float32,
            soundPoolDelay: Float32,
            volume: Float32,
            musicCuePriority: Uint8,
            musicMutePriority: Uint8,
            soundPoolMode: Uint8,
            interpolation: Uint8,
            radialLimit: Float32,
            scaleBucketRange: "RangeDataV31"
        }
    };
    var latest$1i = V32$3;
    var definitions$1i = { V0: V0$16, V1: V1$N, V2: V2$C, V3: V3$w, V4: V4$l, V5: V5$h, V6: V6$h, V7: V7$e, V8: V8$e, V9: V9$c, V10: V10$d, V11: V11$c, V12: V12$b, V13: V13$b, V14: V14$b, V15: V15$b, V16: V16$a, V17: V17$7, V18: V18$7, V19: V19$7, V20: V20$5, V21: V21$5, V22: V22$4, V23: V23$3, V24: V24$3, V25: V25$3, V26: V26$2, V27: V27$2, V28: V28$2, V29: V29$3, V30: V30$3, V31: V31$3, V32: V32$3 };
    var definitionArray$1i = Object.values(definitions$1i);

    var AMSP = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1i,
        definitions: definitions$1i,
        latest: latest$1i
    });

    var V0$15 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationV0",
        version: 0,
        definitions: {
            ModelAnimationDataV8: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV8"),
                uvAnimData: DynArray("ModelUVAnimationV0")
            },
            ModelVisTrackDataV8: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV0: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelUVTransformV0")
            },
            ModelUVTransformV0: {
                type: Uint8,
                vectorTrackIndex: Uint32
            },
            ModelCompoundAnimationDataV0: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV8: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV8"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV0"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV8")
        }
    };
    var V1$M = {
        chunkName: "ANIM",
        name: "ModelFileAnimationV1",
        version: 1,
        definitions: {
            ModelAnimationDataV9: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV9"),
                uvAnimData: DynArray("ModelUVAnimationV1"),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64)
            },
            ModelVisTrackDataV9: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV1: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelUVTransformV1")
            },
            ModelUVTransformV1: {
                type: Uint8,
                vectorTrackIndex: Uint32
            },
            ModelCompoundAnimationDataV1: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV9: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV9"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV1"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV9")
        }
    };
    var V2$B = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV2",
        version: 2,
        definitions: {
            ModelAnimationDataV10: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV10"),
                uvAnimData: DynArray("ModelUVAnimationV2"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64)
            },
            ModelVisTrackDataV10: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV2: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelUVTransformV2")
            },
            ModelUVTransformV2: {
                type: Uint8,
                vectorTrackIndex: Uint32
            },
            ModelCompoundAnimationDataV2: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV10: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV10"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV2"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV10")
        }
    };
    var V3$v = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV3",
        version: 3,
        definitions: {
            ModelAnimationDataV11: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV11"),
                uvAnimData: DynArray("ModelUVAnimationV3"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV3")
            },
            ModelVisTrackDataV11: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV3: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelTrackTypeDataV3")
            },
            ModelTrackTypeDataV3: {
                type: Uint8,
                vectorTrackIndex: Uint32
            },
            ModelLightAnimationV3: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV3")
            },
            ModelCompoundAnimationDataV3: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV11: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV11"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV3"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV11")
        }
    };
    var V4$k = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV4",
        version: 4,
        definitions: {
            ModelAnimationDataV12: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV12"),
                uvAnimData: DynArray("ModelUVAnimationV4"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV4"),
                isAdditive: Uint32
            },
            ModelVisTrackDataV12: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV4: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelTrackTypeDataV4")
            },
            ModelTrackTypeDataV4: {
                type: Uint8,
                vectorTrackIndex: Uint32
            },
            ModelLightAnimationV4: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV4")
            },
            ModelCompoundAnimationDataV4: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV12: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV12"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV4"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV12")
        }
    };
    var V5$g = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV5",
        version: 5,
        definitions: {
            ModelAnimationDataV13: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV13"),
                uvAnimData: DynArray("ModelUVAnimationV5"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV5"),
                isAdditive: Uint32
            },
            ModelVisTrackDataV13: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV5: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelTrackTypeDataV5")
            },
            ModelTrackTypeDataV5: {
                type: Uint8,
                vectorTrackIndex: Uint32
            },
            ModelLightAnimationV5: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV5")
            },
            ModelCompoundAnimationDataV5: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV13: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV13"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV5"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV13")
        }
    };
    var V6$g = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV6",
        version: 6,
        definitions: {
            ModelAnimationDataV14: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV14"),
                uvAnimData: DynArray("ModelUVAnimationV6"),
                cloudAnim: DynArray("ModelCloudAnimV6"),
                matConstAnim: DynArray("ModelMatConstAnimV6"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV6"),
                isAdditive: Uint32
            },
            ModelVisTrackDataV14: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV6: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelTrackTypeDataV6")
            },
            ModelTrackTypeDataV6: {
                type: Uint8,
                vectorTrackIndex: Uint32
            },
            ModelCloudAnimV6: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV6")
            },
            ModelMatConstAnimV6: {
                matIndex: Uint32,
                constToken: Uint32,
                vectorTrackIndex: Uint32
            },
            ModelLightAnimationV6: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV6")
            },
            ModelCompoundAnimationDataV6: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV14: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV14"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV6"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV14")
        }
    };
    var V7$d = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV7",
        version: 7,
        definitions: {
            ModelAnimationDataV15: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV15"),
                uvAnimData: DynArray("ModelUVAnimationV7"),
                cloudAnim: DynArray("ModelCloudAnimV7"),
                matConstAnim: DynArray("ModelMatConstAnimV7"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV7"),
                isAdditive: Uint32
            },
            ModelVisTrackDataV15: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV7: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelTrackTypeDataV7")
            },
            ModelTrackTypeDataV7: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32
            },
            ModelCloudAnimV7: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV7")
            },
            ModelMatConstAnimV7: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32
            },
            ModelLightAnimationV7: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV7")
            },
            ModelCompoundAnimationDataV7: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV15: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV15"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV7"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV15")
        }
    };
    var V8$d = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV8",
        version: 8,
        definitions: {
            ModelAnimationDataV16: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV16"),
                uvAnimData: DynArray("ModelUVAnimationV8"),
                cloudAnim: DynArray("ModelCloudAnimV8"),
                matConstAnim: DynArray("ModelMatConstAnimV8"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV8"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3)
            },
            ModelVisTrackDataV16: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV8: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelTrackTypeDataV8")
            },
            ModelTrackTypeDataV8: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32
            },
            ModelCloudAnimV8: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV8")
            },
            ModelMatConstAnimV8: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32
            },
            ModelLightAnimationV8: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV8")
            },
            ModelCompoundAnimationDataV8: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV16: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV16"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV8"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV16")
        }
    };
    var V9$b = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV9",
        version: 9,
        definitions: {
            ModelAnimationDataV17: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV17"),
                uvAnimData: DynArray("ModelUVAnimationV9"),
                cloudAnim: DynArray("ModelCloudAnimV9"),
                matConstAnim: DynArray("ModelMatConstAnimV9"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV9"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3)
            },
            ModelVisTrackDataV17: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV9: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelTrackTypeDataV9")
            },
            ModelTrackTypeDataV9: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV9: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV9")
            },
            ModelMatConstAnimV9: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV9: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV9")
            },
            ModelCompoundAnimationDataV9: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV17: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV17"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV9"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV17")
        }
    };
    var V10$c = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV10",
        version: 10,
        definitions: {
            ModelAnimationDataV18: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV18"),
                uvAnimData: DynArray("ModelUVAnimationV10"),
                cloudAnim: DynArray("ModelCloudAnimV10"),
                matConstAnim: DynArray("ModelMatConstAnimV10"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV10"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV10")
            },
            ModelVisTrackDataV18: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV10: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelTrackTypeDataV10")
            },
            ModelTrackTypeDataV10: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV10: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV10")
            },
            ModelMatConstAnimV10: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV10: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV10")
            },
            ModelAnimPropertyDataV10: {
                id: Uint64,
                type: Uint32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCompoundAnimationDataV10: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV18: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV18"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV10"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV18")
        }
    };
    var V11$b = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV11",
        version: 11,
        definitions: {
            ModelAnimationDataV19: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV19"),
                uvAnimData: DynArray("ModelUVAnimationV11"),
                cloudAnim: DynArray("ModelCloudAnimV11"),
                matConstAnim: DynArray("ModelMatConstAnimV11"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV11"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV11"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelVisTrackDataV19: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV11: {
                uvAnimId: Uint8,
                uvTransformData: DynArray("ModelTrackTypeDataV11")
            },
            ModelTrackTypeDataV11: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV11: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV11")
            },
            ModelMatConstAnimV11: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV11: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV11")
            },
            ModelAnimPropertyDataV11: {
                id: Uint64,
                type: Uint32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCompoundAnimationDataV11: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV19: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV19"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV11"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV19")
        }
    };
    var V12$a = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV12",
        version: 12,
        definitions: {
            ModelAnimationDataV20: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV20"),
                uvAnimData: DynArray("ModelUVAnimationV12"),
                cloudAnim: DynArray("ModelCloudAnimV12"),
                matConstAnim: DynArray("ModelMatConstAnimV12"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV12"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV12"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV12")
            },
            ModelVisTrackDataV20: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV12: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV12")
            },
            ModelTrackTypeDataV12: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV12: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV12")
            },
            ModelMatConstAnimV12: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV12: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV12")
            },
            ModelAnimPropertyDataV12: {
                id: Uint64,
                type: Uint32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV12: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCompoundAnimationDataV12: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV20: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV20"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV12"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV20")
        }
    };
    var V13$a = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV13",
        version: 13,
        definitions: {
            ModelAnimationDataV21: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV21"),
                uvAnimData: DynArray("ModelUVAnimationV13"),
                cloudAnim: DynArray("ModelCloudAnimV13"),
                matConstAnim: DynArray("ModelMatConstAnimV13"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV13"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV13"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV13")
            },
            ModelVisTrackDataV21: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV13: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV13")
            },
            ModelTrackTypeDataV13: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV13: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV13")
            },
            ModelMatConstAnimV13: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV13: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV13")
            },
            ModelAnimPropertyDataV13: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV13: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCompoundAnimationDataV13: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV21: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV21"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV13"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV21")
        }
    };
    var V14$a = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV14",
        version: 14,
        definitions: {
            ModelAnimationDataV22: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV22"),
                uvAnimData: DynArray("ModelUVAnimationV14"),
                cloudAnim: DynArray("ModelCloudAnimV14"),
                matConstAnim: DynArray("ModelMatConstAnimV14"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV14"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV14"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV14")
            },
            ModelVisTrackDataV22: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV14: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV14")
            },
            ModelTrackTypeDataV14: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV14: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV14")
            },
            ModelMatConstAnimV14: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV14: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV14")
            },
            ModelAnimPropertyDataV14: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV14: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCompoundAnimationDataV14: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV22: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV22"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV14"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV22")
        }
    };
    var V15$a = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV15",
        version: 15,
        definitions: {
            ModelAnimationDataV23: {
                token: Uint64,
                data: DynArray(Uint8),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV23"),
                uvAnimData: DynArray("ModelUVAnimationV15"),
                cloudAnim: DynArray("ModelCloudAnimV15"),
                matConstAnim: DynArray("ModelMatConstAnimV15"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV15"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV15"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV15"),
                bcAnim: DynArray("ModelBoneConstraintAnimV15")
            },
            ModelVisTrackDataV23: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV15: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV15")
            },
            ModelTrackTypeDataV15: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV15: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV15")
            },
            ModelMatConstAnimV15: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV15: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV15")
            },
            ModelAnimPropertyDataV15: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV15: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV15: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV15")
            },
            ModelCompoundAnimationDataV15: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV23: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV23"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV15"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV23")
        }
    };
    var V16$9 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV16",
        version: 16,
        definitions: {
            ModelAnimationDataV24: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV24"),
                uvAnimData: DynArray("ModelUVAnimationV16"),
                cloudAnim: DynArray("ModelCloudAnimV16"),
                matConstAnim: DynArray("ModelMatConstAnimV16"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV16"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV16"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV16"),
                bcAnim: DynArray("ModelBoneConstraintAnimV16"),
                streakAnim: DynArray("ModelStreakAnimV16")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV24: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV16: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV16")
            },
            ModelTrackTypeDataV16: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV16: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV16")
            },
            ModelMatConstAnimV16: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV16: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV16")
            },
            ModelAnimPropertyDataV16: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV16: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV16: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV16")
            },
            ModelStreakAnimV16: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV16")
            },
            ModelAnchorAnimV16: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV16")
            },
            ModelCompoundAnimationDataV16: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV24: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV24"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV16"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV24")
        }
    };
    var V17$6 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV17",
        version: 17,
        definitions: {
            ModelAnimationDataV25: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV25"),
                uvAnimData: DynArray("ModelUVAnimationV17"),
                cloudAnim: DynArray("ModelCloudAnimV17"),
                matConstAnim: DynArray("ModelMatConstAnimV17"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV17"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV17"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV17"),
                bcAnim: DynArray("ModelBoneConstraintAnimV17"),
                streakAnim: DynArray("ModelStreakAnimV17")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV25: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV17: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV17")
            },
            ModelTrackTypeDataV17: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV17: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV17")
            },
            ModelMatConstAnimV17: {
                matIndex: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV17: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV17")
            },
            ModelAnimPropertyDataV17: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV17: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV17: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV17")
            },
            ModelStreakAnimV17: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV17")
            },
            ModelAnchorAnimV17: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV17")
            },
            ModelCompoundAnimationDataV17: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV25: {
                filename: Filename(),
                sequences: DynArray("ModelAnimationImportSequenceV17")
            },
            ModelAnimationImportSequenceV17: {
                name: Uint64,
                duration: Float32
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV25"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV17"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV25")
        }
    };
    var V18$6 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV18",
        version: 18,
        definitions: {
            ModelAnimationDataV26: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV26"),
                uvAnimData: DynArray("ModelUVAnimationV18"),
                cloudAnim: DynArray("ModelCloudAnimV18"),
                matConstAnim: DynArray("ModelMatConstAnimV18"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV18"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV18"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV18"),
                bcAnim: DynArray("ModelBoneConstraintAnimV18"),
                streakAnim: DynArray("ModelStreakAnimV18")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV26: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV18: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV18")
            },
            ModelTrackTypeDataV18: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV18: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV18")
            },
            ModelMatConstAnimV18: {
                materialId: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV18: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV18")
            },
            ModelAnimPropertyDataV18: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV18: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV18: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV18")
            },
            ModelStreakAnimV18: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV18")
            },
            ModelAnchorAnimV18: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV18")
            },
            ModelCompoundAnimationDataV18: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV26: {
                filename: Filename(),
                sequences: DynArray("ModelAnimationImportSequenceV18")
            },
            ModelAnimationImportSequenceV18: {
                name: Uint64,
                duration: Float32
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV26"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV18"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV26")
        }
    };
    var V19$6 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV19",
        version: 19,
        definitions: {
            ModelAnimationDataV27: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV27"),
                uvAnimData: DynArray("ModelUVAnimationV19"),
                cloudAnim: DynArray("ModelCloudAnimV19"),
                matConstAnim: DynArray("ModelMatConstAnimV19"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV19"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV19"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV19"),
                bcAnim: DynArray("ModelBoneConstraintAnimV19"),
                streakAnim: DynArray("ModelStreakAnimV19")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV27: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV19: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV19")
            },
            ModelTrackTypeDataV19: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV19: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV19")
            },
            ModelMatConstAnimV19: {
                materialId: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV19: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV19")
            },
            ModelAnimPropertyDataV19: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV19: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV19: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV19")
            },
            ModelStreakAnimV19: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV19")
            },
            ModelAnchorAnimV19: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV19")
            },
            ModelCompoundAnimationDataV19: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV27: {
                filename: Filename(),
                sequences: DynArray("ModelAnimationImportSequenceV19")
            },
            ModelAnimationImportSequenceV19: {
                name: Uint64,
                duration: Float32
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV27"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV19"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV27"),
            modelReference: Filename()
        }
    };
    var V20$4 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV20",
        version: 20,
        definitions: {
            ModelAnimationDataV28: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV28"),
                uvAnimData: DynArray("ModelUVAnimationV20"),
                cloudAnim: DynArray("ModelCloudAnimV20"),
                matConstAnim: DynArray("ModelMatConstAnimV20"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV20"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV20"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV20"),
                bcAnim: DynArray("ModelBoneConstraintAnimV20"),
                streakAnim: DynArray("ModelStreakAnimV20"),
                lightningAnim: DynArray("ModelLightningAnimV20")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV28: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV20: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV20")
            },
            ModelTrackTypeDataV20: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV20: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV20")
            },
            ModelMatConstAnimV20: {
                materialId: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV20: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV20")
            },
            ModelAnimPropertyDataV20: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV20: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV20: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV20")
            },
            ModelStreakAnimV20: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV20")
            },
            ModelAnchorAnimV20: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV20")
            },
            ModelLightningAnimV20: {
                bone: Uint64,
                lightningTrackData: DynArray("ModelTrackTypeDataV20")
            },
            ModelCompoundAnimationDataV20: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV28: {
                filename: Filename(),
                sequences: DynArray("ModelAnimationImportSequenceV20")
            },
            ModelAnimationImportSequenceV20: {
                name: Uint64,
                duration: Float32
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV28"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV20"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV28"),
            modelReference: Filename()
        }
    };
    var V21$4 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV21",
        version: 21,
        definitions: {
            ModelAnimationDataV29: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV29"),
                uvAnimData: DynArray("ModelUVAnimationV21"),
                cloudAnim: DynArray("ModelCloudAnimV21"),
                matConstAnim: DynArray("ModelMatConstAnimV21"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV21"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV21"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV21"),
                bcAnim: DynArray("ModelBoneConstraintAnimV21"),
                streakAnim: DynArray("ModelStreakAnimV21"),
                lightningAnim: DynArray("ModelLightningAnimV21"),
                windAnimData: DynArray("ModelWindAnimationV21")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV29: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV21: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV21")
            },
            ModelTrackTypeDataV21: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV21: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV21")
            },
            ModelMatConstAnimV21: {
                materialId: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV21: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV21")
            },
            ModelAnimPropertyDataV21: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV21: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV21: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV21")
            },
            ModelStreakAnimV21: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV21")
            },
            ModelAnchorAnimV21: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV21")
            },
            ModelLightningAnimV21: {
                bone: Uint64,
                lightningTrackData: DynArray("ModelTrackTypeDataV21")
            },
            ModelWindAnimationV21: {
                bone: Uint64,
                windTrackData: DynArray("ModelTrackTypeDataV21")
            },
            ModelCompoundAnimationDataV21: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV29: {
                filename: Filename(),
                sequences: DynArray("ModelAnimationImportSequenceV21")
            },
            ModelAnimationImportSequenceV21: {
                name: Uint64,
                duration: Float32
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV29"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV21"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV29"),
            modelReference: Filename()
        }
    };
    var V22$3 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV22",
        version: 22,
        definitions: {
            ModelAnimationDataV30: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV30"),
                uvAnimData: DynArray("ModelUVAnimationV22"),
                cloudAnim: DynArray("ModelCloudAnimV22"),
                matConstAnim: DynArray("ModelMatConstAnimV22"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV22"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV22"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV22"),
                bcAnim: DynArray("ModelBoneConstraintAnimV22"),
                streakAnim: DynArray("ModelStreakAnimV22"),
                lightningAnim: DynArray("ModelLightningAnimV22"),
                windAnimData: DynArray("ModelWindAnimationV22")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV30: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV22: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV22")
            },
            ModelTrackTypeDataV22: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV22: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV22")
            },
            ModelMatConstAnimV22: {
                materialId: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV22: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV22")
            },
            ModelAnimPropertyDataV22: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV22: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV22: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV22")
            },
            ModelStreakAnimV22: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV22")
            },
            ModelAnchorAnimV22: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV22")
            },
            ModelLightningAnimV22: {
                bone: Uint64,
                lightningTrackData: DynArray("ModelTrackTypeDataV22")
            },
            ModelWindAnimationV22: {
                bone: Uint64,
                windTrackData: DynArray("ModelTrackTypeDataV22")
            },
            ModelCompoundAnimationDataV22: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV30: {
                filename: Filename(),
                sequences: DynArray("ModelAnimationImportSequenceV22")
            },
            ModelAnimationImportSequenceV22: {
                name: Uint64,
                duration: Float32
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV30"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV22"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV30")
        }
    };
    var V23$2 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationBankV23",
        version: 23,
        definitions: {
            ModelAnimationDataV31: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV31"),
                uvAnimData: DynArray("ModelUVAnimationV23"),
                cloudAnim: DynArray("ModelCloudAnimV23"),
                matConstAnim: DynArray("ModelMatConstAnimV23"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV23"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV23"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV23"),
                bcAnim: DynArray("ModelBoneConstraintAnimV23"),
                streakAnim: DynArray("ModelStreakAnimV23"),
                lightningAnim: DynArray("ModelLightningAnimV23"),
                windAnimData: DynArray("ModelWindAnimationV23")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV31: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV23: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV23")
            },
            ModelTrackTypeDataV23: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV23: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV23")
            },
            ModelMatConstAnimV23: {
                materialId: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV23: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV23")
            },
            ModelAnimPropertyDataV23: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV23: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV23: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV23")
            },
            ModelStreakAnimV23: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV23")
            },
            ModelAnchorAnimV23: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV23")
            },
            ModelLightningAnimV23: {
                bone: Uint64,
                lightningTrackData: DynArray("ModelTrackTypeDataV23")
            },
            ModelWindAnimationV23: {
                bone: Uint64,
                windTrackData: DynArray("ModelTrackTypeDataV23")
            },
            ModelCompoundAnimationDataV23: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV31: {
                filename: Filename(),
                sequences: DynArray("ModelAnimationImportSequenceV23")
            },
            ModelAnimationImportSequenceV23: {
                name: Uint64,
                duration: Float32
            }
        },
        root: {
            animations: RefArray("ModelAnimationDataV31"),
            compoundAnimations: DynArray("ModelCompoundAnimationDataV23"),
            fallbacks: DynArray(Uint64),
            imports: DynArray("ModelAnimationImportDataV31")
        }
    };
    var V24$2 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationV24",
        version: 24,
        definitions: {
            ModelFileAnimationBankV24: {
                animations: RefArray("ModelAnimationDataV32"),
                compoundAnimations: DynArray("ModelCompoundAnimationDataV24"),
                fallbacks: DynArray(Uint64),
                imports: DynArray("ModelAnimationImportDataV32")
            },
            ModelAnimationDataV32: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV0",
                animLod: Pointer("ModelAnimationLodV24"),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV32"),
                uvAnimData: DynArray("ModelUVAnimationV24"),
                cloudAnim: DynArray("ModelCloudAnimV24"),
                matConstAnim: DynArray("ModelMatConstAnimV24"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV24"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV24"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV24"),
                bcAnim: DynArray("ModelBoneConstraintAnimV24"),
                streakAnim: DynArray("ModelStreakAnimV24"),
                lightningAnim: DynArray("ModelLightningAnimV24"),
                windAnimData: DynArray("ModelWindAnimationV24")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelAnimationLodV24: {
                data: "PackGrannyAnimationTypeV0",
                fileFull: Filename()
            },
            ModelVisTrackDataV32: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV24: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV24")
            },
            ModelTrackTypeDataV24: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV24: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV24")
            },
            ModelMatConstAnimV24: {
                materialId: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV24: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV24")
            },
            ModelAnimPropertyDataV24: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV24: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV24: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV24")
            },
            ModelStreakAnimV24: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV24")
            },
            ModelAnchorAnimV24: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV24")
            },
            ModelLightningAnimV24: {
                bone: Uint64,
                lightningTrackData: DynArray("ModelTrackTypeDataV24")
            },
            ModelWindAnimationV24: {
                bone: Uint64,
                windTrackData: DynArray("ModelTrackTypeDataV24")
            },
            ModelCompoundAnimationDataV24: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV32: {
                filename: Filename(),
                sequences: DynArray("ModelAnimationImportSequenceV24")
            },
            ModelAnimationImportSequenceV24: {
                name: Uint64,
                duration: Float32
            }
        },
        root: {
            bank: Pointer("ModelFileAnimationBankV24"),
            anim: "PackGrannyAnimationTypeV0"
        }
    };
    var V25$2 = {
        chunkName: "ANIM",
        name: "ModelFileAnimationV25",
        version: 25,
        definitions: {
            ModelFileAnimationBankV25: {
                animations: RefArray("ModelAnimationDataV33"),
                compoundAnimations: DynArray("ModelCompoundAnimationDataV25"),
                fallbacks: DynArray(Uint64),
                imports: DynArray("ModelAnimationImportDataV33")
            },
            ModelAnimationDataV33: {
                token: Uint64,
                data: "PackGrannyAnimationTypeV1",
                animLod: Pointer("ModelAnimationLodV25"),
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV33"),
                uvAnimData: DynArray("ModelUVAnimationV25"),
                cloudAnim: DynArray("ModelCloudAnimV25"),
                matConstAnim: DynArray("ModelMatConstAnimV25"),
                morphTrackGroups: DynArray(Uint16),
                triggerTimes: DynArray(Float32),
                triggerTokens: DynArray(Uint64),
                lightAnimData: DynArray("ModelLightAnimationV25"),
                isAdditive: Uint32,
                variantCount: Uint32,
                variantIndices: FixedArray(Uint32, 3),
                properties: DynArray("ModelAnimPropertyDataV25"),
                center: FixedArray(Float32, 3),
                radius: Float32,
                tokenMapAnims: DynArray("ModelTokenMapAnimV25"),
                bcAnim: DynArray("ModelBoneConstraintAnimV25"),
                streakAnim: DynArray("ModelStreakAnimV25"),
                lightningAnim: DynArray("ModelLightningAnimV25"),
                windAnimData: DynArray("ModelWindAnimationV25")
            },
            PackGrannyAnimationTypeV1: {
                animation: DynArray(Uint8),
                pointers: DynArray(Uint32)
            },
            ModelAnimationLodV25: {
                data: "PackGrannyAnimationTypeV1",
                fileFull: Filename()
            },
            ModelVisTrackDataV33: {
                boneToken: Uint64,
                keys: DynArray(Float32)
            },
            ModelUVAnimationV25: {
                uvAnimId: Uint32,
                uvTransformData: DynArray("ModelTrackTypeDataV25")
            },
            ModelTrackTypeDataV25: {
                type: Uint8,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelCloudAnimV25: {
                bone: Uint64,
                cloudTrackData: DynArray("ModelTrackTypeDataV25")
            },
            ModelMatConstAnimV25: {
                materialId: Uint32,
                constToken: Uint32,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelLightAnimationV25: {
                bone: Uint64,
                lightTrackData: DynArray("ModelTrackTypeDataV25")
            },
            ModelAnimPropertyDataV25: {
                id: Uint64,
                type: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelTokenMapAnimV25: {
                linkToken: Uint64,
                trackGroupIndex: Uint32,
                vectorTrackIndex: Uint32,
                initialValue: FixedArray(Float32, 4)
            },
            ModelBoneConstraintAnimV25: {
                bone: Uint64,
                bcTrackData: DynArray("ModelTrackTypeDataV25")
            },
            ModelStreakAnimV25: {
                bone: Uint64,
                anchorAnim: DynArray("ModelAnchorAnimV25")
            },
            ModelAnchorAnimV25: {
                bone: Uint64,
                anchorTrackData: DynArray("ModelTrackTypeDataV25")
            },
            ModelLightningAnimV25: {
                bone: Uint64,
                lightningTrackData: DynArray("ModelTrackTypeDataV25")
            },
            ModelWindAnimationV25: {
                bone: Uint64,
                windTrackData: DynArray("ModelTrackTypeDataV25")
            },
            ModelCompoundAnimationDataV25: {
                token: Uint64,
                start: Uint64,
                loop: Uint64,
                end: Uint64
            },
            ModelAnimationImportDataV33: {
                filename: Filename(),
                sequences: DynArray("ModelAnimationImportSequenceV25")
            },
            ModelAnimationImportSequenceV25: {
                name: Uint64,
                duration: Float32
            }
        },
        root: {
            bank: Pointer("ModelFileAnimationBankV25"),
            anim: "PackGrannyAnimationTypeV1"
        }
    };
    var latest$1h = V25$2;
    var definitions$1h = { V0: V0$15, V1: V1$M, V2: V2$B, V3: V3$v, V4: V4$k, V5: V5$g, V6: V6$g, V7: V7$d, V8: V8$d, V9: V9$b, V10: V10$c, V11: V11$b, V12: V12$a, V13: V13$a, V14: V14$a, V15: V15$a, V16: V16$9, V17: V17$6, V18: V18$6, V19: V19$6, V20: V20$4, V21: V21$4, V22: V22$3, V23: V23$2, V24: V24$2, V25: V25$2 };
    var definitionArray$1h = Object.values(definitions$1h);

    var ANIM = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1h,
        definitions: definitions$1h,
        latest: latest$1h
    });

    var V0$14 = {
        chunkName: "ANIM",
        name: "SceneFileAnimationV0",
        version: 0,
        definitions: {
            SceneAnimationV0: {
                name: Uint64,
                motion: "SceneMotionV0",
                actionPoints: DynArray("SceneActionPointV0")
            },
            SceneMotionV0: {
                keys: DynArray("SceneKeyframeV0")
            },
            SceneKeyframeV0: {
                time: Float32,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneActionPointV0: {
                name: Uint64,
                motion: "SceneMotionV0"
            },
            SceneAnimationImportV0: {
                filename: Filename(),
                animNames: DynArray(Uint64)
            }
        },
        root: {
            animations: DynArray("SceneAnimationV0"),
            imports: DynArray("SceneAnimationImportV0")
        }
    };
    var V1$L = {
        chunkName: "ANIM",
        name: "SceneFileAnimationV1",
        version: 1,
        definitions: {
            SceneAnimationV1: {
                name: Uint64,
                motion: "SceneMotionV1",
                actionPoints: DynArray("SceneActionPointV1"),
                events: DynArray("SceneAnimationEventV1")
            },
            SceneMotionV1: {
                keys: DynArray("SceneKeyframeV1")
            },
            SceneKeyframeV1: {
                time: Float32,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneActionPointV1: {
                name: Uint64,
                motion: "SceneMotionV1"
            },
            SceneAnimationEventV1: {
                name: Uint64,
                time: Float32
            },
            SceneAnimationImportV1: {
                filename: Filename(),
                animNames: DynArray(Uint64)
            }
        },
        root: {
            animations: DynArray("SceneAnimationV1"),
            imports: DynArray("SceneAnimationImportV1")
        }
    };
    var V2$A = {
        chunkName: "ANIM",
        name: "SceneFileAnimationV2",
        version: 2,
        definitions: {
            SceneAnimationV2: {
                name: Uint64,
                motion: "SceneMotionV2",
                actionPoints: DynArray("SceneActionPointV2"),
                events: DynArray("SceneAnimationEventV2")
            },
            SceneMotionV2: {
                keys: DynArray("SceneKeyframeV2")
            },
            SceneKeyframeV2: {
                time: Float32,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneActionPointV2: {
                name: Uint64,
                motion: "SceneMotionV2"
            },
            SceneAnimationEventV2: {
                name: Uint64,
                time: Float32
            },
            ScenePoseV2: {
                name: Uint64,
                transforms: DynArray("SceneTransformV2")
            },
            SceneTransformV2: {
                name: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneAnimationImportV2: {
                filename: Filename(),
                animNames: DynArray("SceneImportSequenceV2"),
                flags: Uint32
            },
            SceneImportSequenceV2: {
                name: Uint64
            }
        },
        root: {
            animations: DynArray("SceneAnimationV2"),
            poses: DynArray("ScenePoseV2"),
            imports: DynArray("SceneAnimationImportV2")
        }
    };
    var latest$1g = V2$A;
    var definitions$1g = { V0: V0$14, V1: V1$L, V2: V2$A };
    var definitionArray$1g = Object.values(definitions$1g);

    var ANIM_2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1g,
        definitions: definitions$1g,
        latest: latest$1g
    });

    var V0$13 = {
        chunkName: "anim",
        name: "PackEmoteAnimationsV0",
        version: 0,
        definitions: {
            PackEmoteAnimationV0: {
                token: Uint64,
                timings: DynArray("PackEmoteTimingV0")
            },
            PackEmoteTimingV0: {
                modelFileId: Fileref(),
                blendInTime: Float32,
                blendOutTime: Float32,
                duration: Uint32
            }
        },
        root: {
            animations: DynArray("PackEmoteAnimationV0")
        }
    };
    var V1$K = {
        chunkName: "anim",
        name: "PackEmoteAnimationsV1",
        version: 1,
        definitions: {
            PackEmoteAnimationV1: {
                token: Uint64,
                timings: DynArray("PackEmoteTimingV1")
            },
            PackEmoteTimingV1: {
                modelFileId: Fileref(),
                blendInTime: Float32,
                blendOutTime: Float32,
                duration: Uint32,
                loopDuration: Uint32
            }
        },
        root: {
            animations: DynArray("PackEmoteAnimationV1")
        }
    };
    var V2$z = {
        chunkName: "anim",
        name: "PackEmoteAnimationsV2",
        version: 2,
        definitions: {
            PackEmoteAnimationV2: {
                Token: Uint64,
                Timing: DynArray("PackEmoteTimingV2")
            },
            PackEmoteTimingV2: {
                ModelFile: Fileref(),
                BlendIn: Float32,
                BlendOut: Float32,
                IntroDuration: Uint32,
                LoopDuration: Uint32,
                OutroDuration: Uint32
            }
        },
        root: {
            Animation: DynArray("PackEmoteAnimationV2")
        }
    };
    var V3$u = {
        chunkName: "anim",
        name: "PackEmoteAnimationsV3",
        version: 3,
        definitions: {
            PackEmoteAnimationV3: {
                Token: Uint64,
                Timing: DynArray("PackEmoteTimingV3")
            },
            PackEmoteTimingV3: {
                ModelFile: Fileref(),
                BlendIn: Float32,
                BlendOut: Float32,
                IntroDuration: Uint32,
                LoopDuration: Uint32,
                OutroDuration: Uint32,
                StartOffset: Uint32
            }
        },
        root: {
            Animation: DynArray("PackEmoteAnimationV3")
        }
    };
    var latest$1f = V3$u;
    var definitions$1f = { V0: V0$13, V1: V1$K, V2: V2$z, V3: V3$u };
    var definitionArray$1f = Object.values(definitions$1f);

    var ANIM_3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1f,
        definitions: definitions$1f,
        latest: latest$1f
    });

    var V0$12 = {
        chunkName: "area",
        name: "PackMapAreasV0",
        version: 0,
        definitions: {
            PackMapAreaV0: {
                min: FixedArray(Float32, 3),
                max: FixedArray(Float32, 3),
                internal: FixedArray(Float32, 3),
                external: FixedArray(Float32, 3),
                token: Uint32,
                flags: Uint32
            },
            PackMapPortalV0: {
                portalVerts: DynArray(FixedArray(Float32, 3))
            }
        },
        root: {
            areas: DynArray("PackMapAreaV0"),
            portals: DynArray("PackMapPortalV0")
        }
    };
    var V1$J = {
        chunkName: "area",
        name: "PackMapAreasV1",
        version: 1,
        definitions: {
            PackMapAreaV1: {
                token: Uint64,
                type: Uint8,
                floor: Uint8,
                polygon: "PackMapAreaPolygonV1",
                volume: "PackMapAreaVolumeV1"
            },
            PackMapAreaPolygonV1: {
                points: DynArray(FixedArray(Float32, 3)),
                height: Float32
            },
            PackMapAreaVolumeV1: {
                portals: DynArray("PackMapAreaPortalV1"),
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                pointInterior: FixedArray(Float32, 3),
                pointExterior: FixedArray(Float32, 3)
            },
            PackMapAreaPortalV1: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3)
            }
        },
        root: {
            areas: DynArray("PackMapAreaV1")
        }
    };
    var V2$y = {
        chunkName: "area",
        name: "PackMapAreasV2",
        version: 2,
        definitions: {
            PackMapAreaV2: {
                token: Uint64,
                type: Uint8,
                floor: Uint8,
                flags: Uint32,
                polygon: "PackMapAreaPolygonV2",
                volume: "PackMapAreaVolumeV2"
            },
            PackMapAreaPolygonV2: {
                points: DynArray(FixedArray(Float32, 3)),
                height: Float32
            },
            PackMapAreaVolumeV2: {
                portals: DynArray("PackMapAreaPortalV2"),
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                pointInterior: FixedArray(Float32, 3),
                pointExterior: FixedArray(Float32, 3)
            },
            PackMapAreaPortalV2: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3)
            },
            PackMapAreaToolV2: {
                annotation: RefString16()
            }
        },
        root: {
            areas: DynArray("PackMapAreaV2"),
            areaTools: DynArray("PackMapAreaToolV2")
        }
    };
    var V3$t = {
        chunkName: "area",
        name: "PackMapAreasV3",
        version: 3,
        definitions: {
            PackMapAreaV3: {
                token: Uint64,
                type: Uint8,
                floor: Uint8,
                flags: Uint32,
                polygon: "PackMapAreaPolygonV3",
                volume: "PackMapAreaVolumeV3"
            },
            PackMapAreaPolygonV3: {
                points: DynArray(FixedArray(Float32, 3)),
                height: Float32
            },
            PackMapAreaVolumeV3: {
                portals: DynArray("PackMapAreaPortalV3"),
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                pointInterior: FixedArray(Float32, 3),
                pointExterior: FixedArray(Float32, 3)
            },
            PackMapAreaPortalV3: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3)
            },
            PackMapAreaToolV3: {
                annotation: RefString16(),
                renderOffset: Float32
            }
        },
        root: {
            areas: DynArray("PackMapAreaV3"),
            areaTools: DynArray("PackMapAreaToolV3")
        }
    };
    var V4$j = {
        chunkName: "area",
        name: "PackMapAreasV4",
        version: 4,
        definitions: {
            PackMapAreaV4: {
                token: Uint64,
                type: Uint8,
                floor: Uint8,
                flags: Uint32,
                polygon: "PackMapAreaPolygonV4",
                volume: "PackMapAreaVolumeV4"
            },
            PackMapAreaPolygonV4: {
                points: DynArray(FixedArray(Float32, 3)),
                height: Float32
            },
            PackMapAreaVolumeV4: {
                portals: DynArray("PackMapAreaPortalV4"),
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                pointInterior: FixedArray(Float32, 3),
                pointExterior: FixedArray(Float32, 3)
            },
            PackMapAreaPortalV4: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3)
            },
            PackMapAreaToolV4: {
                annotation: RefString16(),
                renderOffset: Float32
            }
        },
        root: {
            areas: DynArray("PackMapAreaV4"),
            areaTools: DynArray("PackMapAreaToolV4")
        }
    };
    var latest$1e = V4$j;
    var definitions$1e = { V0: V0$12, V1: V1$J, V2: V2$y, V3: V3$t, V4: V4$j };
    var definitionArray$1e = Object.values(definitions$1e);

    var AREA = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1e,
        definitions: definitions$1e,
        latest: latest$1e
    });

    var V0$11 = {
        chunkName: "ARMF",
        name: "PackAssetRootManifestV0",
        version: 0,
        definitions: {
            PackAssetExtraFile: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32,
                fileType: Uint32
            }
        },
        root: {
            buildId: Uint32,
            extraFiles: DynArray("PackAssetExtraFile")
        }
    };
    var V1$I = {
        chunkName: "ARMF",
        name: "PackAssetRootManifest",
        version: 1,
        definitions: {
            PackAssetManifestFile: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32,
                flags: Uint32,
                name: RefString16()
            },
            PackAssetExtraFile: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32,
                fileType: Uint32
            }
        },
        root: {
            buildId: Uint32,
            manifests: DynArray("PackAssetManifestFile"),
            extraFiles: DynArray("PackAssetExtraFile")
        }
    };
    var latest$1d = V1$I;
    var definitions$1d = { V0: V0$11, V1: V1$I };
    var definitionArray$1d = Object.values(definitions$1d);

    var ARMF = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1d,
        definitions: definitions$1d,
        latest: latest$1d
    });

    var V0$10 = {
        chunkName: "ASND",
        name: "WaveformDataV0",
        version: 0,
        root: {
            data: DynArray(Uint8),
            flags: Uint32,
            length: Float32,
            noteBase: Uint8,
            noteHigh: Uint8,
            noteLow: Uint8,
            numChannels: Uint8,
            numSamples: Uint32,
            waveformDataType: Uint8
        }
    };
    var V1$H = {
        chunkName: "ASND",
        name: "WaveformDataV1",
        version: 1,
        root: {
            length: Float32,
            offset: Float32,
            crc: Uint32,
            numSamples: Uint32,
            loopStart: Uint32,
            loopEnd: Uint32,
            flags: Uint32,
            format: Uint8,
            noteBase: Uint8,
            noteHigh: Uint8,
            noteLow: Uint8,
            numChannels: Uint8,
            reserved1: Uint8,
            reserved2: Uint8,
            reserved3: Uint8,
            audioData: DynArray(Uint8),
            otherData: DynArray(Uint8)
        }
    };
    var V2$x = {
        chunkName: "ASND",
        name: "WaveformDataV2",
        version: 2,
        definitions: {
            ReservedWaveformDataV2: {
                reserved1: Uint32,
                reserved2: Uint32,
                reserved3: Uint32,
                reserved4: Uint32
            }
        },
        root: {
            length: Float32,
            offset: Float32,
            reservedData: Pointer("ReservedWaveformDataV2"),
            reserved1: Uint32,
            reserved2: Uint32,
            crc: Uint32,
            numSamples: Uint32,
            loopStart: Uint32,
            loopEnd: Uint32,
            flags: Uint32,
            format: Uint8,
            reserved3: Uint8,
            reserved4: Uint8,
            reserved5: Uint8,
            numChannels: Uint8,
            reserved6: Uint8,
            reserved7: Uint8,
            reserved8: Uint8,
            audioData: DynArray(Uint8),
            otherData: DynArray(Uint8)
        }
    };
    var latest$1c = V2$x;
    var definitions$1c = { V0: V0$10, V1: V1$H, V2: V2$x };
    var definitionArray$1c = Object.values(definitions$1c);

    var ASND = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1c,
        definitions: definitions$1c,
        latest: latest$1c
    });

    var V0$$ = {
        chunkName: "audi",
        name: "MapAudio",
        version: 0,
        root: {
            globalAmbientScriptFilename: Filename(),
            globalMusicScriptFilename: Filename()
        }
    };
    var V1$G = {
        chunkName: "audi",
        name: "MapAudio",
        version: 1,
        definitions: {
            PackMapAudioRegion: {
                regionType: Uint32,
                overrideMode: Uint32,
                filenameSource: Filename(),
                filenameAmbient: Filename(),
                filenameMusic: Filename(),
                points: DynArray(FixedArray(Float32, 3)),
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 3),
                fadeBand: Float32,
                height: Float32,
                radius: Float32
            }
        },
        root: {
            globalAmbientScriptFilename: Filename(),
            globalMusicScriptFilename: Filename(),
            audioRegions: DynArray("PackMapAudioRegion")
        }
    };
    var V2$w = {
        chunkName: "audi",
        name: "MapAudio",
        version: 2,
        definitions: {
            PackMapAudioRegion: {
                regionType: Uint32,
                overrideMode: Uint32,
                filenameSource: Filename(),
                filenameAmbient: Filename(),
                filenameMusic: Filename(),
                points: DynArray(FixedArray(Float32, 3)),
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 3),
                fadeBand: Float32,
                height: Float32,
                radius: Float32
            }
        },
        root: {
            globalAmbientScriptFilename: Filename(),
            globalMusicScriptFilename: Filename(),
            globalAmbientUnderwaterScriptFilename: Filename(),
            globalMusicUnderwaterScriptFilename: Filename(),
            audioRegions: DynArray("PackMapAudioRegion")
        }
    };
    var V3$s = {
        chunkName: "audi",
        name: "MapAudio",
        version: 3,
        definitions: {
            PackMapAudioRegion: {
                regionType: Uint32,
                overrideMode: Uint32,
                filenameSourceDay: Filename(),
                filenameAmbientDay: Filename(),
                filenameMusicDay: Filename(),
                filenameSourceNight: Filename(),
                filenameAmbientNight: Filename(),
                filenameMusicNight: Filename(),
                points: DynArray(FixedArray(Float32, 3)),
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 3),
                fadeBand: Float32,
                height: Float32,
                radius: Float32
            }
        },
        root: {
            filenameAmbientDaySurface: Filename(),
            filenameMusicDaySurface: Filename(),
            filenameAmbientDayUnderwater: Filename(),
            filenameMusicDayUnderwater: Filename(),
            filenameAmbientNightSurface: Filename(),
            filenameMusicNightSurface: Filename(),
            filenameAmbientNightUnderwater: Filename(),
            filenameMusicNightUnderwater: Filename(),
            audioRegions: DynArray("PackMapAudioRegion")
        }
    };
    var V4$i = {
        chunkName: "audi",
        name: "MapAudio",
        version: 4,
        definitions: {
            PackMapAudioRegion: {
                regionType: Uint32,
                overrideMode: Uint32,
                filenameSourceDay: Filename(),
                filenameAmbientDay: Filename(),
                filenameMusicDay: Filename(),
                filenameSourceNight: Filename(),
                filenameAmbientNight: Filename(),
                filenameMusicNight: Filename(),
                points: DynArray(FixedArray(Float32, 3)),
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 3),
                fadeBand: Float32,
                height: Float32,
                radius: Float32,
                guid: Uint64
            }
        },
        root: {
            filenameAmbientDaySurface: Filename(),
            filenameMusicDaySurface: Filename(),
            filenameAmbientDayUnderwater: Filename(),
            filenameMusicDayUnderwater: Filename(),
            filenameAmbientNightSurface: Filename(),
            filenameMusicNightSurface: Filename(),
            filenameAmbientNightUnderwater: Filename(),
            filenameMusicNightUnderwater: Filename(),
            audioRegions: DynArray("PackMapAudioRegion")
        }
    };
    var V5$f = {
        chunkName: "audi",
        name: "MapAudio",
        version: 5,
        definitions: {
            PackMapAudioRegion: {
                regionType: Uint32,
                overrideMode: Uint32,
                filenameSourceDay: Filename(),
                filenameAmbientDay: Filename(),
                filenameSourceNight: Filename(),
                filenameAmbientNight: Filename(),
                points: DynArray(FixedArray(Float32, 3)),
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 3),
                fadeBand: Float32,
                height: Float32,
                radius: Float32,
                guid: Uint64,
                flags: Uint32
            }
        },
        root: {
            filenameAmbientDaySurface: Filename(),
            filenameAmbientDayUnderwater: Filename(),
            filenameAmbientNightSurface: Filename(),
            filenameAmbientNightUnderwater: Filename(),
            audioRegions: DynArray("PackMapAudioRegion")
        }
    };
    var V6$f = {
        chunkName: "audi",
        name: "MapAudio",
        version: 6,
        definitions: {
            PackMapAudioRegion: {
                regionType: Uint32,
                overrideMode: Uint32,
                filenameSourceDay: Filename(),
                filenameAmbientDay: Filename(),
                filenameSourceNight: Filename(),
                filenameAmbientNight: Filename(),
                filenameInterior: Filename(),
                exteriorVolume: Float32,
                priority: Uint32,
                points: DynArray(FixedArray(Float32, 3)),
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 3),
                fadeBand: Float32,
                height: Float32,
                radius: Float32,
                guid: Uint64,
                flags: Uint32
            }
        },
        root: {
            filenameAmbientDaySurface: Filename(),
            filenameAmbientDayUnderwater: Filename(),
            filenameAmbientNightSurface: Filename(),
            filenameAmbientNightUnderwater: Filename(),
            audioRegions: DynArray("PackMapAudioRegion")
        }
    };
    var V7$c = {
        chunkName: "audi",
        name: "MapAudio",
        version: 7,
        definitions: {
            PackMapAudioRegion: {
                regionType: Uint32,
                overrideMode: Uint32,
                filenameSourceDay: Filename(),
                filenameAmbientDay: Filename(),
                filenameSourceNight: Filename(),
                filenameAmbientNight: Filename(),
                filenameInterior: Filename(),
                exteriorVolume: Float32,
                priority: Uint32,
                points: DynArray(FixedArray(Float32, 3)),
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 3),
                fadeBand: Float32,
                height: Float32,
                radius: Float32,
                guid: Uint64,
                flags: Uint32
            },
            PackMapAudioRegionTool: {
                annotation: RefString16()
            }
        },
        root: {
            filenameAmbientDaySurface: Filename(),
            filenameAmbientDayUnderwater: Filename(),
            filenameAmbientNightSurface: Filename(),
            filenameAmbientNightUnderwater: Filename(),
            audioRegions: DynArray("PackMapAudioRegion"),
            audioRegionTools: DynArray("PackMapAudioRegionTool")
        }
    };
    var V8$c = {
        chunkName: "audi",
        name: "MapAudio",
        version: 8,
        definitions: {
            PackMapAudioRegion: {
                regionType: Uint32,
                overrideMode: Uint32,
                filenameSourceDay: Filename(),
                filenameAmbientDay: Filename(),
                filenameSourceNight: Filename(),
                filenameAmbientNight: Filename(),
                filenameInterior: Filename(),
                exteriorVolume: Float32,
                priority: Uint32,
                points: DynArray(FixedArray(Float32, 3)),
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 3),
                fadeBand: Float32,
                height: Float32,
                radius: Float32,
                guid: Uint64,
                flags: Uint32
            },
            PackMapAudioRegionTool: {
                annotation: RefString16()
            },
            PackMapAudioDep: {
                dependency: Filename(),
                flags: Uint32
            }
        },
        root: {
            filenameAmbientDaySurface: Filename(),
            filenameAmbientDayUnderwater: Filename(),
            filenameAmbientNightSurface: Filename(),
            filenameAmbientNightUnderwater: Filename(),
            audioRegions: DynArray("PackMapAudioRegion"),
            audioRegionTools: DynArray("PackMapAudioRegionTool"),
            audioDepArray: DynArray("PackMapAudioDep")
        }
    };
    var latest$1b = V8$c;
    var definitions$1b = { V0: V0$$, V1: V1$G, V2: V2$w, V3: V3$s, V4: V4$i, V5: V5$f, V6: V6$f, V7: V7$c, V8: V8$c };
    var definitionArray$1b = Object.values(definitions$1b);

    var AUDI = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1b,
        definitions: definitions$1b,
        latest: latest$1b
    });

    var V0$_ = {
        chunkName: "BGFX",
        name: "AmatGfxMaterial",
        version: 0,
        definitions: {
            AmatGfxShader: {
                isPixelShader: Uint32,
                dxShader: "AmatGfxShaderBinary",
                osxShader: "AmatGfxShaderBinary"
            },
            AmatGfxShaderBinary: {
                data: DynArray(Uint8),
                constants: DynArray("AmatGfxShaderConstant"),
                samplers: DynArray("AmatGfxSamplerConstant")
            },
            AmatGfxShaderConstant: {
                token: Uint32
            },
            AmatGfxSamplerConstant: {
                token: Uint64,
                stateIndex: Uint32,
                textureIndex: Uint32,
                textureSlot: Uint32
            },
            AmatGfxSamplerState: {
                state: Uint32
            },
            AmatGfxTechnique: {
                quality: Uint32,
                passes: DynArray("AmatGfxPass")
            },
            AmatGfxPass: {
                effects: DynArray("AmatGfxEffect")
            },
            AmatGfxEffect: {
                token: Uint64,
                renderState: Uint64,
                shaderPassFlags: Uint32,
                pixelShaderIndex: Uint32,
                vertexShaderVariants: DynArray("AmatGfxVertexShaderVariant")
            },
            AmatGfxVertexShaderVariant: {
                variant: Uint32,
                vertexShaderIndex: Uint32
            }
        },
        root: {
            shaders: DynArray("AmatGfxShader"),
            samplers: DynArray("AmatGfxSamplerState"),
            techniques: DynArray("AmatGfxTechnique")
        }
    };
    var V1$F = {
        chunkName: "BGFX",
        name: "AmatGfxMaterial",
        version: 1,
        definitions: {
            AmatGfxShader: {
                isPixelShader: Uint32,
                dxShader: "AmatGfxShaderBinary",
                osxShader: "AmatGfxShaderBinary"
            },
            AmatGfxShaderBinary: {
                data: DynArray(Uint8),
                constants: DynArray("AmatGfxShaderConstant"),
                samplers: DynArray("AmatGfxSamplerConstant")
            },
            AmatGfxShaderConstant: {
                token: Uint32
            },
            AmatGfxSamplerConstant: {
                token: Uint64,
                stateIndex: Uint32,
                textureIndex: Uint32,
                textureSlot: Uint32
            },
            AmatGfxSamplerState: {
                state: Uint32
            },
            AmatGfxTechnique: {
                quality: Uint32,
                passes: DynArray("AmatGfxPass")
            },
            AmatGfxPass: {
                effects: DynArray("AmatGfxEffect")
            },
            AmatGfxEffect: {
                token: Uint64,
                renderState: Uint64,
                shaderPassFlags: Uint32,
                pixelShaderIndex: Uint32,
                vertexShaderVariants: DynArray("AmatGfxVertexShaderVariant")
            },
            AmatGfxVertexShaderVariant: {
                variant: Uint32,
                vertexShaderIndex: Uint32
            }
        },
        root: {
            shaders: DynArray("AmatGfxShader"),
            samplers: DynArray("AmatGfxSamplerState"),
            techniques: DynArray("AmatGfxTechnique")
        }
    };
    var latest$1a = V1$F;
    var definitions$1a = { V0: V0$_, V1: V1$F };
    var definitionArray$1a = Object.values(definitions$1a);

    var BGFX = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1a,
        definitions: definitions$1a,
        latest: latest$1a
    });

    var V0$Z = {
        chunkName: "BIDX",
        name: "BankIndexDataV0",
        version: 0,
        definitions: {
            BankLanguageDataV0: {
                bankFileName: DynArray("BankFileNameDataV0")
            },
            BankFileNameDataV0: {
                fileName: Filename()
            }
        },
        root: {
            bankLanguage: DynArray("BankLanguageDataV0")
        }
    };
    var latest$19 = V0$Z;
    var definitions$19 = { V0: V0$Z };
    var definitionArray$19 = Object.values(definitions$19);

    var BIDX = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$19,
        definitions: definitions$19,
        latest: latest$19
    });

    var V0$Y = {
        chunkName: "BKCK",
        name: "BankFileDataV0",
        version: 0,
        definitions: {
            AsndFileDataV0: {
                voiceId: Uint32,
                flags: Uint32,
                reserved1: Uint32,
                reserved2: Uint32,
                length: Float32,
                offset: Float32,
                audioData: DynArray(Uint8)
            }
        },
        root: {
            reserved1: Uint32,
            reserved2: Uint32,
            asndFile: DynArray("AsndFileDataV0")
        }
    };
    var V1$E = {
        chunkName: "BKCK",
        name: "BankFileDataV1",
        version: 1,
        definitions: {
            AsndFileDataV1: {
                voiceId: Uint32,
                flags: Uint32,
                reserved1: Uint32,
                reserved2: Uint32,
                length: Float32,
                offset: Float32,
                audioData: DynArray(Uint8)
            }
        },
        root: {
            reserved1: Uint32,
            reserved2: Uint32,
            asndFile: DynArray("AsndFileDataV1")
        }
    };
    var V2$v = {
        chunkName: "BKCK",
        name: "BankFileDataV2",
        version: 2,
        definitions: {
            AsndFileDataV2: {
                voiceId: Uint32,
                flags: Uint32,
                reserved1: Uint32,
                reserved2: Uint32,
                reserved3: Uint32,
                reserved4: Uint32,
                length: Float32,
                offset: Float32,
                reserved5: Uint8,
                reserved6: Uint8,
                reserved7: Uint8,
                reserved8: Uint8,
                audioData: DynArray(Uint8)
            },
            ReservedBankDataV2: {
                reserved1: Uint32,
                reserved2: Uint32,
                reserved3: Uint32,
                reserved4: Uint32
            }
        },
        root: {
            reserved1: Uint32,
            reserved2: Uint32,
            reserved3: Uint32,
            reserved4: Uint32,
            asndFile: DynArray("AsndFileDataV2"),
            reservedData: Pointer("ReservedBankDataV2")
        }
    };
    var latest$18 = V2$v;
    var definitions$18 = { V0: V0$Y, V1: V1$E, V2: V2$v };
    var definitionArray$18 = Object.values(definitions$18);

    var BKCK = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$18,
        definitions: definitions$18,
        latest: latest$18
    });

    var V0$X = {
        chunkName: "bloc",
        name: "PackMapBlock",
        version: 0,
        definitions: {
            PackMapBlockRecord: {
                filename: Filename()
            }
        },
        root: {
            blockDims: FixedArray(Uint32, 2),
            blockRecordArray: DynArray("PackMapBlockRecord")
        }
    };
    var latest$17 = V0$X;
    var definitions$17 = { V0: V0$X };
    var definitionArray$17 = Object.values(definitions$17);

    var BLOC = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$17,
        definitions: definitions$17,
        latest: latest$17
    });

    var V0$W = {
        chunkName: "cg15",
        name: "PackMapCoarseNavGraphV0",
        version: 0,
        definitions: {
            PackMapCoarseNavGraphSectionV0: {
                sectionUid: Uint32,
                nodes: DynArray("PackMapCoarseNavGraphNodeV0"),
                nodeConnections: DynArray("PackMapCoarseNavGraphNodeConnectionsV0")
            },
            PackMapCoarseNavGraphNodeV0: {
                materialId: Uint32,
                bottomLeftBound: FixedArray(Float32, 3),
                topRightBound: FixedArray(Float32, 3),
                centroid: FixedArray(Float32, 3),
                faces: DynArray(Uint32)
            },
            PackMapCoarseNavGraphNodeConnectionsV0: {
                nodeIndex: Uint32,
                connections: DynArray("PackMapCoarseNavGraphConnectionV0")
            },
            PackMapCoarseNavGraphConnectionV0: {
                targetSectionUid: Uint32,
                targetNodeIndex: Uint32,
                edges: DynArray("PackMapCoarseNavGraphConnectionEdgeV0")
            },
            PackMapCoarseNavGraphConnectionEdgeV0: {
                edgeStart: FixedArray(Float32, 3),
                edgeEnd: FixedArray(Float32, 3)
            }
        },
        root: {
            sections: DynArray("PackMapCoarseNavGraphSectionV0")
        }
    };
    var latest$16 = V0$W;
    var definitions$16 = { V0: V0$W };
    var definitionArray$16 = Object.values(definitions$16);

    var CG15 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$16,
        definitions: definitions$16,
        latest: latest$16
    });

    var V0$V = {
        chunkName: "cnfg",
        name: "PackAnimConfigV0",
        version: 0,
        definitions: {
            PackAnimAimIKConfigV0: {
                name: Uint64,
                boneEye: Uint64,
                boneSight: Uint64,
                endEffector: Uint64,
                frustumHAngle: Float32,
                frustumVAngle: Float32,
                frustumLength: Float32,
                targetVelocityConstraint: Float32,
                bones: DynArray("PackAnimAimIKBoneV0"),
                targets: DynArray(Uint64),
                flags: Uint8
            },
            PackAnimAimIKBoneV0: {
                boneToken: Uint64,
                clampAngle: Float32,
                weight: Float32,
                smoothingWeight: Float32
            },
            PackAnimIKChainGroupV0: {
                name: Uint64,
                chains: DynArray("PackAnimIKChainV0")
            },
            PackAnimIKChainV0: {
                name: Uint64,
                smoothWeight: FixedArray(Float32, 3),
                hyperExtensionStart: Float32,
                hyperExtensionScale: Float32,
                bones: DynArray(Uint64),
                targetRaycastInfo: Pointer("PackAnimIKRaycastTargetV0"),
                targetMode: Uint8,
                chainType: Uint8
            },
            PackAnimIKRaycastTargetV0: {
                flags: Uint32,
                direction: FixedArray(Float32, 3)
            }
        },
        root: {
            aimIKConfigs: DynArray("PackAnimAimIKConfigV0"),
            chainGroups: DynArray("PackAnimIKChainGroupV0")
        }
    };
    var latest$15 = V0$V;
    var definitions$15 = { V0: V0$V };
    var definitionArray$15 = Object.values(definitions$15);

    var CNFG = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$15,
        definitions: definitions$15,
        latest: latest$15
    });

    var V0$U = {
        chunkName: "COLL",
        name: "ModelFileCollisionV0",
        version: 0,
        definitions: {
            ModelCollisionMeshV0: {
                animationSequence: Uint64,
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionCloudV0: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelCollisionCubeV0: {
                transform: FixedArray(FixedArray(Float32, 4), 3),
                surface: Uint8
            },
            ModelCollisionSphereV0: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionSurfaceV0: {
                tokens: DynArray(Uint64)
            }
        },
        root: {
            meshes: DynArray("ModelCollisionMeshV0"),
            clouds: DynArray("ModelCollisionCloudV0"),
            cubes: DynArray("ModelCollisionCubeV0"),
            spheres: DynArray("ModelCollisionSphereV0"),
            surfaces: DynArray("ModelCollisionSurfaceV0")
        }
    };
    var V1$D = {
        chunkName: "COLL",
        name: "ModelFileCollisionV1",
        version: 1,
        definitions: {
            ModelCollisionMeshV1: {
                animationSequences: DynArray(Uint64),
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionCloudV1: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelCollisionCubeV1: {
                transform: FixedArray(FixedArray(Float32, 4), 3),
                surface: Uint8
            },
            ModelCollisionSphereV1: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionSurfaceV1: {
                tokens: DynArray(Uint64)
            }
        },
        root: {
            meshes: DynArray("ModelCollisionMeshV1"),
            clouds: DynArray("ModelCollisionCloudV1"),
            cubes: DynArray("ModelCollisionCubeV1"),
            spheres: DynArray("ModelCollisionSphereV1"),
            surfaces: DynArray("ModelCollisionSurfaceV1")
        }
    };
    var V2$u = {
        chunkName: "COLL",
        name: "ModelFileCollisionV8",
        version: 2,
        definitions: {
            ModelCollisionMeshV8: {
                animationSequences: DynArray(Uint64),
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionCloudV8: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelCollisionCubeV8: {
                transform: FixedArray(FixedArray(Float32, 4), 3),
                surface: Uint8
            },
            ModelCollisionSphereV8: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionCapsuleV8: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32,
                surface: Uint8
            },
            ModelCollisionSurfaceV8: {
                tokens: DynArray(Uint64)
            }
        },
        root: {
            meshes: DynArray("ModelCollisionMeshV8"),
            clouds: DynArray("ModelCollisionCloudV8"),
            cubes: DynArray("ModelCollisionCubeV8"),
            spheres: DynArray("ModelCollisionSphereV8"),
            capsules: DynArray("ModelCollisionCapsuleV8"),
            surfaces: DynArray("ModelCollisionSurfaceV8")
        }
    };
    var V3$r = {
        chunkName: "COLL",
        name: "ModelFileCollisionV9",
        version: 3,
        definitions: {
            ModelCollisionAnimationV9: {
                animation: Uint64,
                objects: DynArray("ModelCollisionAnimatedObjectV9")
            },
            ModelCollisionAnimatedObjectV9: {
                shapeIndices: DynArray(Uint32),
                keyFrames: DynArray("ModelCollisionKeyFrameV9")
            },
            ModelCollisionKeyFrameV9: {
                time: Float32,
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 4)
            },
            ModelCollisionMeshV9: {
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionBoxV9: {
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                surface: Uint8
            },
            ModelCollisionSphereV9: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionCapsuleV9: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32,
                surface: Uint8
            },
            ModelCollisionSurfaceV9: {
                tokens: DynArray(Uint64)
            }
        },
        root: {
            animations: DynArray("ModelCollisionAnimationV9"),
            meshes: DynArray("ModelCollisionMeshV9"),
            boxes: DynArray("ModelCollisionBoxV9"),
            spheres: DynArray("ModelCollisionSphereV9"),
            capsules: DynArray("ModelCollisionCapsuleV9"),
            surfaces: DynArray("ModelCollisionSurfaceV9")
        }
    };
    var V4$h = {
        chunkName: "COLL",
        name: "ModelFileCollisionV10",
        version: 4,
        definitions: {
            ModelCollisionAnimationV10: {
                animation: Uint64,
                objects: DynArray("ModelCollisionAnimatedObjectV10"),
                targetPoints: DynArray(FixedArray(Float32, 3))
            },
            ModelCollisionAnimatedObjectV10: {
                shapeIndices: DynArray(Uint32),
                keyFrames: DynArray("ModelCollisionKeyFrameV10")
            },
            ModelCollisionKeyFrameV10: {
                time: Float32,
                position: FixedArray(Float32, 3),
                orientation: FixedArray(Float32, 4)
            },
            ModelCollisionMeshV10: {
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8),
                navSeedPoints: DynArray(FixedArray(Float32, 3))
            },
            ModelCollisionBoxV10: {
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                surface: Uint8
            },
            ModelCollisionSphereV10: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionCapsuleV10: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32,
                surface: Uint8
            },
            ModelCollisionSurfaceV10: {
                tokens: DynArray(Uint64)
            }
        },
        root: {
            animations: DynArray("ModelCollisionAnimationV10"),
            meshes: DynArray("ModelCollisionMeshV10"),
            boxes: DynArray("ModelCollisionBoxV10"),
            spheres: DynArray("ModelCollisionSphereV10"),
            capsules: DynArray("ModelCollisionCapsuleV10"),
            surfaces: DynArray("ModelCollisionSurfaceV10")
        }
    };
    var latest$14 = V4$h;
    var definitions$14 = { V0: V0$U, V1: V1$D, V2: V2$u, V3: V3$r, V4: V4$h };
    var definitionArray$14 = Object.values(definitions$14);

    var COLL = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$14,
        definitions: definitions$14,
        latest: latest$14
    });

    var V0$T = {
        chunkName: "comp",
        name: "PackCompositeV0",
        version: 0,
        definitions: {
            PackCompositeBlitRectSetV0: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint32),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV0: {
                name: RefString16(),
                nameToken: Uint64,
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV0"),
                hairStyles: DynArray(Uint64),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV0"),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV0")
            },
            PackCompositeFileDataV0: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskClothSkin: Filename(),
                maskLeather: Filename(),
                maskMetal: Filename(),
                maskGlow: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV0: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename()
            },
            PackCompositeVariantV0: {
                components: DynArray("PackCompositeVariantComponentV0"),
                hairColor: "PackCompositeColorV0",
                patternColor: "PackCompositeColorV0",
                skinColor: "PackCompositeColorV0",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV0: {
                nameToken: Uint64,
                clothColor: "PackCompositeColorV0",
                leatherColor: "PackCompositeColorV0",
                metalColor: "PackCompositeColorV0"
            },
            PackCompositeColorV0: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            blitRects: DynArray("PackCompositeBlitRectSetV0"),
            raceSexData: DynArray("PackCompositeRaceDataV0")
        }
    };
    var V1$C = {
        chunkName: "comp",
        name: "PackCompositeV1",
        version: 1,
        definitions: {
            PackCompositeBlitRectSetV1: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint32),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV1: {
                name: RefString16(),
                nameToken: Uint64,
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV1"),
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV1"),
                skinColorPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV1")
            },
            PackCompositeFileDataV1: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV1: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename()
            },
            PackCompositeVariantV1: {
                components: DynArray("PackCompositeVariantComponentV1"),
                hairColor: "PackCompositeColorV1",
                patternColor: "PackCompositeColorV1",
                skinColor: "PackCompositeColorV1",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV1: {
                nameToken: Uint64,
                clothColor: "PackCompositeColorV1",
                leatherColor: "PackCompositeColorV1",
                metalColor: "PackCompositeColorV1"
            },
            PackCompositeColorV1: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            blitRects: DynArray("PackCompositeBlitRectSetV1"),
            raceSexData: DynArray("PackCompositeRaceDataV1")
        }
    };
    var V2$t = {
        chunkName: "comp",
        name: "PackCompositeV2",
        version: 2,
        definitions: {
            PackCompositeBlitRectSetV2: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint32),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV2: {
                name: RefString16(),
                nameToken: Uint64,
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV2"),
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV2"),
                skinColorPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV2")
            },
            PackCompositeFileDataV2: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV2: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename()
            },
            PackCompositeVariantV2: {
                components: DynArray("PackCompositeVariantComponentV2"),
                hairColor: "PackCompositeColorV2",
                patternColor: "PackCompositeColorV2",
                skinColor: "PackCompositeColorV2",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV2: {
                nameToken: Uint64,
                clothColor: "PackCompositeColorV2",
                leatherColor: "PackCompositeColorV2",
                metalColor: "PackCompositeColorV2"
            },
            PackCompositeColorV2: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            blitRects: DynArray("PackCompositeBlitRectSetV2"),
            raceSexData: DynArray("PackCompositeRaceDataV2")
        }
    };
    var V3$q = {
        chunkName: "comp",
        name: "PackCompositeV3",
        version: 3,
        definitions: {
            PackCompositeBlitRectSetV3: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint32),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV3: {
                name: RefString16(),
                nameToken: Uint64,
                beard: DynArray(Uint64),
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV3"),
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV3"),
                skinColorPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV3")
            },
            PackCompositeFileDataV3: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV3: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename()
            },
            PackCompositeVariantV3: {
                components: DynArray("PackCompositeVariantComponentV3"),
                hairColor: "PackCompositeColorV3",
                patternColor: "PackCompositeColorV3",
                skinColor: "PackCompositeColorV3",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV3: {
                nameToken: Uint64,
                clothColor: "PackCompositeColorV3",
                leatherColor: "PackCompositeColorV3",
                metalColor: "PackCompositeColorV3"
            },
            PackCompositeColorV3: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            blitRects: DynArray("PackCompositeBlitRectSetV3"),
            raceSexData: DynArray("PackCompositeRaceDataV3")
        }
    };
    var V4$g = {
        chunkName: "comp",
        name: "PackCompositeV4",
        version: 4,
        definitions: {
            PackCompositeBlitRectSetV4: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV4: {
                name: RefString16(),
                nameToken: Uint64,
                beard: DynArray(Uint64),
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV4"),
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV4"),
                skinColorPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV4")
            },
            PackCompositeFileDataV4: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV4: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename()
            },
            PackCompositeVariantV4: {
                components: DynArray("PackCompositeVariantComponentV4"),
                hairColor: "PackCompositeColorV4",
                patternColor: "PackCompositeColorV4",
                skinColor: "PackCompositeColorV4",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV4: {
                nameToken: Uint64,
                clothColor: "PackCompositeColorV4",
                leatherColor: "PackCompositeColorV4",
                metalColor: "PackCompositeColorV4"
            },
            PackCompositeColorV4: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV4"),
            raceSexData: DynArray("PackCompositeRaceDataV4")
        }
    };
    var V5$e = {
        chunkName: "comp",
        name: "PackCompositeV5",
        version: 5,
        definitions: {
            PackCompositeBlitRectSetV5: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV5: {
                name: RefString16(),
                nameToken: Uint64,
                beard: DynArray(Uint64),
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV5"),
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV5"),
                skinColorPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV5")
            },
            PackCompositeFileDataV5: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV5: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename()
            },
            PackCompositeVariantV5: {
                token: Uint64,
                components: DynArray("PackCompositeVariantComponentV5"),
                hairColor: "PackCompositeColorV5",
                hairColor2: "PackCompositeColorV5",
                patternColor: "PackCompositeColorV5",
                skinColor: "PackCompositeColorV5",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV5: {
                nameToken: Uint64,
                color0: "PackCompositeColorV5",
                color1: "PackCompositeColorV5",
                color2: "PackCompositeColorV5",
                color3: "PackCompositeColorV5"
            },
            PackCompositeColorV5: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV5"),
            raceSexData: DynArray("PackCompositeRaceDataV5")
        }
    };
    var V6$e = {
        chunkName: "comp",
        name: "PackCompositeV6",
        version: 6,
        definitions: {
            PackCompositeBlitRectSetV6: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV6: {
                name: RefString16(),
                nameToken: Uint64,
                beard: DynArray(Uint64),
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV6"),
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV6"),
                skinColorPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV6")
            },
            PackCompositeFileDataV6: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV6: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV6: {
                token: Uint64,
                components: DynArray("PackCompositeVariantComponentV6"),
                hairColor: "PackCompositeColorV6",
                hairColor2: "PackCompositeColorV6",
                patternColor: "PackCompositeColorV6",
                skinColor: "PackCompositeColorV6",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV6: {
                nameToken: Uint64,
                color0: "PackCompositeColorV6",
                color1: "PackCompositeColorV6",
                color2: "PackCompositeColorV6",
                color3: "PackCompositeColorV6"
            },
            PackCompositeColorV6: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV6"),
            raceSexData: DynArray("PackCompositeRaceDataV6")
        }
    };
    var V7$b = {
        chunkName: "comp",
        name: "PackCompositeV7",
        version: 7,
        definitions: {
            PackCompositeBlitRectSetV7: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV7: {
                name: RefString16(),
                nameToken: Uint64,
                beard: DynArray(Uint64),
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV7"),
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV7"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV7")
            },
            PackCompositeFileDataV7: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV7: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV7: {
                token: Uint64,
                components: DynArray("PackCompositeVariantComponentV7"),
                hairColor: "PackCompositeColorV7",
                hairColor2: "PackCompositeColorV7",
                patternColor: "PackCompositeColorV7",
                skinColor: "PackCompositeColorV7",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV7: {
                nameToken: Uint64,
                color0: "PackCompositeColorV7",
                color1: "PackCompositeColorV7",
                color2: "PackCompositeColorV7",
                color3: "PackCompositeColorV7"
            },
            PackCompositeColorV7: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV7"),
            raceSexData: DynArray("PackCompositeRaceDataV7")
        }
    };
    var V8$b = {
        chunkName: "comp",
        name: "PackCompositeV8",
        version: 8,
        definitions: {
            PackCompositeBlitRectSetV8: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV8: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV8"),
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV8"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV8")
            },
            PackCompositeFileDataV8: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV8: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV8: {
                token: Uint64,
                components: DynArray("PackCompositeVariantComponentV8"),
                hairColor: "PackCompositeColorV8",
                hairColor2: "PackCompositeColorV8",
                patternColor: "PackCompositeColorV8",
                skinColor: "PackCompositeColorV8",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV8: {
                nameToken: Uint64,
                color0: "PackCompositeColorV8",
                color1: "PackCompositeColorV8",
                color2: "PackCompositeColorV8",
                color3: "PackCompositeColorV8"
            },
            PackCompositeColorV8: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV8"),
            raceSexData: DynArray("PackCompositeRaceDataV8")
        }
    };
    var V9$a = {
        chunkName: "comp",
        name: "PackCompositeV9",
        version: 9,
        definitions: {
            PackCompositeBlitRectSetV9: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV9: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV9"),
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV9"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV9")
            },
            PackCompositeFileDataV9: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV9: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV9: {
                token: Uint64,
                components: DynArray("PackCompositeVariantComponentV9"),
                hairColor: "PackCompositeColorV9",
                hairColor2: "PackCompositeColorV9",
                patternColor: "PackCompositeColorV9",
                skinColor: "PackCompositeColorV9",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV9: {
                nameToken: Uint64,
                color0: "PackCompositeColorV9",
                color1: "PackCompositeColorV9",
                color2: "PackCompositeColorV9",
                color3: "PackCompositeColorV9"
            },
            PackCompositeColorV9: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV9"),
            raceSexData: DynArray("PackCompositeRaceDataV9"),
            configVersion: Uint16
        }
    };
    var V10$b = {
        chunkName: "comp",
        name: "PackCompositeV10",
        version: 10,
        definitions: {
            PackCompositeBlitRectSetV10: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeRaceDataV10: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV10"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV10"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV10")
            },
            PackCompositeFileDataV10: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV10: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV10: {
                token: Uint64,
                components: DynArray("PackCompositeVariantComponentV10"),
                hairColor: "PackCompositeColorV10",
                hairColor2: "PackCompositeColorV10",
                patternColor: "PackCompositeColorV10",
                skinColor: "PackCompositeColorV10",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV10: {
                nameToken: Uint64,
                color0: "PackCompositeColorV10",
                color1: "PackCompositeColorV10",
                color2: "PackCompositeColorV10",
                color3: "PackCompositeColorV10"
            },
            PackCompositeColorV10: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV10"),
            raceSexData: DynArray("PackCompositeRaceDataV10"),
            configVersion: Uint16
        }
    };
    var V11$a = {
        chunkName: "comp",
        name: "PackCompositeV11",
        version: 11,
        definitions: {
            PackCompositeBlitRectSetV11: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeBoneScaleV11: {
                BodyRegion: DynArray("PackCompositeBoneScaleRegionV11")
            },
            PackCompositeBoneScaleRegionV11: {
                value: Float32,
                Bone: DynArray("PackCompositeBoneScaleParamV11")
            },
            PackCompositeBoneScaleParamV11: {
                name: Uint64,
                flags: Uint8,
                max: Float32,
                min: Float32,
                rotate: FixedArray(Float32, 3),
                scale: FixedArray(Float32, 3),
                translate: FixedArray(Float32, 3)
            },
            PackCompositeRaceDataV11: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                ears: DynArray(Uint64),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV11"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV11"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV11")
            },
            PackCompositeFileDataV11: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV11: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV11: {
                token: Uint64,
                boneScaleIndex: Uint32,
                components: DynArray("PackCompositeVariantComponentV11"),
                hairColor: "PackCompositeColorV11",
                hairColor2: "PackCompositeColorV11",
                patternColor: "PackCompositeColorV11",
                skinColor: "PackCompositeColorV11",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV11: {
                nameToken: Uint64,
                color0: "PackCompositeColorV11",
                color1: "PackCompositeColorV11",
                color2: "PackCompositeColorV11",
                color3: "PackCompositeColorV11"
            },
            PackCompositeColorV11: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV11"),
            boneScales: DynArray("PackCompositeBoneScaleV11"),
            raceSexData: DynArray("PackCompositeRaceDataV11"),
            configVersion: Uint16
        }
    };
    var V12$9 = {
        chunkName: "comp",
        name: "PackCompositeV12",
        version: 12,
        definitions: {
            PackCompositeBlitRectSetV12: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeBoneScaleV12: {
                BodyRegion: DynArray("PackCompositeBoneScaleRegionV12"),
                MorphWeight: DynArray("PackCompositeMorphWeightV12")
            },
            PackCompositeBoneScaleRegionV12: {
                name: Uint64,
                value: Float32,
                Bone: DynArray("PackCompositeBoneScaleParamV12")
            },
            PackCompositeBoneScaleParamV12: {
                name: Uint64,
                flags: Uint8,
                max: Float32,
                min: Float32,
                rotate: FixedArray(Float32, 3),
                scale: FixedArray(Float32, 3),
                translate: FixedArray(Float32, 3)
            },
            PackCompositeMorphWeightV12: {
                value: Float32,
                name: Uint64
            },
            PackCompositeRaceDataV12: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                bodyBoneScales: DynArray("PackCompositeBoneScaleV12"),
                bodyBoneScaleFiles: DynArray("PackCompositeBoneScaleFileV12"),
                ears: DynArray(Uint64),
                faceBoneScales: DynArray("PackCompositeBoneScaleV12"),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV12"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV12"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                skinStyleCount: Uint8,
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV12")
            },
            PackCompositeBoneScaleFileV12: {
                fileName: RefString16()
            },
            PackCompositeFileDataV12: {
                name: Uint64,
                type: Uint32,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint32
            },
            PackCompositeSkinPatternV12: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV12: {
                token: Uint64,
                boneScaleIndex: Uint32,
                components: DynArray("PackCompositeVariantComponentV12"),
                hairColor: "PackCompositeColorV12",
                hairColor2: "PackCompositeColorV12",
                patternColor: "PackCompositeColorV12",
                skinColor: "PackCompositeColorV12",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV12: {
                nameToken: Uint64,
                color0: "PackCompositeColorV12",
                color1: "PackCompositeColorV12",
                color2: "PackCompositeColorV12",
                color3: "PackCompositeColorV12"
            },
            PackCompositeColorV12: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV12"),
            boneScales: DynArray("PackCompositeBoneScaleV12"),
            raceSexData: DynArray("PackCompositeRaceDataV12"),
            configVersion: Uint16
        }
    };
    var V13$9 = {
        chunkName: "comp",
        name: "PackCompositeV13",
        version: 13,
        definitions: {
            PackCompositeBlitRectSetV13: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeBoneScaleV13: {
                BodyRegion: DynArray("PackCompositeBoneScaleRegionV13"),
                MorphWeight: DynArray("PackCompositeMorphWeightV13")
            },
            PackCompositeBoneScaleRegionV13: {
                name: Uint64,
                value: Float32,
                Bone: DynArray("PackCompositeBoneScaleParamV13")
            },
            PackCompositeBoneScaleParamV13: {
                name: Uint64,
                flags: Uint8,
                max: Float32,
                min: Float32,
                rotate: FixedArray(Float32, 3),
                scale: FixedArray(Float32, 3),
                translate: FixedArray(Float32, 3)
            },
            PackCompositeMorphWeightV13: {
                value: Float32,
                name: Uint64
            },
            PackCompositeRaceDataV13: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                bodyBoneScales: DynArray("PackCompositeBoneScaleV13"),
                bodyBoneScaleFiles: DynArray("PackCompositeBoneScaleFileV13"),
                ears: DynArray(Uint64),
                faceBoneScales: DynArray("PackCompositeBoneScaleV13"),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV13"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV13"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                skinStyleCount: Uint8,
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV13")
            },
            PackCompositeBoneScaleFileV13: {
                fileName: RefString16()
            },
            PackCompositeFileDataV13: {
                name: Uint64,
                type: Uint8,
                flags: Uint8,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint8
            },
            PackCompositeSkinPatternV13: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV13: {
                token: Uint64,
                boneScaleIndex: Uint32,
                components: DynArray("PackCompositeVariantComponentV13"),
                hairColor: "PackCompositeColorV13",
                hairColor2: "PackCompositeColorV13",
                patternColor: "PackCompositeColorV13",
                skinColor: "PackCompositeColorV13",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV13: {
                nameToken: Uint64,
                color0: "PackCompositeColorV13",
                color1: "PackCompositeColorV13",
                color2: "PackCompositeColorV13",
                color3: "PackCompositeColorV13"
            },
            PackCompositeColorV13: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV13"),
            boneScales: DynArray("PackCompositeBoneScaleV13"),
            raceSexData: DynArray("PackCompositeRaceDataV13"),
            configVersion: Uint16
        }
    };
    var V14$9 = {
        chunkName: "comp",
        name: "PackCompositeV14",
        version: 14,
        definitions: {
            PackCompositeBlitRectSetV14: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeBoneScaleV14: {
                BodyRegion: DynArray("PackCompositeBoneScaleRegionV14"),
                MorphWeight: DynArray("PackCompositeMorphWeightV14")
            },
            PackCompositeBoneScaleRegionV14: {
                name: Uint64,
                value: Float32,
                Bone: DynArray("PackCompositeBoneScaleParamV14")
            },
            PackCompositeBoneScaleParamV14: {
                name: Uint64,
                flags: Uint8,
                max: Float32,
                min: Float32,
                rotate: FixedArray(Float32, 3),
                scale: FixedArray(Float32, 3),
                translate: FixedArray(Float32, 3)
            },
            PackCompositeMorphWeightV14: {
                name: Uint64,
                value: Float32
            },
            PackCompositeRaceDataV14: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                bodyBoneScales: DynArray("PackCompositeBoneScaleV14"),
                bodyBoneScaleFiles: DynArray("PackCompositeBoneScaleFileV14"),
                ears: DynArray(Uint64),
                eyeColorPalette: RefString16(),
                faceBoneScales: DynArray("PackCompositeBoneScaleV14"),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV14"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV14"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                skinStyleCount: Uint8,
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV14")
            },
            PackCompositeBoneScaleFileV14: {
                fileName: RefString16()
            },
            PackCompositeFileDataV14: {
                name: Uint64,
                type: Uint8,
                flags: Uint8,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint8
            },
            PackCompositeSkinPatternV14: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV14: {
                token: Uint64,
                boneScaleIndex: Uint32,
                components: DynArray("PackCompositeVariantComponentV14"),
                eyeColor: "PackCompositeColorV14",
                hairColor: "PackCompositeColorV14",
                hairColor2: "PackCompositeColorV14",
                patternColor: "PackCompositeColorV14",
                skinColor: "PackCompositeColorV14",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV14: {
                nameToken: Uint64,
                color0: "PackCompositeColorV14",
                color1: "PackCompositeColorV14",
                color2: "PackCompositeColorV14",
                color3: "PackCompositeColorV14"
            },
            PackCompositeColorV14: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV14"),
            boneScales: DynArray("PackCompositeBoneScaleV14"),
            raceSexData: DynArray("PackCompositeRaceDataV14"),
            configVersion: Uint16
        }
    };
    var V15$9 = {
        chunkName: "comp",
        name: "PackCompositeV15",
        version: 15,
        definitions: {
            PackCompositeBlitRectSetV15: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeBoneScaleV15: {
                BodyRegion: DynArray("PackCompositeBoneScaleRegionV15"),
                MorphWeight: DynArray("PackCompositeMorphWeightV15")
            },
            PackCompositeBoneScaleRegionV15: {
                name: Uint64,
                value: Float32,
                Bone: DynArray("PackCompositeBoneScaleParamV15")
            },
            PackCompositeBoneScaleParamV15: {
                name: Uint64,
                flags: Uint8,
                max: Float32,
                min: Float32,
                rotate: FixedArray(Float32, 3),
                scale: FixedArray(Float32, 3),
                translate: FixedArray(Float32, 3)
            },
            PackCompositeMorphWeightV15: {
                name: Uint64,
                value: Float32
            },
            PackCompositeRaceDataV15: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                bodyBoneScales: DynArray("PackCompositeBoneScaleV15"),
                bodyBoneScaleFiles: DynArray("PackCompositeBoneScaleFileV15"),
                ears: DynArray(Uint64),
                eyeColorPalette: RefString16(),
                faceBoneScales: DynArray("PackCompositeBoneScaleV15"),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV15"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Filename(),
                skinPatterns: DynArray("PackCompositeSkinPatternV15"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                skinStyleCount: Uint8,
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV15"),
                animOverrides: DynArray("PackCompositeAnimOverrideV15")
            },
            PackCompositeBoneScaleFileV15: {
                fileName: RefString16()
            },
            PackCompositeFileDataV15: {
                name: Uint64,
                type: Uint8,
                flags: Uint8,
                meshBase: Filename(),
                meshOverlap: Filename(),
                maskDye1: Filename(),
                maskDye2: Filename(),
                maskDye3: Filename(),
                maskDye4: Filename(),
                maskCut: Filename(),
                textureBase: Filename(),
                textureNormal: Filename(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint8
            },
            PackCompositeSkinPatternV15: {
                chest: Filename(),
                face: Filename(),
                feet: Filename(),
                hands: Filename(),
                legs: Filename(),
                ears: Filename()
            },
            PackCompositeVariantV15: {
                token: Uint64,
                boneScaleIndex: Uint32,
                components: DynArray("PackCompositeVariantComponentV15"),
                eyeColor: "PackCompositeColorV15",
                hairColor: "PackCompositeColorV15",
                hairColor2: "PackCompositeColorV15",
                patternColor: "PackCompositeColorV15",
                skinColor: "PackCompositeColorV15",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV15: {
                nameToken: Uint64,
                color0: "PackCompositeColorV15",
                color1: "PackCompositeColorV15",
                color2: "PackCompositeColorV15",
                color3: "PackCompositeColorV15"
            },
            PackCompositeColorV15: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            },
            PackCompositeAnimOverrideV15: {
                animRole: Uint64,
                filepath: Filename()
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV15"),
            boneScales: DynArray("PackCompositeBoneScaleV15"),
            raceSexData: DynArray("PackCompositeRaceDataV15"),
            configVersion: Uint16
        }
    };
    var V16$8 = {
        chunkName: "comp",
        name: "PackCompositeV16",
        version: 16,
        definitions: {
            PackCompositeBlitRectSetV16: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeBoneScaleV16: {
                BodyRegion: DynArray("PackCompositeBoneScaleRegionV16"),
                MorphWeight: DynArray("PackCompositeMorphWeightV16")
            },
            PackCompositeBoneScaleRegionV16: {
                name: Uint64,
                value: Float32,
                Bone: DynArray("PackCompositeBoneScaleParamV16")
            },
            PackCompositeBoneScaleParamV16: {
                name: Uint64,
                flags: Uint8,
                max: Float32,
                min: Float32,
                rotate: FixedArray(Float32, 3),
                scale: FixedArray(Float32, 3),
                translate: FixedArray(Float32, 3)
            },
            PackCompositeMorphWeightV16: {
                name: Uint64,
                value: Float32
            },
            PackCompositeRaceDataV16: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                bodyBoneScales: DynArray("PackCompositeBoneScaleV16"),
                bodyBoneScaleFiles: DynArray("PackCompositeBoneScaleFileV16"),
                ears: DynArray(Uint64),
                eyeColorPalette: RefString16(),
                faceBoneScales: DynArray("PackCompositeBoneScaleV16"),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV16"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Fileref(),
                skinPatterns: DynArray("PackCompositeSkinPatternV16"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                skinStyleCount: Uint8,
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV16"),
                animOverrides: DynArray("PackCompositeAnimOverrideV16")
            },
            PackCompositeBoneScaleFileV16: {
                fileName: RefString16()
            },
            PackCompositeFileDataV16: {
                name: Uint64,
                type: Uint8,
                flags: Uint8,
                meshBase: Fileref(),
                meshOverlap: Fileref(),
                maskDye1: Fileref(),
                maskDye2: Fileref(),
                maskDye3: Fileref(),
                maskDye4: Fileref(),
                maskCut: Fileref(),
                textureBase: Fileref(),
                textureNormal: Fileref(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint8
            },
            PackCompositeSkinPatternV16: {
                chest: Fileref(),
                face: Fileref(),
                feet: Fileref(),
                hands: Fileref(),
                legs: Fileref(),
                ears: Fileref()
            },
            PackCompositeVariantV16: {
                token: Uint64,
                boneScaleIndex: Uint32,
                components: DynArray("PackCompositeVariantComponentV16"),
                eyeColor: "PackCompositeColorV16",
                hairColor: "PackCompositeColorV16",
                hairColor2: "PackCompositeColorV16",
                patternColor: "PackCompositeColorV16",
                skinColor: "PackCompositeColorV16",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV16: {
                nameToken: Uint64,
                color0: "PackCompositeColorV16",
                color1: "PackCompositeColorV16",
                color2: "PackCompositeColorV16",
                color3: "PackCompositeColorV16"
            },
            PackCompositeColorV16: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            },
            PackCompositeAnimOverrideV16: {
                animRole: Uint64,
                filepath: Fileref()
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV16"),
            boneScales: DynArray("PackCompositeBoneScaleV16"),
            raceSexData: DynArray("PackCompositeRaceDataV16"),
            configVersion: Uint16
        }
    };
    var V17$5 = {
        chunkName: "comp",
        name: "PackCompositeV17",
        version: 17,
        definitions: {
            PackCompositeBlitRectSetV17: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeBoneScaleV17: {
                BodyRegion: DynArray("PackCompositeBoneScaleRegionV17"),
                MorphWeight: DynArray("PackCompositeMorphWeightV17")
            },
            PackCompositeBoneScaleRegionV17: {
                name: Uint64,
                value: Float32,
                Bone: DynArray("PackCompositeBoneScaleParamV17")
            },
            PackCompositeBoneScaleParamV17: {
                name: Uint64,
                flags: Uint8,
                max: Float32,
                min: Float32,
                rotate: FixedArray(Float32, 3),
                scale: FixedArray(Float32, 3),
                translate: FixedArray(Float32, 3)
            },
            PackCompositeMorphWeightV17: {
                name: Uint64,
                value: Float32
            },
            PackCompositeRaceDataV17: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                bodyBoneScales: DynArray("PackCompositeBoneScaleV17"),
                bodyBoneScaleFiles: DynArray("PackCompositeBoneScaleFileV17"),
                ears: DynArray(Uint64),
                eyeColorPalette: RefString16(),
                faceBoneScales: DynArray("PackCompositeBoneScaleV17"),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV17"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Fileref(),
                skinPatterns: DynArray("PackCompositeSkinPatternV17"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                skinStyles: DynArray("PackCompositeSkinStyleV17"),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV17"),
                animOverrides: DynArray("PackCompositeAnimOverrideV17")
            },
            PackCompositeBoneScaleFileV17: {
                fileName: RefString16()
            },
            PackCompositeFileDataV17: {
                name: Uint64,
                type: Uint8,
                flags: Uint8,
                meshBase: Fileref(),
                meshOverlap: Fileref(),
                maskDye1: Fileref(),
                maskDye2: Fileref(),
                maskDye3: Fileref(),
                maskDye4: Fileref(),
                maskCut: Fileref(),
                textureBase: Fileref(),
                textureNormal: Fileref(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint8
            },
            PackCompositeSkinPatternV17: {
                chest: Fileref(),
                face: Fileref(),
                feet: Fileref(),
                hands: Fileref(),
                legs: Fileref(),
                ears: Fileref()
            },
            PackCompositeSkinStyleV17: {
                chest: Uint64,
                feet: Uint64,
                hands: Uint64,
                legs: Uint64
            },
            PackCompositeVariantV17: {
                token: Uint64,
                boneScaleIndex: Uint32,
                components: DynArray("PackCompositeVariantComponentV17"),
                eyeColor: "PackCompositeColorV17",
                hairColor: "PackCompositeColorV17",
                hairColor2: "PackCompositeColorV17",
                patternColor: "PackCompositeColorV17",
                skinColor: "PackCompositeColorV17",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV17: {
                nameToken: Uint64,
                color0: "PackCompositeColorV17",
                color1: "PackCompositeColorV17",
                color2: "PackCompositeColorV17",
                color3: "PackCompositeColorV17"
            },
            PackCompositeColorV17: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            },
            PackCompositeAnimOverrideV17: {
                animRole: Uint64,
                filepath: Fileref()
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV17"),
            boneScales: DynArray("PackCompositeBoneScaleV17"),
            raceSexData: DynArray("PackCompositeRaceDataV17"),
            configVersion: Uint16
        }
    };
    var V18$5 = {
        chunkName: "comp",
        name: "PackCompositeV18",
        version: 18,
        definitions: {
            PackCompositeBlitRectSetV18: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeBoneScaleV18: {
                BodyRegion: DynArray("PackCompositeBoneScaleRegionV18"),
                MorphWeight: DynArray("PackCompositeMorphWeightV18")
            },
            PackCompositeBoneScaleRegionV18: {
                name: Uint64,
                value: Float32,
                Bone: DynArray("PackCompositeBoneScaleParamV18")
            },
            PackCompositeBoneScaleParamV18: {
                name: Uint64,
                flags: Uint8,
                max: Float32,
                min: Float32,
                rotate: FixedArray(Float32, 3),
                scale: FixedArray(Float32, 3),
                translate: FixedArray(Float32, 3)
            },
            PackCompositeMorphWeightV18: {
                name: Uint64,
                value: Float32
            },
            PackCompositeRaceDataV18: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                bodyBoneScales: DynArray("PackCompositeBoneScaleV18"),
                bodyBoneScaleFiles: DynArray("PackCompositeBoneScaleFileV18"),
                ears: DynArray(Uint64),
                eyeColorPalette: RefString16(),
                faceBoneScales: DynArray("PackCompositeBoneScaleV18"),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV18"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Fileref(),
                skinPatterns: DynArray("PackCompositeSkinPatternV18"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                skinStyles: DynArray("PackCompositeSkinStyleV18"),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV18"),
                animOverrides: DynArray("PackCompositeAnimOverrideV18")
            },
            PackCompositeBoneScaleFileV18: {
                fileName: RefString16()
            },
            PackCompositeFileDataV18: {
                name: Uint64,
                type: Uint8,
                flags: Uint8,
                animRoleOverride: Uint64,
                meshBase: Fileref(),
                meshOverlap: Fileref(),
                maskDye1: Fileref(),
                maskDye2: Fileref(),
                maskDye3: Fileref(),
                maskDye4: Fileref(),
                maskCut: Fileref(),
                textureBase: Fileref(),
                textureNormal: Fileref(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint8
            },
            PackCompositeSkinPatternV18: {
                chest: Fileref(),
                face: Fileref(),
                feet: Fileref(),
                hands: Fileref(),
                legs: Fileref(),
                ears: Fileref()
            },
            PackCompositeSkinStyleV18: {
                chest: Uint64,
                feet: Uint64,
                hands: Uint64,
                legs: Uint64
            },
            PackCompositeVariantV18: {
                token: Uint64,
                boneScaleIndex: Uint32,
                components: DynArray("PackCompositeVariantComponentV18"),
                eyeColor: "PackCompositeColorV18",
                hairColor: "PackCompositeColorV18",
                hairColor2: "PackCompositeColorV18",
                patternColor: "PackCompositeColorV18",
                skinColor: "PackCompositeColorV18",
                skinIndex: Uint32
            },
            PackCompositeVariantComponentV18: {
                nameToken: Uint64,
                color0: "PackCompositeColorV18",
                color1: "PackCompositeColorV18",
                color2: "PackCompositeColorV18",
                color3: "PackCompositeColorV18"
            },
            PackCompositeColorV18: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            },
            PackCompositeAnimOverrideV18: {
                animRole: Uint64,
                filepath: Fileref()
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV18"),
            boneScales: DynArray("PackCompositeBoneScaleV18"),
            raceSexData: DynArray("PackCompositeRaceDataV18"),
            configVersion: Uint16
        }
    };
    var V19$5 = {
        chunkName: "comp",
        name: "PackCompositeV20",
        version: 19,
        definitions: {
            PackCompositeBlitRectSetV20: {
                name: RefString16(),
                size: FixedArray(Uint32, 2),
                rectIndex: DynArray(Uint8),
                rectArray: DynArray(FixedArray(Uint32, 4))
            },
            PackCompositeBoneScaleV20: {
                BodyRegion: DynArray("PackCompositeBoneScaleRegionV20"),
                MorphWeight: DynArray("PackCompositeMorphWeightV20")
            },
            PackCompositeBoneScaleRegionV20: {
                name: Uint64,
                value: Float32,
                Bone: DynArray("PackCompositeBoneScaleParamV20")
            },
            PackCompositeBoneScaleParamV20: {
                name: Uint64,
                flags: Uint8,
                max: Float32,
                min: Float32,
                rotate: FixedArray(Float32, 3),
                scale: FixedArray(Float32, 3),
                translate: FixedArray(Float32, 3)
            },
            PackCompositeMorphWeightV20: {
                name: Uint64,
                value: Float32
            },
            PackCompositeRaceDataV20: {
                name: RefString16(),
                nameToken: Uint64,
                baseHeadToken: Uint64,
                beard: DynArray(Uint64),
                bodyBoneScales: DynArray("PackCompositeBoneScaleV20"),
                bodyBoneScaleFiles: DynArray("PackCompositeBoneScaleFileV20"),
                ears: DynArray(Uint64),
                eyeColorPalette: RefString16(),
                faceBoneScales: DynArray("PackCompositeBoneScaleV20"),
                faces: DynArray(Uint64),
                fileData: DynArray("PackCompositeFileDataV20"),
                flags: Uint32,
                hairStyles: DynArray(Uint64),
                hairColorPalette: RefString16(),
                skeletonFile: Fileref(),
                skinPatterns: DynArray("PackCompositeSkinPatternV20"),
                skinColorPalette: RefString16(),
                skinPatternPalette: RefString16(),
                skinStyles: DynArray("PackCompositeSkinStyleV20"),
                type: Uint32,
                variantRefRace: Uint64,
                variants: DynArray("PackCompositeVariantV20"),
                animOverrides: DynArray("PackCompositeAnimOverrideV20")
            },
            PackCompositeBoneScaleFileV20: {
                fileName: RefString16()
            },
            PackCompositeFileDataV20: {
                name: Uint64,
                type: Uint8,
                flags: Uint8,
                animRoleOverride: Uint64,
                meshBase: Fileref(),
                meshOverlap: Fileref(),
                maskDye1: Fileref(),
                maskDye2: Fileref(),
                maskDye3: Fileref(),
                maskDye4: Fileref(),
                maskCut: Fileref(),
                textureBase: Fileref(),
                textureNormal: Fileref(),
                dyeFlags: Uint32,
                hideFlags: Uint32,
                skinFlags: Uint32,
                blitRectIndex: Uint8
            },
            PackCompositeSkinPatternV20: {
                chest: Fileref(),
                face: Fileref(),
                feet: Fileref(),
                hands: Fileref(),
                legs: Fileref(),
                ears: Fileref()
            },
            PackCompositeSkinStyleV20: {
                chest: Uint64,
                feet: Uint64,
                hands: Uint64,
                legs: Uint64
            },
            PackCompositeVariantV20: {
                token: Uint64,
                boneScaleIndex: Uint32,
                components: DynArray("PackCompositeVariantComponentV20"),
                eyeColor: "PackCompositeColorV20",
                hairColor: "PackCompositeColorV20",
                hairColor2: "PackCompositeColorV20",
                patternColor: "PackCompositeColorV20",
                skinColor: "PackCompositeColorV20",
                skinIndex: Uint32,
                skinStyle: Uint32
            },
            PackCompositeVariantComponentV20: {
                nameToken: Uint64,
                color0: "PackCompositeColorV20",
                color1: "PackCompositeColorV20",
                color2: "PackCompositeColorV20",
                color3: "PackCompositeColorV20"
            },
            PackCompositeColorV20: {
                brightness: Uint8,
                contrast: Uint8,
                hue: Uint8,
                saturation: Uint8,
                lightness: Uint8
            },
            PackCompositeAnimOverrideV20: {
                animRole: Uint64,
                filepath: Fileref()
            }
        },
        root: {
            armorColorIds: DynArray(Uint32),
            blitRects: DynArray("PackCompositeBlitRectSetV20"),
            boneScales: DynArray("PackCompositeBoneScaleV20"),
            raceSexData: DynArray("PackCompositeRaceDataV20"),
            configVersion: Uint16
        }
    };
    var latest$13 = V19$5;
    var definitions$13 = { V0: V0$T, V1: V1$C, V2: V2$t, V3: V3$q, V4: V4$g, V5: V5$e, V6: V6$e, V7: V7$b, V8: V8$b, V9: V9$a, V10: V10$b, V11: V11$a, V12: V12$9, V13: V13$9, V14: V14$9, V15: V15$9, V16: V16$8, V17: V17$5, V18: V18$5, V19: V19$5 };
    var definitionArray$13 = Object.values(definitions$13);

    var COMP = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$13,
        definitions: definitions$13,
        latest: latest$13
    });

    var V0$S = {
        chunkName: "CSCN",
        name: "SceneDataV0",
        version: 0,
        definitions: {
            SequenceDataV0: {
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                name: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV0")
            },
            TrackGroupDataV0: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV0"),
                track: DynArray("TrackDataV0")
            },
            PropertyDataV0: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV0: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV0"),
                flagKey: DynArray("FlagKeyDataV0"),
                triggerKey: DynArray("TriggerKeyDataV0")
            },
            CurveKeyDataV0: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV0: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV0: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV0: {
                ambientLightResource: DynArray("AmbientLightDataV0"),
                textResource: DynArray("TextResourceDataV0")
            },
            AmbientLightDataV0: {
                ambientGroundColor: "ColorDefDataV0",
                ambientSkyColor: "ColorDefDataV0",
                fillColor: "ColorDefDataV0",
                hemisphericalColor: "ColorDefDataV0",
                name: Uint64
            },
            ColorDefDataV0: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            TextResourceDataV0: {
                name: Uint64,
                textEntry: DynArray("TextEntryDataV0")
            },
            TextEntryDataV0: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            sequence: DynArray("SequenceDataV0"),
            resources: "ResourceDataV0"
        }
    };
    var V1$B = {
        chunkName: "CSCN",
        name: "SceneDataV1",
        version: 1,
        definitions: {
            SequenceDataV1: {
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                name: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV1")
            },
            TrackGroupDataV1: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV1"),
                track: DynArray("TrackDataV1")
            },
            PropertyDataV1: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV1: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV1"),
                flagKey: DynArray("FlagKeyDataV1"),
                triggerKey: DynArray("TriggerKeyDataV1")
            },
            CurveKeyDataV1: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV1: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV1: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV1: {
                ambientLightResource: DynArray("AmbientLightDataV1"),
                script: DynArray("ScriptDataV1"),
                textResource: DynArray("TextResourceDataV1")
            },
            AmbientLightDataV1: {
                ambientGroundColor: "ColorDefDataV1",
                ambientSkyColor: "ColorDefDataV1",
                fillColor: "ColorDefDataV1",
                hemisphericalColor: "ColorDefDataV1",
                name: Uint64
            },
            ColorDefDataV1: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            ScriptDataV1: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV1: {
                name: Uint64,
                textEntry: DynArray("TextEntryDataV1")
            },
            TextEntryDataV1: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            sequence: DynArray("SequenceDataV1"),
            resources: "ResourceDataV1"
        }
    };
    var V2$s = {
        chunkName: "CSCN",
        name: "SceneDataV2",
        version: 2,
        definitions: {
            SequenceDataV2: {
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                name: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV2")
            },
            TrackGroupDataV2: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV2"),
                track: DynArray("TrackDataV2")
            },
            PropertyDataV2: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV2: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV2"),
                flagKey: DynArray("FlagKeyDataV2"),
                triggerKey: DynArray("TriggerKeyDataV2")
            },
            CurveKeyDataV2: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV2: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV2: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV2: {
                ambientLightResource: DynArray("AmbientLightDataV2"),
                script: DynArray("ScriptDataV2"),
                textResource: DynArray("TextResourceDataV2")
            },
            AmbientLightDataV2: {
                ambientGroundColor: "ColorDefDataV2",
                ambientSkyColor: "ColorDefDataV2",
                fillColor: "ColorDefDataV2",
                hemisphericalColor: "ColorDefDataV2",
                name: Uint64
            },
            ColorDefDataV2: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            ScriptDataV2: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV2: {
                name: Uint64,
                textEntry: DynArray("TextEntryDataV2")
            },
            TextEntryDataV2: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV2"),
            resources: "ResourceDataV2"
        }
    };
    var V3$p = {
        chunkName: "CSCN",
        name: "SceneDataV3",
        version: 3,
        definitions: {
            SequenceDataV3: {
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                name: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV3")
            },
            TrackGroupDataV3: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV3"),
                track: DynArray("TrackDataV3")
            },
            PropertyDataV3: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV3: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV3"),
                flagKey: DynArray("FlagKeyDataV3"),
                triggerKey: DynArray("TriggerKeyDataV3")
            },
            CurveKeyDataV3: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV3: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV3: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV3: {
                ambientLightResource: DynArray("AmbientLightDataV3"),
                script: DynArray("ScriptDataV3"),
                textResource: DynArray("TextResourceDataV3")
            },
            AmbientLightDataV3: {
                ambientGroundColor: "ColorDefDataV3",
                ambientSkyColor: "ColorDefDataV3",
                fillColor: "ColorDefDataV3",
                hemisphericalColor: "ColorDefDataV3",
                name: Uint64
            },
            ColorDefDataV3: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            ScriptDataV3: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV3: {
                name: Uint64,
                textEntry: DynArray("TextEntryDataV3")
            },
            TextEntryDataV3: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV3"),
            resources: "ResourceDataV3"
        }
    };
    var V4$f = {
        chunkName: "CSCN",
        name: "SceneDataV4",
        version: 4,
        definitions: {
            SequenceDataV4: {
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                name: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV4")
            },
            TrackGroupDataV4: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV4"),
                track: DynArray("TrackDataV4")
            },
            PropertyDataV4: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV4: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV4"),
                flagKey: DynArray("FlagKeyDataV4"),
                triggerKey: DynArray("TriggerKeyDataV4")
            },
            CurveKeyDataV4: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV4: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV4: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV4: {
                ambientLightResource: DynArray("AmbientLightDataV4"),
                script: DynArray("ScriptDataV4"),
                textResource: DynArray("TextResourceDataV4")
            },
            AmbientLightDataV4: {
                ambientGroundColor: "ColorDefDataV4",
                ambientSkyColor: "ColorDefDataV4",
                fillColor: "ColorDefDataV4",
                hemisphericalColor: "ColorDefDataV4",
                name: Uint64
            },
            ColorDefDataV4: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            ScriptDataV4: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV4: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV4")
            },
            TextEntryDataV4: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV4"),
            resources: "ResourceDataV4"
        }
    };
    var V5$d = {
        chunkName: "CSCN",
        name: "SceneDataV5",
        version: 5,
        definitions: {
            SequenceDataV5: {
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                name: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV5")
            },
            TrackGroupDataV5: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV5"),
                track: DynArray("TrackDataV5")
            },
            PropertyDataV5: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV5: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV5"),
                flagKey: DynArray("FlagKeyDataV5"),
                triggerKey: DynArray("TriggerKeyDataV5")
            },
            CurveKeyDataV5: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV5: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV5: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV5: {
                ambientLightResource: DynArray("AmbientLightDataV5"),
                script: DynArray("ScriptDataV5"),
                textResource: DynArray("TextResourceDataV5")
            },
            AmbientLightDataV5: {
                ambientGroundColor: "ColorDefDataV5",
                ambientSkyColor: "ColorDefDataV5",
                fillColor: "ColorDefDataV5",
                hemisphericalColor: "ColorDefDataV5",
                name: Uint64
            },
            ColorDefDataV5: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            ScriptDataV5: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV5: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV5")
            },
            TextEntryDataV5: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV5"),
            resources: "ResourceDataV5"
        }
    };
    var V6$d = {
        chunkName: "CSCN",
        name: "SceneDataV6",
        version: 6,
        definitions: {
            SequenceDataV6: {
                name: Uint64,
                length: Float32,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                trackGroup: DynArray("TrackGroupDataV6")
            },
            TrackGroupDataV6: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV6"),
                track: DynArray("TrackDataV6")
            },
            PropertyDataV6: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV6: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV6"),
                flagKey: DynArray("FlagKeyDataV6"),
                triggerKey: DynArray("TriggerKeyDataV6")
            },
            CurveKeyDataV6: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV6: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV6: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV6: {
                ambientLightResource: DynArray("AmbientLightDataV6"),
                script: DynArray("ScriptDataV6"),
                textResource: DynArray("TextResourceDataV6")
            },
            AmbientLightDataV6: {
                ambientGroundColor: "ColorDefDataV6",
                ambientSkyColor: "ColorDefDataV6",
                fillColor: "ColorDefDataV6",
                hemisphericalColor: "ColorDefDataV6",
                name: Uint64
            },
            ColorDefDataV6: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            ScriptDataV6: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV6: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV6")
            },
            TextEntryDataV6: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV6"),
            resources: "ResourceDataV6"
        }
    };
    var V7$a = {
        chunkName: "CSCN",
        name: "SceneDataV7",
        version: 7,
        definitions: {
            SequenceDataV7: {
                name: Uint64,
                length: Float32,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                trackGroup: DynArray("TrackGroupDataV7")
            },
            TrackGroupDataV7: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV7"),
                track: DynArray("TrackDataV7")
            },
            PropertyDataV7: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV7: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV7"),
                flagKey: DynArray("FlagKeyDataV7"),
                triggerKey: DynArray("TriggerKeyDataV7")
            },
            CurveKeyDataV7: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV7: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV7: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV7: {
                ambientLightResource: DynArray("AmbientLightDataV7"),
                script: DynArray("ScriptDataV7"),
                textResource: DynArray("TextResourceDataV7")
            },
            AmbientLightDataV7: {
                ambientGroundColor: "ColorDefDataV7",
                ambientSkyColor: "ColorDefDataV7",
                fillColor: "ColorDefDataV7",
                hemisphericalColor: "ColorDefDataV7",
                name: Uint64
            },
            ColorDefDataV7: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            ScriptDataV7: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV7: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV7")
            },
            TextEntryDataV7: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV7"),
            resources: "ResourceDataV7"
        }
    };
    var V8$a = {
        chunkName: "CSCN",
        name: "SceneDataV8",
        version: 8,
        definitions: {
            SequenceDataV8: {
                name: Uint64,
                length: Float32,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                trackGroup: DynArray("TrackGroupDataV8")
            },
            TrackGroupDataV8: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV8"),
                track: DynArray("TrackDataV8")
            },
            PropertyDataV8: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV8: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV8"),
                flagKey: DynArray("FlagKeyDataV8"),
                triggerKey: DynArray("TriggerKeyDataV8")
            },
            CurveKeyDataV8: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV8: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV8: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV8: {
                ambientLightResource: DynArray("AmbientLightDataV8"),
                fileNameRef: DynArray("FileNameRefDataV8"),
                script: DynArray("ScriptDataV8"),
                textResource: DynArray("TextResourceDataV8")
            },
            AmbientLightDataV8: {
                ambientGroundColor: "ColorDefDataV8",
                ambientSkyColor: "ColorDefDataV8",
                fillColor: "ColorDefDataV8",
                hemisphericalColor: "ColorDefDataV8",
                name: Uint64
            },
            ColorDefDataV8: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            FileNameRefDataV8: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV8: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV8: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV8")
            },
            TextEntryDataV8: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV8"),
            resources: "ResourceDataV8"
        }
    };
    var V9$9 = {
        chunkName: "CSCN",
        name: "SceneDataV9",
        version: 9,
        definitions: {
            SequenceDataV9: {
                name: Uint64,
                length: Float32,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                trackGroup: DynArray("TrackGroupDataV9")
            },
            TrackGroupDataV9: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV9"),
                track: DynArray("TrackDataV9")
            },
            PropertyDataV9: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV9: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV9"),
                flagKey: DynArray("FlagKeyDataV9"),
                triggerKey: DynArray("TriggerKeyDataV9")
            },
            CurveKeyDataV9: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV9: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV9: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV9: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV9"),
                fileNameRef: DynArray("FileNameRefDataV9"),
                script: DynArray("ScriptDataV9"),
                textResource: DynArray("TextResourceDataV9")
            },
            AmbientLightDataV9: {
                ambientGroundColor: "ColorDefDataV9",
                ambientSkyColor: "ColorDefDataV9",
                fillColor: "ColorDefDataV9",
                hemisphericalColor: "ColorDefDataV9",
                name: Uint64
            },
            ColorDefDataV9: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            FileNameRefDataV9: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV9: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV9: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV9")
            },
            TextEntryDataV9: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV9"),
            resources: "ResourceDataV9"
        }
    };
    var V10$a = {
        chunkName: "CSCN",
        name: "SceneDataV10",
        version: 10,
        definitions: {
            SequenceDataV10: {
                name: Uint64,
                length: Float32,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                trackGroup: DynArray("TrackGroupDataV10")
            },
            TrackGroupDataV10: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV10"),
                track: DynArray("TrackDataV10")
            },
            PropertyDataV10: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV10: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV10"),
                flagKey: DynArray("FlagKeyDataV10"),
                triggerKey: DynArray("TriggerKeyDataV10")
            },
            CurveKeyDataV10: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV10: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV10: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV10: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV10"),
                fileNameRef: DynArray("FileNameRefDataV10"),
                script: DynArray("ScriptDataV10"),
                textResource: DynArray("TextResourceDataV10")
            },
            AmbientLightDataV10: {
                ambientGroundColor: "ColorDefDataV10",
                ambientSkyColor: "ColorDefDataV10",
                fillColor: "ColorDefDataV10",
                hemisphericalColor: "ColorDefDataV10",
                name: Uint64
            },
            ColorDefDataV10: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            FileNameRefDataV10: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV10: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV10: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV10")
            },
            TextEntryDataV10: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV10"),
            resources: "ResourceDataV10"
        }
    };
    var V11$9 = {
        chunkName: "CSCN",
        name: "SceneDataV11",
        version: 11,
        definitions: {
            SequenceDataV11: {
                name: Uint64,
                length: Float32,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                trackGroup: DynArray("TrackGroupDataV11")
            },
            TrackGroupDataV11: {
                name: Uint64,
                type: Uint8,
                flags: Uint32,
                prop: DynArray("PropertyDataV11"),
                track: DynArray("TrackDataV11")
            },
            PropertyDataV11: {
                type: Uint8,
                value: Uint64,
                pathVal: Filename()
            },
            TrackDataV11: {
                name: Uint64,
                type: Uint8,
                curveKey: DynArray("CurveKeyDataV11"),
                flagKey: DynArray("FlagKeyDataV11"),
                triggerKey: DynArray("TriggerKeyDataV11")
            },
            CurveKeyDataV11: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV11: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV11: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV11: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV11"),
                fileNameRef: DynArray("FileNameRefDataV11"),
                script: DynArray("ScriptDataV11"),
                textResource: DynArray("TextResourceDataV11")
            },
            AmbientLightDataV11: {
                ambientGroundColor: "ColorDefDataV11",
                ambientSkyColor: "ColorDefDataV11",
                fillColor: "ColorDefDataV11",
                hemisphericalColor: "ColorDefDataV11",
                name: Uint64
            },
            ColorDefDataV11: {
                color: FixedArray(Uint8, 3),
                intensity: Float32
            },
            FileNameRefDataV11: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV11: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV11: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV11")
            },
            TextEntryDataV11: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV11"),
            resources: "ResourceDataV11"
        }
    };
    var V12$8 = {
        chunkName: "CSCN",
        name: "SceneDataV12",
        version: 12,
        definitions: {
            SequenceDataV12: {
                name: Uint64,
                environmentMap: Fileref(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV12")
            },
            TrackGroupDataV12: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV12"),
                track: DynArray("TrackDataV12"),
                type: Uint8
            },
            PropertyDataV12: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV12: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV12"),
                flagKey: DynArray("FlagKeyDataV12"),
                triggerKey: DynArray("TriggerKeyDataV12"),
                type: Uint8
            },
            CurveKeyDataV12: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV12: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV12: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV12: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV12"),
                fileNameRef: DynArray("FileNameRefDataV12"),
                script: DynArray("ScriptDataV12"),
                textResource: DynArray("TextResourceDataV12")
            },
            AmbientLightDataV12: {
                ambientGroundColor: "ColorDefDataV12",
                ambientSkyColor: "ColorDefDataV12",
                fillColor: "ColorDefDataV12",
                hemisphericalColor: "ColorDefDataV12",
                name: Uint64
            },
            ColorDefDataV12: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV12: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV12: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV12: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV12")
            },
            TextEntryDataV12: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV12"),
            resources: "ResourceDataV12"
        }
    };
    var V13$8 = {
        chunkName: "CSCN",
        name: "SceneDataV13",
        version: 13,
        definitions: {
            SequenceDataV13: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV13")
            },
            TrackGroupDataV13: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV13"),
                track: DynArray("TrackDataV13"),
                type: Uint8
            },
            PropertyDataV13: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV13: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV13"),
                flagKey: DynArray("FlagKeyDataV13"),
                triggerKey: DynArray("TriggerKeyDataV13"),
                type: Uint8
            },
            CurveKeyDataV13: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV13: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV13: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV13: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV13"),
                fileNameRef: DynArray("FileNameRefDataV13"),
                script: DynArray("ScriptDataV13"),
                textResource: DynArray("TextResourceDataV13")
            },
            AmbientLightDataV13: {
                ambientGroundColor: "ColorDefDataV13",
                ambientSkyColor: "ColorDefDataV13",
                fillColor: "ColorDefDataV13",
                hemisphericalColor: "ColorDefDataV13",
                name: Uint64
            },
            ColorDefDataV13: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV13: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV13: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV13: {
                name: Uint64,
                id: Uint32,
                textEntry: DynArray("TextEntryDataV13")
            },
            TextEntryDataV13: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV13"),
            resources: "ResourceDataV13"
        }
    };
    var V14$8 = {
        chunkName: "CSCN",
        name: "SceneDataV14",
        version: 14,
        definitions: {
            SequenceDataV14: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV14")
            },
            TrackGroupDataV14: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV14"),
                track: DynArray("TrackDataV14"),
                type: Uint8
            },
            PropertyDataV14: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV14: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV14"),
                flagKey: DynArray("FlagKeyDataV14"),
                triggerKey: DynArray("TriggerKeyDataV14"),
                type: Uint8
            },
            CurveKeyDataV14: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV14: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV14: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV14: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV14"),
                fileNameRef: DynArray("FileNameRefDataV14"),
                script: DynArray("ScriptDataV14"),
                textResource: DynArray("TextResourceDataV14")
            },
            AmbientLightDataV14: {
                ambientGroundColor: "ColorDefDataV14",
                ambientSkyColor: "ColorDefDataV14",
                fillColor: "ColorDefDataV14",
                hemisphericalColor: "ColorDefDataV14",
                name: Uint64
            },
            ColorDefDataV14: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV14: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV14: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV14: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV14")
            },
            TextEntryDataV14: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV14"),
            resources: "ResourceDataV14"
        }
    };
    var V15$8 = {
        chunkName: "CSCN",
        name: "SceneDataV15",
        version: 15,
        definitions: {
            SequenceDataV15: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                updateScript: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV15")
            },
            TrackGroupDataV15: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV15"),
                track: DynArray("TrackDataV15"),
                type: Uint8
            },
            PropertyDataV15: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV15: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV15"),
                flagKey: DynArray("FlagKeyDataV15"),
                triggerKey: DynArray("TriggerKeyDataV15"),
                type: Uint8
            },
            CurveKeyDataV15: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV15: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV15: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV15: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV15"),
                fileNameRef: DynArray("FileNameRefDataV15"),
                script: DynArray("ScriptDataV15"),
                textResource: DynArray("TextResourceDataV15")
            },
            AmbientLightDataV15: {
                ambientGroundColor: "ColorDefDataV15",
                ambientSkyColor: "ColorDefDataV15",
                fillColor: "ColorDefDataV15",
                hemisphericalColor: "ColorDefDataV15",
                name: Uint64
            },
            ColorDefDataV15: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV15: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV15: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV15: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV15")
            },
            TextEntryDataV15: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV15"),
            resources: "ResourceDataV15"
        }
    };
    var V16$7 = {
        chunkName: "CSCN",
        name: "SceneDataV16",
        version: 16,
        definitions: {
            SequenceDataV16: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                updateScript: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV16")
            },
            TrackGroupDataV16: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV16"),
                track: DynArray("TrackDataV16"),
                type: Uint8
            },
            PropertyDataV16: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV16: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV16"),
                flagKey: DynArray("FlagKeyDataV16"),
                triggerKey: DynArray("TriggerKeyDataV16"),
                type: Uint8
            },
            CurveKeyDataV16: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV16: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV16: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV16: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV16"),
                fileNameRef: DynArray("FileNameRefDataV16"),
                script: DynArray("ScriptDataV16"),
                textResource: DynArray("TextResourceDataV16")
            },
            AmbientLightDataV16: {
                ambientGroundColor: "ColorDefDataV16",
                ambientSkyColor: "ColorDefDataV16",
                fillColor: "ColorDefDataV16",
                hemisphericalColor: "ColorDefDataV16",
                name: Uint64
            },
            ColorDefDataV16: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV16: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV16: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV16: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV16")
            },
            TextEntryDataV16: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV16"),
            resources: "ResourceDataV16"
        }
    };
    var V17$4 = {
        chunkName: "CSCN",
        name: "SceneDataV17",
        version: 17,
        definitions: {
            SequenceDataV17: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                updateScript: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV17")
            },
            TrackGroupDataV17: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV17"),
                track: DynArray("TrackDataV17"),
                type: Uint8
            },
            PropertyDataV17: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV17: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV17"),
                flagKey: DynArray("FlagKeyDataV17"),
                triggerKey: DynArray("TriggerKeyDataV17"),
                type: Uint8
            },
            CurveKeyDataV17: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV17: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV17: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV17: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV17"),
                fileNameRef: DynArray("FileNameRefDataV17"),
                script: DynArray("ScriptDataV17"),
                textResource: DynArray("TextResourceDataV17")
            },
            AmbientLightDataV17: {
                ambientGroundColor: "ColorDefDataV17",
                ambientSkyColor: "ColorDefDataV17",
                fillColor: "ColorDefDataV17",
                hemisphericalColor: "ColorDefDataV17",
                name: Uint64
            },
            ColorDefDataV17: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV17: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV17: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV17: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV17")
            },
            TextEntryDataV17: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV17"),
            resources: "ResourceDataV17"
        }
    };
    var V18$4 = {
        chunkName: "CSCN",
        name: "SceneDataV18",
        version: 18,
        definitions: {
            SequenceDataV18: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                updateScript: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV18")
            },
            TrackGroupDataV18: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV18"),
                track: DynArray("TrackDataV18"),
                type: Uint8
            },
            PropertyDataV18: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV18: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV18"),
                flagKey: DynArray("FlagKeyDataV18"),
                triggerKey: DynArray("TriggerKeyDataV18"),
                type: Uint8
            },
            CurveKeyDataV18: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV18: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV18: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV18: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV18"),
                fileNameRef: DynArray("FileNameRefDataV18"),
                script: DynArray("ScriptDataV18"),
                textResource: DynArray("TextResourceDataV18")
            },
            AmbientLightDataV18: {
                ambientGroundColor: "ColorDefDataV18",
                ambientSkyColor: "ColorDefDataV18",
                fillColor: "ColorDefDataV18",
                hemisphericalColor: "ColorDefDataV18",
                name: Uint64
            },
            ColorDefDataV18: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV18: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV18: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV18: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV18")
            },
            TextEntryDataV18: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV18"),
            resources: "ResourceDataV18"
        }
    };
    var V19$4 = {
        chunkName: "CSCN",
        name: "SceneDataV19",
        version: 19,
        definitions: {
            SequenceDataV19: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                updateScript: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV19")
            },
            TrackGroupDataV19: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV19"),
                track: DynArray("TrackDataV19"),
                type: Uint8
            },
            PropertyDataV19: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV19: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV19"),
                flagKey: DynArray("FlagKeyDataV19"),
                triggerKey: DynArray("TriggerKeyDataV19"),
                type: Uint8
            },
            CurveKeyDataV19: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV19: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV19: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV19: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV19"),
                fileNameRef: DynArray("FileNameRefDataV19"),
                script: DynArray("ScriptDataV19"),
                textResource: DynArray("TextResourceDataV19")
            },
            AmbientLightDataV19: {
                ambientGroundColor: "ColorDefDataV19",
                ambientSkyColor: "ColorDefDataV19",
                fillColor: "ColorDefDataV19",
                hemisphericalColor: "ColorDefDataV19",
                name: Uint64
            },
            ColorDefDataV19: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV19: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV19: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV19: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV19")
            },
            TextEntryDataV19: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV19"),
            resources: "ResourceDataV19"
        }
    };
    var V20$3 = {
        chunkName: "CSCN",
        name: "SceneDataV20",
        version: 20,
        definitions: {
            SequenceDataV20: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                updateScript: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV20")
            },
            TrackGroupDataV20: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV20"),
                track: DynArray("TrackDataV20"),
                type: Uint8
            },
            PropertyDataV20: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV20: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV20"),
                flagKey: DynArray("FlagKeyDataV20"),
                triggerKey: DynArray("TriggerKeyDataV20"),
                type: Uint8
            },
            CurveKeyDataV20: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV20: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV20: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV20: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV20"),
                fileNameRef: DynArray("FileNameRefDataV20"),
                script: DynArray("ScriptDataV20"),
                textResource: DynArray("TextResourceDataV20")
            },
            AmbientLightDataV20: {
                ambientGroundColor: "ColorDefDataV20",
                ambientSkyColor: "ColorDefDataV20",
                fillColor: "ColorDefDataV20",
                hemisphericalColor: "ColorDefDataV20",
                name: Uint64
            },
            ColorDefDataV20: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV20: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV20: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV20: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV20")
            },
            TextEntryDataV20: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV20"),
            resources: "ResourceDataV20"
        }
    };
    var V21$3 = {
        chunkName: "CSCN",
        name: "SceneDataV21",
        version: 21,
        definitions: {
            SequenceDataV21: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                updateScript: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV21")
            },
            TrackGroupDataV21: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV21"),
                track: DynArray("TrackDataV21"),
                type: Uint8
            },
            PropertyDataV21: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV21: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV21"),
                flagKey: DynArray("FlagKeyDataV21"),
                triggerKey: DynArray("TriggerKeyDataV21"),
                type: Uint8
            },
            CurveKeyDataV21: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV21: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV21: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV21: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV21"),
                fileNameRef: DynArray("FileNameRefDataV21"),
                script: DynArray("ScriptDataV21"),
                textResource: DynArray("TextResourceDataV21")
            },
            AmbientLightDataV21: {
                ambientGroundColor: "ColorDefDataV21",
                ambientSkyColor: "ColorDefDataV21",
                fillColor: "ColorDefDataV21",
                hemisphericalColor: "ColorDefDataV21",
                name: Uint64
            },
            ColorDefDataV21: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV21: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV21: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV21: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV21")
            },
            TextEntryDataV21: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV21"),
            resources: "ResourceDataV21",
            trackGroup: Pointer("TrackGroupDataV21")
        }
    };
    var V22$2 = {
        chunkName: "CSCN",
        name: "SceneDataV22",
        version: 22,
        definitions: {
            SequenceDataV22: {
                name: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                updateScript: Uint64,
                length: Float32,
                trackGroup: DynArray("TrackGroupDataV22")
            },
            TrackGroupDataV22: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV22"),
                track: DynArray("TrackDataV22"),
                type: Uint8
            },
            PropertyDataV22: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV22: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV22"),
                flagKey: DynArray("FlagKeyDataV22"),
                triggerKey: DynArray("TriggerKeyDataV22"),
                type: Uint8
            },
            CurveKeyDataV22: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV22: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV22: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV22: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV22"),
                fileNameRef: DynArray("FileNameRefDataV22"),
                script: DynArray("ScriptDataV22"),
                textResource: DynArray("TextResourceDataV22")
            },
            AmbientLightDataV22: {
                ambientGroundColor: "ColorDefDataV22",
                ambientSkyColor: "ColorDefDataV22",
                fillColor: "ColorDefDataV22",
                hemisphericalColor: "ColorDefDataV22",
                name: Uint64
            },
            ColorDefDataV22: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV22: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV22: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV22: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV22")
            },
            TextEntryDataV22: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV22"),
            resources: "ResourceDataV22",
            trackGroup: Pointer("TrackGroupDataV22")
        }
    };
    var V23$1 = {
        chunkName: "CSCN",
        name: "SceneDataV23",
        version: 23,
        definitions: {
            SequenceDataV23: {
                name: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV23")
            },
            TrackGroupDataV23: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV23"),
                track: DynArray("TrackDataV23"),
                type: Uint8
            },
            PropertyDataV23: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV23: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV23"),
                flagKey: DynArray("FlagKeyDataV23"),
                triggerKey: DynArray("TriggerKeyDataV23"),
                type: Uint8
            },
            CurveKeyDataV23: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV23: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV23: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV23: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV23"),
                fileNameRef: DynArray("FileNameRefDataV23"),
                script: DynArray("ScriptDataV23"),
                textResource: DynArray("TextResourceDataV23")
            },
            AmbientLightDataV23: {
                ambientGroundColor: "ColorDefDataV23",
                ambientSkyColor: "ColorDefDataV23",
                fillColor: "ColorDefDataV23",
                hemisphericalColor: "ColorDefDataV23",
                name: Uint64
            },
            ColorDefDataV23: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV23: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV23: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV23: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV23")
            },
            TextEntryDataV23: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV23"),
            resources: "ResourceDataV23",
            trackGroup: Pointer("TrackGroupDataV23")
        }
    };
    var V24$1 = {
        chunkName: "CSCN",
        name: "SceneDataV24",
        version: 24,
        definitions: {
            SequenceDataV24: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV24")
            },
            TrackGroupDataV24: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV24"),
                track: DynArray("TrackDataV24"),
                type: Uint8
            },
            PropertyDataV24: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV24: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV24"),
                flagKey: DynArray("FlagKeyDataV24"),
                triggerKey: DynArray("TriggerKeyDataV24"),
                type: Uint8
            },
            CurveKeyDataV24: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV24: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV24: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV24: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV24"),
                fileNameRef: DynArray("FileNameRefDataV24"),
                script: DynArray("ScriptDataV24"),
                textResource: DynArray("TextResourceDataV24")
            },
            AmbientLightDataV24: {
                ambientGroundColor: "ColorDefDataV24",
                ambientSkyColor: "ColorDefDataV24",
                fillColor: "ColorDefDataV24",
                hemisphericalColor: "ColorDefDataV24",
                name: Uint64
            },
            ColorDefDataV24: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV24: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV24: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV24: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV24")
            },
            TextEntryDataV24: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV24"),
            resources: "ResourceDataV24",
            trackGroup: Pointer("TrackGroupDataV24")
        }
    };
    var V25$1 = {
        chunkName: "CSCN",
        name: "SceneDataV25",
        version: 25,
        definitions: {
            SequenceDataV25: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV25")
            },
            TrackGroupDataV25: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV25"),
                track: DynArray("TrackDataV25"),
                type: Uint8
            },
            PropertyDataV25: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV25: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV25"),
                flagKey: DynArray("FlagKeyDataV25"),
                triggerKey: DynArray("TriggerKeyDataV25"),
                type: Uint8
            },
            CurveKeyDataV25: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV25: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV25: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV25: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV25"),
                fileNameRef: DynArray("FileNameRefDataV25"),
                script: DynArray("ScriptDataV25"),
                textResource: DynArray("TextResourceDataV25")
            },
            AmbientLightDataV25: {
                ambientGroundColor: "ColorDefDataV25",
                ambientSkyColor: "ColorDefDataV25",
                fillColor: "ColorDefDataV25",
                hemisphericalColor: "ColorDefDataV25",
                name: Uint64
            },
            ColorDefDataV25: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV25: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV25: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV25: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV25")
            },
            TextEntryDataV25: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV25"),
            resources: "ResourceDataV25",
            trackGroup: Pointer("TrackGroupDataV25")
        }
    };
    var V26$1 = {
        chunkName: "CSCN",
        name: "SceneDataV26",
        version: 26,
        definitions: {
            SequenceDataV26: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV26")
            },
            TrackGroupDataV26: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV26"),
                track: DynArray("TrackDataV26"),
                type: Uint8
            },
            PropertyDataV26: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV26: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV26"),
                flagKey: DynArray("FlagKeyDataV26"),
                triggerKey: DynArray("TriggerKeyDataV26"),
                type: Uint8
            },
            CurveKeyDataV26: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV26: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV26: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV26: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV26"),
                fileNameRef: DynArray("FileNameRefDataV26"),
                script: DynArray("ScriptDataV26"),
                textResource: DynArray("TextResourceDataV26")
            },
            AmbientLightDataV26: {
                ambientGroundColor: "ColorDefDataV26",
                ambientSkyColor: "ColorDefDataV26",
                fillColor: "ColorDefDataV26",
                hemisphericalColor: "ColorDefDataV26",
                name: Uint64
            },
            ColorDefDataV26: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV26: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV26: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV26: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV26")
            },
            TextEntryDataV26: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV26"),
            resources: "ResourceDataV26",
            trackGroup: Pointer("TrackGroupDataV26")
        }
    };
    var V27$1 = {
        chunkName: "CSCN",
        name: "SceneDataV27",
        version: 27,
        definitions: {
            SequenceDataV27: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV27")
            },
            TrackGroupDataV27: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV27"),
                track: DynArray("TrackDataV27"),
                type: Uint8
            },
            PropertyDataV27: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV27: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV27"),
                flagKey: DynArray("FlagKeyDataV27"),
                triggerKey: DynArray("TriggerKeyDataV27"),
                type: Uint8
            },
            CurveKeyDataV27: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV27: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV27: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV27: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV27"),
                fileNameRef: DynArray("FileNameRefDataV27"),
                script: DynArray("ScriptDataV27"),
                textResource: DynArray("TextResourceDataV27")
            },
            AmbientLightDataV27: {
                ambientGroundColor: "ColorDefDataV27",
                ambientSkyColor: "ColorDefDataV27",
                fillColor: "ColorDefDataV27",
                hemisphericalColor: "ColorDefDataV27",
                name: Uint64
            },
            ColorDefDataV27: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV27: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV27: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV27: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV27")
            },
            TextEntryDataV27: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV27"),
            resources: "ResourceDataV27",
            trackGroup: Pointer("TrackGroupDataV27")
        }
    };
    var V28$1 = {
        chunkName: "CSCN",
        name: "SceneDataV28",
        version: 28,
        definitions: {
            SequenceDataV28: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV28")
            },
            TrackGroupDataV28: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV28"),
                track: DynArray("TrackDataV28"),
                type: Uint8
            },
            PropertyDataV28: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV28: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV28"),
                flagKey: DynArray("FlagKeyDataV28"),
                triggerKey: DynArray("TriggerKeyDataV28"),
                type: Uint8
            },
            CurveKeyDataV28: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV28: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV28: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV28: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV28"),
                fileNameRef: DynArray("FileNameRefDataV28"),
                script: DynArray("ScriptDataV28"),
                textResource: DynArray("TextResourceDataV28")
            },
            AmbientLightDataV28: {
                ambientGroundColor: "ColorDefDataV28",
                ambientSkyColor: "ColorDefDataV28",
                fillColor: "ColorDefDataV28",
                hemisphericalColor: "ColorDefDataV28",
                name: Uint64
            },
            ColorDefDataV28: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV28: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV28: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV28: {
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV28")
            },
            TextEntryDataV28: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV28"),
            resources: "ResourceDataV28",
            trackGroup: Pointer("TrackGroupDataV28")
        }
    };
    var V29$2 = {
        chunkName: "CSCN",
        name: "SceneDataV29",
        version: 29,
        definitions: {
            SequenceDataV29: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV29")
            },
            TrackGroupDataV29: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV29"),
                track: DynArray("TrackDataV29"),
                type: Uint8
            },
            PropertyDataV29: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV29: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV29"),
                flagKey: DynArray("FlagKeyDataV29"),
                triggerKey: DynArray("TriggerKeyDataV29"),
                type: Uint8
            },
            CurveKeyDataV29: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV29: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV29: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV29: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV29"),
                fileNameRef: DynArray("FileNameRefDataV29"),
                script: DynArray("ScriptDataV29"),
                textResource: DynArray("TextResourceDataV29")
            },
            AmbientLightDataV29: {
                ambientGroundColor: "ColorDefDataV29",
                ambientSkyColor: "ColorDefDataV29",
                fillColor: "ColorDefDataV29",
                hemisphericalColor: "ColorDefDataV29",
                name: Uint64
            },
            ColorDefDataV29: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV29: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV29: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV29: {
                guid: FixedArray(Uint8, 16),
                name: Uint64,
                id: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV29")
            },
            TextEntryDataV29: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV29"),
            resources: "ResourceDataV29",
            trackGroup: Pointer("TrackGroupDataV29")
        }
    };
    var V30$2 = {
        chunkName: "CSCN",
        name: "SceneDataV30",
        version: 30,
        definitions: {
            SequenceDataV30: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV30")
            },
            TrackGroupDataV30: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV30"),
                track: DynArray("TrackDataV30"),
                type: Uint8
            },
            PropertyDataV30: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV30: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV30"),
                flagKey: DynArray("FlagKeyDataV30"),
                triggerKey: DynArray("TriggerKeyDataV30"),
                type: Uint8
            },
            CurveKeyDataV30: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV30: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV30: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV30: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV30"),
                fileNameRef: DynArray("FileNameRefDataV30"),
                script: DynArray("ScriptDataV30"),
                textResource: DynArray("TextResourceDataV30")
            },
            AmbientLightDataV30: {
                ambientGroundColor: "ColorDefDataV30",
                ambientSkyColor: "ColorDefDataV30",
                fillColor: "ColorDefDataV30",
                hemisphericalColor: "ColorDefDataV30",
                name: Uint64
            },
            ColorDefDataV30: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV30: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV30: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV30: {
                name: Uint64,
                index: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV30")
            },
            TextEntryDataV30: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV30"),
            resources: "ResourceDataV30",
            trackGroup: Pointer("TrackGroupDataV30")
        }
    };
    var V31$2 = {
        chunkName: "CSCN",
        name: "SceneDataV31",
        version: 31,
        definitions: {
            SequenceDataV31: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV31")
            },
            TrackGroupDataV31: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV31"),
                track: DynArray("TrackDataV31"),
                type: Uint8
            },
            PropertyDataV31: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV31: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV31"),
                flagKey: DynArray("FlagKeyDataV31"),
                triggerKey: DynArray("TriggerKeyDataV31"),
                type: Uint8
            },
            CurveKeyDataV31: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV31: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV31: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV31: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV31"),
                fileNameRef: DynArray("FileNameRefDataV31"),
                script: DynArray("ScriptDataV31"),
                textResource: DynArray("TextResourceDataV31")
            },
            AmbientLightDataV31: {
                ambientGroundColor: "ColorDefDataV31",
                ambientSkyColor: "ColorDefDataV31",
                fillColor: "ColorDefDataV31",
                hemisphericalColor: "ColorDefDataV31",
                name: Uint64
            },
            ColorDefDataV31: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV31: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV31: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV31: {
                name: Uint64,
                index: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV31")
            },
            TextEntryDataV31: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV31"),
            resources: "ResourceDataV31",
            trackGroup: Pointer("TrackGroupDataV31")
        }
    };
    var V32$2 = {
        chunkName: "CSCN",
        name: "SceneDataV32",
        version: 32,
        definitions: {
            SequenceDataV32: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV32")
            },
            TrackGroupDataV32: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV32"),
                track: DynArray("TrackDataV32"),
                type: Uint8
            },
            PropertyDataV32: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV32: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV32"),
                flagKey: DynArray("FlagKeyDataV32"),
                triggerKey: DynArray("TriggerKeyDataV32"),
                type: Uint8
            },
            CurveKeyDataV32: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV32: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV32: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV32: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV32"),
                fileNameRef: DynArray("FileNameRefDataV32"),
                script: DynArray("ScriptDataV32"),
                textResource: DynArray("TextResourceDataV32")
            },
            AmbientLightDataV32: {
                ambientGroundColor: "ColorDefDataV32",
                ambientSkyColor: "ColorDefDataV32",
                fillColor: "ColorDefDataV32",
                hemisphericalColor: "ColorDefDataV32",
                name: Uint64
            },
            ColorDefDataV32: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV32: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV32: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV32: {
                name: Uint64,
                index: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV32")
            },
            TextEntryDataV32: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV32"),
            resources: "ResourceDataV32",
            trackGroup: Pointer("TrackGroupDataV32")
        }
    };
    var V33$2 = {
        chunkName: "CSCN",
        name: "SceneDataV33",
        version: 33,
        definitions: {
            SequenceDataV33: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV33")
            },
            TrackGroupDataV33: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV33"),
                track: DynArray("TrackDataV33"),
                type: Uint8
            },
            PropertyDataV33: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV33: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV33"),
                flagKey: DynArray("FlagKeyDataV33"),
                triggerKey: DynArray("TriggerKeyDataV33"),
                type: Uint8
            },
            CurveKeyDataV33: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV33: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV33: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV33: {
                crc: Uint32,
                ambientLightResource: DynArray("AmbientLightDataV33"),
                fileNameRef: DynArray("FileNameRefDataV33"),
                script: DynArray("ScriptDataV33"),
                textResource: DynArray("TextResourceDataV33")
            },
            AmbientLightDataV33: {
                ambientGroundColor: "ColorDefDataV33",
                ambientSkyColor: "ColorDefDataV33",
                fillColor: "ColorDefDataV33",
                hemisphericalColor: "ColorDefDataV33",
                name: Uint64
            },
            ColorDefDataV33: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV33: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV33: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV33: {
                name: Uint64,
                index: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV33")
            },
            TextEntryDataV33: {
                text: RefString16(),
                language: Uint8
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV33"),
            resources: "ResourceDataV33",
            trackGroup: Pointer("TrackGroupDataV33")
        }
    };
    var V34$2 = {
        chunkName: "CSCN",
        name: "SceneDataV34",
        version: 34,
        definitions: {
            SequenceDataV34: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV34")
            },
            TrackGroupDataV34: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV34"),
                track: DynArray("TrackDataV34"),
                type: Uint8
            },
            PropertyDataV34: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV34: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV34"),
                flagKey: DynArray("FlagKeyDataV34"),
                triggerKey: DynArray("TriggerKeyDataV34"),
                type: Uint8
            },
            CurveKeyDataV34: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV34: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV34: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV34: {
                ambientLightResource: DynArray("AmbientLightDataV34"),
                fileNameRef: DynArray("FileNameRefDataV34"),
                script: DynArray("ScriptDataV34"),
                textResource: DynArray("TextResourceDataV34"),
                speciesResource: DynArray("SpeciesResourceDataV34")
            },
            AmbientLightDataV34: {
                ambientGroundColor: "ColorDefDataV34",
                ambientSkyColor: "ColorDefDataV34",
                fillColor: "ColorDefDataV34",
                hemisphericalColor: "ColorDefDataV34",
                name: Uint64
            },
            ColorDefDataV34: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV34: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV34: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV34: {
                name: Uint64,
                index: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV34")
            },
            TextEntryDataV34: {
                text: RefString16(),
                language: Uint8
            },
            SpeciesResourceDataV34: {
                speciesId: FixedArray(Uint8, 16),
                modelId: Uint64,
                modelVariant: Uint64
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV34"),
            resources: "ResourceDataV34",
            trackGroup: Pointer("TrackGroupDataV34")
        }
    };
    var V35$2 = {
        chunkName: "CSCN",
        name: "SceneDataV35",
        version: 35,
        definitions: {
            SequenceDataV35: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV35")
            },
            TrackGroupDataV35: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV35"),
                track: DynArray("TrackDataV35"),
                type: Uint8
            },
            PropertyDataV35: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV35: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV35"),
                flagKey: DynArray("FlagKeyDataV35"),
                triggerKey: DynArray("TriggerKeyDataV35"),
                type: Uint8
            },
            CurveKeyDataV35: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV35: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV35: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV35: {
                ambientLightResource: DynArray("AmbientLightDataV35"),
                fileNameRef: DynArray("FileNameRefDataV35"),
                script: DynArray("ScriptDataV35"),
                textResource: DynArray("TextResourceDataV35"),
                speciesResource: DynArray("SpeciesResourceDataV35")
            },
            AmbientLightDataV35: {
                ambientGroundColor: "ColorDefDataV35",
                ambientSkyColor: "ColorDefDataV35",
                fillColor: "ColorDefDataV35",
                hemisphericalColor: "ColorDefDataV35",
                name: Uint64
            },
            ColorDefDataV35: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV35: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV35: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV35: {
                name: Uint64,
                index: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV35")
            },
            TextEntryDataV35: {
                text: RefString16(),
                language: Uint8
            },
            SpeciesResourceDataV35: {
                speciesId: FixedArray(Uint8, 16),
                name: Uint64,
                modelId: Uint64,
                modelVariant: Uint64
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV35"),
            resources: "ResourceDataV35",
            trackGroup: Pointer("TrackGroupDataV35")
        }
    };
    var V36$2 = {
        chunkName: "CSCN",
        name: "SceneDataV36",
        version: 36,
        definitions: {
            SequenceDataV36: {
                name: Uint64,
                playScript: Uint64,
                updateScript: Uint64,
                environmentMap: Filename(),
                map: RefString16(),
                clientMap: RefString16(),
                length: Float32,
                flags: Uint32,
                trackGroup: DynArray("TrackGroupDataV36")
            },
            TrackGroupDataV36: {
                name: Uint64,
                flags: Uint32,
                prop: DynArray("PropertyDataV36"),
                track: DynArray("TrackDataV36"),
                type: Uint8
            },
            PropertyDataV36: {
                value: Uint64,
                pathVal: Filename(),
                type: Uint8
            },
            TrackDataV36: {
                name: Uint64,
                curveKey: DynArray("CurveKeyDataV36"),
                flagKey: DynArray("FlagKeyDataV36"),
                triggerKey: DynArray("TriggerKeyDataV36"),
                type: Uint8
            },
            CurveKeyDataV36: {
                time: Float32,
                value: Float32,
                inTangent: Float32,
                outTangent: Float32
            },
            FlagKeyDataV36: {
                time: Float32,
                value: Float32
            },
            TriggerKeyDataV36: {
                time: Float32,
                flags1: Uint8,
                flags2: Uint8,
                flags3: Uint8,
                flags4: Uint8,
                token1: Uint64,
                token2: Uint64,
                value1: Float32,
                value2: Float32,
                value3: Float32,
                value4: Float32
            },
            ResourceDataV36: {
                ambientLightResource: DynArray("AmbientLightDataV36"),
                fileNameRef: DynArray("FileNameRefDataV36"),
                script: DynArray("ScriptDataV36"),
                textResource: DynArray("TextResourceDataV36"),
                speciesResource: DynArray("SpeciesResourceDataV36")
            },
            AmbientLightDataV36: {
                ambientGroundColor: "ColorDefDataV36",
                ambientSkyColor: "ColorDefDataV36",
                fillColor: "ColorDefDataV36",
                hemisphericalColor: "ColorDefDataV36",
                name: Uint64
            },
            ColorDefDataV36: {
                intensity: Float32,
                color: FixedArray(Uint8, 3)
            },
            FileNameRefDataV36: {
                name: Uint64,
                fileName: Filename()
            },
            ScriptDataV36: {
                name: Uint64,
                byteCode: DynArray(Uint8)
            },
            TextResourceDataV36: {
                name: Uint64,
                index: Uint32,
                voiceId: Uint32,
                textEntry: DynArray("TextEntryDataV36")
            },
            TextEntryDataV36: {
                text: RefString16(),
                language: Uint8
            },
            SpeciesResourceDataV36: {
                speciesId: FixedArray(Uint8, 16),
                name: Uint64,
                modelId: Uint64,
                modelVariant: Uint64
            }
        },
        root: {
            startingSequence: Uint64,
            sequence: DynArray("SequenceDataV36"),
            resources: "ResourceDataV36",
            trackGroup: Pointer("TrackGroupDataV36")
        }
    };
    var latest$12 = V36$2;
    var definitions$12 = { V0: V0$S, V1: V1$B, V2: V2$s, V3: V3$p, V4: V4$f, V5: V5$d, V6: V6$d, V7: V7$a, V8: V8$a, V9: V9$9, V10: V10$a, V11: V11$9, V12: V12$8, V13: V13$8, V14: V14$8, V15: V15$8, V16: V16$7, V17: V17$4, V18: V18$4, V19: V19$4, V20: V20$3, V21: V21$3, V22: V22$2, V23: V23$1, V24: V24$1, V25: V25$1, V26: V26$1, V27: V27$1, V28: V28$1, V29: V29$2, V30: V30$2, V31: V31$2, V32: V32$2, V33: V33$2, V34: V34$2, V35: V35$2, V36: V36$2 };
    var definitionArray$12 = Object.values(definitions$12);

    var CSCN = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$12,
        definitions: definitions$12,
        latest: latest$12
    });

    var V0$R = {
        chunkName: "cube",
        name: "PackMapCubeMapV0",
        version: 0,
        definitions: {
            PackMapCubeMapSampleV0: {
                position: FixedArray(Float32, 3),
                flags: Uint32,
                dataPtr: DynArray(Uint8)
            },
            PackMapCubeMapParamsV0: {
                modulateColor: Uint32,
                brightness: Float32,
                contrast: Float32,
                blurPasses: Uint32
            }
        },
        root: {
            sampleArray: DynArray("PackMapCubeMapSampleV0"),
            paramsArray: DynArray("PackMapCubeMapParamsV0")
        }
    };
    var V1$A = {
        chunkName: "cube",
        name: "PackMapCubeMapV1",
        version: 1,
        definitions: {
            PackMapCubeMapSampleV1: {
                position: FixedArray(Float32, 3),
                flags: Uint32,
                dayPtr: DynArray(Uint8),
                nightPtr: DynArray(Uint8)
            },
            PackMapCubeMapParamsV1: {
                modulateColor: Uint32,
                brightness: Float32,
                contrast: Float32,
                blurPasses: Uint32
            }
        },
        root: {
            sampleArray: DynArray("PackMapCubeMapSampleV1"),
            paramsArray: DynArray("PackMapCubeMapParamsV1")
        }
    };
    var V2$r = {
        chunkName: "cube",
        name: "PackMapCubeMapV2",
        version: 2,
        definitions: {
            PackMapCubeMapSampleV2: {
                position: FixedArray(Float32, 3),
                filenameDayDefault: Filename(),
                filenameNightDefault: Filename(),
                filenameDayScript: Filename(),
                filenameNightScript: Filename()
            },
            PackMapCubeMapParamsV2: {
                modulateColor: Uint32,
                brightness: Float32,
                contrast: Float32,
                blurPasses: Uint32
            }
        },
        root: {
            sampleArray: DynArray("PackMapCubeMapSampleV2"),
            paramsArray: DynArray("PackMapCubeMapParamsV2")
        }
    };
    var V3$o = {
        chunkName: "cube",
        name: "PackMapCubeMapV3",
        version: 3,
        definitions: {
            PackMapCubeMapSampleV3: {
                position: FixedArray(Float32, 3),
                filenameDayDefault: Filename(),
                filenameNightDefault: Filename(),
                filenameDayScript: Filename(),
                filenameNightScript: Filename(),
                envID: Uint64
            },
            PackMapCubeMapParamsV3: {
                modulateColor: Uint32,
                brightness: Float32,
                contrast: Float32,
                blurPasses: Uint32,
                envVolume: RefString16()
            }
        },
        root: {
            sampleArray: DynArray("PackMapCubeMapSampleV3"),
            paramsArray: DynArray("PackMapCubeMapParamsV3")
        }
    };
    var V4$e = {
        chunkName: "cube",
        name: "PackMapCubeMapV4",
        version: 4,
        definitions: {
            PackMapCubeMapSampleV4: {
                position: FixedArray(Float32, 3),
                filenameDayDefault: Filename(),
                filenameNightDefault: Filename(),
                filenameDayScript: Filename(),
                filenameNightScript: Filename(),
                filenameDayDefaultHiRes: Filename(),
                filenameNightDefaultHiRes: Filename(),
                filenameDayScriptHiRes: Filename(),
                filenameNightScriptHiRes: Filename(),
                envID: Uint64
            },
            PackMapCubeMapParamsV4: {
                modulateColor: Uint32,
                brightness: Float32,
                contrast: Float32,
                blurPasses: Uint32,
                envVolume: RefString16()
            }
        },
        root: {
            sampleArray: DynArray("PackMapCubeMapSampleV4"),
            paramsArray: DynArray("PackMapCubeMapParamsV4")
        }
    };
    var latest$11 = V4$e;
    var definitions$11 = { V0: V0$R, V1: V1$A, V2: V2$r, V3: V3$o, V4: V4$e };
    var definitionArray$11 = Object.values(definitions$11);

    var CUBE = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$11,
        definitions: definitions$11,
        latest: latest$11
    });

    var V0$Q = {
        chunkName: "DATA",
        name: "PagedImageEmbeddedPagesDataV0",
        version: 0,
        definitions: {
            PagedImageEmbeddedPageDataV0: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                rawData: DynArray(Uint8),
                compressedData: DynArray(Uint8)
            }
        },
        root: {
            pages: DynArray("PagedImageEmbeddedPageDataV0")
        }
    };
    var V1$z = {
        chunkName: "DATA",
        name: "PagedImageTableDataV1",
        version: 1,
        definitions: {
            PagedImageLayerDataV1: {
                dims: FixedArray(Uint32, 2),
                rawDims: FixedArray(Uint32, 2),
                diskFormat: Uint32,
                rawFormat: Uint32,
                strippedFormat: Uint32
            },
            PagedImagePageDataV1: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32,
                solidColor: FixedArray(Uint8, 4)
            }
        },
        root: {
            layers: DynArray("PagedImageLayerDataV1"),
            pages: DynArray("PagedImagePageDataV1")
        }
    };
    var V2$q = {
        chunkName: "DATA",
        name: "PagedImageTableDataV2",
        version: 2,
        definitions: {
            PagedImageLayerDataV2: {
                dims: FixedArray(Uint32, 2),
                rawDims: FixedArray(Uint32, 2),
                diskFormat: Uint32,
                rawFormat: Uint32,
                strippedFormat: Uint32
            },
            PagedImagePageDataV2: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32,
                solidColor: FixedArray(Uint8, 4)
            }
        },
        root: {
            layers: DynArray("PagedImageLayerDataV2"),
            pages: DynArray("PagedImagePageDataV2"),
            flags: Uint32
        }
    };
    var V3$n = {
        chunkName: "DATA",
        name: "PagedImageTableDataV3",
        version: 3,
        definitions: {
            PagedImageLayerDataV3: {
                rawDims: FixedArray(Uint32, 2),
                strippedDims: FixedArray(Uint32, 2),
                rawFormat: Uint32,
                strippedFormat: Uint32,
                diskFormat: Uint32
            },
            PagedImagePageDataV3: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32,
                solidColor: FixedArray(Uint8, 4)
            }
        },
        root: {
            layers: DynArray("PagedImageLayerDataV3"),
            rawPages: DynArray("PagedImagePageDataV3"),
            strippedPages: DynArray("PagedImagePageDataV3"),
            flags: Uint32
        }
    };
    var latest$10 = V3$n;
    var definitions$10 = { V0: V0$Q, V1: V1$z, V2: V2$q, V3: V3$n };
    var definitionArray$10 = Object.values(definitions$10);

    var DATA = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$10,
        definitions: definitions$10,
        latest: latest$10
    });

    var V1$y = {
        chunkName: "dcal",
        name: "PackMapDecalsV1",
        version: 1,
        definitions: {
            PackMapDecalV1: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScale: FixedArray(Float32, 2),
                textureOffset: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32
            }
        },
        root: {
            decals: DynArray("PackMapDecalV1")
        }
    };
    var V2$p = {
        chunkName: "dcal",
        name: "PackMapDecalsV2",
        version: 2,
        definitions: {
            PackMapDecalV2: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScale: FixedArray(Float32, 2),
                textureOffset: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32,
                animTranslation: FixedArray(Float32, 2),
                animScaleRangeX: FixedArray(Float32, 2),
                animScaleRangeY: FixedArray(Float32, 2),
                animScaleSpeed: FixedArray(Float32, 2),
                animRotation: Float32
            }
        },
        root: {
            decals: DynArray("PackMapDecalV2")
        }
    };
    var V3$m = {
        chunkName: "dcal",
        name: "PackMapDecalsV3",
        version: 3,
        definitions: {
            PackMapDecalV3: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScaleUV0: FixedArray(Float32, 2),
                textureOffsetUV0: FixedArray(Float32, 2),
                textureScaleUV1: FixedArray(Float32, 2),
                textureOffsetUV1: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32,
                animTranslation: FixedArray(Float32, 2),
                animScaleRangeX: FixedArray(Float32, 2),
                animScaleRangeY: FixedArray(Float32, 2),
                animScaleSpeed: FixedArray(Float32, 2),
                animRotation: Float32,
                surfaceBias: Float32
            }
        },
        root: {
            decals: DynArray("PackMapDecalV3")
        }
    };
    var V4$d = {
        chunkName: "dcal",
        name: "PackMapDecalsV4",
        version: 4,
        definitions: {
            PackMapDecalV4: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScaleUV0: FixedArray(Float32, 2),
                textureOffsetUV0: FixedArray(Float32, 2),
                textureScaleUV1: FixedArray(Float32, 2),
                textureOffsetUV1: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32,
                animTranslation: FixedArray(Float32, 2),
                animScaleRangeX: FixedArray(Float32, 2),
                animScaleRangeY: FixedArray(Float32, 2),
                animScaleSpeed: FixedArray(Float32, 2),
                animRotation: Float32,
                surfaceBias: Float32,
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            }
        },
        root: {
            decals: DynArray("PackMapDecalV4")
        }
    };
    var V5$c = {
        chunkName: "dcal",
        name: "PackMapDecalsV5",
        version: 5,
        definitions: {
            PackMapDecalV5: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScaleUV0: FixedArray(Float32, 2),
                textureOffsetUV0: FixedArray(Float32, 2),
                textureScaleUV1: FixedArray(Float32, 2),
                textureOffsetUV1: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32,
                animTranslation: FixedArray(Float32, 2),
                animScaleRangeX: FixedArray(Float32, 2),
                animScaleRangeY: FixedArray(Float32, 2),
                animScaleSpeed: FixedArray(Float32, 2),
                animRotation: Float32,
                surfaceBias: Float32,
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                vertices: DynArray("PackMapDecalVertexV4"),
                indices: DynArray(Uint16),
                propIds: DynArray(Uint64)
            },
            PackMapDecalVertexV4: {
                position: FixedArray(Float32, 3)
            }
        },
        root: {
            decals: DynArray("PackMapDecalV5")
        }
    };
    var V6$c = {
        chunkName: "dcal",
        name: "PackMapDecalsV6",
        version: 6,
        definitions: {
            PackMapDecalV6: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScaleUV0: FixedArray(Float32, 2),
                textureOffsetUV0: FixedArray(Float32, 2),
                textureScaleUV1: FixedArray(Float32, 2),
                textureOffsetUV1: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32,
                animTranslation: FixedArray(Float32, 2),
                animScaleRangeX: FixedArray(Float32, 2),
                animScaleRangeY: FixedArray(Float32, 2),
                animScaleSpeed: FixedArray(Float32, 2),
                animRotation: Float32,
                surfaceBias: Float32,
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                vertices: DynArray("PackMapDecalVertexV5"),
                indices: DynArray(Uint16),
                propIds: DynArray(Uint64),
                projection: Uint8
            },
            PackMapDecalVertexV5: {
                position: FixedArray(Float32, 3)
            }
        },
        root: {
            decals: DynArray("PackMapDecalV6")
        }
    };
    var V7$9 = {
        chunkName: "dcal",
        name: "PackMapDecalsV7",
        version: 7,
        definitions: {
            PackMapDecalV7: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScaleUV0: FixedArray(Float32, 2),
                textureOffsetUV0: FixedArray(Float32, 2),
                textureScaleUV1: FixedArray(Float32, 2),
                textureOffsetUV1: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32,
                animTranslation: FixedArray(Float32, 2),
                animScaleRangeX: FixedArray(Float32, 2),
                animScaleRangeY: FixedArray(Float32, 2),
                animScaleSpeed: FixedArray(Float32, 2),
                animRotation: Float32,
                surfaceBias: Float32,
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                vertices: DynArray("PackMapDecalVertexV6"),
                indices: DynArray(Uint16),
                propIds: DynArray(Uint64),
                projection: Uint8,
                id: Uint64
            },
            PackMapDecalVertexV6: {
                position: FixedArray(Float32, 3)
            }
        },
        root: {
            decals: DynArray("PackMapDecalV7")
        }
    };
    var V8$9 = {
        chunkName: "dcal",
        name: "PackMapDecalsV8",
        version: 8,
        definitions: {
            PackMapDecalV8: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScaleUV0: FixedArray(Float32, 2),
                textureOffsetUV0: FixedArray(Float32, 2),
                textureScaleUV1: FixedArray(Float32, 2),
                textureOffsetUV1: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32,
                animTranslation: FixedArray(Float32, 2),
                animScaleRangeX: FixedArray(Float32, 2),
                animScaleRangeY: FixedArray(Float32, 2),
                animScaleSpeed: FixedArray(Float32, 2),
                animRotation: Float32,
                surfaceBias: Float32,
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                vertices: DynArray("PackMapDecalVertexV7"),
                indices: DynArray(Uint16),
                propIds: DynArray(Uint64),
                projection: Uint8,
                surfaceId: Uint64,
                id: Uint64
            },
            PackMapDecalVertexV7: {
                position: FixedArray(Float32, 3)
            }
        },
        root: {
            decals: DynArray("PackMapDecalV8")
        }
    };
    var V9$8 = {
        chunkName: "dcal",
        name: "PackMapDecalsV9",
        version: 9,
        definitions: {
            PackMapDecalV9: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScaleUV0: FixedArray(Float32, 2),
                textureOffsetUV0: FixedArray(Float32, 2),
                textureScaleUV1: FixedArray(Float32, 2),
                textureOffsetUV1: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32,
                animTranslation: FixedArray(Float32, 2),
                animScaleRangeX: FixedArray(Float32, 2),
                animScaleRangeY: FixedArray(Float32, 2),
                animScaleSpeed: FixedArray(Float32, 2),
                animRotation: Float32,
                surfaceBias: Float32,
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                vertices: DynArray("PackMapDecalVertexV8"),
                indices: DynArray(Uint16),
                propIds: DynArray(Uint64),
                projection: Uint8,
                surfaceId: Uint64,
                id: Uint64
            },
            PackMapDecalVertexV8: {
                position: FixedArray(Float32, 3),
                normal: FixedArray(Float32, 3),
                tangent: FixedArray(Float32, 3),
                bitangent: FixedArray(Float32, 3)
            }
        },
        root: {
            decals: DynArray("PackMapDecalV9")
        }
    };
    var V10$9 = {
        chunkName: "dcal",
        name: "PackMapDecalsV10",
        version: 10,
        definitions: {
            PackMapDecalV10: {
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                textureScaleUV0: FixedArray(Float32, 2),
                textureOffsetUV0: FixedArray(Float32, 2),
                textureScaleUV1: FixedArray(Float32, 2),
                textureOffsetUV1: FixedArray(Float32, 2),
                gridSize: FixedArray(Float32, 2),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                flags: Uint32,
                animTranslation: FixedArray(Float32, 2),
                animScaleRangeX: FixedArray(Float32, 2),
                animScaleRangeY: FixedArray(Float32, 2),
                animScaleSpeed: FixedArray(Float32, 2),
                animRotation: Float32,
                surfaceBias: Float32,
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                vertices: DynArray("PackMapDecalVertexV9"),
                indices: DynArray(Uint16),
                propIds: DynArray(Uint64),
                projection: Uint8,
                surfaceId: Uint64,
                id: Uint64
            },
            PackMapDecalVertexV9: {
                position: FixedArray(Float32, 3),
                normal: FixedArray(Float32, 3),
                tangent: FixedArray(Float32, 3),
                bitangent: FixedArray(Float32, 3)
            }
        },
        root: {
            decals: DynArray("PackMapDecalV10")
        }
    };
    var latest$$ = V10$9;
    var definitions$$ = { V1: V1$y, V2: V2$p, V3: V3$m, V4: V4$d, V5: V5$c, V6: V6$c, V7: V7$9, V8: V8$9, V9: V9$8, V10: V10$9 };
    var definitionArray$$ = Object.values(definitions$$);

    var DCAL = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$$,
        definitions: definitions$$,
        latest: latest$$
    });

    var V0$P = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV0",
        version: 0,
        definitions: {
            AmatDx9SamplerV0: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV0: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV0: {
                name: RefString(),
                sortTri: Uint32,
                passes: DynArray("AmatDx9PassV0"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV0: {
                renderState: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV0"),
            shaders: DynArray("AmatDx9ShaderV0"),
            techniques: DynArray("AmatDx9TechniqueV0")
        }
    };
    var V1$x = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV1",
        version: 1,
        definitions: {
            AmatDx9SamplerV1: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV1: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV1: {
                name: RefString(),
                sortTri: Uint32,
                passes: DynArray("AmatDx9PassV1"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV1: {
                effectRenderStates: RefArray("AmatDx9RenderStatesV1"),
                samplerIndex: DynArray(Uint32),
                pixelShader: FixedArray(Uint32, 5),
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: FixedArray(Uint32, 5)
            },
            AmatDx9RenderStatesV1: {
                renderStates: DynArray(Uint32)
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV1"),
            shaders: DynArray("AmatDx9ShaderV1"),
            techniques: DynArray("AmatDx9TechniqueV1")
        }
    };
    var V2$o = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV2",
        version: 2,
        definitions: {
            AmatDx9SamplerV2: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV2: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV2: {
                name: RefString(),
                sortTri: Uint32,
                passes: DynArray("AmatDx9PassV2"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV2: {
                effects: FixedArray("AmatDx9EffectV2", 7)
            },
            AmatDx9EffectV2: {
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV2"),
            shaders: DynArray("AmatDx9ShaderV2"),
            techniques: DynArray("AmatDx9TechniqueV2")
        }
    };
    var V3$l = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV3",
        version: 3,
        definitions: {
            AmatDx9SamplerV3: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV3: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV3: {
                name: RefString(),
                sortTri: Uint32,
                passes: DynArray("AmatDx9PassV3"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV3: {
                effects: FixedArray("AmatDx9EffectV3", 7)
            },
            AmatDx9EffectV3: {
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV3"),
            shaders: DynArray("AmatDx9ShaderV3"),
            techniques: DynArray("AmatDx9TechniqueV3")
        }
    };
    var V4$c = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV4",
        version: 4,
        definitions: {
            AmatDx9SamplerV4: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV4: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV4: {
                name: RefString(),
                sortTri: Uint32,
                passes: DynArray("AmatDx9PassV4"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV4: {
                effects: FixedArray("AmatDx9EffectV4", 7)
            },
            AmatDx9EffectV4: {
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV4"),
            shaders: DynArray("AmatDx9ShaderV4"),
            techniques: DynArray("AmatDx9TechniqueV4")
        }
    };
    var V5$b = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV5",
        version: 5,
        definitions: {
            AmatDx9SamplerV5: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV5: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV5: {
                name: RefString(),
                sortTri: Uint32,
                passes: DynArray("AmatDx9PassV5"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV5: {
                effects: FixedArray("AmatDx9EffectV5", 7)
            },
            AmatDx9EffectV5: {
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV5"),
            shaders: DynArray("AmatDx9ShaderV5"),
            techniques: DynArray("AmatDx9TechniqueV5")
        }
    };
    var V6$b = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV6",
        version: 6,
        definitions: {
            AmatDx9SamplerV6: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV6: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV6: {
                name: RefString(),
                passes: DynArray("AmatDx9PassV6"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV6: {
                effects: FixedArray("AmatDx9EffectV6", 8)
            },
            AmatDx9EffectV6: {
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV6"),
            shaders: DynArray("AmatDx9ShaderV6"),
            techniques: DynArray("AmatDx9TechniqueV6")
        }
    };
    var V7$8 = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV7",
        version: 7,
        definitions: {
            AmatDx9SamplerV7: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV7: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV7: {
                name: RefString(),
                passes: DynArray("AmatDx9PassV7"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV7: {
                effects: FixedArray("AmatDx9EffectV7", 8)
            },
            AmatDx9EffectV7: {
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV7"),
            shaders: DynArray("AmatDx9ShaderV7"),
            techniques: DynArray("AmatDx9TechniqueV7")
        }
    };
    var V8$8 = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV8",
        version: 8,
        definitions: {
            AmatDx9SamplerV8: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV8: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV8: {
                name: RefString(),
                passes: DynArray("AmatDx9PassV8"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV8: {
                effects: RefArray("AmatDx9EffectV8")
            },
            AmatDx9EffectV8: {
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV8"),
            shaders: DynArray("AmatDx9ShaderV8"),
            techniques: DynArray("AmatDx9TechniqueV8")
        }
    };
    var V9$7 = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV9",
        version: 9,
        definitions: {
            AmatDx9SamplerV9: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV9: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32)
            },
            AmatDx9TechniqueV9: {
                name: RefString(),
                passes: DynArray("AmatDx9PassV9"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV9: {
                effects: RefArray("AmatDx9EffectV9")
            },
            AmatDx9EffectV9: {
                token: Uint64,
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV9"),
            shaders: DynArray("AmatDx9ShaderV9"),
            techniques: DynArray("AmatDx9TechniqueV9")
        }
    };
    var V10$8 = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV10",
        version: 10,
        definitions: {
            AmatDx9SamplerV10: {
                textureIndex: Uint32,
                state: DynArray(Uint32)
            },
            AmatDx9ShaderV10: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32),
                instructionCount: Uint16
            },
            AmatDx9TechniqueV10: {
                name: RefString(),
                passes: DynArray("AmatDx9PassV10"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV10: {
                effects: RefArray("AmatDx9EffectV10")
            },
            AmatDx9EffectV10: {
                token: Uint64,
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV10"),
            shaders: DynArray("AmatDx9ShaderV10"),
            techniques: DynArray("AmatDx9TechniqueV10")
        }
    };
    var V11$8 = {
        chunkName: "DX9S",
        name: "AmatDx9MaterialV11",
        version: 11,
        definitions: {
            AmatDx9SamplerV11: {
                textureIndex: Uint32,
                state: DynArray(Uint32),
                usesBindTexture: Uint32
            },
            AmatDx9ShaderV11: {
                shader: DynArray(Uint32),
                constRegisters: DynArray(Uint32),
                constTokens: DynArray(Uint32),
                instructionCount: Uint16
            },
            AmatDx9TechniqueV11: {
                name: RefString(),
                passes: DynArray("AmatDx9PassV11"),
                maxPsVersion: Uint16,
                maxVsVersion: Uint16
            },
            AmatDx9PassV11: {
                effects: RefArray("AmatDx9EffectV11")
            },
            AmatDx9EffectV11: {
                token: Uint64,
                renderStates: DynArray(Uint32),
                samplerIndex: DynArray(Uint32),
                pixelShader: Uint32,
                vertexShader: Uint32,
                texGen: DynArray(Uint32),
                vsGenFlags: Uint32,
                passFlags: Uint32
            }
        },
        root: {
            samplers: DynArray("AmatDx9SamplerV11"),
            shaders: DynArray("AmatDx9ShaderV11"),
            techniques: DynArray("AmatDx9TechniqueV11"),
            useLegacyBindTextures: Uint32
        }
    };
    var latest$_ = V11$8;
    var definitions$_ = { V0: V0$P, V1: V1$x, V2: V2$o, V3: V3$l, V4: V4$c, V5: V5$b, V6: V6$b, V7: V7$8, V8: V8$8, V9: V9$7, V10: V10$8, V11: V11$8 };
    var definitionArray$_ = Object.values(definitions$_);

    var DX9S = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$_,
        definitions: definitions$_,
        latest: latest$_
    });

    var V3$k = {
        chunkName: "edit",
        name: "MapEditData",
        version: 3,
        definitions: {
            MapEditRegion: {
                ambientColor: FixedArray(Uint8, 3),
                directionalColor: FixedArray(Uint8, 3),
                ambientIntenisty: Float32,
                directionalIntenisty: Float32
            },
            MapEditLayers: {
                layerStates: DynArray(Uint8)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2))
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            }
        },
        root: {
            regions: "MapEditRegion",
            miniMapParams: "MapEditRegion",
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            camLocations: DynArray("MapEditCamLocations")
        }
    };
    var V4$b = {
        chunkName: "edit",
        name: "MapEditData",
        version: 4,
        definitions: {
            MapEditRegion: {
                ambientColor: FixedArray(Uint8, 3),
                directionalColor: FixedArray(Uint8, 3),
                ambientIntenisty: Float32,
                directionalIntenisty: Float32
            },
            MapEditLayers: {
                layerPropCount: FixedArray(Uint32, 31),
                layerStates: FixedArray(Uint8, 31)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2))
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            }
        },
        root: {
            regions: "MapEditRegion",
            miniMapParams: "MapEditRegion",
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            camLocations: DynArray("MapEditCamLocations")
        }
    };
    var V5$a = {
        chunkName: "edit",
        name: "MapEditData",
        version: 5,
        definitions: {
            MapEditRegion: {
                ambientColor: FixedArray(Uint8, 3),
                directionalColor: FixedArray(Uint8, 3),
                ambientIntenisty: Float32,
                directionalIntenisty: Float32
            },
            MapEditLayers: {
                layerPropCount: FixedArray(Uint32, 31),
                layerStates: FixedArray(Uint8, 31)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2))
            },
            PackMapEditDirtyChunks: {
                dirtyFlags: Uint32,
                chunkCoord: FixedArray(Uint32, 2)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            }
        },
        root: {
            regions: "MapEditRegion",
            miniMapParams: "MapEditRegion",
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations")
        }
    };
    var V6$a = {
        chunkName: "edit",
        name: "MapEditData",
        version: 6,
        definitions: {
            MapEditRegion: {
                ambientColor: FixedArray(Uint8, 3),
                directionalColor: FixedArray(Uint8, 3),
                ambientIntenisty: Float32,
                directionalIntenisty: Float32
            },
            MapEditLayers: {
                layerPropCount: FixedArray(Uint32, 31),
                layerStates: FixedArray(Uint8, 31)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2))
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            }
        },
        root: {
            regions: "MapEditRegion",
            miniMapParams: "MapEditRegion",
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            floodPoints: DynArray("PackMapEditDirtyChunks")
        }
    };
    var V7$7 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 7,
        definitions: {
            MapEditLayers: {
                layerPropCount: FixedArray(Uint32, 31),
                layerStates: FixedArray(Uint8, 31)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            floodPoints: DynArray("PackMapEditDirtyChunks")
        }
    };
    var V8$7 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 8,
        definitions: {
            MapEditLayers: {
                layerPropCount: FixedArray(Uint32, 31),
                layerStates: FixedArray(Uint8, 31),
                layerNames: FixedArray(RefString16(), 31)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            floodPoints: DynArray("PackMapEditDirtyChunks")
        }
    };
    var V9$6 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 9,
        definitions: {
            MapEditLayers: {
                layerPropCount: FixedArray(Uint32, 31),
                layerStates: FixedArray(Uint8, 31),
                layerNames: FixedArray(RefString16(), 31)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            floodPoints: DynArray("PackMapEditDirtyChunks"),
            mapHome: RefString16(),
            homeSave: Uint8
        }
    };
    var V10$7 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 10,
        definitions: {
            MapEditLayers: {
                layerPropCount: FixedArray(Uint32, 31),
                layerStates: FixedArray(Uint8, 31),
                layerNames: FixedArray(RefString16(), 31)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            floodPoints: DynArray("PackMapEditDirtyChunks"),
            mapHome: RefString16(),
            homeSave: Uint8,
            reserved: RefString16()
        }
    };
    var V11$7 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 11,
        definitions: {
            MapEditLayers: {
                layerStates: FixedArray(Uint8, 31),
                layerNames: FixedArray(RefString16(), 31),
                items: DynArray("MapEditLayerItem")
            },
            MapEditLayerItem: {
                guid: Uint64,
                moduleId: Uint32,
                layerFlags: Uint32
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            },
            MapEditSnapPoint: {
                guid: Uint64,
                moduleId: Uint32,
                flags: Uint32,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            floodPoints: DynArray("PackMapEditDirtyChunks"),
            snapPoints: DynArray("MapEditSnapPoint"),
            mapHome: RefString16(),
            homeSave: Uint8,
            reserved: RefString16()
        }
    };
    var V12$7 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 12,
        definitions: {
            MapEditLayers: {
                layerStates: FixedArray(Uint8, 31),
                layerNames: FixedArray(RefString16(), 31),
                items: DynArray("MapEditLayerItem")
            },
            MapEditLayerItem: {
                guid: Uint64,
                moduleId: Uint32,
                layerFlags: Uint32
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            },
            MapEditSnapPoint: {
                guid: Uint64,
                moduleId: Uint32,
                flags: Uint32,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            floodPoints: DynArray("PackMapEditDirtyChunks"),
            snapPoints: DynArray("MapEditSnapPoint"),
            mapHome: RefString16(),
            homeSave: Uint8,
            reserved: RefString16()
        }
    };
    var V13$7 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 13,
        definitions: {
            MapEditLayers: {
                layerStates: DynArray(Uint8),
                layerNames: DynArray(RefString16()),
                layerIds: DynArray(Uint32),
                items: DynArray("MapEditLayerItem")
            },
            MapEditLayerItem: {
                guid: Uint64,
                moduleId: Uint32,
                layerFlags: DynArray(Uint32)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            },
            MapEditSnapPoint: {
                guid: Uint64,
                moduleId: Uint32,
                flags: Uint32,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            floodPoints: DynArray("PackMapEditDirtyChunks"),
            snapPoints: DynArray("MapEditSnapPoint"),
            mapHome: RefString16(),
            homeSave: Uint8,
            reserved: RefString16()
        }
    };
    var V14$7 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 14,
        definitions: {
            MapEditLayers: {
                layerStates: DynArray(Uint8),
                layerNames: DynArray(RefString16()),
                layerIds: DynArray(Uint32),
                items: DynArray("MapEditLayerItem")
            },
            MapEditLayerItem: {
                guid: Uint64,
                moduleId: Uint32,
                layerFlags: DynArray(Uint32)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            },
            PackMapEditNavMeshData: {
                floodPoints: DynArray("PackMapEditDirtyChunks"),
                surfacePolys: DynArray("PackMapEditSurfacePoly"),
                surfaceRoads: DynArray("PackMapEditSurfaceRoad")
            },
            PackMapEditSurfacePoly: {
                name: RefString16(),
                surfaceType: Uint32,
                vertices: DynArray(FixedArray(Float32, 2)),
                range: FixedArray(Float32, 2)
            },
            PackMapEditSurfaceRoad: {
                name: RefString16(),
                surfaceType: Uint32,
                nodes: DynArray("PackMapEditSurfaceRoadNode")
            },
            PackMapEditSurfaceRoadNode: {
                position: FixedArray(Float32, 3),
                radius: Float32
            },
            MapEditSnapPoint: {
                guid: Uint64,
                moduleId: Uint32,
                flags: Uint32,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            navMeshData: "PackMapEditNavMeshData",
            snapPoints: DynArray("MapEditSnapPoint"),
            mapHome: RefString16(),
            homeSave: Uint8,
            reserved: RefString16()
        }
    };
    var V15$7 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 15,
        definitions: {
            MapEditLayers: {
                layerStates: DynArray(Uint8),
                layerNames: DynArray(RefString16()),
                layerIds: DynArray(Uint32),
                items: DynArray("MapEditLayerItem")
            },
            MapEditLayerItem: {
                guid: Uint64,
                moduleId: Uint32,
                layerFlags: DynArray(Uint32)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            },
            PackMapEditNavMeshData: {
                floodPoints: DynArray("PackMapEditDirtyChunks"),
                surfacePolys: DynArray("PackMapEditSurfacePoly"),
                surfaceRoads: DynArray("PackMapEditSurfaceRoad")
            },
            PackMapEditSurfacePoly: {
                name: RefString16(),
                surfaceType: Uint32,
                vertices: DynArray(FixedArray(Float32, 2)),
                range: FixedArray(Float32, 2)
            },
            PackMapEditSurfaceRoad: {
                name: RefString16(),
                surfaceType: Uint32,
                nodes: DynArray("PackMapEditSurfaceRoadNode")
            },
            PackMapEditSurfaceRoadNode: {
                position: FixedArray(Float32, 3),
                radius: Float32
            },
            MapEditSnapPoint: {
                guid: Uint64,
                moduleId: Uint32,
                flags: Uint32,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            MapEditMeasureSpan: {
                name: RefString16(),
                substrateId0: Uint64,
                substrateId1: Uint64,
                substrateModuleId0: Uint32,
                substrateModuleId1: Uint32,
                position0: FixedArray(Float32, 3),
                position1: FixedArray(Float32, 3),
                limits: FixedArray(Float32, 3)
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            navMeshData: "PackMapEditNavMeshData",
            snapPoints: DynArray("MapEditSnapPoint"),
            measureSpans: DynArray("MapEditMeasureSpan"),
            mapHome: RefString16(),
            homeSave: Uint8,
            reserved: RefString16()
        }
    };
    var V16$6 = {
        chunkName: "edit",
        name: "MapEditData",
        version: 16,
        definitions: {
            MapEditLayers: {
                layerStates: DynArray(Uint8),
                layerNames: DynArray(RefString16()),
                layerIds: DynArray(Uint32),
                items: DynArray("MapEditLayerItem")
            },
            MapEditLayerItem: {
                guid: Uint64,
                moduleId: Uint32,
                layerFlags: DynArray(Uint32)
            },
            PackMapEditAnnotations: {
                annotations: DynArray("PackMapEditAnnotation")
            },
            PackMapEditAnnotation: {
                name: RefString16(),
                flags: Uint32,
                anchors: DynArray(FixedArray(Float32, 2)),
                zRange: FixedArray(Float32, 2)
            },
            PackMapEditDirtyChunks: {
                flags: Uint32,
                position: FixedArray(Float32, 3)
            },
            MapEditCamLocations: {
                attack: Float32,
                rotation: Float32,
                position: FixedArray(Float32, 3),
                name: RefString16()
            },
            PackMapEditNavMeshData: {
                floodPoints: DynArray("PackMapEditDirtyChunks"),
                surfacePolys: DynArray("PackMapEditSurfacePoly"),
                surfaceRoads: DynArray("PackMapEditSurfaceRoad"),
                propModesForGeneration: DynArray("PackMapEditNavmeshGenPropMode")
            },
            PackMapEditSurfacePoly: {
                name: RefString16(),
                surfaceType: Uint32,
                vertices: DynArray(FixedArray(Float32, 2)),
                range: FixedArray(Float32, 2)
            },
            PackMapEditSurfaceRoad: {
                name: RefString16(),
                surfaceType: Uint32,
                nodes: DynArray("PackMapEditSurfaceRoadNode")
            },
            PackMapEditSurfaceRoadNode: {
                position: FixedArray(Float32, 3),
                radius: Float32
            },
            PackMapEditNavmeshGenPropMode: {
                propId: Uint64,
                mode: Uint8,
                animSequence: Uint64
            },
            MapEditSnapPoint: {
                guid: Uint64,
                moduleId: Uint32,
                flags: Uint32,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            MapEditMeasureSpan: {
                name: RefString16(),
                substrateId0: Uint64,
                substrateId1: Uint64,
                substrateModuleId0: Uint32,
                substrateModuleId1: Uint32,
                position0: FixedArray(Float32, 3),
                position1: FixedArray(Float32, 3),
                limits: FixedArray(Float32, 3)
            }
        },
        root: {
            layers: "MapEditLayers",
            annotations: "PackMapEditAnnotations",
            dirtyChunks: DynArray("PackMapEditDirtyChunks"),
            camLocations: DynArray("MapEditCamLocations"),
            navMeshData: "PackMapEditNavMeshData",
            snapPoints: DynArray("MapEditSnapPoint"),
            measureSpans: DynArray("MapEditMeasureSpan"),
            mapHome: RefString16(),
            homeSave: Uint8,
            reserved: RefString16()
        }
    };
    var latest$Z = V16$6;
    var definitions$Z = { V3: V3$k, V4: V4$b, V5: V5$a, V6: V6$a, V7: V7$7, V8: V8$7, V9: V9$6, V10: V10$7, V11: V11$7, V12: V12$7, V13: V13$7, V14: V14$7, V15: V15$7, V16: V16$6 };
    var definitionArray$Z = Object.values(definitions$Z);

    var EDIT = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$Z,
        definitions: definitions$Z,
        latest: latest$Z
    });

    var V29$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV29",
        version: 29,
        definitions: {
            PackMapEnvDataLocalV29: {
                lighting: DynArray("PackMapEnvDataLightingV29"),
                clouds: Pointer("PackMapEnvDataCloudsV29"),
                effect: RefArray("PackMapEnvDataEffectV29"),
                haze: RefArray("PackMapEnvDataHazeV29"),
                particleFields: RefArray("PackMapEnvDataPFieldV29"),
                sky: Pointer("PackMapEnvDataSkyV29"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV29"),
                water: RefArray("PackMapEnvDataWaterV29"),
                wind: RefArray("PackMapEnvDataWindV29"),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV29: {
                lights: RefArray("PackMapEnvDataLightV29")
            },
            PackMapEnvDataLightV29: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV29: {
                layers: DynArray("PackMapEnvDataLayerV29")
            },
            PackMapEnvDataLayerV29: {
                altitude: Float32,
                scale: Float32,
                texture: Filename(),
                day: "PackMapEnvDataLayerAttributesV29",
                night: "PackMapEnvDataLayerAttributesV29",
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV29: {
                density: Float32,
                depth: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV29: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32
            },
            PackMapEnvDataHazeV29: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV29: {
                angle: FixedArray(Float32, 2),
                deviation: Float32,
                extent: Uint16,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataSkyV29: {
                flags: Uint8,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV29: {
                cards: DynArray("PackMapEnvDataSkyCardV29")
            },
            PackMapEnvDataSkyCardV29: {
                day: "PackMapEnvDataSkyCardAttributesV29",
                night: "PackMapEnvDataSkyCardAttributesV29",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV29: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV29: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename()
            },
            PackMapEnvDataWindV29: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV29: {
                lighting: DynArray("PackMapEnvDataLightingV29"),
                clouds: Pointer("PackMapEnvDataCloudsV29"),
                effect: RefArray("PackMapEnvDataEffectV29"),
                haze: RefArray("PackMapEnvDataHazeV29"),
                particleFields: RefArray("PackMapEnvDataPFieldV29"),
                sky: Pointer("PackMapEnvDataSkyV29"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV29"),
                water: RefArray("PackMapEnvDataWaterV29"),
                wind: RefArray("PackMapEnvDataWindV29"),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV29"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV29: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV29"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV29")
        }
    };
    var V30$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV30",
        version: 30,
        definitions: {
            PackMapEnvDataLocalV30: {
                lighting: DynArray("PackMapEnvDataLightingV30"),
                clouds: Pointer("PackMapEnvDataCloudsV30"),
                effect: RefArray("PackMapEnvDataEffectV30"),
                haze: RefArray("PackMapEnvDataHazeV30"),
                particleFields: RefArray("PackMapEnvDataPFieldV30"),
                sky: Pointer("PackMapEnvDataSkyV30"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV30"),
                water: RefArray("PackMapEnvDataWaterV30"),
                wind: RefArray("PackMapEnvDataWindV30"),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV30: {
                lights: RefArray("PackMapEnvDataLightV30")
            },
            PackMapEnvDataLightV30: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV30: {
                layers: DynArray("PackMapEnvDataLayerV30")
            },
            PackMapEnvDataLayerV30: {
                altitude: Float32,
                cutOut: Float32,
                scale: Float32,
                texture: Filename(),
                day: "PackMapEnvDataLayerAttributesV30",
                night: "PackMapEnvDataLayerAttributesV30",
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV30: {
                density: Float32,
                depth: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV30: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32
            },
            PackMapEnvDataHazeV30: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV30: {
                angle: FixedArray(Float32, 2),
                deviation: Float32,
                extent: Uint16,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataSkyV30: {
                flags: Uint8,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV30: {
                cards: DynArray("PackMapEnvDataSkyCardV30")
            },
            PackMapEnvDataSkyCardV30: {
                day: "PackMapEnvDataSkyCardAttributesV30",
                night: "PackMapEnvDataSkyCardAttributesV30",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV30: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV30: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename()
            },
            PackMapEnvDataWindV30: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV30: {
                lighting: DynArray("PackMapEnvDataLightingV30"),
                clouds: Pointer("PackMapEnvDataCloudsV30"),
                effect: RefArray("PackMapEnvDataEffectV30"),
                haze: RefArray("PackMapEnvDataHazeV30"),
                particleFields: RefArray("PackMapEnvDataPFieldV30"),
                sky: Pointer("PackMapEnvDataSkyV30"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV30"),
                water: RefArray("PackMapEnvDataWaterV30"),
                wind: RefArray("PackMapEnvDataWindV30"),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV30"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV30: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV30"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV30")
        }
    };
    var V31$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV31",
        version: 31,
        definitions: {
            PackMapEnvDataLocalV31: {
                lighting: DynArray("PackMapEnvDataLightingV31"),
                clouds: Pointer("PackMapEnvDataCloudsV31"),
                effect: RefArray("PackMapEnvDataEffectV31"),
                haze: RefArray("PackMapEnvDataHazeV31"),
                particleFields: RefArray("PackMapEnvDataPFieldV31"),
                sky: Pointer("PackMapEnvDataSkyV31"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV31"),
                water: RefArray("PackMapEnvDataWaterV31"),
                wind: RefArray("PackMapEnvDataWindV31"),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV31: {
                lights: RefArray("PackMapEnvDataLightV31")
            },
            PackMapEnvDataLightV31: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV31: {
                layers: DynArray("PackMapEnvDataLayerV31")
            },
            PackMapEnvDataLayerV31: {
                altitude: Float32,
                cutOut: Float32,
                scale: Float32,
                texture: Filename(),
                day: "PackMapEnvDataLayerAttributesV31",
                night: "PackMapEnvDataLayerAttributesV31",
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV31: {
                density: Float32,
                depth: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV31: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32
            },
            PackMapEnvDataHazeV31: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV31: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataSkyV31: {
                flags: Uint8,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV31: {
                cards: DynArray("PackMapEnvDataSkyCardV31")
            },
            PackMapEnvDataSkyCardV31: {
                day: "PackMapEnvDataSkyCardAttributesV31",
                night: "PackMapEnvDataSkyCardAttributesV31",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV31: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV31: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename()
            },
            PackMapEnvDataWindV31: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV31: {
                lighting: DynArray("PackMapEnvDataLightingV31"),
                clouds: Pointer("PackMapEnvDataCloudsV31"),
                effect: RefArray("PackMapEnvDataEffectV31"),
                haze: RefArray("PackMapEnvDataHazeV31"),
                particleFields: RefArray("PackMapEnvDataPFieldV31"),
                sky: Pointer("PackMapEnvDataSkyV31"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV31"),
                water: RefArray("PackMapEnvDataWaterV31"),
                wind: RefArray("PackMapEnvDataWindV31"),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV31"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV31: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV31"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV31")
        }
    };
    var V32$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV32",
        version: 32,
        definitions: {
            PackMapEnvDataLocalV32: {
                lighting: DynArray("PackMapEnvDataLightingV32"),
                clouds: Pointer("PackMapEnvDataCloudsV32"),
                effect: RefArray("PackMapEnvDataEffectV32"),
                haze: RefArray("PackMapEnvDataHazeV32"),
                particleFields: RefArray("PackMapEnvDataPFieldV32"),
                sky: Pointer("PackMapEnvDataSkyV32"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV32"),
                water: RefArray("PackMapEnvDataWaterV32"),
                wind: RefArray("PackMapEnvDataWindV32"),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV32: {
                lights: RefArray("PackMapEnvDataLightV32")
            },
            PackMapEnvDataLightV32: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV32: {
                layers: DynArray("PackMapEnvDataLayerV32")
            },
            PackMapEnvDataLayerV32: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV32"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV32: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV32: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32
            },
            PackMapEnvDataHazeV32: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV32: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataSkyV32: {
                flags: Uint8,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV32: {
                cards: DynArray("PackMapEnvDataSkyCardV32")
            },
            PackMapEnvDataSkyCardV32: {
                day: "PackMapEnvDataSkyCardAttributesV32",
                night: "PackMapEnvDataSkyCardAttributesV32",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV32: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV32: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename()
            },
            PackMapEnvDataWindV32: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV32: {
                lighting: DynArray("PackMapEnvDataLightingV32"),
                clouds: Pointer("PackMapEnvDataCloudsV32"),
                effect: RefArray("PackMapEnvDataEffectV32"),
                haze: RefArray("PackMapEnvDataHazeV32"),
                particleFields: RefArray("PackMapEnvDataPFieldV32"),
                sky: Pointer("PackMapEnvDataSkyV32"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV32"),
                water: RefArray("PackMapEnvDataWaterV32"),
                wind: RefArray("PackMapEnvDataWindV32"),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV32"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV32: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV32"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV32")
        }
    };
    var V33$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV33",
        version: 33,
        definitions: {
            PackMapEnvDataLocalV33: {
                lighting: DynArray("PackMapEnvDataLightingV33"),
                clouds: Pointer("PackMapEnvDataCloudsV33"),
                effect: RefArray("PackMapEnvDataEffectV33"),
                haze: RefArray("PackMapEnvDataHazeV33"),
                particleFields: RefArray("PackMapEnvDataPFieldV33"),
                sky: Pointer("PackMapEnvDataSkyV33"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV33"),
                water: RefArray("PackMapEnvDataWaterV33"),
                wind: RefArray("PackMapEnvDataWindV33"),
                name: RefString16(),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV33: {
                lights: RefArray("PackMapEnvDataLightV33")
            },
            PackMapEnvDataLightV33: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV33: {
                layers: DynArray("PackMapEnvDataLayerV33")
            },
            PackMapEnvDataLayerV33: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV33"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV33: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV33: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32
            },
            PackMapEnvDataHazeV33: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV33: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataSkyV33: {
                flags: Uint8,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV33: {
                cards: DynArray("PackMapEnvDataSkyCardV33")
            },
            PackMapEnvDataSkyCardV33: {
                day: "PackMapEnvDataSkyCardAttributesV33",
                night: "PackMapEnvDataSkyCardAttributesV33",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV33: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV33: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename()
            },
            PackMapEnvDataWindV33: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV33: {
                lighting: DynArray("PackMapEnvDataLightingV33"),
                clouds: Pointer("PackMapEnvDataCloudsV33"),
                effect: RefArray("PackMapEnvDataEffectV33"),
                haze: RefArray("PackMapEnvDataHazeV33"),
                particleFields: RefArray("PackMapEnvDataPFieldV33"),
                sky: Pointer("PackMapEnvDataSkyV33"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV33"),
                water: RefArray("PackMapEnvDataWaterV33"),
                wind: RefArray("PackMapEnvDataWindV33"),
                name: RefString16(),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV33"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV33: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV33"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV33")
        }
    };
    var V34$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV34",
        version: 34,
        definitions: {
            PackMapEnvDataLocalV34: {
                lighting: DynArray("PackMapEnvDataLightingV34"),
                clouds: Pointer("PackMapEnvDataCloudsV34"),
                effect: RefArray("PackMapEnvDataEffectV34"),
                haze: RefArray("PackMapEnvDataHazeV34"),
                particleFields: RefArray("PackMapEnvDataPFieldV34"),
                sky: Pointer("PackMapEnvDataSkyV34"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV34"),
                water: RefArray("PackMapEnvDataWaterV34"),
                wind: RefArray("PackMapEnvDataWindV34"),
                name: RefString16(),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV34: {
                lights: RefArray("PackMapEnvDataLightV34")
            },
            PackMapEnvDataLightV34: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV34: {
                layers: DynArray("PackMapEnvDataLayerV34")
            },
            PackMapEnvDataLayerV34: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV34"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV34: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV34: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32
            },
            PackMapEnvDataHazeV34: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV34: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataSkyV34: {
                flags: Uint8,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV34: {
                cards: DynArray("PackMapEnvDataSkyCardV34")
            },
            PackMapEnvDataSkyCardV34: {
                day: "PackMapEnvDataSkyCardAttributesV34",
                night: "PackMapEnvDataSkyCardAttributesV34",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV34: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV34: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename()
            },
            PackMapEnvDataWindV34: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV34: {
                lighting: DynArray("PackMapEnvDataLightingV34"),
                clouds: Pointer("PackMapEnvDataCloudsV34"),
                effect: RefArray("PackMapEnvDataEffectV34"),
                haze: RefArray("PackMapEnvDataHazeV34"),
                particleFields: RefArray("PackMapEnvDataPFieldV34"),
                sky: Pointer("PackMapEnvDataSkyV34"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV34"),
                water: RefArray("PackMapEnvDataWaterV34"),
                wind: RefArray("PackMapEnvDataWindV34"),
                name: RefString16(),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV34"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV34: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV34"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV34")
        }
    };
    var V35$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV35",
        version: 35,
        definitions: {
            PackMapEnvDataLocalV35: {
                lighting: DynArray("PackMapEnvDataLightingV35"),
                clouds: Pointer("PackMapEnvDataCloudsV35"),
                effect: RefArray("PackMapEnvDataEffectV35"),
                haze: RefArray("PackMapEnvDataHazeV35"),
                particleFields: RefArray("PackMapEnvDataPFieldV35"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV6"),
                sky: Pointer("PackMapEnvDataSkyV35"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV35"),
                water: RefArray("PackMapEnvDataWaterV35"),
                wind: RefArray("PackMapEnvDataWindV35"),
                name: RefString16(),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV35: {
                lights: RefArray("PackMapEnvDataLightV35")
            },
            PackMapEnvDataLightV35: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV35: {
                layers: DynArray("PackMapEnvDataLayerV35")
            },
            PackMapEnvDataLayerV35: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV35"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV35: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV35: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32
            },
            PackMapEnvDataHazeV35: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV35: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV6: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV35: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV35: {
                cards: DynArray("PackMapEnvDataSkyCardV35")
            },
            PackMapEnvDataSkyCardV35: {
                day: "PackMapEnvDataSkyCardAttributesV35",
                night: "PackMapEnvDataSkyCardAttributesV35",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV35: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV35: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename()
            },
            PackMapEnvDataWindV35: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV35: {
                lighting: DynArray("PackMapEnvDataLightingV35"),
                clouds: Pointer("PackMapEnvDataCloudsV35"),
                effect: RefArray("PackMapEnvDataEffectV35"),
                haze: RefArray("PackMapEnvDataHazeV35"),
                particleFields: RefArray("PackMapEnvDataPFieldV35"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV6"),
                sky: Pointer("PackMapEnvDataSkyV35"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV35"),
                water: RefArray("PackMapEnvDataWaterV35"),
                wind: RefArray("PackMapEnvDataWindV35"),
                name: RefString16(),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV35"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV35: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV35"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV35")
        }
    };
    var V36$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV36",
        version: 36,
        definitions: {
            PackMapEnvDataLocalV36: {
                lighting: DynArray("PackMapEnvDataLightingV36"),
                clouds: Pointer("PackMapEnvDataCloudsV36"),
                effect: RefArray("PackMapEnvDataEffectV36"),
                haze: RefArray("PackMapEnvDataHazeV36"),
                particleFields: RefArray("PackMapEnvDataPFieldV36"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV7"),
                sky: Pointer("PackMapEnvDataSkyV36"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV36"),
                water: RefArray("PackMapEnvDataWaterV36"),
                wind: RefArray("PackMapEnvDataWindV36"),
                name: RefString16(),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV36: {
                lights: RefArray("PackMapEnvDataLightV36")
            },
            PackMapEnvDataLightV36: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV36: {
                layers: DynArray("PackMapEnvDataLayerV36")
            },
            PackMapEnvDataLayerV36: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV36"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV36: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV36: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32
            },
            PackMapEnvDataHazeV36: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV36: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV7: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV36: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV36: {
                cards: DynArray("PackMapEnvDataSkyCardV36")
            },
            PackMapEnvDataSkyCardV36: {
                day: "PackMapEnvDataSkyCardAttributesV36",
                night: "PackMapEnvDataSkyCardAttributesV36",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV36: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV36: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename(),
                depthAttenuation: Float32
            },
            PackMapEnvDataWindV36: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV36: {
                lighting: DynArray("PackMapEnvDataLightingV36"),
                clouds: Pointer("PackMapEnvDataCloudsV36"),
                effect: RefArray("PackMapEnvDataEffectV36"),
                haze: RefArray("PackMapEnvDataHazeV36"),
                particleFields: RefArray("PackMapEnvDataPFieldV36"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV7"),
                sky: Pointer("PackMapEnvDataSkyV36"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV36"),
                water: RefArray("PackMapEnvDataWaterV36"),
                wind: RefArray("PackMapEnvDataWindV36"),
                name: RefString16(),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV36"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV36: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV36"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV36")
        }
    };
    var V37$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV37",
        version: 37,
        definitions: {
            PackMapEnvDataLocalV37: {
                lighting: DynArray("PackMapEnvDataLightingV37"),
                clouds: Pointer("PackMapEnvDataCloudsV37"),
                effect: RefArray("PackMapEnvDataEffectV37"),
                haze: RefArray("PackMapEnvDataHazeV37"),
                particleFields: RefArray("PackMapEnvDataPFieldV37"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV8"),
                sky: Pointer("PackMapEnvDataSkyV37"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV37"),
                water: RefArray("PackMapEnvDataWaterV37"),
                wind: RefArray("PackMapEnvDataWindV37"),
                name: RefString16(),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV37: {
                lights: RefArray("PackMapEnvDataLightV37")
            },
            PackMapEnvDataLightV37: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV37: {
                layers: DynArray("PackMapEnvDataLayerV37")
            },
            PackMapEnvDataLayerV37: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV37"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV37: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV37: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32
            },
            PackMapEnvDataHazeV37: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV37: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV8: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV37: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV37: {
                cards: DynArray("PackMapEnvDataSkyCardV37")
            },
            PackMapEnvDataSkyCardV37: {
                day: "PackMapEnvDataSkyCardAttributesV37",
                night: "PackMapEnvDataSkyCardAttributesV37",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV37: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV37: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename(),
                depthAttenuation: Float32
            },
            PackMapEnvDataWindV37: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV37: {
                lighting: DynArray("PackMapEnvDataLightingV37"),
                clouds: Pointer("PackMapEnvDataCloudsV37"),
                effect: RefArray("PackMapEnvDataEffectV37"),
                haze: RefArray("PackMapEnvDataHazeV37"),
                particleFields: RefArray("PackMapEnvDataPFieldV37"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV8"),
                sky: Pointer("PackMapEnvDataSkyV37"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV37"),
                water: RefArray("PackMapEnvDataWaterV37"),
                wind: RefArray("PackMapEnvDataWindV37"),
                name: RefString16(),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV37"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV37: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV37"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV37")
        }
    };
    var V38$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV38",
        version: 38,
        definitions: {
            PackMapEnvDataLocalV38: {
                lighting: DynArray("PackMapEnvDataLightingV38"),
                clouds: Pointer("PackMapEnvDataCloudsV38"),
                effect: RefArray("PackMapEnvDataEffectV38"),
                haze: RefArray("PackMapEnvDataHazeV38"),
                particleFields: RefArray("PackMapEnvDataPFieldV38"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV9"),
                sky: Pointer("PackMapEnvDataSkyV38"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV38"),
                water: RefArray("PackMapEnvDataWaterV38"),
                wind: RefArray("PackMapEnvDataWindV38"),
                name: RefString16(),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2))
            },
            PackMapEnvDataLightingV38: {
                lights: RefArray("PackMapEnvDataLightV38")
            },
            PackMapEnvDataLightV38: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataCloudsV38: {
                layers: DynArray("PackMapEnvDataLayerV38")
            },
            PackMapEnvDataLayerV38: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV38"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV38: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV38: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV38: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV38: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV9: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV38: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV38: {
                cards: DynArray("PackMapEnvDataSkyCardV38")
            },
            PackMapEnvDataSkyCardV38: {
                day: "PackMapEnvDataSkyCardAttributesV38",
                night: "PackMapEnvDataSkyCardAttributesV38",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV38: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV38: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename(),
                depthAttenuation: Float32
            },
            PackMapEnvDataWindV38: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV38: {
                lighting: DynArray("PackMapEnvDataLightingV38"),
                clouds: Pointer("PackMapEnvDataCloudsV38"),
                effect: RefArray("PackMapEnvDataEffectV38"),
                haze: RefArray("PackMapEnvDataHazeV38"),
                particleFields: RefArray("PackMapEnvDataPFieldV38"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV9"),
                sky: Pointer("PackMapEnvDataSkyV38"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV38"),
                water: RefArray("PackMapEnvDataWaterV38"),
                wind: RefArray("PackMapEnvDataWindV38"),
                name: RefString16(),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV38"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV38: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV38"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV38")
        }
    };
    var V39$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV39",
        version: 39,
        definitions: {
            PackMapEnvDataLocalV39: {
                lighting: DynArray("PackMapEnvDataLightingV39"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV10"),
                clouds: Pointer("PackMapEnvDataCloudsV39"),
                effect: RefArray("PackMapEnvDataEffectV39"),
                haze: RefArray("PackMapEnvDataHazeV39"),
                particleFields: RefArray("PackMapEnvDataPFieldV39"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV10"),
                sky: Pointer("PackMapEnvDataSkyV39"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV39"),
                water: RefArray("PackMapEnvDataWaterV39"),
                wind: RefArray("PackMapEnvDataWindV39"),
                name: RefString16(),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV39: {
                lights: RefArray("PackMapEnvDataLightV39")
            },
            PackMapEnvDataLightV39: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV10: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV39: {
                layers: DynArray("PackMapEnvDataLayerV39")
            },
            PackMapEnvDataLayerV39: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV39"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV39: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV39: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV39: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV39: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV10: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV39: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV39: {
                cards: DynArray("PackMapEnvDataSkyCardV39")
            },
            PackMapEnvDataSkyCardV39: {
                day: "PackMapEnvDataSkyCardAttributesV39",
                night: "PackMapEnvDataSkyCardAttributesV39",
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV39: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV39: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename(),
                depthAttenuation: Float32
            },
            PackMapEnvDataWindV39: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV39: {
                lighting: DynArray("PackMapEnvDataLightingV39"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV10"),
                clouds: Pointer("PackMapEnvDataCloudsV39"),
                effect: RefArray("PackMapEnvDataEffectV39"),
                haze: RefArray("PackMapEnvDataHazeV39"),
                particleFields: RefArray("PackMapEnvDataPFieldV39"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV10"),
                sky: Pointer("PackMapEnvDataSkyV39"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV39"),
                water: RefArray("PackMapEnvDataWaterV39"),
                wind: RefArray("PackMapEnvDataWindV39"),
                name: RefString16(),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV39"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV39: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV39"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV39")
        }
    };
    var V40$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV40",
        version: 40,
        definitions: {
            PackMapEnvDataLocalV40: {
                lighting: DynArray("PackMapEnvDataLightingV40"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV11"),
                clouds: Pointer("PackMapEnvDataCloudsV40"),
                effect: RefArray("PackMapEnvDataEffectV40"),
                haze: RefArray("PackMapEnvDataHazeV40"),
                particleFields: RefArray("PackMapEnvDataPFieldV40"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV11"),
                sky: Pointer("PackMapEnvDataSkyV40"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV40"),
                water: RefArray("PackMapEnvDataWaterV40"),
                wind: RefArray("PackMapEnvDataWindV40"),
                name: RefString16(),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV40: {
                lights: RefArray("PackMapEnvDataLightV40")
            },
            PackMapEnvDataLightV40: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV11: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV40: {
                layers: DynArray("PackMapEnvDataLayerV40")
            },
            PackMapEnvDataLayerV40: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV40"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV40: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV40: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV40: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV40: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV11: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV40: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV40: {
                cards: DynArray("PackMapEnvDataSkyCardV40")
            },
            PackMapEnvDataSkyCardV40: {
                day: "PackMapEnvDataSkyCardAttributesV40",
                night: "PackMapEnvDataSkyCardAttributesV40",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV40: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV40: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                bumpTexture: Filename(),
                patternTexture: Filename(),
                depthAttenuation: Float32
            },
            PackMapEnvDataWindV40: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV40: {
                lighting: DynArray("PackMapEnvDataLightingV40"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV11"),
                clouds: Pointer("PackMapEnvDataCloudsV40"),
                effect: RefArray("PackMapEnvDataEffectV40"),
                haze: RefArray("PackMapEnvDataHazeV40"),
                particleFields: RefArray("PackMapEnvDataPFieldV40"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV11"),
                sky: Pointer("PackMapEnvDataSkyV40"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV40"),
                water: RefArray("PackMapEnvDataWaterV40"),
                wind: RefArray("PackMapEnvDataWindV40"),
                name: RefString16(),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV40"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV40: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV40"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV40")
        }
    };
    var V41$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV41",
        version: 41,
        definitions: {
            PackMapEnvDataLocalV41: {
                lighting: DynArray("PackMapEnvDataLightingV41"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV12"),
                clouds: Pointer("PackMapEnvDataCloudsV41"),
                effect: RefArray("PackMapEnvDataEffectV41"),
                haze: RefArray("PackMapEnvDataHazeV41"),
                particleFields: RefArray("PackMapEnvDataPFieldV41"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV12"),
                sky: Pointer("PackMapEnvDataSkyV41"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV41"),
                water: RefArray("PackMapEnvDataWaterV41"),
                wind: RefArray("PackMapEnvDataWindV41"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV41: {
                lights: RefArray("PackMapEnvDataLightV41")
            },
            PackMapEnvDataLightV41: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV12: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV41: {
                layers: DynArray("PackMapEnvDataLayerV41")
            },
            PackMapEnvDataLayerV41: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV41"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV41: {
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV41: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV41: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV41: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV12: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV41: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV41: {
                cards: DynArray("PackMapEnvDataSkyCardV41")
            },
            PackMapEnvDataSkyCardV41: {
                day: "PackMapEnvDataSkyCardAttributesV41",
                night: "PackMapEnvDataSkyCardAttributesV41",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV41: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV41: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename())
            },
            PackMapEnvDataWindV41: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV41: {
                lighting: DynArray("PackMapEnvDataLightingV41"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV12"),
                clouds: Pointer("PackMapEnvDataCloudsV41"),
                effect: RefArray("PackMapEnvDataEffectV41"),
                haze: RefArray("PackMapEnvDataHazeV41"),
                particleFields: RefArray("PackMapEnvDataPFieldV41"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV12"),
                sky: Pointer("PackMapEnvDataSkyV41"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV41"),
                water: RefArray("PackMapEnvDataWaterV41"),
                wind: RefArray("PackMapEnvDataWindV41"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV41"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV41: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV41"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV41")
        }
    };
    var V42$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV42",
        version: 42,
        definitions: {
            PackMapEnvDataLocalV42: {
                lighting: DynArray("PackMapEnvDataLightingV42"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV13"),
                clouds: Pointer("PackMapEnvDataCloudsV42"),
                effect: RefArray("PackMapEnvDataEffectV42"),
                haze: RefArray("PackMapEnvDataHazeV42"),
                particleFields: RefArray("PackMapEnvDataPFieldV42"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV13"),
                sky: Pointer("PackMapEnvDataSkyV42"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV42"),
                water: RefArray("PackMapEnvDataWaterV42"),
                wind: RefArray("PackMapEnvDataWindV42"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV42: {
                lights: RefArray("PackMapEnvDataLightV42")
            },
            PackMapEnvDataLightV42: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV13: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV42: {
                layers: DynArray("PackMapEnvDataLayerV42")
            },
            PackMapEnvDataLayerV42: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV42"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV42: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2)
            },
            PackMapEnvDataEffectV42: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV42: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV42: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV13: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV42: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV42: {
                cards: DynArray("PackMapEnvDataSkyCardV42")
            },
            PackMapEnvDataSkyCardV42: {
                day: "PackMapEnvDataSkyCardAttributesV42",
                night: "PackMapEnvDataSkyCardAttributesV42",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV42: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackMapEnvDataWaterV42: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename())
            },
            PackMapEnvDataWindV42: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV42: {
                lighting: DynArray("PackMapEnvDataLightingV42"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV13"),
                clouds: Pointer("PackMapEnvDataCloudsV42"),
                effect: RefArray("PackMapEnvDataEffectV42"),
                haze: RefArray("PackMapEnvDataHazeV42"),
                particleFields: RefArray("PackMapEnvDataPFieldV42"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV13"),
                sky: Pointer("PackMapEnvDataSkyV42"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV42"),
                water: RefArray("PackMapEnvDataWaterV42"),
                wind: RefArray("PackMapEnvDataWindV42"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV42"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV42: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV42"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV42")
        }
    };
    var V43$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV43",
        version: 43,
        definitions: {
            PackMapEnvDataLocalV43: {
                lighting: DynArray("PackMapEnvDataLightingV43"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV14"),
                clouds: Pointer("PackMapEnvDataCloudsV43"),
                effect: RefArray("PackMapEnvDataEffectV43"),
                haze: RefArray("PackMapEnvDataHazeV43"),
                particleFields: RefArray("PackMapEnvDataPFieldV43"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV14"),
                sky: Pointer("PackMapEnvDataSkyV43"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV43"),
                water: RefArray("PackMapEnvDataWaterV43"),
                wind: RefArray("PackMapEnvDataWindV43"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV43: {
                lights: RefArray("PackMapEnvDataLightV43")
            },
            PackMapEnvDataLightV43: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV14: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV43: {
                layers: DynArray("PackMapEnvDataLayerV43")
            },
            PackMapEnvDataLayerV43: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV43"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV43: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataEffectV43: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV43: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV43: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV14: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV43: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV43: {
                cards: DynArray("PackMapEnvDataSkyCardV43")
            },
            PackMapEnvDataSkyCardV43: {
                day: "PackMapEnvDataSkyCardAttributesV43",
                night: "PackMapEnvDataSkyCardAttributesV43",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV43: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV43: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV43: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV43: {
                lighting: DynArray("PackMapEnvDataLightingV43"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV14"),
                clouds: Pointer("PackMapEnvDataCloudsV43"),
                effect: RefArray("PackMapEnvDataEffectV43"),
                haze: RefArray("PackMapEnvDataHazeV43"),
                particleFields: RefArray("PackMapEnvDataPFieldV43"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV14"),
                sky: Pointer("PackMapEnvDataSkyV43"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV43"),
                water: RefArray("PackMapEnvDataWaterV43"),
                wind: RefArray("PackMapEnvDataWindV43"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV43"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV43: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV43"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV43")
        }
    };
    var V44$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV44",
        version: 44,
        definitions: {
            PackMapEnvDataLocalV44: {
                lighting: DynArray("PackMapEnvDataLightingV44"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV15"),
                clouds: Pointer("PackMapEnvDataCloudsV44"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV15"),
                effect: RefArray("PackMapEnvDataEffectV44"),
                haze: RefArray("PackMapEnvDataHazeV44"),
                particleFields: RefArray("PackMapEnvDataPFieldV44"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV15"),
                sky: Pointer("PackMapEnvDataSkyV44"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV44"),
                water: RefArray("PackMapEnvDataWaterV44"),
                wind: RefArray("PackMapEnvDataWindV44"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV44: {
                lights: RefArray("PackMapEnvDataLightV44")
            },
            PackMapEnvDataLightV44: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV15: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV44: {
                layers: DynArray("PackMapEnvDataLayerV44")
            },
            PackMapEnvDataLayerV44: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV44"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV44: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV15: {
                range: FixedArray(Float32, 2),
                colors: FixedArray(FixedArray(Uint8, 4), 6),
                distances: FixedArray(Float32, 6)
            },
            PackMapEnvDataEffectV44: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV44: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV44: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV15: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV44: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV44: {
                cards: DynArray("PackMapEnvDataSkyCardV44")
            },
            PackMapEnvDataSkyCardV44: {
                day: "PackMapEnvDataSkyCardAttributesV44",
                night: "PackMapEnvDataSkyCardAttributesV44",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV44: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV44: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV44: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV44: {
                lighting: DynArray("PackMapEnvDataLightingV44"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV15"),
                clouds: Pointer("PackMapEnvDataCloudsV44"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV15"),
                effect: RefArray("PackMapEnvDataEffectV44"),
                haze: RefArray("PackMapEnvDataHazeV44"),
                particleFields: RefArray("PackMapEnvDataPFieldV44"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV15"),
                sky: Pointer("PackMapEnvDataSkyV44"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV44"),
                water: RefArray("PackMapEnvDataWaterV44"),
                wind: RefArray("PackMapEnvDataWindV44"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV44"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV44: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV44"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV44")
        }
    };
    var V45$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV45",
        version: 45,
        definitions: {
            PackMapEnvDataLocalV45: {
                lighting: DynArray("PackMapEnvDataLightingV45"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV16"),
                clouds: Pointer("PackMapEnvDataCloudsV45"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV16"),
                effect: RefArray("PackMapEnvDataEffectV45"),
                haze: RefArray("PackMapEnvDataHazeV45"),
                particleFields: RefArray("PackMapEnvDataPFieldV45"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV16"),
                sky: Pointer("PackMapEnvDataSkyV45"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV45"),
                water: RefArray("PackMapEnvDataWaterV45"),
                wind: RefArray("PackMapEnvDataWindV45"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV45: {
                lights: RefArray("PackMapEnvDataLightV45")
            },
            PackMapEnvDataLightV45: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV16: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV45: {
                layers: DynArray("PackMapEnvDataLayerV45")
            },
            PackMapEnvDataLayerV45: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV45"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV45: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV16: {
                range: FixedArray(Float32, 2),
                colors: FixedArray(FixedArray(Uint8, 4), 6),
                distances: FixedArray(Float32, 6)
            },
            PackMapEnvDataEffectV45: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV45: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV45: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV16: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV45: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV45: {
                cards: DynArray("PackMapEnvDataSkyCardV45")
            },
            PackMapEnvDataSkyCardV45: {
                day: "PackMapEnvDataSkyCardAttributesV45",
                night: "PackMapEnvDataSkyCardAttributesV45",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV45: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV45: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV45: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV45: {
                lighting: DynArray("PackMapEnvDataLightingV45"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV16"),
                clouds: Pointer("PackMapEnvDataCloudsV45"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV16"),
                effect: RefArray("PackMapEnvDataEffectV45"),
                haze: RefArray("PackMapEnvDataHazeV45"),
                particleFields: RefArray("PackMapEnvDataPFieldV45"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV16"),
                sky: Pointer("PackMapEnvDataSkyV45"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV45"),
                water: RefArray("PackMapEnvDataWaterV45"),
                wind: RefArray("PackMapEnvDataWindV45"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV45"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV45: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV45"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV45")
        }
    };
    var V46$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV46",
        version: 46,
        definitions: {
            PackMapEnvDataLocalV46: {
                lighting: DynArray("PackMapEnvDataLightingV46"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV17"),
                clouds: Pointer("PackMapEnvDataCloudsV46"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV17"),
                effect: RefArray("PackMapEnvDataEffectV46"),
                haze: RefArray("PackMapEnvDataHazeV46"),
                particleFields: RefArray("PackMapEnvDataPFieldV46"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV17"),
                sky: Pointer("PackMapEnvDataSkyV46"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV46"),
                water: RefArray("PackMapEnvDataWaterV46"),
                wind: RefArray("PackMapEnvDataWindV46"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV46: {
                lights: RefArray("PackMapEnvDataLightV46")
            },
            PackMapEnvDataLightV46: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV17: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV46: {
                layers: DynArray("PackMapEnvDataLayerV46")
            },
            PackMapEnvDataLayerV46: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV46"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV46: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV17: {
                range: FixedArray(Float32, 2),
                colors: FixedArray(FixedArray(Uint8, 4), 6),
                distances: FixedArray(Float32, 6)
            },
            PackMapEnvDataEffectV46: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV46: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV46: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV17: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV46: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV46: {
                cards: DynArray("PackMapEnvDataSkyCardV46")
            },
            PackMapEnvDataSkyCardV46: {
                day: "PackMapEnvDataSkyCardAttributesV46",
                night: "PackMapEnvDataSkyCardAttributesV46",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV46: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV46: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV46: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV46: {
                lighting: DynArray("PackMapEnvDataLightingV46"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV17"),
                clouds: Pointer("PackMapEnvDataCloudsV46"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV17"),
                effect: RefArray("PackMapEnvDataEffectV46"),
                haze: RefArray("PackMapEnvDataHazeV46"),
                particleFields: RefArray("PackMapEnvDataPFieldV46"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV17"),
                sky: Pointer("PackMapEnvDataSkyV46"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV46"),
                water: RefArray("PackMapEnvDataWaterV46"),
                wind: RefArray("PackMapEnvDataWindV46"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV46"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV46: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV46"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV46")
        }
    };
    var V47$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV47",
        version: 47,
        definitions: {
            PackMapEnvDataLocalV47: {
                lighting: DynArray("PackMapEnvDataLightingV47"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV18"),
                clouds: Pointer("PackMapEnvDataCloudsV47"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV18"),
                effect: RefArray("PackMapEnvDataEffectV47"),
                haze: RefArray("PackMapEnvDataHazeV47"),
                particleFields: RefArray("PackMapEnvDataPFieldV47"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV18"),
                sky: Pointer("PackMapEnvDataSkyV47"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV47"),
                water: RefArray("PackMapEnvDataWaterV47"),
                wind: RefArray("PackMapEnvDataWindV47"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV47: {
                lights: RefArray("PackMapEnvDataLightV47")
            },
            PackMapEnvDataLightV47: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV18: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV47: {
                layers: DynArray("PackMapEnvDataLayerV47")
            },
            PackMapEnvDataLayerV47: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV47"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV47: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV18: {
                range: FixedArray(Float32, 2),
                colors: FixedArray(FixedArray(Uint8, 4), 6),
                distances: FixedArray(Float32, 6)
            },
            PackMapEnvDataEffectV47: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV47: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV47: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV18: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV47: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV47: {
                cards: DynArray("PackMapEnvDataSkyCardV47")
            },
            PackMapEnvDataSkyCardV47: {
                day: "PackMapEnvDataSkyCardAttributesV47",
                night: "PackMapEnvDataSkyCardAttributesV47",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV47: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV47: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV47: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV47: {
                lighting: DynArray("PackMapEnvDataLightingV47"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV18"),
                clouds: Pointer("PackMapEnvDataCloudsV47"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV18"),
                effect: RefArray("PackMapEnvDataEffectV47"),
                haze: RefArray("PackMapEnvDataHazeV47"),
                particleFields: RefArray("PackMapEnvDataPFieldV47"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV18"),
                sky: Pointer("PackMapEnvDataSkyV47"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV47"),
                water: RefArray("PackMapEnvDataWaterV47"),
                wind: RefArray("PackMapEnvDataWindV47"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV47"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV47: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV47"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV47")
        }
    };
    var V48$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV48",
        version: 48,
        definitions: {
            PackMapEnvDataLocalV48: {
                lighting: DynArray("PackMapEnvDataLightingV48"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV19"),
                clouds: Pointer("PackMapEnvDataCloudsV48"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV19"),
                effect: RefArray("PackMapEnvDataEffectV48"),
                haze: RefArray("PackMapEnvDataHazeV48"),
                particleFields: RefArray("PackMapEnvDataPFieldV48"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV19"),
                sky: Pointer("PackMapEnvDataSkyV48"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV48"),
                water: RefArray("PackMapEnvDataWaterV48"),
                wind: RefArray("PackMapEnvDataWindV48"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV48: {
                lights: RefArray("PackMapEnvDataLightV48")
            },
            PackMapEnvDataLightV48: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharV19: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV48: {
                layers: DynArray("PackMapEnvDataLayerV48")
            },
            PackMapEnvDataLayerV48: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV48"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV48: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV19: {
                range: FixedArray(Float32, 2),
                colors: FixedArray(FixedArray(Uint8, 4), 6),
                distances: FixedArray(Float32, 6)
            },
            PackMapEnvDataEffectV48: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV48: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV48: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV19: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV48: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV48: {
                cards: DynArray("PackMapEnvDataSkyCardV48")
            },
            PackMapEnvDataSkyCardV48: {
                day: "PackMapEnvDataSkyCardAttributesV48",
                night: "PackMapEnvDataSkyCardAttributesV48",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV48: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV48: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV48: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV48: {
                lighting: DynArray("PackMapEnvDataLightingV48"),
                lightingChar: DynArray("PackMapEnvDataLightingCharV19"),
                clouds: Pointer("PackMapEnvDataCloudsV48"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV19"),
                effect: RefArray("PackMapEnvDataEffectV48"),
                haze: RefArray("PackMapEnvDataHazeV48"),
                particleFields: RefArray("PackMapEnvDataPFieldV48"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV19"),
                sky: Pointer("PackMapEnvDataSkyV48"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV48"),
                water: RefArray("PackMapEnvDataWaterV48"),
                wind: RefArray("PackMapEnvDataWindV48"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV48"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV48: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV48"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV48")
        }
    };
    var V49$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV49",
        version: 49,
        definitions: {
            PackMapEnvDataLocalV49: {
                lighting: DynArray("PackMapEnvDataLightingV49"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV20"),
                clouds: Pointer("PackMapEnvDataCloudsV49"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV20"),
                effect: RefArray("PackMapEnvDataEffectV49"),
                haze: RefArray("PackMapEnvDataHazeV49"),
                particleFields: RefArray("PackMapEnvDataPFieldV49"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV20"),
                sky: Pointer("PackMapEnvDataSkyV49"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV49"),
                water: RefArray("PackMapEnvDataWaterV49"),
                wind: RefArray("PackMapEnvDataWindV49"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV49: {
                lights: RefArray("PackMapEnvDataLightV49")
            },
            PackMapEnvDataLightV49: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV20: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV20")
            },
            PackMapEnvDataLightingCharV20: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV49: {
                layers: DynArray("PackMapEnvDataLayerV49")
            },
            PackMapEnvDataLayerV49: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV49"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV49: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV20: {
                range: FixedArray(Float32, 2),
                colors: FixedArray(FixedArray(Uint8, 4), 6),
                distances: FixedArray(Float32, 6)
            },
            PackMapEnvDataEffectV49: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV49: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV49: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV20: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV49: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV49: {
                cards: DynArray("PackMapEnvDataSkyCardV49")
            },
            PackMapEnvDataSkyCardV49: {
                day: "PackMapEnvDataSkyCardAttributesV49",
                night: "PackMapEnvDataSkyCardAttributesV49",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV49: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV49: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV49: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV49: {
                lighting: DynArray("PackMapEnvDataLightingV49"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV20"),
                clouds: Pointer("PackMapEnvDataCloudsV49"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV20"),
                effect: RefArray("PackMapEnvDataEffectV49"),
                haze: RefArray("PackMapEnvDataHazeV49"),
                particleFields: RefArray("PackMapEnvDataPFieldV49"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV20"),
                sky: Pointer("PackMapEnvDataSkyV49"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV49"),
                water: RefArray("PackMapEnvDataWaterV49"),
                wind: RefArray("PackMapEnvDataWindV49"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV49"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV49: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV49"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV49")
        }
    };
    var V50$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV50",
        version: 50,
        definitions: {
            PackMapEnvDataLocalV50: {
                lighting: DynArray("PackMapEnvDataLightingV50"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV21"),
                clouds: Pointer("PackMapEnvDataCloudsV50"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV21"),
                effect: RefArray("PackMapEnvDataEffectV50"),
                haze: RefArray("PackMapEnvDataHazeV50"),
                particleFields: RefArray("PackMapEnvDataPFieldV50"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV21"),
                sky: Pointer("PackMapEnvDataSkyV50"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV50"),
                water: RefArray("PackMapEnvDataWaterV50"),
                wind: RefArray("PackMapEnvDataWindV50"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV50: {
                lights: RefArray("PackMapEnvDataLightV50")
            },
            PackMapEnvDataLightV50: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV21: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV21")
            },
            PackMapEnvDataLightingCharV21: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV50: {
                layers: DynArray("PackMapEnvDataLayerV50")
            },
            PackMapEnvDataLayerV50: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV50"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV50: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV21: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV50: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV50: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV50: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV21: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV50: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV50: {
                cards: DynArray("PackMapEnvDataSkyCardV50")
            },
            PackMapEnvDataSkyCardV50: {
                day: "PackMapEnvDataSkyCardAttributesV50",
                night: "PackMapEnvDataSkyCardAttributesV50",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV50: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV50: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV50: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV50: {
                lighting: DynArray("PackMapEnvDataLightingV50"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV21"),
                clouds: Pointer("PackMapEnvDataCloudsV50"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV21"),
                effect: RefArray("PackMapEnvDataEffectV50"),
                haze: RefArray("PackMapEnvDataHazeV50"),
                particleFields: RefArray("PackMapEnvDataPFieldV50"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV21"),
                sky: Pointer("PackMapEnvDataSkyV50"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV50"),
                water: RefArray("PackMapEnvDataWaterV50"),
                wind: RefArray("PackMapEnvDataWindV50"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV50"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV50: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV50"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV50")
        }
    };
    var V51$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV51",
        version: 51,
        definitions: {
            PackMapEnvDataLocalV51: {
                lighting: DynArray("PackMapEnvDataLightingV51"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV22"),
                clouds: Pointer("PackMapEnvDataCloudsV51"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV22"),
                effect: RefArray("PackMapEnvDataEffectV51"),
                haze: RefArray("PackMapEnvDataHazeV51"),
                particleFields: RefArray("PackMapEnvDataPFieldV51"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV22"),
                sky: Pointer("PackMapEnvDataSkyV51"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV51"),
                water: RefArray("PackMapEnvDataWaterV51"),
                wind: RefArray("PackMapEnvDataWindV51"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV51: {
                lights: RefArray("PackMapEnvDataLightV51")
            },
            PackMapEnvDataLightV51: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV22: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV22")
            },
            PackMapEnvDataLightingCharV22: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV51: {
                layers: DynArray("PackMapEnvDataLayerV51")
            },
            PackMapEnvDataLayerV51: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV51"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV51: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV22: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV51: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV51: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV51: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint8,
                lifetime: Float32,
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: Float32,
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV22: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV51: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV51: {
                cards: DynArray("PackMapEnvDataSkyCardV51")
            },
            PackMapEnvDataSkyCardV51: {
                day: "PackMapEnvDataSkyCardAttributesV51",
                night: "PackMapEnvDataSkyCardAttributesV51",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV51: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV51: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV51: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV51: {
                lighting: DynArray("PackMapEnvDataLightingV51"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV22"),
                clouds: Pointer("PackMapEnvDataCloudsV51"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV22"),
                effect: RefArray("PackMapEnvDataEffectV51"),
                haze: RefArray("PackMapEnvDataHazeV51"),
                particleFields: RefArray("PackMapEnvDataPFieldV51"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV22"),
                sky: Pointer("PackMapEnvDataSkyV51"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV51"),
                water: RefArray("PackMapEnvDataWaterV51"),
                wind: RefArray("PackMapEnvDataWindV51"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV51"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV51: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV51"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV51")
        }
    };
    var V52$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV52",
        version: 52,
        definitions: {
            PackMapEnvDataLocalV52: {
                lighting: DynArray("PackMapEnvDataLightingV52"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV23"),
                clouds: Pointer("PackMapEnvDataCloudsV52"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV23"),
                effect: RefArray("PackMapEnvDataEffectV52"),
                haze: RefArray("PackMapEnvDataHazeV52"),
                particleFields: RefArray("PackMapEnvDataPFieldV52"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV23"),
                sky: Pointer("PackMapEnvDataSkyV52"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV52"),
                water: RefArray("PackMapEnvDataWaterV52"),
                wind: RefArray("PackMapEnvDataWindV52"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV52: {
                lights: RefArray("PackMapEnvDataLightV52")
            },
            PackMapEnvDataLightV52: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV23: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV23")
            },
            PackMapEnvDataLightingCharV23: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV52: {
                layers: DynArray("PackMapEnvDataLayerV52")
            },
            PackMapEnvDataLayerV52: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV52"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV52: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV23: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV52: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV52: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV52: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV23: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV52: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV52: {
                cards: DynArray("PackMapEnvDataSkyCardV52")
            },
            PackMapEnvDataSkyCardV52: {
                day: "PackMapEnvDataSkyCardAttributesV52",
                night: "PackMapEnvDataSkyCardAttributesV52",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV52: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV52: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV52: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV52: {
                lighting: DynArray("PackMapEnvDataLightingV52"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV23"),
                clouds: Pointer("PackMapEnvDataCloudsV52"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV23"),
                effect: RefArray("PackMapEnvDataEffectV52"),
                haze: RefArray("PackMapEnvDataHazeV52"),
                particleFields: RefArray("PackMapEnvDataPFieldV52"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV23"),
                sky: Pointer("PackMapEnvDataSkyV52"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV52"),
                water: RefArray("PackMapEnvDataWaterV52"),
                wind: RefArray("PackMapEnvDataWindV52"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV52"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV52: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV52"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV52")
        }
    };
    var V53$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV53",
        version: 53,
        definitions: {
            PackMapEnvDataLocalV53: {
                lighting: DynArray("PackMapEnvDataLightingV53"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV24"),
                clouds: Pointer("PackMapEnvDataCloudsV53"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV24"),
                effect: RefArray("PackMapEnvDataEffectV53"),
                haze: RefArray("PackMapEnvDataHazeV53"),
                particleFields: RefArray("PackMapEnvDataPFieldV53"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV24"),
                sky: Pointer("PackMapEnvDataSkyV53"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV53"),
                water: RefArray("PackMapEnvDataWaterV53"),
                wind: RefArray("PackMapEnvDataWindV53"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV53: {
                lights: RefArray("PackMapEnvDataLightV53")
            },
            PackMapEnvDataLightV53: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV24: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV24")
            },
            PackMapEnvDataLightingCharV24: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV53: {
                layers: DynArray("PackMapEnvDataLayerV53")
            },
            PackMapEnvDataLayerV53: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV53"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV53: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV24: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV53: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV53: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV53: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV24: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV53: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV53: {
                cards: DynArray("PackMapEnvDataSkyCardV53")
            },
            PackMapEnvDataSkyCardV53: {
                day: "PackMapEnvDataSkyCardAttributesV53",
                night: "PackMapEnvDataSkyCardAttributesV53",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV53: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV53: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV53: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV53: {
                lighting: DynArray("PackMapEnvDataLightingV53"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV24"),
                clouds: Pointer("PackMapEnvDataCloudsV53"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV24"),
                effect: RefArray("PackMapEnvDataEffectV53"),
                haze: RefArray("PackMapEnvDataHazeV53"),
                particleFields: RefArray("PackMapEnvDataPFieldV53"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV24"),
                sky: Pointer("PackMapEnvDataSkyV53"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV53"),
                water: RefArray("PackMapEnvDataWaterV53"),
                wind: RefArray("PackMapEnvDataWindV53"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV53"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV53: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV53"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV53")
        }
    };
    var V54$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV54",
        version: 54,
        definitions: {
            PackMapEnvDataLocalV54: {
                lighting: DynArray("PackMapEnvDataLightingV54"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV25"),
                clouds: Pointer("PackMapEnvDataCloudsV54"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV25"),
                effect: RefArray("PackMapEnvDataEffectV54"),
                haze: RefArray("PackMapEnvDataHazeV54"),
                particleFields: RefArray("PackMapEnvDataPFieldV54"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV25"),
                sky: Pointer("PackMapEnvDataSkyV54"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV54"),
                water: RefArray("PackMapEnvDataWaterV54"),
                wind: RefArray("PackMapEnvDataWindV54"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV54: {
                lights: RefArray("PackMapEnvDataLightV54")
            },
            PackMapEnvDataLightV54: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV25: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV25")
            },
            PackMapEnvDataLightingCharV25: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV54: {
                layers: DynArray("PackMapEnvDataLayerV54")
            },
            PackMapEnvDataLayerV54: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV54"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV54: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV25: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV54: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV54: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV54: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV25: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV54: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV54: {
                cards: DynArray("PackMapEnvDataSkyCardV54")
            },
            PackMapEnvDataSkyCardV54: {
                day: "PackMapEnvDataSkyCardAttributesV54",
                night: "PackMapEnvDataSkyCardAttributesV54",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV54: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataWaterV54: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV54: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV54: {
                lighting: DynArray("PackMapEnvDataLightingV54"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV25"),
                clouds: Pointer("PackMapEnvDataCloudsV54"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV25"),
                effect: RefArray("PackMapEnvDataEffectV54"),
                haze: RefArray("PackMapEnvDataHazeV54"),
                particleFields: RefArray("PackMapEnvDataPFieldV54"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV25"),
                sky: Pointer("PackMapEnvDataSkyV54"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV54"),
                water: RefArray("PackMapEnvDataWaterV54"),
                wind: RefArray("PackMapEnvDataWindV54"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV54"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV54: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV54"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV54")
        }
    };
    var V55$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV55",
        version: 55,
        definitions: {
            PackMapEnvDataLocalV55: {
                lighting: DynArray("PackMapEnvDataLightingV55"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV26"),
                clouds: Pointer("PackMapEnvDataCloudsV55"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV26"),
                effect: RefArray("PackMapEnvDataEffectV55"),
                haze: RefArray("PackMapEnvDataHazeV55"),
                particleFields: RefArray("PackMapEnvDataPFieldV55"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV26"),
                sky: Pointer("PackMapEnvDataSkyV55"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV55"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV26"),
                water: RefArray("PackMapEnvDataWaterV55"),
                wind: RefArray("PackMapEnvDataWindV55"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV55: {
                lights: RefArray("PackMapEnvDataLightV55")
            },
            PackMapEnvDataLightV55: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV26: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV26")
            },
            PackMapEnvDataLightingCharV26: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV55: {
                layers: DynArray("PackMapEnvDataLayerV55")
            },
            PackMapEnvDataLayerV55: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV55"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV55: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV26: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV55: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV55: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV55: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV26: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV55: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV55: {
                cards: DynArray("PackMapEnvDataSkyCardV55")
            },
            PackMapEnvDataSkyCardV55: {
                day: "PackMapEnvDataSkyCardAttributesV55",
                night: "PackMapEnvDataSkyCardAttributesV55",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV55: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV26: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV26"),
                targetVolume: Uint64
            },
            PackMapEnvDataSpawnListV26: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV26")
            },
            PackMapEnvDataSpawnModelDataV26: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                probability: Float32,
                delay: Float32,
                maxConcurrent: Uint16,
                flags: Uint32,
                modelFile: RefString16()
            },
            PackMapEnvDataWaterV55: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV55: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV55: {
                lighting: DynArray("PackMapEnvDataLightingV55"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV26"),
                clouds: Pointer("PackMapEnvDataCloudsV55"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV26"),
                effect: RefArray("PackMapEnvDataEffectV55"),
                haze: RefArray("PackMapEnvDataHazeV55"),
                particleFields: RefArray("PackMapEnvDataPFieldV55"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV26"),
                sky: Pointer("PackMapEnvDataSkyV55"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV55"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV26"),
                water: RefArray("PackMapEnvDataWaterV55"),
                wind: RefArray("PackMapEnvDataWindV55"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV55"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV55: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV55"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV55")
        }
    };
    var V56$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV56",
        version: 56,
        definitions: {
            PackMapEnvDataLocalV56: {
                lighting: DynArray("PackMapEnvDataLightingV56"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV27"),
                clouds: Pointer("PackMapEnvDataCloudsV56"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV27"),
                effect: RefArray("PackMapEnvDataEffectV56"),
                haze: RefArray("PackMapEnvDataHazeV56"),
                particleFields: RefArray("PackMapEnvDataPFieldV56"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV27"),
                sky: Pointer("PackMapEnvDataSkyV56"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV56"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV27"),
                water: RefArray("PackMapEnvDataWaterV56"),
                wind: RefArray("PackMapEnvDataWindV56"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV56: {
                lights: RefArray("PackMapEnvDataLightV56")
            },
            PackMapEnvDataLightV56: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV27: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV27")
            },
            PackMapEnvDataLightingCharV27: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV56: {
                layers: DynArray("PackMapEnvDataLayerV56")
            },
            PackMapEnvDataLayerV56: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV56"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV56: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV27: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV56: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV56: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV56: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV27: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV56: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV56: {
                cards: DynArray("PackMapEnvDataSkyCardV56")
            },
            PackMapEnvDataSkyCardV56: {
                day: "PackMapEnvDataSkyCardAttributesV56",
                night: "PackMapEnvDataSkyCardAttributesV56",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV56: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV27: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV27"),
                targetVolume: Uint64
            },
            PackMapEnvDataSpawnListV27: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV27")
            },
            PackMapEnvDataSpawnModelDataV27: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: RefString16(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV56: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV56: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV56: {
                lighting: DynArray("PackMapEnvDataLightingV56"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV27"),
                clouds: Pointer("PackMapEnvDataCloudsV56"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV27"),
                effect: RefArray("PackMapEnvDataEffectV56"),
                haze: RefArray("PackMapEnvDataHazeV56"),
                particleFields: RefArray("PackMapEnvDataPFieldV56"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV27"),
                sky: Pointer("PackMapEnvDataSkyV56"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV56"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV27"),
                water: RefArray("PackMapEnvDataWaterV56"),
                wind: RefArray("PackMapEnvDataWindV56"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV56"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV56: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV56"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV56")
        }
    };
    var V57$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV57",
        version: 57,
        definitions: {
            PackMapEnvDataLocalV57: {
                lighting: DynArray("PackMapEnvDataLightingV57"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV28"),
                clouds: Pointer("PackMapEnvDataCloudsV57"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV28"),
                effect: RefArray("PackMapEnvDataEffectV57"),
                haze: RefArray("PackMapEnvDataHazeV57"),
                particleFields: RefArray("PackMapEnvDataPFieldV57"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV28"),
                sky: Pointer("PackMapEnvDataSkyV57"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV57"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV28"),
                water: RefArray("PackMapEnvDataWaterV57"),
                wind: RefArray("PackMapEnvDataWindV57"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV57: {
                lights: RefArray("PackMapEnvDataLightV57")
            },
            PackMapEnvDataLightV57: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV28: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV28")
            },
            PackMapEnvDataLightingCharV28: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV57: {
                layers: DynArray("PackMapEnvDataLayerV57")
            },
            PackMapEnvDataLayerV57: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV57"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV57: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV28: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV57: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV57: {
                distColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV57: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV28: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV57: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV57: {
                cards: DynArray("PackMapEnvDataSkyCardV57")
            },
            PackMapEnvDataSkyCardV57: {
                day: "PackMapEnvDataSkyCardAttributesV57",
                night: "PackMapEnvDataSkyCardAttributesV57",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV57: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV28: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV28"),
                targetVolume: Uint64
            },
            PackMapEnvDataSpawnListV28: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV28")
            },
            PackMapEnvDataSpawnModelDataV28: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: RefString16(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV57: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV57: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV57: {
                lighting: DynArray("PackMapEnvDataLightingV57"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV28"),
                clouds: Pointer("PackMapEnvDataCloudsV57"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV28"),
                effect: RefArray("PackMapEnvDataEffectV57"),
                haze: RefArray("PackMapEnvDataHazeV57"),
                particleFields: RefArray("PackMapEnvDataPFieldV57"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV28"),
                sky: Pointer("PackMapEnvDataSkyV57"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV57"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV28"),
                water: RefArray("PackMapEnvDataWaterV57"),
                wind: RefArray("PackMapEnvDataWindV57"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV57"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV57: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV57"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV57")
        }
    };
    var V58$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV58",
        version: 58,
        definitions: {
            PackMapEnvDataLocalV58: {
                lighting: DynArray("PackMapEnvDataLightingV58"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV29"),
                clouds: Pointer("PackMapEnvDataCloudsV58"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV29"),
                effect: RefArray("PackMapEnvDataEffectV58"),
                haze: RefArray("PackMapEnvDataHazeV58"),
                particleFields: RefArray("PackMapEnvDataPFieldV58"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV29"),
                sky: Pointer("PackMapEnvDataSkyV58"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV58"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV29"),
                water: RefArray("PackMapEnvDataWaterV58"),
                wind: RefArray("PackMapEnvDataWindV58"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV58: {
                lights: RefArray("PackMapEnvDataLightV58")
            },
            PackMapEnvDataLightV58: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV29: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV29")
            },
            PackMapEnvDataLightingCharV29: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV58: {
                layers: DynArray("PackMapEnvDataLayerV58")
            },
            PackMapEnvDataLayerV58: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV58"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV58: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV29: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV58: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV58: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV58: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV29: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV58: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV58: {
                cards: DynArray("PackMapEnvDataSkyCardV58")
            },
            PackMapEnvDataSkyCardV58: {
                day: "PackMapEnvDataSkyCardAttributesV58",
                night: "PackMapEnvDataSkyCardAttributesV58",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV58: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV29: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV29"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV29: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV29")
            },
            PackMapEnvDataSpawnModelDataV29: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: RefString16(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV58: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV58: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV58: {
                lighting: DynArray("PackMapEnvDataLightingV58"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV29"),
                clouds: Pointer("PackMapEnvDataCloudsV58"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV29"),
                effect: RefArray("PackMapEnvDataEffectV58"),
                haze: RefArray("PackMapEnvDataHazeV58"),
                particleFields: RefArray("PackMapEnvDataPFieldV58"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV29"),
                sky: Pointer("PackMapEnvDataSkyV58"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV58"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV29"),
                water: RefArray("PackMapEnvDataWaterV58"),
                wind: RefArray("PackMapEnvDataWindV58"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV58"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV58: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV58"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV58")
        }
    };
    var V59$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV59",
        version: 59,
        definitions: {
            PackMapEnvDataLocalV59: {
                lighting: DynArray("PackMapEnvDataLightingV59"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV30"),
                clouds: Pointer("PackMapEnvDataCloudsV59"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV30"),
                effect: RefArray("PackMapEnvDataEffectV59"),
                haze: RefArray("PackMapEnvDataHazeV59"),
                particleFields: RefArray("PackMapEnvDataPFieldV59"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV30"),
                sky: Pointer("PackMapEnvDataSkyV59"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV59"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV30"),
                water: RefArray("PackMapEnvDataWaterV59"),
                wind: RefArray("PackMapEnvDataWindV59"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV59: {
                lights: RefArray("PackMapEnvDataLightV59")
            },
            PackMapEnvDataLightV59: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV30: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV30")
            },
            PackMapEnvDataLightingCharV30: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV59: {
                layers: DynArray("PackMapEnvDataLayerV59")
            },
            PackMapEnvDataLayerV59: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV59"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV59: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV30: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV59: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32
            },
            PackMapEnvDataHazeV59: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV59: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV30: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV59: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV59: {
                cards: DynArray("PackMapEnvDataSkyCardV59")
            },
            PackMapEnvDataSkyCardV59: {
                day: "PackMapEnvDataSkyCardAttributesV59",
                night: "PackMapEnvDataSkyCardAttributesV59",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV59: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV30: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV30"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV30: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV30")
            },
            PackMapEnvDataSpawnModelDataV30: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV59: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV59: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV59: {
                lighting: DynArray("PackMapEnvDataLightingV59"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV30"),
                clouds: Pointer("PackMapEnvDataCloudsV59"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV30"),
                effect: RefArray("PackMapEnvDataEffectV59"),
                haze: RefArray("PackMapEnvDataHazeV59"),
                particleFields: RefArray("PackMapEnvDataPFieldV59"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV30"),
                sky: Pointer("PackMapEnvDataSkyV59"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV59"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV30"),
                water: RefArray("PackMapEnvDataWaterV59"),
                wind: RefArray("PackMapEnvDataWindV59"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV59"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV59: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV59"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV59")
        }
    };
    var V60$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV60",
        version: 60,
        definitions: {
            PackMapEnvDataLocalV60: {
                lighting: DynArray("PackMapEnvDataLightingV60"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV31"),
                clouds: Pointer("PackMapEnvDataCloudsV60"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV31"),
                effect: RefArray("PackMapEnvDataEffectV60"),
                haze: RefArray("PackMapEnvDataHazeV60"),
                particleFields: RefArray("PackMapEnvDataPFieldV60"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV31"),
                sky: Pointer("PackMapEnvDataSkyV60"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV60"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV31"),
                water: RefArray("PackMapEnvDataWaterV60"),
                wind: RefArray("PackMapEnvDataWindV60"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV60: {
                lights: RefArray("PackMapEnvDataLightV60")
            },
            PackMapEnvDataLightV60: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV31: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV31")
            },
            PackMapEnvDataLightingCharV31: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV60: {
                layers: DynArray("PackMapEnvDataLayerV60")
            },
            PackMapEnvDataLayerV60: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV60"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV60: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV31: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV60: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV60: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV60: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV31: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV60: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV60: {
                cards: DynArray("PackMapEnvDataSkyCardV60")
            },
            PackMapEnvDataSkyCardV60: {
                day: "PackMapEnvDataSkyCardAttributesV60",
                night: "PackMapEnvDataSkyCardAttributesV60",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV60: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV31: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV31"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV31: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV31")
            },
            PackMapEnvDataSpawnModelDataV31: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV60: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV60: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV60: {
                lighting: DynArray("PackMapEnvDataLightingV60"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV31"),
                clouds: Pointer("PackMapEnvDataCloudsV60"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV31"),
                effect: RefArray("PackMapEnvDataEffectV60"),
                haze: RefArray("PackMapEnvDataHazeV60"),
                particleFields: RefArray("PackMapEnvDataPFieldV60"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV31"),
                sky: Pointer("PackMapEnvDataSkyV60"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV60"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV31"),
                water: RefArray("PackMapEnvDataWaterV60"),
                wind: RefArray("PackMapEnvDataWindV60"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV60"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV60: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV60"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV60")
        }
    };
    var V61$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV61",
        version: 61,
        definitions: {
            PackMapEnvDataLocalV61: {
                lighting: DynArray("PackMapEnvDataLightingV61"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV32"),
                clouds: Pointer("PackMapEnvDataCloudsV61"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV32"),
                effect: RefArray("PackMapEnvDataEffectV61"),
                haze: RefArray("PackMapEnvDataHazeV61"),
                particleFields: RefArray("PackMapEnvDataPFieldV61"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV32"),
                sky: Pointer("PackMapEnvDataSkyV61"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV61"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV32"),
                water: RefArray("PackMapEnvDataWaterV61"),
                wind: RefArray("PackMapEnvDataWindV61"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV61: {
                lights: RefArray("PackMapEnvDataLightV61")
            },
            PackMapEnvDataLightV61: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV32: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV32")
            },
            PackMapEnvDataLightingCharV32: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV61: {
                layers: DynArray("PackMapEnvDataLayerV61")
            },
            PackMapEnvDataLayerV61: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV61"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV61: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV32: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV61: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV61: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32
            },
            PackMapEnvDataPFieldV61: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV32: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV61: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV61: {
                cards: DynArray("PackMapEnvDataSkyCardV61")
            },
            PackMapEnvDataSkyCardV61: {
                day: "PackMapEnvDataSkyCardAttributesV61",
                night: "PackMapEnvDataSkyCardAttributesV61",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV61: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV32: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV32"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV32: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV32")
            },
            PackMapEnvDataSpawnModelDataV32: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV61: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV61: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV61: {
                lighting: DynArray("PackMapEnvDataLightingV61"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV32"),
                clouds: Pointer("PackMapEnvDataCloudsV61"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV32"),
                effect: RefArray("PackMapEnvDataEffectV61"),
                haze: RefArray("PackMapEnvDataHazeV61"),
                particleFields: RefArray("PackMapEnvDataPFieldV61"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV32"),
                sky: Pointer("PackMapEnvDataSkyV61"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV61"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV32"),
                water: RefArray("PackMapEnvDataWaterV61"),
                wind: RefArray("PackMapEnvDataWindV61"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV61"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV61: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV61"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV61")
        }
    };
    var V62$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV62",
        version: 62,
        definitions: {
            PackMapEnvDataLocalV62: {
                lighting: DynArray("PackMapEnvDataLightingV62"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV33"),
                clouds: Pointer("PackMapEnvDataCloudsV62"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV33"),
                effect: RefArray("PackMapEnvDataEffectV62"),
                haze: RefArray("PackMapEnvDataHazeV62"),
                particleFields: RefArray("PackMapEnvDataPFieldV62"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV33"),
                sky: Pointer("PackMapEnvDataSkyV62"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV62"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV33"),
                water: RefArray("PackMapEnvDataWaterV62"),
                wind: RefArray("PackMapEnvDataWindV62"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV62: {
                lights: RefArray("PackMapEnvDataLightV62")
            },
            PackMapEnvDataLightV62: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV33: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV33")
            },
            PackMapEnvDataLightingCharV33: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV62: {
                layers: DynArray("PackMapEnvDataLayerV62")
            },
            PackMapEnvDataLayerV62: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV62"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV62: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV33: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV62: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV62: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV62: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV33: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV62: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV62: {
                cards: DynArray("PackMapEnvDataSkyCardV62")
            },
            PackMapEnvDataSkyCardV62: {
                day: "PackMapEnvDataSkyCardAttributesV62",
                night: "PackMapEnvDataSkyCardAttributesV62",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV62: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV33: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV33"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV33: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV33")
            },
            PackMapEnvDataSpawnModelDataV33: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV62: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4))
            },
            PackMapEnvDataWindV62: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV62: {
                lighting: DynArray("PackMapEnvDataLightingV62"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV33"),
                clouds: Pointer("PackMapEnvDataCloudsV62"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV33"),
                effect: RefArray("PackMapEnvDataEffectV62"),
                haze: RefArray("PackMapEnvDataHazeV62"),
                particleFields: RefArray("PackMapEnvDataPFieldV62"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV33"),
                sky: Pointer("PackMapEnvDataSkyV62"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV62"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV33"),
                water: RefArray("PackMapEnvDataWaterV62"),
                wind: RefArray("PackMapEnvDataWindV62"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV62"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV62: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV62"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV62")
        }
    };
    var V63$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV63",
        version: 63,
        definitions: {
            PackMapEnvDataLocalV63: {
                lighting: DynArray("PackMapEnvDataLightingV63"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV34"),
                clouds: Pointer("PackMapEnvDataCloudsV63"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV34"),
                effect: RefArray("PackMapEnvDataEffectV63"),
                haze: RefArray("PackMapEnvDataHazeV63"),
                particleFields: RefArray("PackMapEnvDataPFieldV63"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV34"),
                sky: Pointer("PackMapEnvDataSkyV63"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV63"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV34"),
                water: RefArray("PackMapEnvDataWaterV63"),
                wind: RefArray("PackMapEnvDataWindV63"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV63: {
                lights: RefArray("PackMapEnvDataLightV63")
            },
            PackMapEnvDataLightV63: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV34: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV34")
            },
            PackMapEnvDataLightingCharV34: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV63: {
                layers: DynArray("PackMapEnvDataLayerV63")
            },
            PackMapEnvDataLayerV63: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV63"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV63: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV34: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV63: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV63: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV63: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV34: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV63: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32
            },
            PackMapEnvDataSkyCardsV63: {
                cards: DynArray("PackMapEnvDataSkyCardV63")
            },
            PackMapEnvDataSkyCardV63: {
                day: "PackMapEnvDataSkyCardAttributesV63",
                night: "PackMapEnvDataSkyCardAttributesV63",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV63: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV34: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV34"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV34: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV34")
            },
            PackMapEnvDataSpawnModelDataV34: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV63: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV63: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8
            },
            PackMapEnvDataGlobalV63: {
                lighting: DynArray("PackMapEnvDataLightingV63"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV34"),
                clouds: Pointer("PackMapEnvDataCloudsV63"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV34"),
                effect: RefArray("PackMapEnvDataEffectV63"),
                haze: RefArray("PackMapEnvDataHazeV63"),
                particleFields: RefArray("PackMapEnvDataPFieldV63"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV34"),
                sky: Pointer("PackMapEnvDataSkyV63"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV63"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV34"),
                water: RefArray("PackMapEnvDataWaterV63"),
                wind: RefArray("PackMapEnvDataWindV63"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV63"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV63: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV63"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV63")
        }
    };
    var V64$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV64",
        version: 64,
        definitions: {
            PackMapEnvDataLocalV64: {
                lighting: DynArray("PackMapEnvDataLightingV64"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV35"),
                clouds: Pointer("PackMapEnvDataCloudsV64"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV35"),
                effect: RefArray("PackMapEnvDataEffectV64"),
                haze: RefArray("PackMapEnvDataHazeV64"),
                particleFields: RefArray("PackMapEnvDataPFieldV64"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV35"),
                sky: Pointer("PackMapEnvDataSkyV64"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV64"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV35"),
                water: RefArray("PackMapEnvDataWaterV64"),
                wind: RefArray("PackMapEnvDataWindV64"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV64: {
                lights: RefArray("PackMapEnvDataLightV64")
            },
            PackMapEnvDataLightV64: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV35: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV35")
            },
            PackMapEnvDataLightingCharV35: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV64: {
                layers: DynArray("PackMapEnvDataLayerV64")
            },
            PackMapEnvDataLayerV64: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV64"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV64: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV35: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV64: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV64: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV64: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV35: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV64: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV64: {
                cards: DynArray("PackMapEnvDataSkyCardV64")
            },
            PackMapEnvDataSkyCardV64: {
                day: "PackMapEnvDataSkyCardAttributesV64",
                night: "PackMapEnvDataSkyCardAttributesV64",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV64: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV35: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV35"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV35: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV35")
            },
            PackMapEnvDataSpawnModelDataV35: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV64: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV64: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataGlobalV64: {
                lighting: DynArray("PackMapEnvDataLightingV64"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV35"),
                clouds: Pointer("PackMapEnvDataCloudsV64"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV35"),
                effect: RefArray("PackMapEnvDataEffectV64"),
                haze: RefArray("PackMapEnvDataHazeV64"),
                particleFields: RefArray("PackMapEnvDataPFieldV64"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV35"),
                sky: Pointer("PackMapEnvDataSkyV64"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV64"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV35"),
                water: RefArray("PackMapEnvDataWaterV64"),
                wind: RefArray("PackMapEnvDataWindV64"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV64"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV64: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV64"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV64")
        }
    };
    var V65$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV65",
        version: 65,
        definitions: {
            PackMapEnvDataLocalV65: {
                lighting: DynArray("PackMapEnvDataLightingV65"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV36"),
                clouds: Pointer("PackMapEnvDataCloudsV65"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV36"),
                effect: RefArray("PackMapEnvDataEffectV65"),
                haze: RefArray("PackMapEnvDataHazeV65"),
                particleFields: RefArray("PackMapEnvDataPFieldV65"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV36"),
                sky: Pointer("PackMapEnvDataSkyV65"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV65"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV36"),
                water: RefArray("PackMapEnvDataWaterV65"),
                wind: RefArray("PackMapEnvDataWindV65"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                center: FixedArray(Float32, 3),
                zRange: FixedArray(Float32, 2),
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                type: Uint8,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                guid: Uint64
            },
            PackMapEnvDataLightingV65: {
                lights: RefArray("PackMapEnvDataLightV65"),
                shadowInfluence: Float32
            },
            PackMapEnvDataLightV65: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV36: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV36")
            },
            PackMapEnvDataLightingCharV36: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV65: {
                layers: DynArray("PackMapEnvDataLayerV65")
            },
            PackMapEnvDataLayerV65: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV65"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV65: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV36: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV65: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV65: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV65: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV36: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV65: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV65: {
                cards: DynArray("PackMapEnvDataSkyCardV65")
            },
            PackMapEnvDataSkyCardV65: {
                day: "PackMapEnvDataSkyCardAttributesV65",
                night: "PackMapEnvDataSkyCardAttributesV65",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV65: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV36: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV36"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV36: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV36")
            },
            PackMapEnvDataSpawnModelDataV36: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV65: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV65: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataGlobalV65: {
                lighting: DynArray("PackMapEnvDataLightingV65"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV36"),
                clouds: Pointer("PackMapEnvDataCloudsV65"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV36"),
                effect: RefArray("PackMapEnvDataEffectV65"),
                haze: RefArray("PackMapEnvDataHazeV65"),
                particleFields: RefArray("PackMapEnvDataPFieldV65"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV36"),
                sky: Pointer("PackMapEnvDataSkyV65"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV65"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV36"),
                water: RefArray("PackMapEnvDataWaterV65"),
                wind: RefArray("PackMapEnvDataWindV65"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV65"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV65: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV65"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV65")
        }
    };
    var V66$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV66",
        version: 66,
        definitions: {
            PackMapEnvDataLocalV66: {
                lighting: DynArray("PackMapEnvDataLightingV66"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV37"),
                clouds: Pointer("PackMapEnvDataCloudsV66"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV37"),
                effect: RefArray("PackMapEnvDataEffectV66"),
                haze: RefArray("PackMapEnvDataHazeV66"),
                particleFields: RefArray("PackMapEnvDataPFieldV66"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV37"),
                sky: Pointer("PackMapEnvDataSkyV66"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV66"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV37"),
                water: RefArray("PackMapEnvDataWaterV66"),
                wind: RefArray("PackMapEnvDataWindV66"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV37")
            },
            PackMapEnvDataLightingV66: {
                lights: RefArray("PackMapEnvDataLightV66"),
                shadowInfluence: Float32
            },
            PackMapEnvDataLightV66: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV37: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV37")
            },
            PackMapEnvDataLightingCharV37: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV66: {
                layers: DynArray("PackMapEnvDataLayerV66")
            },
            PackMapEnvDataLayerV66: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV66"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV66: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV37: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV66: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV66: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV66: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV37: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV66: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV66: {
                cards: DynArray("PackMapEnvDataSkyCardV66")
            },
            PackMapEnvDataSkyCardV66: {
                day: "PackMapEnvDataSkyCardAttributesV66",
                night: "PackMapEnvDataSkyCardAttributesV66",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV66: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV37: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV37"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV37: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV37")
            },
            PackMapEnvDataSpawnModelDataV37: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV66: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV66: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataShapeV37: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV66: {
                lighting: DynArray("PackMapEnvDataLightingV66"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV37"),
                clouds: Pointer("PackMapEnvDataCloudsV66"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV37"),
                effect: RefArray("PackMapEnvDataEffectV66"),
                haze: RefArray("PackMapEnvDataHazeV66"),
                particleFields: RefArray("PackMapEnvDataPFieldV66"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV37"),
                sky: Pointer("PackMapEnvDataSkyV66"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV66"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV37"),
                water: RefArray("PackMapEnvDataWaterV66"),
                wind: RefArray("PackMapEnvDataWindV66"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV66"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV66: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV66"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV66")
        }
    };
    var V67$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV67",
        version: 67,
        definitions: {
            PackMapEnvDataLocalV67: {
                lighting: DynArray("PackMapEnvDataLightingV67"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV38"),
                clouds: Pointer("PackMapEnvDataCloudsV67"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV38"),
                effect: RefArray("PackMapEnvDataEffectV67"),
                haze: RefArray("PackMapEnvDataHazeV67"),
                particleFields: RefArray("PackMapEnvDataPFieldV67"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV38"),
                sky: Pointer("PackMapEnvDataSkyV67"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV67"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV38"),
                water: RefArray("PackMapEnvDataWaterV67"),
                wind: RefArray("PackMapEnvDataWindV67"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV38")
            },
            PackMapEnvDataLightingV67: {
                lights: RefArray("PackMapEnvDataLightV67"),
                shadowInfluence: Float32
            },
            PackMapEnvDataLightV67: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV38: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV38")
            },
            PackMapEnvDataLightingCharV38: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV67: {
                layers: DynArray("PackMapEnvDataLayerV67")
            },
            PackMapEnvDataLayerV67: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV67"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV67: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV38: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV67: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV67: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV67: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV38: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV67: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV67: {
                cards: DynArray("PackMapEnvDataSkyCardV67")
            },
            PackMapEnvDataSkyCardV67: {
                day: "PackMapEnvDataSkyCardAttributesV67",
                night: "PackMapEnvDataSkyCardAttributesV67",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV67: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV38: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV38"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV38: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV38")
            },
            PackMapEnvDataSpawnModelDataV38: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV67: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV67: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataShapeV38: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV67: {
                lighting: DynArray("PackMapEnvDataLightingV67"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV38"),
                clouds: Pointer("PackMapEnvDataCloudsV67"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV38"),
                effect: RefArray("PackMapEnvDataEffectV67"),
                haze: RefArray("PackMapEnvDataHazeV67"),
                particleFields: RefArray("PackMapEnvDataPFieldV67"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV38"),
                sky: Pointer("PackMapEnvDataSkyV67"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV67"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV38"),
                water: RefArray("PackMapEnvDataWaterV67"),
                wind: RefArray("PackMapEnvDataWindV67"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV67"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV67: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV67"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV67")
        }
    };
    var V68$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV68",
        version: 68,
        definitions: {
            PackMapEnvDataLocalV68: {
                lighting: DynArray("PackMapEnvDataLightingV68"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV39"),
                clouds: Pointer("PackMapEnvDataCloudsV68"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV39"),
                effect: RefArray("PackMapEnvDataEffectV68"),
                haze: RefArray("PackMapEnvDataHazeV68"),
                particleFields: RefArray("PackMapEnvDataPFieldV68"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV39"),
                sky: Pointer("PackMapEnvDataSkyV68"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV68"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV39"),
                water: RefArray("PackMapEnvDataWaterV68"),
                wind: RefArray("PackMapEnvDataWindV68"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV39")
            },
            PackMapEnvDataLightingV68: {
                lights: RefArray("PackMapEnvDataLightV68"),
                shadowInfluence: Float32,
                backlight: Pointer("PackMapEnvDataLightV68")
            },
            PackMapEnvDataLightV68: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV39: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV39")
            },
            PackMapEnvDataLightingCharV39: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV68: {
                layers: DynArray("PackMapEnvDataLayerV68")
            },
            PackMapEnvDataLayerV68: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV68"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV68: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV39: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV68: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV68: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV68: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV39: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV68: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV68: {
                cards: DynArray("PackMapEnvDataSkyCardV68")
            },
            PackMapEnvDataSkyCardV68: {
                day: "PackMapEnvDataSkyCardAttributesV68",
                night: "PackMapEnvDataSkyCardAttributesV68",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV68: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV39: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV39"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV39: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV39")
            },
            PackMapEnvDataSpawnModelDataV39: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV68: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV68: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataShapeV39: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV68: {
                lighting: DynArray("PackMapEnvDataLightingV68"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV39"),
                clouds: Pointer("PackMapEnvDataCloudsV68"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV39"),
                effect: RefArray("PackMapEnvDataEffectV68"),
                haze: RefArray("PackMapEnvDataHazeV68"),
                particleFields: RefArray("PackMapEnvDataPFieldV68"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV39"),
                sky: Pointer("PackMapEnvDataSkyV68"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV68"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV39"),
                water: RefArray("PackMapEnvDataWaterV68"),
                wind: RefArray("PackMapEnvDataWindV68"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV68"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV68: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV68"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV68")
        }
    };
    var V69$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV69",
        version: 69,
        definitions: {
            PackMapEnvDataLocalV69: {
                lighting: DynArray("PackMapEnvDataLightingV69"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV40"),
                clouds: Pointer("PackMapEnvDataCloudsV69"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV40"),
                effect: RefArray("PackMapEnvDataEffectV69"),
                haze: RefArray("PackMapEnvDataHazeV69"),
                particleFields: RefArray("PackMapEnvDataPFieldV69"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV40"),
                sky: Pointer("PackMapEnvDataSkyV69"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV69"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV40"),
                water: RefArray("PackMapEnvDataWaterV69"),
                wind: RefArray("PackMapEnvDataWindV69"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV40")
            },
            PackMapEnvDataLightingV69: {
                lights: RefArray("PackMapEnvDataLightV69"),
                shadowInfluence: Float32
            },
            PackMapEnvDataLightV69: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV40: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV40")
            },
            PackMapEnvDataLightingCharV40: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV69: {
                layers: DynArray("PackMapEnvDataLayerV69")
            },
            PackMapEnvDataLayerV69: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV69"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV69: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV40: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV69: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV69: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV69: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Uint16,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV40: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV69: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV69: {
                cards: DynArray("PackMapEnvDataSkyCardV69")
            },
            PackMapEnvDataSkyCardV69: {
                day: "PackMapEnvDataSkyCardAttributesV69",
                night: "PackMapEnvDataSkyCardAttributesV69",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV69: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV40: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV40"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV40: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV40")
            },
            PackMapEnvDataSpawnModelDataV40: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV69: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV69: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataShapeV40: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV69: {
                lighting: DynArray("PackMapEnvDataLightingV69"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV40"),
                clouds: Pointer("PackMapEnvDataCloudsV69"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV40"),
                effect: RefArray("PackMapEnvDataEffectV69"),
                haze: RefArray("PackMapEnvDataHazeV69"),
                particleFields: RefArray("PackMapEnvDataPFieldV69"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV40"),
                sky: Pointer("PackMapEnvDataSkyV69"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV69"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV40"),
                water: RefArray("PackMapEnvDataWaterV69"),
                wind: RefArray("PackMapEnvDataWindV69"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV69"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV69: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV69"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV69")
        }
    };
    var V70$1 = {
        chunkName: "env",
        name: "PackMapEnvironmentV70",
        version: 70,
        definitions: {
            PackMapEnvDataLocalV70: {
                lighting: DynArray("PackMapEnvDataLightingV70"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV41"),
                clouds: Pointer("PackMapEnvDataCloudsV70"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV41"),
                effect: RefArray("PackMapEnvDataEffectV70"),
                haze: RefArray("PackMapEnvDataHazeV70"),
                particleFields: RefArray("PackMapEnvDataPFieldV70"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV41"),
                sky: Pointer("PackMapEnvDataSkyV70"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV70"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV41"),
                water: RefArray("PackMapEnvDataWaterV70"),
                wind: RefArray("PackMapEnvDataWindV70"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV41")
            },
            PackMapEnvDataLightingV70: {
                lights: RefArray("PackMapEnvDataLightV70"),
                shadowInfluence: Float32
            },
            PackMapEnvDataLightV70: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV41: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV41")
            },
            PackMapEnvDataLightingCharV41: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV70: {
                layers: DynArray("PackMapEnvDataLayerV70")
            },
            PackMapEnvDataLayerV70: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV70"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV70: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV41: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV70: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV70: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV70: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Float32,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV41: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV70: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV70: {
                cards: DynArray("PackMapEnvDataSkyCardV70")
            },
            PackMapEnvDataSkyCardV70: {
                day: "PackMapEnvDataSkyCardAttributesV70",
                night: "PackMapEnvDataSkyCardAttributesV70",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV70: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV41: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV41"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV41: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV41")
            },
            PackMapEnvDataSpawnModelDataV41: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV70: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV70: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataShapeV41: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV70: {
                lighting: DynArray("PackMapEnvDataLightingV70"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV41"),
                clouds: Pointer("PackMapEnvDataCloudsV70"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV41"),
                effect: RefArray("PackMapEnvDataEffectV70"),
                haze: RefArray("PackMapEnvDataHazeV70"),
                particleFields: RefArray("PackMapEnvDataPFieldV70"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV41"),
                sky: Pointer("PackMapEnvDataSkyV70"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV70"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV41"),
                water: RefArray("PackMapEnvDataWaterV70"),
                wind: RefArray("PackMapEnvDataWindV70"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV70"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV70: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV70"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV70")
        }
    };
    var V71 = {
        chunkName: "env",
        name: "PackMapEnvironmentV71",
        version: 71,
        definitions: {
            PackMapEnvDataLocalV71: {
                lighting: DynArray("PackMapEnvDataLightingV71"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV42"),
                clouds: Pointer("PackMapEnvDataCloudsV71"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV42"),
                effect: RefArray("PackMapEnvDataEffectV71"),
                haze: RefArray("PackMapEnvDataHazeV71"),
                particleFields: RefArray("PackMapEnvDataPFieldV71"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV42"),
                sky: Pointer("PackMapEnvDataSkyV71"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV71"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV42"),
                water: RefArray("PackMapEnvDataWaterV71"),
                wind: RefArray("PackMapEnvDataWindV71"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV42")
            },
            PackMapEnvDataLightingV71: {
                lights: RefArray("PackMapEnvDataLightV71"),
                shadowInfluence: Float32,
                backlightColor: FixedArray(Uint8, 3),
                backlightIntensity: Float32
            },
            PackMapEnvDataLightV71: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV42: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV42")
            },
            PackMapEnvDataLightingCharV42: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV71: {
                layers: DynArray("PackMapEnvDataLayerV71")
            },
            PackMapEnvDataLayerV71: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV71"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV71: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV42: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV71: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV71: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV71: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Float32,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV42: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV71: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV71: {
                cards: DynArray("PackMapEnvDataSkyCardV71")
            },
            PackMapEnvDataSkyCardV71: {
                day: "PackMapEnvDataSkyCardAttributesV71",
                night: "PackMapEnvDataSkyCardAttributesV71",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV71: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV42: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV42"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV42: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV42")
            },
            PackMapEnvDataSpawnModelDataV42: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV71: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV71: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataShapeV42: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV71: {
                lighting: DynArray("PackMapEnvDataLightingV71"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV42"),
                clouds: Pointer("PackMapEnvDataCloudsV71"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV42"),
                effect: RefArray("PackMapEnvDataEffectV71"),
                haze: RefArray("PackMapEnvDataHazeV71"),
                particleFields: RefArray("PackMapEnvDataPFieldV71"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV42"),
                sky: Pointer("PackMapEnvDataSkyV71"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV71"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV42"),
                water: RefArray("PackMapEnvDataWaterV71"),
                wind: RefArray("PackMapEnvDataWindV71"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV71"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV71: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV71"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV71")
        }
    };
    var V72 = {
        chunkName: "env",
        name: "PackMapEnvironmentV72",
        version: 72,
        definitions: {
            PackMapEnvDataLocalV72: {
                lighting: DynArray("PackMapEnvDataLightingV72"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV43"),
                clouds: Pointer("PackMapEnvDataCloudsV72"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV43"),
                effect: RefArray("PackMapEnvDataEffectV72"),
                haze: RefArray("PackMapEnvDataHazeV72"),
                particleFields: RefArray("PackMapEnvDataPFieldV72"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV43"),
                sky: Pointer("PackMapEnvDataSkyV72"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV72"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV43"),
                water: RefArray("PackMapEnvDataWaterV72"),
                wind: RefArray("PackMapEnvDataWindV72"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                audioToken: Uint64,
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV43")
            },
            PackMapEnvDataLightingV72: {
                lights: RefArray("PackMapEnvDataLightV72"),
                shadowInfluence: Float32,
                backlightColor: FixedArray(Uint8, 3),
                backlightIntensity: Float32
            },
            PackMapEnvDataLightV72: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV43: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV43")
            },
            PackMapEnvDataLightingCharV43: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV72: {
                layers: DynArray("PackMapEnvDataLayerV72")
            },
            PackMapEnvDataLayerV72: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV72"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV72: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV43: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV72: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV72: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV72: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Float32,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV43: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV72: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV72: {
                cards: DynArray("PackMapEnvDataSkyCardV72")
            },
            PackMapEnvDataSkyCardV72: {
                day: "PackMapEnvDataSkyCardAttributesV72",
                night: "PackMapEnvDataSkyCardAttributesV72",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV72: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV43: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV43"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV43: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV43")
            },
            PackMapEnvDataSpawnModelDataV43: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV72: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV72: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataShapeV43: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV72: {
                lighting: DynArray("PackMapEnvDataLightingV72"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV43"),
                clouds: Pointer("PackMapEnvDataCloudsV72"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV43"),
                effect: RefArray("PackMapEnvDataEffectV72"),
                haze: RefArray("PackMapEnvDataHazeV72"),
                particleFields: RefArray("PackMapEnvDataPFieldV72"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV43"),
                sky: Pointer("PackMapEnvDataSkyV72"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV72"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV43"),
                water: RefArray("PackMapEnvDataWaterV72"),
                wind: RefArray("PackMapEnvDataWindV72"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                audioToken: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV72"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV72: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV72"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV72")
        }
    };
    var V73 = {
        chunkName: "env",
        name: "PackMapEnvironmentV73",
        version: 73,
        definitions: {
            PackMapEnvDataLocalV73: {
                lighting: DynArray("PackMapEnvDataLightingV73"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV44"),
                clouds: Pointer("PackMapEnvDataCloudsV73"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV44"),
                effect: RefArray("PackMapEnvDataEffectV73"),
                haze: RefArray("PackMapEnvDataHazeV73"),
                particleFields: RefArray("PackMapEnvDataPFieldV73"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV44"),
                sky: Pointer("PackMapEnvDataSkyV73"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV73"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV44"),
                water: RefArray("PackMapEnvDataWaterV73"),
                wind: RefArray("PackMapEnvDataWindV73"),
                audio: RefArray("PackMapEnvDataAudioV44"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV44")
            },
            PackMapEnvDataLightingV73: {
                lights: RefArray("PackMapEnvDataLightV73"),
                shadowInfluence: Float32,
                backlightColor: FixedArray(Uint8, 3),
                backlightIntensity: Float32
            },
            PackMapEnvDataLightV73: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV44: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV44")
            },
            PackMapEnvDataLightingCharV44: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV73: {
                layers: DynArray("PackMapEnvDataLayerV73")
            },
            PackMapEnvDataLayerV73: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV73"),
                name: RefString16()
            },
            PackMapEnvDataLayerAttributesV73: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32
            },
            PackMapEnvDataColoredLightRingsV44: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV73: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV73: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV73: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Float32,
                texPath: Filename(),
                type: Uint8,
                name: RefString16()
            },
            PackMapEnvDataPFieldCutoutV44: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV73: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV73: {
                cards: DynArray("PackMapEnvDataSkyCardV73")
            },
            PackMapEnvDataSkyCardV73: {
                day: "PackMapEnvDataSkyCardAttributesV73",
                night: "PackMapEnvDataSkyCardAttributesV73",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV73: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV44: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV44"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV44: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV44")
            },
            PackMapEnvDataSpawnModelDataV44: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV73: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV73: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataAudioV44: {
                token: Uint64
            },
            PackMapEnvDataShapeV44: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV73: {
                lighting: DynArray("PackMapEnvDataLightingV73"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV44"),
                clouds: Pointer("PackMapEnvDataCloudsV73"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV44"),
                effect: RefArray("PackMapEnvDataEffectV73"),
                haze: RefArray("PackMapEnvDataHazeV73"),
                particleFields: RefArray("PackMapEnvDataPFieldV73"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV44"),
                sky: Pointer("PackMapEnvDataSkyV73"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV73"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV44"),
                water: RefArray("PackMapEnvDataWaterV73"),
                wind: RefArray("PackMapEnvDataWindV73"),
                audio: RefArray("PackMapEnvDataAudioV44"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV73"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV73: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV73"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV73")
        }
    };
    var V74 = {
        chunkName: "env",
        name: "PackMapEnvironmentV74",
        version: 74,
        definitions: {
            PackMapEnvDataLocalV74: {
                lighting: DynArray("PackMapEnvDataLightingV74"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV45"),
                clouds: Pointer("PackMapEnvDataCloudsV74"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV45"),
                effect: RefArray("PackMapEnvDataEffectV74"),
                haze: RefArray("PackMapEnvDataHazeV74"),
                particleFields: RefArray("PackMapEnvDataPFieldV74"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV45"),
                sky: Pointer("PackMapEnvDataSkyV74"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV74"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV45"),
                water: RefArray("PackMapEnvDataWaterV74"),
                wind: RefArray("PackMapEnvDataWindV74"),
                audio: RefArray("PackMapEnvDataAudioV45"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                reserved: RefString16(),
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV45")
            },
            PackMapEnvDataLightingV74: {
                lights: RefArray("PackMapEnvDataLightV74"),
                shadowInfluence: Float32,
                backlightColor: FixedArray(Uint8, 3),
                backlightIntensity: Float32
            },
            PackMapEnvDataLightV74: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV45: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV45")
            },
            PackMapEnvDataLightingCharV45: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV74: {
                layers: DynArray("PackMapEnvDataLayerV74")
            },
            PackMapEnvDataLayerV74: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV74"),
                name: RefString16(),
                reserved: Uint32
            },
            PackMapEnvDataLayerAttributesV74: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32,
                reserved: Uint32
            },
            PackMapEnvDataColoredLightRingsV45: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV74: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                flatteningRange: FixedArray(Float32, 2),
                flatteningCharacterRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataHazeV74: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV74: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Float32,
                texPath: Filename(),
                type: Uint8,
                name: RefString16(),
                reserved: Uint32
            },
            PackMapEnvDataPFieldCutoutV45: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV74: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV74: {
                cards: DynArray("PackMapEnvDataSkyCardV74")
            },
            PackMapEnvDataSkyCardV74: {
                day: "PackMapEnvDataSkyCardAttributesV74",
                night: "PackMapEnvDataSkyCardAttributesV74",
                flags: Uint32,
                name: RefString16()
            },
            PackMapEnvDataSkyCardAttributesV74: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32
            },
            PackMapEnvDataSpawnGroupsV45: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV45"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV45: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV45")
            },
            PackMapEnvDataSpawnModelDataV45: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV74: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV74: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataAudioV45: {
                token: Uint64
            },
            PackMapEnvDataShapeV45: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV74: {
                lighting: DynArray("PackMapEnvDataLightingV74"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV45"),
                clouds: Pointer("PackMapEnvDataCloudsV74"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV45"),
                effect: RefArray("PackMapEnvDataEffectV74"),
                haze: RefArray("PackMapEnvDataHazeV74"),
                particleFields: RefArray("PackMapEnvDataPFieldV74"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV45"),
                sky: Pointer("PackMapEnvDataSkyV74"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV74"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV45"),
                water: RefArray("PackMapEnvDataWaterV74"),
                wind: RefArray("PackMapEnvDataWindV74"),
                audio: RefArray("PackMapEnvDataAudioV45"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                reserved: RefString16(),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV74"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV74: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV74"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV74")
        }
    };
    var V75 = {
        chunkName: "env",
        name: "PackMapEnvironmentV75",
        version: 75,
        definitions: {
            PackMapEnvDataLocalV75: {
                lighting: DynArray("PackMapEnvDataLightingV75"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV46"),
                clouds: Pointer("PackMapEnvDataCloudsV75"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV46"),
                effect: RefArray("PackMapEnvDataEffectV75"),
                haze: RefArray("PackMapEnvDataHazeV75"),
                particleFields: RefArray("PackMapEnvDataPFieldV75"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV46"),
                sky: Pointer("PackMapEnvDataSkyV75"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV75"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV46"),
                water: RefArray("PackMapEnvDataWaterV75"),
                wind: RefArray("PackMapEnvDataWindV75"),
                audio: RefArray("PackMapEnvDataAudioV46"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                flags: Uint32,
                ext: Pointer("PackMapEnvDataBaseExV46"),
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV46")
            },
            PackMapEnvDataLightingV75: {
                lights: RefArray("PackMapEnvDataLightV75"),
                shadowInfluence: Float32,
                backlightColor: FixedArray(Uint8, 3),
                backlightIntensity: Float32
            },
            PackMapEnvDataLightV75: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV46: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV46")
            },
            PackMapEnvDataLightingCharV46: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV75: {
                layers: DynArray("PackMapEnvDataLayerV75")
            },
            PackMapEnvDataLayerV75: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV75"),
                name: RefString16(),
                reserved: Uint32
            },
            PackMapEnvDataLayerAttributesV75: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32,
                reserved: Uint32
            },
            PackMapEnvDataColoredLightRingsV46: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV75: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                ssaoAmount: Float32,
                ssaoBrighten: Float32,
                ssaoContrast: Float32,
                ssaoSunScale: Float32,
                flags: Uint32,
                clutTexturePath: Filename(),
                ext: Pointer("PackMapEnvDataEffectExV46")
            },
            PackMapEnvDataEffectExV46: {
                dummy: Uint32
            },
            PackMapEnvDataHazeV75: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV75: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Float32,
                texPath: Filename(),
                type: Uint8,
                name: RefString16(),
                reserved: Uint32
            },
            PackMapEnvDataPFieldCutoutV46: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV75: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV75: {
                cards: DynArray("PackMapEnvDataSkyCardV75")
            },
            PackMapEnvDataSkyCardV75: {
                day: "PackMapEnvDataSkyCardAttributesV75",
                night: "PackMapEnvDataSkyCardAttributesV75",
                flags: Uint32,
                name: RefString16(),
                location: FixedArray(Float32, 3),
                material: Pointer("PackMapEnvDataSkyCardMaterialV46"),
                ext: Pointer("PackMapEnvDataSkyCardExV46")
            },
            PackMapEnvDataSkyCardAttributesV75: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32,
                lensFlare: Pointer("PackMapEnvLensFlareV46"),
                ext: Pointer("PackMapEnvDataSkyCardAttributesExV46")
            },
            PackMapEnvLensFlareV46: {
                atoms: DynArray("PackMapEnvLensFlareAtomV46"),
                textures: DynArray("PackMapEnvLensFlareTextureV46"),
                material: Filename(),
                fadeBand: FixedArray(Float32, 2),
                reverseFadeBand: FixedArray(Float32, 2),
                opacityCoeff: Float32,
                flags: Uint8,
                constants: DynArray("PackMapEnvDataShaderConstantV46")
            },
            PackMapEnvLensFlareAtomV46: {
                rows: Uint32,
                columns: Uint32,
                start: Uint32,
                fps: Float32,
                color: FixedArray(Uint8, 4),
                offset: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                baseRotation: Float32,
                cameraRotation: Float32,
                flags: Uint8
            },
            PackMapEnvLensFlareTextureV46: {
                texture: Filename()
            },
            PackMapEnvDataShaderConstantV46: {
                token: Uint32,
                value: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyCardAttributesExV46: {
                dummy: Uint32
            },
            PackMapEnvDataSkyCardMaterialV46: {
                filename: Filename(),
                constants: DynArray("PackMapEnvDataShaderConstantV46"),
                textures: DynArray("PackMapEnvDataShaderTextureV46"),
                textureAnimation: "PackEnvDataSkyCardAnimationV46",
                flipbook: "PackMapEnvDataSkycardFlipbookV46"
            },
            PackMapEnvDataShaderTextureV46: {
                filename: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackEnvDataSkyCardAnimationV46: {
                textureAnimTranslation: FixedArray(Float32, 2),
                textureAnimScaleRangeX: FixedArray(Float32, 2),
                textureAnimScaleRangeY: FixedArray(Float32, 2),
                textureAnimScaleSpeed: FixedArray(Float32, 2),
                textureAnimRotation: Float32,
                texCoords: Uint32
            },
            PackMapEnvDataSkycardFlipbookV46: {
                rows: Uint32,
                columns: Uint32,
                start: Uint32,
                count: Uint32,
                fps: Float32
            },
            PackMapEnvDataSkyCardExV46: {
                dummy: Uint32
            },
            PackMapEnvDataSpawnGroupsV46: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV46"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV46: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV46")
            },
            PackMapEnvDataSpawnModelDataV46: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV75: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV75: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataAudioV46: {
                token: Uint64
            },
            PackMapEnvDataBaseExV46: {
                ext2: Pointer("PackMapEnvDataBaseEx2V46"),
                brightTime: Float32,
                dimTime: Float32,
                darkCoeff: Float32,
                darkExp: Float32,
                darkMin: Float32,
                darkMax: Float32,
                brightMin: Float32,
                brightMax: Float32,
                brightScale: Float32,
                darkScale: Float32,
                waterReflectionParams: FixedArray(Float32, 4)
            },
            PackMapEnvDataBaseEx2V46: {
                dummy: Uint32
            },
            PackMapEnvDataShapeV46: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV75: {
                lighting: DynArray("PackMapEnvDataLightingV75"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV46"),
                clouds: Pointer("PackMapEnvDataCloudsV75"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV46"),
                effect: RefArray("PackMapEnvDataEffectV75"),
                haze: RefArray("PackMapEnvDataHazeV75"),
                particleFields: RefArray("PackMapEnvDataPFieldV75"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV46"),
                sky: Pointer("PackMapEnvDataSkyV75"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV75"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV46"),
                water: RefArray("PackMapEnvDataWaterV75"),
                wind: RefArray("PackMapEnvDataWindV75"),
                audio: RefArray("PackMapEnvDataAudioV46"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                flags: Uint32,
                ext: Pointer("PackMapEnvDataBaseExV46"),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV75"),
                starFile: Filename()
            },
            PackMapEnvDataSkyModeTexV75: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV75"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV75")
        }
    };
    var V76 = {
        chunkName: "env",
        name: "PackMapEnvironmentV76",
        version: 76,
        definitions: {
            PackMapEnvDataLocalV76: {
                lighting: DynArray("PackMapEnvDataLightingV76"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV47"),
                clouds: Pointer("PackMapEnvDataCloudsV76"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV47"),
                effect: RefArray("PackMapEnvDataEffectV76"),
                haze: RefArray("PackMapEnvDataHazeV76"),
                particleFields: RefArray("PackMapEnvDataPFieldV76"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV47"),
                sky: Pointer("PackMapEnvDataSkyV76"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV76"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV47"),
                water: RefArray("PackMapEnvDataWaterV76"),
                wind: RefArray("PackMapEnvDataWindV76"),
                audio: RefArray("PackMapEnvDataAudioV47"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                flags: Uint32,
                ext: Pointer("PackMapEnvDataBaseExV47"),
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV47")
            },
            PackMapEnvDataLightingV76: {
                lights: RefArray("PackMapEnvDataLightV76"),
                shadowInfluence: Float32,
                backlightColor: FixedArray(Uint8, 3),
                backlightIntensity: Float32
            },
            PackMapEnvDataLightV76: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV47: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV47")
            },
            PackMapEnvDataLightingCharV47: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV76: {
                layers: DynArray("PackMapEnvDataLayerV76")
            },
            PackMapEnvDataLayerV76: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV76"),
                name: RefString16(),
                reserved: Uint32
            },
            PackMapEnvDataLayerAttributesV76: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32,
                reserved: Uint32
            },
            PackMapEnvDataColoredLightRingsV47: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV76: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                ssaoAmount: Float32,
                ssaoBrighten: Float32,
                ssaoContrast: Float32,
                ssaoSunScale: Float32,
                flags: Uint32,
                clutTexturePath: Filename(),
                ext: Pointer("PackMapEnvDataEffectExV47")
            },
            PackMapEnvDataEffectExV47: {
                dummy: Uint32
            },
            PackMapEnvDataHazeV76: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV76: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Float32,
                texPath: Filename(),
                type: Uint8,
                name: RefString16(),
                reserved: Uint32
            },
            PackMapEnvDataPFieldCutoutV47: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV76: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV76: {
                cards: DynArray("PackMapEnvDataSkyCardV76")
            },
            PackMapEnvDataSkyCardV76: {
                day: "PackMapEnvDataSkyCardAttributesV76",
                night: "PackMapEnvDataSkyCardAttributesV76",
                flags: Uint32,
                name: RefString16(),
                location: FixedArray(Float32, 3),
                material: Pointer("PackMapEnvDataSkyCardMaterialV47"),
                ext: Pointer("PackMapEnvDataSkyCardExV47")
            },
            PackMapEnvDataSkyCardAttributesV76: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32,
                lensFlare: Pointer("PackMapEnvLensFlareV47"),
                ext: Pointer("PackMapEnvDataSkyCardAttributesExV47")
            },
            PackMapEnvLensFlareV47: {
                atoms: DynArray("PackMapEnvLensFlareAtomV47"),
                textures: DynArray("PackMapEnvLensFlareTextureV47"),
                material: Filename(),
                fadeBand: FixedArray(Float32, 2),
                reverseFadeBand: FixedArray(Float32, 2),
                opacityCoeff: Float32,
                flags: Uint8,
                constants: DynArray("PackMapEnvDataShaderConstantV47")
            },
            PackMapEnvLensFlareAtomV47: {
                rows: Uint32,
                columns: Uint32,
                start: Uint32,
                fps: Float32,
                color: FixedArray(Uint8, 4),
                offset: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                baseRotation: Float32,
                cameraRotation: Float32,
                flags: Uint8
            },
            PackMapEnvLensFlareTextureV47: {
                texture: Filename()
            },
            PackMapEnvDataShaderConstantV47: {
                token: Uint32,
                value: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyCardAttributesExV47: {
                dummy: Uint32
            },
            PackMapEnvDataSkyCardMaterialV47: {
                filename: Filename(),
                constants: DynArray("PackMapEnvDataShaderConstantV47"),
                textures: DynArray("PackMapEnvDataShaderTextureV47"),
                textureAnimation: "PackEnvDataSkyCardAnimationV47",
                flipbook: "PackMapEnvDataSkycardFlipbookV47"
            },
            PackMapEnvDataShaderTextureV47: {
                filename: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackEnvDataSkyCardAnimationV47: {
                textureAnimTranslation: FixedArray(Float32, 2),
                textureAnimScaleRangeX: FixedArray(Float32, 2),
                textureAnimScaleRangeY: FixedArray(Float32, 2),
                textureAnimScaleSpeed: FixedArray(Float32, 2),
                textureAnimRotation: Float32,
                texCoords: Uint32
            },
            PackMapEnvDataSkycardFlipbookV47: {
                rows: Uint32,
                columns: Uint32,
                start: Uint32,
                count: Uint32,
                fps: Float32
            },
            PackMapEnvDataSkyCardExV47: {
                dummy: Uint32
            },
            PackMapEnvDataSpawnGroupsV47: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV47"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV47: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV47")
            },
            PackMapEnvDataSpawnModelDataV47: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV76: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV76: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataAudioV47: {
                token: Uint64
            },
            PackMapEnvDataBaseExV47: {
                ext2: Pointer("PackMapEnvDataBaseEx2V47"),
                brightTime: Float32,
                dimTime: Float32,
                darkCoeff: Float32,
                darkExp: Float32,
                darkMin: Float32,
                darkMax: Float32,
                brightMin: Float32,
                brightMax: Float32,
                brightScale: Float32,
                darkScale: Float32,
                waterReflectionParams: FixedArray(Float32, 4)
            },
            PackMapEnvDataBaseEx2V47: {
                dummy: Uint32
            },
            PackMapEnvDataShapeV47: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV76: {
                lighting: DynArray("PackMapEnvDataLightingV76"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV47"),
                clouds: Pointer("PackMapEnvDataCloudsV76"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV47"),
                effect: RefArray("PackMapEnvDataEffectV76"),
                haze: RefArray("PackMapEnvDataHazeV76"),
                particleFields: RefArray("PackMapEnvDataPFieldV76"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV47"),
                sky: Pointer("PackMapEnvDataSkyV76"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV76"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV47"),
                water: RefArray("PackMapEnvDataWaterV76"),
                wind: RefArray("PackMapEnvDataWindV76"),
                audio: RefArray("PackMapEnvDataAudioV47"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                flags: Uint32,
                ext: Pointer("PackMapEnvDataBaseExV47"),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV76"),
                starFile: Filename(),
                skyModeCubeTex: DynArray("PackMapEnvDataSkyModeCubeTexV47")
            },
            PackMapEnvDataSkyModeTexV76: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            },
            PackMapEnvDataSkyModeCubeTexV47: {
                texPathE: Filename(),
                texPathW: Filename(),
                texPathN: Filename(),
                texPathS: Filename(),
                texPathB: Filename(),
                texPathT: Filename()
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV76"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV76")
        }
    };
    var V77 = {
        chunkName: "env",
        name: "PackMapEnvironmentV77",
        version: 77,
        definitions: {
            PackMapEnvDataLocalV76: {
                lighting: DynArray("PackMapEnvDataLightingV76"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV47"),
                clouds: Pointer("PackMapEnvDataCloudsV76"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV47"),
                effect: RefArray("PackMapEnvDataEffectV76"),
                haze: RefArray("PackMapEnvDataHazeV76"),
                particleFields: RefArray("PackMapEnvDataPFieldV76"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV47"),
                sky: Pointer("PackMapEnvDataSkyV76"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV76"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV47"),
                water: RefArray("PackMapEnvDataWaterV76"),
                wind: RefArray("PackMapEnvDataWindV76"),
                audio: RefArray("PackMapEnvDataAudioV47"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                flags: Uint32,
                ext: Pointer("PackMapEnvDataBaseExV47"),
                type: Uint8,
                guid: Uint64,
                shapeArray: DynArray("PackMapEnvDataShapeV47")
            },
            PackMapEnvDataLightingV76: {
                lights: RefArray("PackMapEnvDataLightV76"),
                shadowInfluence: Float32,
                backlightColor: FixedArray(Uint8, 3),
                backlightIntensity: Float32
            },
            PackMapEnvDataLightV76: {
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                direction: FixedArray(Float32, 3)
            },
            PackMapEnvDataLightingCharGroupV47: {
                lightingChar: DynArray("PackMapEnvDataLightingCharV47")
            },
            PackMapEnvDataLightingCharV47: {
                sunScale: Float32,
                saturation: Float32,
                sunFill: Float32,
                ambScale: Float32,
                ambFill: Float32,
                flags: Uint8
            },
            PackMapEnvDataCloudsV76: {
                layers: DynArray("PackMapEnvDataLayerV76")
            },
            PackMapEnvDataLayerV76: {
                altitude: Float32,
                cutOut: Float32,
                depth: Float32,
                extent: Float32,
                scale: Float32,
                texture: Filename(),
                attributes: DynArray("PackMapEnvDataLayerAttributesV76"),
                name: RefString16(),
                reserved: Uint32
            },
            PackMapEnvDataLayerAttributesV76: {
                brightness: Float32,
                density: Float32,
                haze: Float32,
                lightIntensity: Float32,
                velocity: FixedArray(Float32, 2),
                fadeWidth: Float32,
                fadeEnd: Float32,
                reserved: Uint32
            },
            PackMapEnvDataColoredLightRingsV47: {
                range: FixedArray(Float32, 2),
                distances: FixedArray(Float32, 6),
                lightColors: FixedArray(FixedArray(Uint8, 4), 6),
                shadowColors: FixedArray(FixedArray(Uint8, 4), 6)
            },
            PackMapEnvDataEffectV76: {
                glow: FixedArray(Uint8, 4),
                tintColor: FixedArray(Uint8, 4),
                tintTargetColor: FixedArray(Uint8, 4),
                saturation: Float32,
                tintAmount: Float32,
                tintFocus: Float32,
                glowLevel: FixedArray(Uint8, 4),
                glowAmplify: Float32,
                focalDepth: Float32,
                focalRange: Float32,
                ssaoAmount: Float32,
                ssaoBrighten: Float32,
                ssaoContrast: Float32,
                ssaoSunScale: Float32,
                flags: Uint32,
                clutTexturePath: Filename(),
                ext: Pointer("PackMapEnvDataEffectExV47")
            },
            PackMapEnvDataEffectExV47: {
                dummy: Uint32
            },
            PackMapEnvDataHazeV76: {
                nearColor: FixedArray(Uint8, 4),
                farColor: FixedArray(Uint8, 4),
                distRange: FixedArray(Float32, 2),
                heightColor: FixedArray(Uint8, 4),
                heightRange: FixedArray(Float32, 2),
                depthCue: Float32,
                sunDirRange: FixedArray(Float32, 2)
            },
            PackMapEnvDataPFieldV76: {
                altitude: Float32,
                angle: FixedArray(Float32, 2),
                clusterCount: Uint16,
                clustering: FixedArray(Float32, 2),
                depth: Float32,
                deviation: Float32,
                deviationSpeed: FixedArray(Float32, 2),
                extent: Uint16,
                fade: Float32,
                fieldDirection: FixedArray(Float32, 3),
                flags: Uint16,
                lifetime: FixedArray(Float32, 2),
                opacity: FixedArray(Float32, 2),
                particleCount: Uint16,
                period: FixedArray(Float32, 2),
                rotation: FixedArray(Float32, 2),
                scaleX: FixedArray(Float32, 2),
                scaleY: FixedArray(Float32, 2),
                seed: Uint32,
                speed: FixedArray(Float32, 2),
                texColRow: FixedArray(Uint32, 2),
                texFPS: Float32,
                texPath: Filename(),
                type: Uint8,
                name: RefString16(),
                reserved: Uint32
            },
            PackMapEnvDataPFieldCutoutV47: {
                name: RefString16(),
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyV76: {
                flags: Uint8,
                dayBrightness: Float32,
                dayHazeBottom: Float32,
                dayHazeDensity: Float32,
                dayHazeFalloff: Float32,
                dayLightIntensity: Float32,
                dayStarDensity: Float32,
                nightBrightness: Float32,
                nightHazeBottom: Float32,
                nightHazeDensity: Float32,
                nightHazeFalloff: Float32,
                nightLightIntensity: Float32,
                nightStarDensity: Float32,
                verticalOffset: Float32
            },
            PackMapEnvDataSkyCardsV76: {
                cards: DynArray("PackMapEnvDataSkyCardV76")
            },
            PackMapEnvDataSkyCardV76: {
                day: "PackMapEnvDataSkyCardAttributesV76",
                night: "PackMapEnvDataSkyCardAttributesV76",
                flags: Uint32,
                name: RefString16(),
                location: FixedArray(Float32, 3),
                material: Pointer("PackMapEnvDataSkyCardMaterialV47"),
                ext: Pointer("PackMapEnvDataSkyCardExV47")
            },
            PackMapEnvDataSkyCardAttributesV76: {
                azimuth: Float32,
                density: Float32,
                hazeDensity: Float32,
                latitude: Float32,
                lightIntensity: Float32,
                minHaze: Float32,
                scale: FixedArray(Float32, 2),
                speed: Float32,
                texture: Filename(),
                textureUV: FixedArray(Float32, 4),
                brightness: Float32,
                lensFlare: Pointer("PackMapEnvLensFlareV47"),
                ext: Pointer("PackMapEnvDataSkyCardAttributesExV47")
            },
            PackMapEnvLensFlareV47: {
                atoms: DynArray("PackMapEnvLensFlareAtomV47"),
                textures: DynArray("PackMapEnvLensFlareTextureV47"),
                material: Filename(),
                fadeBand: FixedArray(Float32, 2),
                reverseFadeBand: FixedArray(Float32, 2),
                opacityCoeff: Float32,
                flags: Uint8,
                constants: DynArray("PackMapEnvDataShaderConstantV47")
            },
            PackMapEnvLensFlareAtomV47: {
                rows: Uint32,
                columns: Uint32,
                start: Uint32,
                fps: Float32,
                color: FixedArray(Uint8, 4),
                offset: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                baseRotation: Float32,
                cameraRotation: Float32,
                flags: Uint8
            },
            PackMapEnvLensFlareTextureV47: {
                texture: Filename()
            },
            PackMapEnvDataShaderConstantV47: {
                token: Uint32,
                value: FixedArray(Float32, 4)
            },
            PackMapEnvDataSkyCardAttributesExV47: {
                dummy: Uint32
            },
            PackMapEnvDataSkyCardMaterialV47: {
                filename: Filename(),
                constants: DynArray("PackMapEnvDataShaderConstantV47"),
                textures: DynArray("PackMapEnvDataShaderTextureV47"),
                textureAnimation: "PackEnvDataSkyCardAnimationV47",
                flipbook: "PackMapEnvDataSkycardFlipbookV47"
            },
            PackMapEnvDataShaderTextureV47: {
                filename: Filename(),
                textureUV: FixedArray(Float32, 4)
            },
            PackEnvDataSkyCardAnimationV47: {
                textureAnimTranslation: FixedArray(Float32, 2),
                textureAnimScaleRangeX: FixedArray(Float32, 2),
                textureAnimScaleRangeY: FixedArray(Float32, 2),
                textureAnimScaleSpeed: FixedArray(Float32, 2),
                textureAnimRotation: Float32,
                texCoords: Uint32
            },
            PackMapEnvDataSkycardFlipbookV47: {
                rows: Uint32,
                columns: Uint32,
                start: Uint32,
                count: Uint32,
                fps: Float32
            },
            PackMapEnvDataSkyCardExV47: {
                dummy: Uint32
            },
            PackMapEnvDataSpawnGroupsV47: {
                spawnGroups: DynArray("PackMapEnvDataSpawnListV47"),
                targets: DynArray(Uint64)
            },
            PackMapEnvDataSpawnListV47: {
                spawns: DynArray("PackMapEnvDataSpawnModelDataV47")
            },
            PackMapEnvDataSpawnModelDataV47: {
                spawnRange: FixedArray(Uint32, 2),
                lifeSpan: FixedArray(Uint32, 2),
                scaleRange: FixedArray(Float32, 2),
                heightRange: FixedArray(Float32, 2),
                rotXRange: FixedArray(Float32, 2),
                rotYRange: FixedArray(Float32, 2),
                rotZRange: FixedArray(Float32, 2),
                probability: Float32,
                delay: Float32,
                flags: Uint32,
                animSequence: Uint64,
                modelFile: Filename(),
                maxConcurrent: Uint16
            },
            PackMapEnvDataWaterV76: {
                waterFlags: Uint32,
                animAmplitude: Float32,
                animChoppiness: Float32,
                animWind: FixedArray(Float32, 2),
                bumpAmount: Float32,
                bumpAngle0: Float32,
                bumpAngle1: Float32,
                bumpScale0: Float32,
                bumpScale1: Float32,
                bumpSpeed0: Float32,
                bumpSpeed1: Float32,
                bumpTile0: Float32,
                bumpTile1: Float32,
                patternAngle: Float32,
                patternTile: Float32,
                patternSpeed: Float32,
                patternEdge: Float32,
                surfaceShallowColor: FixedArray(Uint8, 4),
                surfaceDeepColor: FixedArray(Uint8, 4),
                patternColor: FixedArray(Uint8, 4),
                surfaceFresnel: Float32,
                distortAmount: Float32,
                depthAttenuation: Float32,
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                foamSpawn: Float32,
                foamDissolve: Float32,
                foamDepthAttenuation: Float32,
                foamColor0: FixedArray(Uint8, 4),
                foamColor1: FixedArray(Uint8, 4)
            },
            PackMapEnvDataWindV76: {
                azimuth: Uint8,
                elevation: Uint8,
                noise: Uint8,
                speed: Uint8,
                gust: Uint8,
                gustFreq: Uint8,
                gustSpeed: Uint8
            },
            PackMapEnvDataAudioV47: {
                token: Uint64
            },
            PackMapEnvDataBaseExV47: {
                ext2: Pointer("PackMapEnvDataBaseEx2V47"),
                brightTime: Float32,
                dimTime: Float32,
                darkCoeff: Float32,
                darkExp: Float32,
                darkMin: Float32,
                darkMax: Float32,
                brightMin: Float32,
                brightMax: Float32,
                brightScale: Float32,
                darkScale: Float32,
                waterReflectionParams: FixedArray(Float32, 4)
            },
            PackMapEnvDataBaseEx2V47: {
                dummy: Uint32
            },
            PackMapEnvDataShapeV47: {
                center: FixedArray(Float32, 3),
                height: Float32,
                fadeHorizInner: Float32,
                fadeHorizOuter: Float32,
                fadeVertical: Float32,
                vertexArray: DynArray(FixedArray(Float32, 2)),
                shapeType: Uint8
            },
            PackMapEnvDataGlobalV76: {
                lighting: DynArray("PackMapEnvDataLightingV76"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV47"),
                clouds: Pointer("PackMapEnvDataCloudsV76"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV47"),
                effect: RefArray("PackMapEnvDataEffectV76"),
                haze: RefArray("PackMapEnvDataHazeV76"),
                particleFields: RefArray("PackMapEnvDataPFieldV76"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV47"),
                sky: Pointer("PackMapEnvDataSkyV76"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV76"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV47"),
                water: RefArray("PackMapEnvDataWaterV76"),
                wind: RefArray("PackMapEnvDataWindV76"),
                audio: RefArray("PackMapEnvDataAudioV47"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                flags: Uint32,
                ext: Pointer("PackMapEnvDataBaseExV47"),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV76"),
                starFile: Filename(),
                skyModeCubeTex: DynArray("PackMapEnvDataSkyModeCubeTexV47")
            },
            PackMapEnvDataSkyModeTexV76: {
                texPathNE: Filename(),
                texPathSW: Filename(),
                texPathT: Filename()
            },
            PackMapEnvDataSkyModeCubeTexV47: {
                texPathE: Filename(),
                texPathW: Filename(),
                texPathN: Filename(),
                texPathS: Filename(),
                texPathB: Filename(),
                texPathT: Filename()
            },
            PackMapEnvDataOverrideV77: {
                lighting: DynArray("PackMapEnvDataLightingV76"),
                lightingCharGroups: DynArray("PackMapEnvDataLightingCharGroupV47"),
                clouds: Pointer("PackMapEnvDataCloudsV76"),
                coloredLightRings: RefArray("PackMapEnvDataColoredLightRingsV47"),
                effect: RefArray("PackMapEnvDataEffectV76"),
                haze: RefArray("PackMapEnvDataHazeV76"),
                particleFields: RefArray("PackMapEnvDataPFieldV76"),
                particleFieldCutouts: DynArray("PackMapEnvDataPFieldCutoutV47"),
                sky: Pointer("PackMapEnvDataSkyV76"),
                skyCards: Pointer("PackMapEnvDataSkyCardsV76"),
                spawns: Pointer("PackMapEnvDataSpawnGroupsV47"),
                water: RefArray("PackMapEnvDataWaterV76"),
                wind: RefArray("PackMapEnvDataWindV76"),
                audio: RefArray("PackMapEnvDataAudioV47"),
                name: RefString16(),
                nightMods: DynArray(Uint8),
                bindTarget: Uint64,
                flags: Uint32,
                ext: Pointer("PackMapEnvDataBaseExV47"),
                skyModeTex: DynArray("PackMapEnvDataSkyModeTexV76"),
                starFile: Filename(),
                skyModeCubeTex: DynArray("PackMapEnvDataSkyModeCubeTexV47"),
                token: Uint64,
                guid: Uint64
            }
        },
        root: {
            dataLocalArray: DynArray("PackMapEnvDataLocalV76"),
            dataGlobal: Pointer("PackMapEnvDataGlobalV76"),
            dataOverrideArray: DynArray("PackMapEnvDataOverrideV77")
        }
    };
    var latest$Y = V77;
    var definitions$Y = { V29: V29$1, V30: V30$1, V31: V31$1, V32: V32$1, V33: V33$1, V34: V34$1, V35: V35$1, V36: V36$1, V37: V37$1, V38: V38$1, V39: V39$1, V40: V40$1, V41: V41$1, V42: V42$1, V43: V43$1, V44: V44$1, V45: V45$1, V46: V46$1, V47: V47$1, V48: V48$1, V49: V49$1, V50: V50$1, V51: V51$1, V52: V52$1, V53: V53$1, V54: V54$1, V55: V55$1, V56: V56$1, V57: V57$1, V58: V58$1, V59: V59$1, V60: V60$1, V61: V61$1, V62: V62$1, V63: V63$1, V64: V64$1, V65: V65$1, V66: V66$1, V67: V67$1, V68: V68$1, V69: V69$1, V70: V70$1, V71: V71, V72: V72, V73: V73, V74: V74, V75: V75, V76: V76, V77: V77 };
    var definitionArray$Y = Object.values(definitions$Y);

    var ENV = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$Y,
        definitions: definitions$Y,
        latest: latest$Y
    });

    var V0$O = {
        chunkName: "eula",
        name: "PackEulaV0",
        version: 0,
        definitions: {
            PackEulaLanguageV0: {
                Language: Uint8,
                Text: RefString16()
            }
        },
        root: {
            Language: DynArray("PackEulaLanguageV0"),
            Version: Uint8
        }
    };
    var latest$X = V0$O;
    var definitions$X = { V0: V0$O };
    var definitionArray$X = Object.values(definitions$X);

    var EULA = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$X,
        definitions: definitions$X,
        latest: latest$X
    });

    var V0$N = {
        chunkName: "exp",
        name: "MapExpansionProperties",
        version: 0,
        definitions: {
            MapExpansionProperty: {
                type: Uint32,
                val: Uint64,
                strVal: Filename()
            }
        },
        root: {
            properties: DynArray("MapExpansionProperty")
        }
    };
    var latest$W = V0$N;
    var definitions$W = { V0: V0$N };
    var definitionArray$W = Object.values(definitions$W);

    var EXP = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$W,
        definitions: definitions$W,
        latest: latest$W
    });

    var V0$M = {
        chunkName: "EXPA",
        name: "ModelFileExpansionV0",
        version: 0,
        definitions: {
            ModelFileSnapPointV0: {
                bone: Uint64
            },
            ModelExpansionEmitterV0: {
                curl: Float32,
                vortexSize: Float32
            }
        },
        root: {
            snapPoints: DynArray("ModelFileSnapPointV0"),
            snapPointPriority: Float32,
            emitters: DynArray("ModelExpansionEmitterV0")
        }
    };
    var V1$w = {
        chunkName: "EXPA",
        name: "ModelFileExpansionV1",
        version: 1,
        definitions: {
            ModelFileSnapPointV1: {
                bone: Uint64
            },
            ModelExpansionEmitterV1: {
                curl: Float32,
                vortexSize: Float32,
                curlQuality: Uint32,
                curlFlags: Uint32,
                fieldScale: Float32
            }
        },
        root: {
            snapPoints: DynArray("ModelFileSnapPointV1"),
            snapPointPriority: Float32,
            emitters: DynArray("ModelExpansionEmitterV1")
        }
    };
    var V2$n = {
        chunkName: "EXPA",
        name: "ModelFileExpansionV2",
        version: 2,
        definitions: {
            ModelFileSnapPointV2: {
                bone: Uint64,
                shape: Uint64
            },
            ModelExpansionEmitterV2: {
                curl: Float32,
                vortexSize: Float32,
                curlQuality: Uint32,
                curlFlags: Uint32,
                fieldScale: Float32
            }
        },
        root: {
            snapPoints: DynArray("ModelFileSnapPointV2"),
            snapPointPriority: Float32,
            emitters: DynArray("ModelExpansionEmitterV2")
        }
    };
    var V3$j = {
        chunkName: "EXPA",
        name: "ModelFileExpansionV3",
        version: 3,
        definitions: {
            ModelFileSnapPointV3: {
                bone: Uint64,
                shape: Uint64,
                flags: Uint32
            },
            ModelExpansionEmitterV3: {
                curl: Float32,
                vortexSize: Float32,
                curlQuality: Uint32,
                curlFlags: Uint32,
                fieldScale: Float32
            }
        },
        root: {
            snapPoints: DynArray("ModelFileSnapPointV3"),
            snapPointPriority: Float32,
            emitters: DynArray("ModelExpansionEmitterV3")
        }
    };
    var latest$V = V3$j;
    var definitions$V = { V0: V0$M, V1: V1$w, V2: V2$n, V3: V3$j };
    var definitionArray$V = Object.values(definitions$V);

    var EXPA = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$V,
        definitions: definitions$V,
        latest: latest$V
    });

    var V0$L = {
        chunkName: "fall",
        name: "PackAnimFallbacksV0",
        version: 0,
        definitions: {
            PackAnimFallbackV0: {
                sourceAnim: Uint64,
                targetAnims: DynArray(Uint64)
            }
        },
        root: {
            fallbacks: DynArray("PackAnimFallbackV0")
        }
    };
    var latest$U = V0$L;
    var definitions$U = { V0: V0$L };
    var definitionArray$U = Object.values(definitions$U);

    var FALL = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$U,
        definitions: definitions$U,
        latest: latest$U
    });

    var V0$K = {
        chunkName: "GAME",
        name: "ModelFileGame",
        version: 0,
        root: {
            gameData: DynArray(Uint8)
        }
    };
    var latest$T = V0$K;
    var definitions$T = { V0: V0$K };
    var definitionArray$T = Object.values(definitions$T);

    var GAME = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$T,
        definitions: definitions$T,
        latest: latest$T
    });

    var V0$J = {
        chunkName: "GAME",
        name: "SceneFileGameV0",
        version: 0,
        definitions: {
            ScenePathV0: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV0"),
                closed: Uint8
            },
            ScenePathNodeV0: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32
            },
            SceneGameMeshV0: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV0"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneEdgeV0: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            }
        },
        root: {
            paths: DynArray("ScenePathV0"),
            meshes: DynArray("SceneGameMeshV0")
        }
    };
    var V1$v = {
        chunkName: "GAME",
        name: "SceneFileGameV1",
        version: 1,
        definitions: {
            ScenePathV1: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV1"),
                closed: Uint8
            },
            ScenePathNodeV1: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32
            },
            SceneGameMeshV1: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV1"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneEdgeV1: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            }
        },
        root: {
            paths: DynArray("ScenePathV1"),
            meshes: DynArray("SceneGameMeshV1")
        }
    };
    var V2$m = {
        chunkName: "GAME",
        name: "SceneFileGameV2",
        version: 2,
        definitions: {
            ScenePathV2: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV2"),
                closed: Uint8
            },
            ScenePathNodeV2: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32
            },
            SceneGameMeshV2: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV2"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneEdgeV2: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            },
            SceneGrabNodeV2: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32
            }
        },
        root: {
            paths: DynArray("ScenePathV2"),
            meshes: DynArray("SceneGameMeshV2"),
            grabPoints: DynArray("SceneGrabNodeV2")
        }
    };
    var V3$i = {
        chunkName: "GAME",
        name: "SceneFileGameV3",
        version: 3,
        definitions: {
            ScenePathV3: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV3"),
                closed: Uint8
            },
            ScenePathNodeV3: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32
            },
            SceneGameMeshV3: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV3"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaceFlags: DynArray(Uint32)
            },
            SceneEdgeV3: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            },
            SceneGrabNodeV3: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32
            }
        },
        root: {
            paths: DynArray("ScenePathV3"),
            meshes: DynArray("SceneGameMeshV3"),
            grabPoints: DynArray("SceneGrabNodeV3")
        }
    };
    var V4$a = {
        chunkName: "GAME",
        name: "SceneFileGameV4",
        version: 4,
        definitions: {
            ScenePathV4: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV4"),
                closed: Uint8
            },
            ScenePathNodeV4: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32,
                singlesided: Uint8
            },
            SceneGameMeshV4: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV4"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaceFlags: DynArray(Uint32)
            },
            SceneEdgeV4: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            },
            SceneGrabNodeV4: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32
            }
        },
        root: {
            paths: DynArray("ScenePathV4"),
            meshes: DynArray("SceneGameMeshV4"),
            grabPoints: DynArray("SceneGrabNodeV4")
        }
    };
    var V5$9 = {
        chunkName: "GAME",
        name: "SceneFileGameV5",
        version: 5,
        definitions: {
            ScenePathV5: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV5"),
                closed: Uint8
            },
            ScenePathNodeV5: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32,
                singlesided: Uint8
            },
            SceneGameMeshV5: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV5"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaceFlags: DynArray(Uint32)
            },
            SceneEdgeV5: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            }
        },
        root: {
            paths: DynArray("ScenePathV5"),
            meshes: DynArray("SceneGameMeshV5")
        }
    };
    var V6$9 = {
        chunkName: "GAME",
        name: "SceneFileGameV6",
        version: 6,
        definitions: {
            ScenePathV6: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV6"),
                closed: Uint8
            },
            ScenePathNodeV6: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                flags: Uint32,
                smoothing: Float32,
                singlesided: Uint8
            },
            SceneGameMeshV6: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV6"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaces: DynArray(Uint8)
            },
            SceneEdgeV6: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            },
            SceneGameSurfaceV6: {
                tokens: DynArray(Uint64)
            }
        },
        root: {
            paths: DynArray("ScenePathV6"),
            meshes: DynArray("SceneGameMeshV6"),
            surfaces: DynArray("SceneGameSurfaceV6")
        }
    };
    var latest$S = V6$9;
    var definitions$S = { V0: V0$J, V1: V1$v, V2: V2$m, V3: V3$i, V4: V4$a, V5: V5$9, V6: V6$9 };
    var definitionArray$S = Object.values(definitions$S);

    var GAME_2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$S,
        definitions: definitions$S,
        latest: latest$S
    });

    var V0$I = {
        chunkName: "GEOM",
        name: "ModelFileGeometryV0",
        version: 0,
        definitions: {
            ModelMeshDataV65: {
                visBone: Uint64,
                morphTargets: DynArray("ModelMeshMorphTargetV65"),
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString(),
                boneNames: DynArray(RefString()),
                geometry: Pointer("ModelMeshGeometryV0")
            },
            ModelMeshMorphTargetV65: {
                positions: DynArray("ModelMeshMorphVertV65"),
                normals: DynArray("ModelMeshMorphVertV65"),
                mesh: Uint64
            },
            ModelMeshMorphVertV65: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelMeshGeometryV0: {
                verts: "ModelMeshVertexDataV0",
                indices: "ModelMeshIndexDataV0",
                lods: DynArray("ModelMeshIndexDataV0")
            },
            ModelMeshVertexDataV0: {
                vertexCount: Uint32,
                mesh: "PackVertexType"
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelMeshIndexDataV0: {
                indices: DynArray(Uint16)
            }
        },
        root: {
            meshes: RefArray("ModelMeshDataV65")
        }
    };
    var V1$u = {
        chunkName: "GEOM",
        name: "ModelFileGeometryV1",
        version: 1,
        definitions: {
            ModelMeshDataV66: {
                visBone: Uint64,
                morphTargets: DynArray("ModelMeshMorphTargetV66"),
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString(),
                boneBindings: DynArray(Uint64),
                geometry: Pointer("ModelMeshGeometryV1")
            },
            ModelMeshMorphTargetV66: {
                positions: DynArray("ModelMeshMorphVertV66"),
                normals: DynArray("ModelMeshMorphVertV66"),
                mesh: Uint64
            },
            ModelMeshMorphVertV66: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelMeshGeometryV1: {
                verts: "ModelMeshVertexDataV1",
                indices: "ModelMeshIndexDataV1",
                lods: DynArray("ModelMeshIndexDataV1"),
                transforms: DynArray(Uint32)
            },
            ModelMeshVertexDataV1: {
                vertexCount: Uint32,
                mesh: "PackVertexType"
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelMeshIndexDataV1: {
                indices: DynArray(Uint16)
            }
        },
        root: {
            meshes: RefArray("ModelMeshDataV66")
        }
    };
    var latest$R = V1$u;
    var definitions$R = { V0: V0$I, V1: V1$u };
    var definitionArray$R = Object.values(definitions$R);

    var GEOM = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$R,
        definitions: definitions$R,
        latest: latest$R
    });

    var V0$H = {
        chunkName: "GR2S",
        name: "ModelFileGr2sV0",
        version: 0,
        definitions: {
            ModelGr2DataV0: {
                data: DynArray(Uint8)
            }
        },
        root: {
            gr2Data: DynArray("ModelGr2DataV0")
        }
    };
    var V1$t = {
        chunkName: "GR2S",
        name: "ModelFileGr2sV1",
        version: 1,
        definitions: {
            ModelGr2DataV1: {
                filename: RefString16(),
                flags: Uint32,
                data: DynArray(Uint8)
            }
        },
        root: {
            gr2Data: DynArray("ModelGr2DataV1")
        }
    };
    var V2$l = {
        chunkName: "GR2S",
        name: "ModelFileGr2sV2",
        version: 2,
        definitions: {
            ModelGr2DataV2: {
                filename: RefString16(),
                flags: Uint32,
                data: DynArray(Uint8)
            }
        },
        root: {
            gr2Data: DynArray("ModelGr2DataV2")
        }
    };
    var V3$h = {
        chunkName: "GR2S",
        name: "ModelFileGr2sV3",
        version: 3,
        definitions: {
            ModelGr2DataV3: {
                filename: RefString16(),
                flags: Uint32,
                data: DynArray(Uint8)
            }
        },
        root: {
            gr2Data: DynArray("ModelGr2DataV3")
        }
    };
    var V4$9 = {
        chunkName: "GR2S",
        name: "ModelFileGr2sV4",
        version: 4,
        definitions: {
            ModelGr2DataV4: {
                filename: RefString16(),
                flags: Uint32,
                data: DynArray(Uint8)
            }
        },
        root: {
            gr2Data: DynArray("ModelGr2DataV4")
        }
    };
    var latest$Q = V4$9;
    var definitions$Q = { V0: V0$H, V1: V1$t, V2: V2$l, V3: V3$h, V4: V4$9 };
    var definitionArray$Q = Object.values(definitions$Q);

    var GR2S = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$Q,
        definitions: definitions$Q,
        latest: latest$Q
    });

    var V0$G = {
        chunkName: "GRMT",
        name: "AmatGrV0",
        version: 0,
        root: {
            texArrayRange: Uint8,
            texCount: Uint8,
            texTransformRange: Uint8,
            sortOrder: Uint8,
            flags: Uint32,
            textureMasks: FixedArray(Uint32, 4)
        }
    };
    var V1$s = {
        chunkName: "GRMT",
        name: "AmatGrV1",
        version: 1,
        root: {
            texArrayRange: Uint8,
            texCount: Uint8,
            texTransformRange: Uint8,
            sortOrder: Uint8,
            flags: Uint32,
            texType: Uint32,
            textureMasks: FixedArray(Uint32, 4)
        }
    };
    var V2$k = {
        chunkName: "GRMT",
        name: "AmatGrV2",
        version: 2,
        root: {
            texArrayRange: Uint8,
            texCount: Uint8,
            texTransformRange: Uint8,
            sortOrder: Uint8,
            sortTri: Uint8,
            flags: Uint32,
            texType: Uint32,
            textureMasks: FixedArray(Uint32, 4)
        }
    };
    var V3$g = {
        chunkName: "GRMT",
        name: "AmatGrV3",
        version: 3,
        root: {
            texArrayRange: Uint8,
            texCount: Uint8,
            texTransformRange: Uint8,
            sortOrder: Uint8,
            sortTri: Uint8,
            debugFlags: Uint32,
            flags: Uint32,
            texType: Uint32,
            textureMasks: FixedArray(Uint32, 4)
        }
    };
    var V4$8 = {
        chunkName: "GRMT",
        name: "AmatGr",
        version: 4,
        root: {
            texArrayRange: Uint8,
            texCount: Uint8,
            texTransformRange: Uint8,
            sortOrder: Uint8,
            sortTri: Uint8,
            procAnim: Uint8,
            debugFlags: Uint32,
            flags: Uint32,
            texType: Uint32,
            textureMasks: FixedArray(Uint32, 4)
        }
    };
    var V5$8 = {
        chunkName: "GRMT",
        name: "AmatGr",
        version: 5,
        root: {
            texArrayRange: Uint8,
            texCount: Uint8,
            texTransformRange: Uint8,
            sortOrder: Uint8,
            sortTri: Uint8,
            procAnim: Uint8,
            debugFlags: Uint32,
            flags: Uint32,
            texType: Uint32,
            textureMasks: FixedArray(Uint32, 4),
            texTokens: DynArray(Uint64)
        }
    };
    var V6$8 = {
        chunkName: "GRMT",
        name: "AmatGr",
        version: 6,
        root: {
            texArrayRange: Uint8,
            texCount: Uint8,
            sortOrder: Uint8,
            sortTri: Uint8,
            procAnim: Uint8,
            debugFlags: Uint32,
            flags: Uint32,
            texTokens: DynArray(Uint64)
        }
    };
    var latest$P = V6$8;
    var definitions$P = { V0: V0$G, V1: V1$s, V2: V2$k, V3: V3$g, V4: V4$8, V5: V5$8, V6: V6$8 };
    var definitionArray$P = Object.values(definitions$P);

    var GRMT = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$P,
        definitions: definitions$P,
        latest: latest$P
    });

    var V6$7 = {
        chunkName: "havk",
        name: "PackMapCollideV6",
        version: 6,
        definitions: {
            PackMapCollideMoppCodeV6: {
                cookedData: DynArray(Uint8)
            },
            PackMapCollideMeshV6: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                sizes: DynArray("PackMapCollideMeshSizeV6")
            },
            PackMapCollideMeshSizeV6: {
                scale: Float32,
                moppCodeIndex: Uint32
            },
            PackMapCollideGeometryV6: {
                meshRefs: DynArray("PackMapCollideMeshRefV6")
            },
            PackMapCollideMeshRefV6: {
                sequence: Uint64,
                meshIndex: Uint32
            },
            PackMapCollideModelPropV6: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV6: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            moppCodes: DynArray("PackMapCollideMoppCodeV6"),
            meshes: DynArray("PackMapCollideMeshV6"),
            geometries: DynArray("PackMapCollideGeometryV6"),
            propModels: DynArray("PackMapCollideModelPropV6"),
            zoneModels: DynArray("PackMapCollideModelZoneV6")
        }
    };
    var V7$6 = {
        chunkName: "havk",
        name: "PackMapCollideV7",
        version: 7,
        definitions: {
            PackMapCollideMoppCodeV7: {
                cookedData: DynArray(Uint8)
            },
            PackMapCollideMeshV7: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                sizes: DynArray("PackMapCollideMeshSizeV7")
            },
            PackMapCollideMeshSizeV7: {
                scale: Float32,
                moppCodeIndex: Uint32
            },
            PackMapCollideGeometryV7: {
                meshRefs: DynArray("PackMapCollideMeshRefV7")
            },
            PackMapCollideMeshRefV7: {
                sequence: Uint64,
                meshIndex: Uint32
            },
            PackMapCollideModelPropV7: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV7: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideAiChunkV7: {
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            moppCodes: DynArray("PackMapCollideMoppCodeV7"),
            meshes: DynArray("PackMapCollideMeshV7"),
            geometries: DynArray("PackMapCollideGeometryV7"),
            propModels: DynArray("PackMapCollideModelPropV7"),
            zoneModels: DynArray("PackMapCollideModelZoneV7"),
            aiBoundaryMin: FixedArray(Float32, 3),
            aiBoundaryMax: FixedArray(Float32, 3),
            aiChunkDims: FixedArray(Uint32, 2),
            aiChunks: DynArray("PackMapCollideAiChunkV7")
        }
    };
    var V8$6 = {
        chunkName: "havk",
        name: "PackMapCollideV8",
        version: 8,
        definitions: {
            PackMapCollideMeshV8: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppCodeScale: Float32,
                moppCodeData: DynArray(Uint8)
            },
            PackMapCollideGeometryV8: {
                meshRefs: DynArray("PackMapCollideMeshRefV8")
            },
            PackMapCollideMeshRefV8: {
                sequence: Uint64,
                meshIndex: Uint32
            },
            PackMapCollideModelPropV8: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV8: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideAiChunkV8: {
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            meshes: DynArray("PackMapCollideMeshV8"),
            geometries: DynArray("PackMapCollideGeometryV8"),
            propModels: DynArray("PackMapCollideModelPropV8"),
            zoneModels: DynArray("PackMapCollideModelZoneV8"),
            aiBoundaryMin: FixedArray(Float32, 3),
            aiBoundaryMax: FixedArray(Float32, 3),
            aiChunkDims: FixedArray(Uint32, 2),
            aiChunks: DynArray("PackMapCollideAiChunkV8")
        }
    };
    var V9$5 = {
        chunkName: "havk",
        name: "PackMapCollideV9",
        version: 9,
        definitions: {
            PackMapCollideMeshV9: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppCodeScale: Float32,
                moppCodeData: DynArray(Uint8)
            },
            PackMapCollideGeometryV9: {
                meshRefs: DynArray("PackMapCollideMeshRefV9")
            },
            PackMapCollideMeshRefV9: {
                sequence: Uint64,
                meshIndex: Uint32
            },
            PackMapCollideModelObsV9: {
                geometryIndex: Uint32
            },
            PackMapCollideModelPropV9: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV9: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideAiChunkV9: {
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            meshes: DynArray("PackMapCollideMeshV9"),
            geometries: DynArray("PackMapCollideGeometryV9"),
            obsModels: DynArray("PackMapCollideModelObsV9"),
            propModels: DynArray("PackMapCollideModelPropV9"),
            zoneModels: DynArray("PackMapCollideModelZoneV9"),
            aiBoundaryMin: FixedArray(Float32, 3),
            aiBoundaryMax: FixedArray(Float32, 3),
            aiChunkDims: FixedArray(Uint32, 2),
            aiChunks: DynArray("PackMapCollideAiChunkV9")
        }
    };
    var V10$6 = {
        chunkName: "havk",
        name: "PackMapCollideV10",
        version: 10,
        definitions: {
            PackMapCollideMeshV10: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppCodeScale: Float32,
                moppCodeData: DynArray(Uint8)
            },
            PackMapCollideGeometryV10: {
                meshRefs: DynArray("PackMapCollideMeshRefV10")
            },
            PackMapCollideMeshRefV10: {
                sequence: Uint64,
                meshIndex: Uint32
            },
            PackMapCollideModelObsV10: {
                geometryIndex: Uint32
            },
            PackMapCollideModelPropV10: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV10: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideAiChunkV10: {
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                queryMediatorMoppData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            meshes: DynArray("PackMapCollideMeshV10"),
            geometries: DynArray("PackMapCollideGeometryV10"),
            obsModels: DynArray("PackMapCollideModelObsV10"),
            propModels: DynArray("PackMapCollideModelPropV10"),
            zoneModels: DynArray("PackMapCollideModelZoneV10"),
            aiBoundaryMin: FixedArray(Float32, 3),
            aiBoundaryMax: FixedArray(Float32, 3),
            aiChunkDims: FixedArray(Uint32, 2),
            aiChunks: DynArray("PackMapCollideAiChunkV10")
        }
    };
    var V11$6 = {
        chunkName: "havk",
        name: "PackMapCollideV11",
        version: 11,
        definitions: {
            PackMapCollideMeshV11: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppCodeScale: Float32,
                moppCodeData: DynArray(Uint8)
            },
            PackMapCollideGeometryV11: {
                quantizedExtents: Uint8,
                meshRefs: DynArray("PackMapCollideMeshRefV11")
            },
            PackMapCollideMeshRefV11: {
                sequence: Uint64,
                meshIndex: Uint32
            },
            PackMapCollideModelObsV11: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelPropV11: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV11: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideAiChunkV11: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                queryMediatorMoppData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            meshes: DynArray("PackMapCollideMeshV11"),
            geometries: DynArray("PackMapCollideGeometryV11"),
            obsModels: DynArray("PackMapCollideModelObsV11"),
            propModels: DynArray("PackMapCollideModelPropV11"),
            zoneModels: DynArray("PackMapCollideModelZoneV11"),
            aiChunkDims: FixedArray(Uint32, 2),
            aiChunks: DynArray("PackMapCollideAiChunkV11")
        }
    };
    var V12$6 = {
        chunkName: "havk",
        name: "PackMapCollideV12",
        version: 12,
        definitions: {
            PackMapCollideMeshV12: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                surfaces: DynArray(Uint16),
                moppCodeScale: Float32,
                moppCodeData: DynArray(Uint8)
            },
            PackMapCollideGeometryV12: {
                quantizedExtents: Uint8,
                meshRefs: DynArray("PackMapCollideMeshRefV12")
            },
            PackMapCollideMeshRefV12: {
                sequence: Uint64,
                meshIndex: Uint32
            },
            PackMapCollideModelObsV12: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelPropV12: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV12: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideAiChunkV12: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                queryMediatorMoppData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            meshes: DynArray("PackMapCollideMeshV12"),
            geometries: DynArray("PackMapCollideGeometryV12"),
            obsModels: DynArray("PackMapCollideModelObsV12"),
            propModels: DynArray("PackMapCollideModelPropV12"),
            zoneModels: DynArray("PackMapCollideModelZoneV12"),
            aiChunkDims: FixedArray(Uint32, 2),
            aiChunks: DynArray("PackMapCollideAiChunkV12")
        }
    };
    var V13$6 = {
        chunkName: "havk",
        name: "PackMapCollideV13",
        version: 13,
        definitions: {
            PackMapCollideCollisionV13: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                surfaces: DynArray(Uint16),
                moppCodeData: DynArray(Uint8)
            },
            PackMapCollideBlockerV13: {
                vertices: DynArray(FixedArray(Float32, 3))
            },
            PackMapCollideAnimationV13: {
                sequence: Uint64,
                collisionIndices: DynArray(Uint32),
                blockerIndices: DynArray(Uint32)
            },
            PackMapCollideGeometryV13: {
                quantizedExtents: Uint8,
                animations: DynArray(Uint32)
            },
            PackMapCollideModelObsV13: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelPropV13: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV13: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            collisions: DynArray("PackMapCollideCollisionV13"),
            blockers: DynArray("PackMapCollideBlockerV13"),
            animations: DynArray("PackMapCollideAnimationV13"),
            geometries: DynArray("PackMapCollideGeometryV13"),
            obsModels: DynArray("PackMapCollideModelObsV13"),
            propModels: DynArray("PackMapCollideModelPropV13"),
            zoneModels: DynArray("PackMapCollideModelZoneV13")
        }
    };
    var V14$6 = {
        chunkName: "havk",
        name: "PackMapCollideV14",
        version: 14,
        definitions: {
            PackMapCollideCollisionV14: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                surfaces: DynArray(Uint16),
                moppCodeData: "PackMoppType"
            },
            PackMoppType: {
                moppData: DynArray(Uint8)
            },
            PackMapCollideBlockerV14: {
                vertices: DynArray(FixedArray(Float32, 3))
            },
            PackMapCollideNavMeshV14: {
                navMesh: DynArray(Uint8),
                graph: DynArray(Uint8),
                mediator: DynArray(Uint8)
            },
            PackMapCollideAnimationV14: {
                sequence: Uint64,
                collisionIndices: DynArray(Uint32),
                blockerIndices: DynArray(Uint32)
            },
            PackMapCollideGeometryV14: {
                quantizedExtents: Uint8,
                animations: DynArray(Uint32),
                navMeshIndex: Uint16
            },
            PackMapCollideModelObsV14: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelPropV14: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV14: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            collisions: DynArray("PackMapCollideCollisionV14"),
            blockers: DynArray("PackMapCollideBlockerV14"),
            navMeshes: DynArray("PackMapCollideNavMeshV14"),
            animations: DynArray("PackMapCollideAnimationV14"),
            geometries: DynArray("PackMapCollideGeometryV14"),
            obsModels: DynArray("PackMapCollideModelObsV14"),
            propModels: DynArray("PackMapCollideModelPropV14"),
            zoneModels: DynArray("PackMapCollideModelZoneV14")
        }
    };
    var V15$6 = {
        chunkName: "havk",
        name: "PackMapCollideV15",
        version: 15,
        definitions: {
            PackMapCollideCollisionV15: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                surfaces: DynArray(Uint16),
                moppCodeData: "PackMoppType"
            },
            PackMoppType: {
                moppData: DynArray(Uint8)
            },
            PackMapCollideBlockerV15: {
                vertices: DynArray(FixedArray(Float32, 3))
            },
            PackMapCollideAnimationV15: {
                sequence: Uint64,
                collisionIndices: DynArray(Uint32),
                blockerIndices: DynArray(Uint32)
            },
            PackMapCollideGeometryV15: {
                quantizedExtents: Uint8,
                animations: DynArray(Uint32),
                navMeshIndex: Uint16
            },
            PackMapCollideModelObsV15: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelPropV15: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV15: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideWaterVolumeV15: {
                guid: Uint64,
                flags: Uint32,
                verticalRange: FixedArray(Float32, 2),
                vertices: DynArray(FixedArray(Float32, 2))
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            flags: Uint32,
            waterSurfaceZ: Float32,
            collisions: DynArray("PackMapCollideCollisionV15"),
            blockers: DynArray("PackMapCollideBlockerV15"),
            animations: DynArray("PackMapCollideAnimationV15"),
            geometries: DynArray("PackMapCollideGeometryV15"),
            obsModels: DynArray("PackMapCollideModelObsV15"),
            propModels: DynArray("PackMapCollideModelPropV15"),
            zoneModels: DynArray("PackMapCollideModelZoneV15"),
            waterVolumes: DynArray("PackMapCollideWaterVolumeV15")
        }
    };
    var V16$5 = {
        chunkName: "havk",
        name: "PackMapCollideV16",
        version: 16,
        definitions: {
            PackMapCollideCollisionV16: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                surfaces: DynArray(Uint16),
                moppCodeData: "PackMoppType"
            },
            PackMoppType: {
                moppData: DynArray(Uint8)
            },
            PackMapCollideBlockerV16: {
                vertices: DynArray(FixedArray(Float32, 3))
            },
            PackMapCollideAnimationV16: {
                sequence: Uint64,
                collisionIndices: DynArray(Uint32),
                blockerIndices: DynArray(Uint32)
            },
            PackMapCollideGeometryV16: {
                quantizedExtents: Uint8,
                animations: DynArray(Uint32),
                navMeshIndex: Uint16
            },
            PackMapCollideModelObsV16: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelPropV16: {
                token: Uint64,
                sequence: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideModelZoneV16: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapCollideWaterVolumeV16: {
                guid: Uint64,
                name: RefString16(),
                flags: Uint32,
                verticalRange: FixedArray(Float32, 2),
                vertices: DynArray(FixedArray(Float32, 2))
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            flags: Uint32,
            waterSurfaceZ: Float32,
            collisions: DynArray("PackMapCollideCollisionV16"),
            blockers: DynArray("PackMapCollideBlockerV16"),
            animations: DynArray("PackMapCollideAnimationV16"),
            geometries: DynArray("PackMapCollideGeometryV16"),
            obsModels: DynArray("PackMapCollideModelObsV16"),
            propModels: DynArray("PackMapCollideModelPropV16"),
            zoneModels: DynArray("PackMapCollideModelZoneV16"),
            waterVolumes: DynArray("PackMapCollideWaterVolumeV16")
        }
    };
    var latest$O = V16$5;
    var definitions$O = { V6: V6$7, V7: V7$6, V8: V8$6, V9: V9$5, V10: V10$6, V11: V11$6, V12: V12$6, V13: V13$6, V14: V14$6, V15: V15$6, V16: V16$5 };
    var definitionArray$O = Object.values(definitions$O);

    var HAVK = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$O,
        definitions: definitions$O,
        latest: latest$O
    });

    var V0$F = {
        chunkName: "ICON",
        name: "ModelFileIcon",
        version: 0,
        root: {
            jpgData: DynArray(Uint8)
        }
    };
    var latest$N = V0$F;
    var definitions$N = { V0: V0$F };
    var definitionArray$N = Object.values(definitions$N);

    var ICON = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$N,
        definitions: definitions$N,
        latest: latest$N
    });

    var V0$E = {
        chunkName: "laye",
        name: "PackMapLayers",
        version: 0,
        definitions: {
            PackMapLayerProp: {
                guid: Uint64,
                layerIds: DynArray(Uint32)
            },
            PackMapLayer: {
                layerId: Uint32,
                metaData: DynArray(FixedArray(Uint32, 4))
            }
        },
        root: {
            props: DynArray("PackMapLayerProp"),
            layers: DynArray("PackMapLayer")
        }
    };
    var V1$r = {
        chunkName: "laye",
        name: "PackMapLayers",
        version: 1,
        definitions: {
            PackMapLayerProp: {
                guid: Uint64,
                layerIds: DynArray(Uint32)
            },
            PackMapLayerLight: {
                guid: Uint64,
                layerIds: DynArray(Uint32)
            },
            PackMapLayer: {
                layerId: Uint32,
                metaData: DynArray(FixedArray(Uint32, 4))
            }
        },
        root: {
            props: DynArray("PackMapLayerProp"),
            lights: DynArray("PackMapLayerLight"),
            layers: DynArray("PackMapLayer")
        }
    };
    var latest$M = V1$r;
    var definitions$M = { V0: V0$E, V1: V1$r };
    var definitionArray$M = Object.values(definitions$M);

    var LAYE = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$M,
        definitions: definitions$M,
        latest: latest$M
    });

    var V1$q = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 1,
        definitions: {
            PackMapLight: {
                type: Uint32,
                position: FixedArray(Float32, 3),
                elevation: Float32,
                azimuth: Float32,
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32
            }
        },
        root: {
            lights: DynArray("PackMapLight")
        }
    };
    var V2$j = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 2,
        definitions: {
            PackMapLightgroups: {
                lights: DynArray("PackMapLight")
            },
            PackMapLight: {
                type: Uint32,
                position: FixedArray(Float32, 3),
                elevation: Float32,
                azimuth: Float32,
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            }
        },
        root: {
            groups: DynArray("PackMapLightgroups")
        }
    };
    var V3$f = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 3,
        definitions: {
            PackMapLightgroups: {
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapLight: {
                type: Uint32,
                position: FixedArray(Float32, 3),
                elevation: Float32,
                azimuth: Float32,
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                curveType: Uint32
            }
        },
        root: {
            lights: DynArray("PackMapLightgroups")
        }
    };
    var V4$7 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 4,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            }
        },
        root: {
            lights: DynArray("PackMapLightgroups")
        }
    };
    var V5$7 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 5,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            }
        },
        root: {
            pointLights: DynArray("PackMapLightgroups"),
            spotLights: DynArray("PackMapPointLightgroups")
        }
    };
    var V6$6 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 6,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                minExt: FixedArray(Float32, 3),
                maxExt: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                images: DynArray("PackMapVolumeImage")
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: Uint32,
                format: Uint32,
                image: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapLightgroups"),
            spotLights: DynArray("PackMapPointLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight")
        }
    };
    var V7$5 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 7,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                minExt: FixedArray(Float32, 3),
                maxExt: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                images: DynArray("PackMapVolumeImage")
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: Uint32,
                format: Uint32,
                image: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapLightgroups"),
            spotLights: DynArray("PackMapPointLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight")
        }
    };
    var V8$5 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 8,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                minExt: FixedArray(Float32, 3),
                maxExt: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoint: FixedArray(Float32, 3),
                images: DynArray("PackMapVolumeImage")
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: Uint32,
                format: Uint32,
                image: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapLightgroups"),
            spotLights: DynArray("PackMapPointLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight")
        }
    };
    var V9$4 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 9,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoint: FixedArray(Float32, 3),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage")
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: Uint32,
                format: Uint32,
                image: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapLightgroups"),
            spotLights: DynArray("PackMapPointLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight")
        }
    };
    var V10$5 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 10,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve")
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoint: FixedArray(Float32, 3),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage")
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapLightgroups"),
            spotLights: DynArray("PackMapPointLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight")
        }
    };
    var V11$5 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 11,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoint: FixedArray(Float32, 3),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage"),
                broadId: Uint16
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapLightgroups"),
            spotLights: DynArray("PackMapPointLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V12$5 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 12,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoint: FixedArray(Float32, 3),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage"),
                broadId: Uint16
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapLightgroups"),
            spotLights: DynArray("PackMapPointLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V13$5 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 13,
        definitions: {
            PackMapLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoints: DynArray(FixedArray(Float32, 3)),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage"),
                broadId: Uint16
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapLightgroups"),
            spotLights: DynArray("PackMapPointLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V14$5 = {
        chunkName: "lght",
        name: "PackMapLightsV14",
        version: 14,
        definitions: {
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapProtalLight: {
                guid: Uint64,
                fadeCamera: Float32,
                fadeLight: Float32,
                lighten: Float32,
                darken: Float32,
                points: DynArray(FixedArray(Float32, 3)),
                broadId: Uint16
            },
            PackMapSpotLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoints: DynArray(FixedArray(Float32, 3)),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage"),
                broadId: Uint16
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapPointLightgroups"),
            portalLights: DynArray("PackMapProtalLight"),
            spotLights: DynArray("PackMapSpotLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V15$5 = {
        chunkName: "lght",
        name: "PackMapLightsV15",
        version: 15,
        definitions: {
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPortalLight: {
                guid: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                portalData: DynArray("PackMapPortalData"),
                broadId: Uint16
            },
            PackMapPortalData: {
                fadeCamera: Float32,
                fadeLight: Float32,
                lighten: Float32,
                darken: Float32
            },
            PackMapSpotLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapPointLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapPointLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoints: DynArray(FixedArray(Float32, 3)),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage"),
                broadId: Uint16
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapPointLightgroups"),
            portalLights: DynArray("PackMapPortalLight"),
            spotLights: DynArray("PackMapSpotLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V16$4 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 16,
        definitions: {
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPortalLight: {
                guid: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                portalData: DynArray("PackMapPortalData"),
                broadId: Uint16
            },
            PackMapPortalData: {
                fadeCamera: Float32,
                fadeLight: Float32,
                lighten: Float32,
                darken: Float32
            },
            PackMapSpotLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapSpotLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapSpotLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename(),
                shadowData: Pointer("PackMapSpotShadow")
            },
            PackMapSpotShadow: {
                shadowFilename: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoints: DynArray(FixedArray(Float32, 3)),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage"),
                broadId: Uint16
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapPointLightgroups"),
            portalLights: DynArray("PackMapPortalLight"),
            spotLights: DynArray("PackMapSpotLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V17$3 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 17,
        definitions: {
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPortalLight: {
                guid: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                portalData: DynArray("PackMapPortalData"),
                broadId: Uint16
            },
            PackMapPortalData: {
                fadeCamera: Float32,
                fadeLight: Float32,
                lighten: Float32,
                darken: Float32
            },
            PackMapSpotLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapSpotLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapSpotLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                upDirection: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename(),
                shadowData: Pointer("PackMapSpotShadow")
            },
            PackMapSpotShadow: {
                shadowFilename: Filename()
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoints: DynArray(FixedArray(Float32, 3)),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage"),
                broadId: Uint16
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapPointLightgroups"),
            portalLights: DynArray("PackMapPortalLight"),
            spotLights: DynArray("PackMapSpotLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V18$3 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 18,
        definitions: {
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPortalLight: {
                guid: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                portalData: DynArray("PackMapPortalData"),
                broadId: Uint16
            },
            PackMapPortalData: {
                fadeCamera: Float32,
                fadeLight: Float32,
                lighten: Float32,
                darken: Float32
            },
            PackMapSpotLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapSpotLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapSpotLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                upDirection: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename(),
                shadowData: Pointer("PackMapSpotShadow"),
                lodData: FixedArray("PackMapSpotLod", 2)
            },
            PackMapSpotShadow: {
                shadowFilename: Filename()
            },
            PackMapSpotLod: {
                distance: Float32,
                flags: Uint32,
                lightFlags: Uint32,
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDist: Float32,
                farDist: Float32,
                innerAngle: Float32,
                outerAngle: Float32
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoints: DynArray(FixedArray(Float32, 3)),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage"),
                broadId: Uint16
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapPointLightgroups"),
            portalLights: DynArray("PackMapPortalLight"),
            spotLights: DynArray("PackMapSpotLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V19$3 = {
        chunkName: "lght",
        name: "PackMapLights",
        version: 19,
        definitions: {
            PackMapPointLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32
            },
            PackMapCurve: {
                gust: Float32,
                gustFreq: Float32,
                noise: Float32,
                phase: Float32,
                offset: Float32,
                amplitude: Float32,
                curveType: Uint32
            },
            PackMapPortalLight: {
                guid: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                portalData: DynArray("PackMapPortalData"),
                broadId: Uint16
            },
            PackMapPortalData: {
                fadeCamera: Float32,
                fadeLight: Float32,
                lighten: Float32,
                darken: Float32
            },
            PackMapSpotLightgroups: {
                guid: Uint64,
                lights: DynArray("PackMapSpotLight"),
                curves: DynArray("PackMapCurve"),
                broadId: Uint16
            },
            PackMapSpotLight: {
                position: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDistance: Float32,
                farDistance: Float32,
                flags: Uint32,
                direction: FixedArray(Float32, 3),
                upDirection: FixedArray(Float32, 3),
                innerAngle: Float32,
                outerAngle: Float32,
                textureName: Filename(),
                shadowData: Pointer("PackMapSpotShadow"),
                lodData: FixedArray("PackMapSpotLod", 2)
            },
            PackMapSpotShadow: {
                shadowFilename: Filename()
            },
            PackMapSpotLod: {
                distance: Float32,
                flags: Uint32,
                lightFlags: Uint32,
                color: FixedArray(Uint8, 3),
                intensity: Float32,
                nearDist: Float32,
                farDist: Float32,
                innerAngle: Float32,
                outerAngle: Float32
            },
            PackMapVolumeLight: {
                guid: Uint64,
                position: FixedArray(Float32, 3),
                extents: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                intensities: FixedArray(Float32, 2),
                pack: FixedArray(Float32, 4),
                name: RefString16(),
                floodPoints: DynArray(FixedArray(Float32, 3)),
                flags: Uint32,
                images: DynArray("PackMapVolumeImage"),
                broadId: Uint16
            },
            PackMapVolumeImage: {
                filename: Filename(),
                dims: FixedArray(Uint32, 2),
                format: Uint32,
                image: DynArray(Uint8)
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            pointLights: DynArray("PackMapPointLightgroups"),
            portalLights: DynArray("PackMapPortalLight"),
            spotLights: DynArray("PackMapSpotLightgroups"),
            volumeLights: DynArray("PackMapVolumeLight"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16,
            maxLightVsConstants: Uint32
        }
    };
    var latest$L = V19$3;
    var definitions$L = { V1: V1$q, V2: V2$j, V3: V3$f, V4: V4$7, V5: V5$7, V6: V6$6, V7: V7$5, V8: V8$5, V9: V9$4, V10: V10$5, V11: V11$5, V12: V12$5, V13: V13$5, V14: V14$5, V15: V15$5, V16: V16$4, V17: V17$3, V18: V18$3, V19: V19$3 };
    var definitionArray$L = Object.values(definitions$L);

    var LGHT = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$L,
        definitions: definitions$L,
        latest: latest$L
    });

    var V0$D = {
        chunkName: "mach",
        name: "PackAnimMachinesV0",
        version: 0,
        definitions: {
            PackAnimMachineV0: {
                states: DynArray("PackAnimMachineStateV0")
            },
            PackAnimMachineStateV0: {
                name: RefString16(),
                actionBlock: Pointer("PackAnimMachineActionBlockV0"),
                actionVariantBlock: Pointer("PackAnimMachineActionVariantBlockV0"),
                transitions: DynArray("PackAnimMachineTransitionV0"),
                variants: DynArray("PackAnimMachineStateVariantV0")
            },
            PackAnimMachineActionBlockV0: {
                actions: DynArray("PackAnimMachineActionV0")
            },
            PackAnimMachineActionV0: {
                actionData: Uint32
            },
            PackAnimMachineActionVariantBlockV0: {
                actionVariants: DynArray("PackAnimMachineActionVariantV0")
            },
            PackAnimMachineActionVariantV0: {
                token: Uint64,
                actionBlock: Pointer("PackAnimMachineActionBlockV0")
            },
            PackAnimMachineTransitionV0: {
                name: RefString16(),
                targetStateName: RefString16(),
                actionBlock: Pointer("PackAnimMachineActionBlockV0"),
                variants: DynArray("PackAnimMachineTransitionVariantV0")
            },
            PackAnimMachineTransitionVariantV0: {
                token: Uint64,
                actionBlock: Pointer("PackAnimMachineActionBlockV0")
            },
            PackAnimMachineStateVariantV0: {
                token: Uint64,
                actionBlock: Pointer("PackAnimMachineActionBlockV0"),
                actionVariantBlock: Pointer("PackAnimMachineActionVariantBlockV0"),
                transitions: DynArray("PackAnimMachineTransitionV0")
            },
            PackAnimModelV0: {
                modelFileId: Fileref(),
                modelFileRaw: RefString16(),
                machineIndex: Uint32
            }
        },
        root: {
            machines: DynArray("PackAnimMachineV0"),
            models: DynArray("PackAnimModelV0")
        }
    };
    var V1$p = {
        chunkName: "mach",
        name: "PackAnimMachinesV1",
        version: 1,
        definitions: {
            PackAnimMachineV1: {
                states: DynArray("PackAnimMachineStateV1")
            },
            PackAnimMachineStateV1: {
                name: RefString16(),
                actionBlock: Pointer("PackAnimMachineActionBlockV1"),
                actionVariantBlock: Pointer("PackAnimMachineActionVariantBlockV1"),
                transitions: DynArray("PackAnimMachineTransitionV1"),
                variants: DynArray("PackAnimMachineStateVariantV1")
            },
            PackAnimMachineActionBlockV1: {
                actions: DynArray("PackAnimMachineActionV1")
            },
            PackAnimMachineActionV1: {
                actionData: Uint32
            },
            PackAnimMachineActionVariantBlockV1: {
                actionVariants: DynArray("PackAnimMachineActionVariantV1")
            },
            PackAnimMachineActionVariantV1: {
                token: Uint64,
                actionBlock: Pointer("PackAnimMachineActionBlockV1")
            },
            PackAnimMachineTransitionV1: {
                name: RefString16(),
                targetStateName: RefString16(),
                actionBlock: Pointer("PackAnimMachineActionBlockV1"),
                variants: DynArray("PackAnimMachineTransitionVariantV1")
            },
            PackAnimMachineTransitionVariantV1: {
                token: Uint64,
                actionBlock: Pointer("PackAnimMachineActionBlockV1")
            },
            PackAnimMachineStateVariantV1: {
                token: Uint64,
                actionBlock: Pointer("PackAnimMachineActionBlockV1"),
                actionVariantBlock: Pointer("PackAnimMachineActionVariantBlockV1"),
                transitions: DynArray("PackAnimMachineTransitionV1")
            },
            PackAnimModelV1: {
                modelFileId: Fileref(),
                modelFileRaw: RefString16(),
                machineIndex: Uint32,
                listeners: FixedArray(Uint8, 16)
            }
        },
        root: {
            machines: DynArray("PackAnimMachineV1"),
            models: DynArray("PackAnimModelV1")
        }
    };
    var latest$K = V1$p;
    var definitions$K = { V0: V0$D, V1: V1$p };
    var definitionArray$K = Object.values(definitions$K);

    var MACH = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$K,
        definitions: definitions$K,
        latest: latest$K
    });

    var V0$C = {
        chunkName: "main",
        name: "CollideNavMesh",
        version: 0,
        definitions: {
            CollideNavMeshChunkRef: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                chunkFilename: Filename()
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkRefArray: DynArray("CollideNavMeshChunkRef")
        }
    };
    var latest$J = V0$C;
    var definitions$J = { V0: V0$C };
    var definitionArray$J = Object.values(definitions$J);

    var MAIN = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$J,
        definitions: definitions$J,
        latest: latest$J
    });

    var V0$B = {
        chunkName: "main",
        name: "CollideNavMeshChunk",
        version: 0,
        root: {
            navMeshData: DynArray(Uint8),
            coarseGraphData: DynArray(Uint8),
            queryMediatorMoppData: DynArray(Uint8)
        }
    };
    var latest$I = V0$B;
    var definitions$I = { V0: V0$B };
    var definitionArray$I = Object.values(definitions$I);

    var MAIN_2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$I,
        definitions: definitions$I,
        latest: latest$I
    });

    var V0$A = {
        chunkName: "main",
        name: "CollideModelManifest",
        version: 0,
        definitions: {
            CollideModelManifestFile: {
                modelFile: Fileref(),
                collisionFile: Fileref(),
                scales: DynArray(Float32)
            }
        },
        root: {
            files: DynArray("CollideModelManifestFile")
        }
    };
    var V1$o = {
        chunkName: "main",
        name: "CollideModelManifest",
        version: 1,
        definitions: {
            CollideModelManifestFile: {
                modelFileStr: RefString16(),
                modelFile: Fileref(),
                collisionFile: Fileref(),
                scales: DynArray(Float32)
            }
        },
        root: {
            files: DynArray("CollideModelManifestFile")
        }
    };
    var latest$H = V1$o;
    var definitions$H = { V0: V0$A, V1: V1$o };
    var definitionArray$H = Object.values(definitions$H);

    var MAIN_3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$H,
        definitions: definitions$H,
        latest: latest$H
    });

    var V0$z = {
        chunkName: "Main",
        name: "PackContent",
        version: 0,
        definitions: {
            PackContentTypeInfo: {
                guidOffset: Uint32,
                uidOffset: Uint32,
                dataIdOffset: Uint32,
                nameOffset: Uint32,
                trackReferences: Uint8
            },
            PackContentNamespace: {
                name: RefString16(),
                domain: Uint32,
                parentIndex: Uint32
            },
            PackContentIndexEntry: {
                type: Uint32,
                offset: Uint32,
                namespaceIndex: Uint32,
                rootIndex: Uint32
            },
            PackContentLocalOffsetFixup: {
                relocOffset: Uint32
            },
            PackContentExternalOffsetFixup: {
                relocOffset: Uint32,
                targetFileIndex: Uint32
            },
            PackContentFileIndexFixup: {
                relocOffset: Uint32
            },
            PackContentStringIndexFixup: {
                relocOffset: Uint32
            },
            PackContentTrackedReference: {
                sourceOffset: Uint32,
                targetFileIndex: Uint32,
                targetOffset: Uint32
            }
        },
        root: {
            flags: Uint32,
            typeInfos: DynArray("PackContentTypeInfo"),
            namespaces: DynArray("PackContentNamespace"),
            fileRefs: DynArray(Fileref()),
            indexEntries: DynArray("PackContentIndexEntry"),
            localOffsets: DynArray("PackContentLocalOffsetFixup"),
            externalOffsets: DynArray("PackContentExternalOffsetFixup"),
            fileIndices: DynArray("PackContentFileIndexFixup"),
            stringIndices: DynArray("PackContentStringIndexFixup"),
            trackedReferences: DynArray("PackContentTrackedReference"),
            strings: DynArray(RefString16()),
            content: DynArray(Uint8)
        }
    };
    var latest$G = V0$z;
    var definitions$G = { V0: V0$z };
    var definitionArray$G = Object.values(definitions$G);

    var MAIN_4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$G,
        definitions: definitions$G,
        latest: latest$G
    });

    var V0$y = {
        chunkName: "Main",
        name: "PackMapMetadata",
        version: 0,
        definitions: {
            PackMapMetadataMap: {
                mapId: Uint16,
                mapType: Uint8
            }
        },
        root: {
            maps: DynArray("PackMapMetadataMap")
        }
    };
    var latest$F = V0$y;
    var definitions$F = { V0: V0$y };
    var definitionArray$F = Object.values(definitions$F);

    var MAIN_5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$F,
        definitions: definitions$F,
        latest: latest$F
    });

    var V0$x = {
        chunkName: "MFST",
        name: "PackAssetManifestV0",
        version: 0,
        definitions: {
            PackAssetManifestRecordV0: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32
            }
        },
        root: {
            buildId: Uint32,
            records: DynArray("PackAssetManifestRecordV0")
        }
    };
    var V1$n = {
        chunkName: "MFST",
        name: "PackAssetManifestV1",
        version: 1,
        definitions: {
            PackAssetManifestRecordV1: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32
            },
            PackAssetManifestStreamV1: {
                parentBaseId: Uint32,
                streamBaseId: Uint32
            }
        },
        root: {
            buildId: Uint32,
            records: DynArray("PackAssetManifestRecordV1"),
            streams: DynArray("PackAssetManifestStreamV1")
        }
    };
    var V2$i = {
        chunkName: "MFST",
        name: "PackAssetManifestV2",
        version: 2,
        definitions: {
            PackAssetManifestRecordV2: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32
            },
            PackAssetManifestStreamV2: {
                parentBaseId: Uint32,
                streamBaseId: Uint32
            }
        },
        root: {
            buildId: Uint32,
            records: DynArray("PackAssetManifestRecordV2"),
            streams: DynArray("PackAssetManifestStreamV2"),
            noDeltaRecords: DynArray("PackAssetManifestRecordV2")
        }
    };
    var V3$e = {
        chunkName: "MFST",
        name: "PackAssetManifestV3",
        version: 3,
        definitions: {
            PackAssetManifestRecordV3: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32
            },
            PackAssetManifestStreamV3: {
                parentBaseId: Uint32,
                streamBaseId: Uint32
            },
            PackAssetManifestOptionsV3: {
                baseId: Uint32,
                fileId: Uint32,
                flags: Uint32
            }
        },
        root: {
            buildId: Uint32,
            records: DynArray("PackAssetManifestRecordV3"),
            streams: DynArray("PackAssetManifestStreamV3"),
            options: DynArray("PackAssetManifestOptionsV3")
        }
    };
    var V4$6 = {
        chunkName: "MFST",
        name: "PackAssetManifestV4",
        version: 4,
        definitions: {
            PackAssetManifestRecordV4: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32,
                flags: Uint32
            },
            PackAssetManifestStreamV4: {
                parentBaseId: Uint32,
                streamBaseId: Uint32
            },
            PackAssetManifestOptionsV4: {
                baseId: Uint32,
                fileId: Uint32,
                flags: Uint32
            },
            PackAssetManifestPropertyV4: {
                type: Uint8,
                data: DynArray(Uint8)
            },
            PackAssetManifestPropertyIndexV4: {
                baseId: Uint32,
                properyIndex: Uint32
            }
        },
        root: {
            buildId: Uint32,
            records: DynArray("PackAssetManifestRecordV4"),
            streams: DynArray("PackAssetManifestStreamV4"),
            options: DynArray("PackAssetManifestOptionsV4"),
            properties: DynArray("PackAssetManifestPropertyV4"),
            propertyTable: DynArray("PackAssetManifestPropertyIndexV4")
        }
    };
    var V5$6 = {
        chunkName: "MFST",
        name: "PackAssetManifestV5",
        version: 5,
        definitions: {
            PackAssetManifestRecordV5: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32,
                flags: Uint32
            },
            PackAssetManifestStreamV5: {
                parentBaseId: Uint32,
                streamBaseId: Uint32
            },
            PackAssetManifestPropertyV5: {
                type: Uint8,
                data: DynArray(Uint8)
            },
            PackAssetManifestPropertyIndexV5: {
                baseId: Uint32,
                properyIndex: Uint32
            }
        },
        root: {
            buildId: Uint32,
            records: DynArray("PackAssetManifestRecordV5"),
            streams: DynArray("PackAssetManifestStreamV5"),
            properties: DynArray("PackAssetManifestPropertyV5"),
            propertyTable: DynArray("PackAssetManifestPropertyIndexV5")
        }
    };
    var V6$5 = {
        chunkName: "MFST",
        name: "PackAssetManifest",
        version: 6,
        definitions: {
            PackAssetManifestRecord: {
                baseId: Uint32,
                fileId: Uint32,
                size: Uint32,
                flags: Uint32
            },
            PackAssetManifestStream: {
                parentBaseId: Uint32,
                streamBaseId: Uint32
            },
            PackAssetManifestProperty: {
                type: Uint8,
                data: DynArray(Uint8)
            },
            PackAssetManifestPropertyIndex: {
                baseId: Uint32,
                properyIndex: Uint32
            }
        },
        root: {
            buildId: Uint32,
            totalRecordSize: Uint64,
            records: DynArray("PackAssetManifestRecord"),
            streams: DynArray("PackAssetManifestStream"),
            properties: DynArray("PackAssetManifestProperty"),
            propertyTable: DynArray("PackAssetManifestPropertyIndex")
        }
    };
    var latest$E = V6$5;
    var definitions$E = { V0: V0$x, V1: V1$n, V2: V2$i, V3: V3$e, V4: V4$6, V5: V5$6, V6: V6$5 };
    var definitionArray$E = Object.values(definitions$E);

    var MFST = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$E,
        definitions: definitions$E,
        latest: latest$E
    });

    var V0$w = {
        chunkName: "mfst",
        name: "ContentPortalManifestV0",
        version: 0,
        definitions: {
            ContentMapV0: {
                mapId: Uint32,
                mapRedirectorArray: DynArray("ContentMapRedirectorV0"),
                mapStartArray: DynArray("ContentMapStartV0")
            },
            ContentMapRedirectorV0: {
                mapId: Uint32,
                token: Uint32,
                position: FixedArray(Float32, 3),
                radius: Float32
            },
            ContentMapStartV0: {
                token: Uint32,
                modelArray: DynArray("ContentMapModelV0"),
                position: FixedArray(Float32, 3),
                radius: Float32
            },
            ContentMapModelV0: {
                filename: Filename(),
                flags: Uint32,
                type: Uint32
            }
        },
        root: {
            mapArray: DynArray("ContentMapV0")
        }
    };
    var V1$m = {
        chunkName: "mfst",
        name: "ContentPortalManifestV1",
        version: 1,
        definitions: {
            ContentMapV1: {
                mapId: Uint32,
                mapRedirectorArray: DynArray("ContentMapRedirectorV1"),
                mapStartArray: DynArray("ContentMapStartV1")
            },
            ContentMapRedirectorV1: {
                mapId: Uint32,
                token: Uint32,
                position: FixedArray(Float32, 3),
                radius: Float32
            },
            ContentMapStartV1: {
                token: Uint32,
                modelArray: DynArray("ContentMapModelV1"),
                position: FixedArray(Float32, 3),
                radius: Float32
            },
            ContentMapModelV1: {
                filename: Filename(),
                flags: Uint32,
                type: Uint32,
                permutation: Uint64
            }
        },
        root: {
            mapArray: DynArray("ContentMapV1")
        }
    };
    var V2$h = {
        chunkName: "mfst",
        name: "ContentPortalManifest",
        version: 2,
        definitions: {
            ContentMap: {
                mapGUID: FixedArray(Uint8, 16),
                mapRedirectorArray: DynArray("ContentMapRedirector"),
                mapStartArray: DynArray("ContentMapStart")
            },
            ContentMapRedirector: {
                mapGUID: FixedArray(Uint8, 16),
                token: Uint32,
                position: FixedArray(Float32, 3),
                radius: Float32
            },
            ContentMapStart: {
                token: Uint32,
                modelArray: DynArray("ContentMapModel"),
                position: FixedArray(Float32, 3),
                radius: Float32
            },
            ContentMapModel: {
                filename: Filename(),
                flags: Uint32,
                type: Uint32,
                permutation: Uint64
            }
        },
        root: {
            mapArray: DynArray("ContentMap")
        }
    };
    var latest$D = V2$h;
    var definitions$D = { V0: V0$w, V1: V1$m, V2: V2$h };
    var definitionArray$D = Object.values(definitions$D);

    var MFST_2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$D,
        definitions: definitions$D,
        latest: latest$D
    });

    var V0$v = {
        chunkName: "MODL",
        name: "ModelFileDataV0",
        version: 0,
        definitions: {
            ModelMaterialDataV0: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV0"),
                constants: DynArray("ModelConstantDataV0")
            },
            ModelTextureDataV0: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64
            },
            ModelConstantDataV0: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV0: {
                mesh: "PackGrannyMeshType"
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelAnimationDataV0: {
                token: Uint64,
                animation: "PackGrannyAnimationTypeV0"
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelModelDataV0: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV0"),
                InitialPlacement: "ModelTransformDataV0",
                MeshBindings: DynArray("ModelMeshBindingDataV0")
            },
            ModelSkeletonDataV0: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV0"),
                LODType: Uint32
            },
            ModelBoneDataV0: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV0",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV0: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV0: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV0: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV0")
            },
            ModelFloatPropertyDataV0: {
                token: Uint64,
                value: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV0"),
            meshes: RefArray("ModelMeshDataV0"),
            animations: RefArray("ModelAnimationDataV0"),
            model: Pointer("ModelModelDataV0"),
            properties: Pointer("ModelPropertyDataV0")
        }
    };
    var V1$l = {
        chunkName: "MODL",
        name: "ModelFileDataV1",
        version: 1,
        definitions: {
            ModelMaterialDataV1: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV1"),
                constants: DynArray("ModelConstantDataV1")
            },
            ModelTextureDataV1: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64
            },
            ModelConstantDataV1: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV1: {
                mesh: "PackGrannyMeshType"
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelAnimationDataV1: {
                token: Uint64,
                animation: "PackGrannyAnimationTypeV0"
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelModelDataV1: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV1"),
                InitialPlacement: "ModelTransformDataV1",
                MeshBindings: DynArray("ModelMeshBindingDataV1")
            },
            ModelSkeletonDataV1: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV1"),
                LODType: Uint32
            },
            ModelBoneDataV1: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV1",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV1: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV1: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV1: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV1")
            },
            ModelFloatPropertyDataV1: {
                token: Uint64,
                value: Float32
            },
            ModelChunkCollisionDataV1: {
                meshes: DynArray("ModelChunkCollisionMeshV1"),
                clouds: DynArray("ModelChunkCollisionCloudV1"),
                surfaces: DynArray("ModelChunkCollisionSurfaceV1")
            },
            ModelChunkCollisionMeshV1: {
                animationSequence: Uint64,
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelChunkCollisionCloudV1: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelChunkCollisionSurfaceV1: {
                tokens: DynArray(Uint64)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV1"),
            meshes: RefArray("ModelMeshDataV1"),
            animations: RefArray("ModelAnimationDataV1"),
            model: Pointer("ModelModelDataV1"),
            properties: Pointer("ModelPropertyDataV1"),
            collisionData: Pointer("ModelChunkCollisionDataV1")
        }
    };
    var V2$g = {
        chunkName: "MODL",
        name: "ModelFileDataV2",
        version: 2,
        definitions: {
            ModelMaterialDataV2: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV2"),
                constants: DynArray("ModelConstantDataV2")
            },
            ModelTextureDataV2: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64
            },
            ModelConstantDataV2: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV2: {
                mesh: "PackGrannyMeshType"
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelAnimationDataV2: {
                token: Uint64,
                animation: "PackGrannyAnimationTypeV0"
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelModelDataV2: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV2"),
                InitialPlacement: "ModelTransformDataV2",
                MeshBindings: DynArray("ModelMeshBindingDataV2")
            },
            ModelSkeletonDataV2: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV2"),
                LODType: Uint32
            },
            ModelBoneDataV2: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV2",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV2: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV2: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV2: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV2")
            },
            ModelFloatPropertyDataV2: {
                token: Uint64,
                value: Float32
            },
            ModelCollisionDataV2: {
                meshes: DynArray("ModelCollisionMeshV2"),
                clouds: DynArray("ModelCollisionCloudV2"),
                surfaces: DynArray("ModelCollisionSurfaceV2")
            },
            ModelCollisionMeshV2: {
                animationSequence: Uint64,
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionCloudV2: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelCollisionSurfaceV2: {
                tokens: DynArray(Uint64)
            },
            ModelCloudDataV2: {
                clouds: DynArray("ModelParticleCloudV2"),
                emitters: DynArray("ModelParticleEmitterV2"),
                obstacles: DynArray("ModelParticleObstacleV2")
            },
            ModelParticleCloudV2: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flipbook: DynArray("ModelParticleFlipbookV2"),
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                opacityCurveType: Uint8,
                opacityKeys: DynArray(FixedArray(Float32, 2)),
                scaleCurveType: Uint8,
                scaleKeys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV2: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleEmitterV2: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8
            },
            ModelParticleObstacleV2: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV2"),
            meshes: RefArray("ModelMeshDataV2"),
            animations: RefArray("ModelAnimationDataV2"),
            model: Pointer("ModelModelDataV2"),
            properties: Pointer("ModelPropertyDataV2"),
            collisionData: Pointer("ModelCollisionDataV2"),
            cloudData: Pointer("ModelCloudDataV2")
        }
    };
    var V3$d = {
        chunkName: "MODL",
        name: "ModelFileDataV3",
        version: 3,
        definitions: {
            ModelMaterialDataV3: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV3"),
                constants: DynArray("ModelConstantDataV3")
            },
            ModelTextureDataV3: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64
            },
            ModelConstantDataV3: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV3: {
                mesh: "PackGrannyMeshType"
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelAnimationDataV3: {
                token: Uint64,
                animation: "PackGrannyAnimationTypeV0"
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelModelDataV3: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV3"),
                InitialPlacement: "ModelTransformDataV3",
                MeshBindings: DynArray("ModelMeshBindingDataV3")
            },
            ModelSkeletonDataV3: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV3"),
                LODType: Uint32
            },
            ModelBoneDataV3: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV3",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV3: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV3: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV3: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV3")
            },
            ModelFloatPropertyDataV3: {
                token: Uint64,
                value: Float32
            },
            ModelCollisionDataV3: {
                meshes: DynArray("ModelCollisionMeshV3"),
                clouds: DynArray("ModelCollisionCloudV3"),
                cubes: DynArray("ModelCollisionCubeV3"),
                spheres: DynArray("ModelCollisionSphereV3"),
                surfaces: DynArray("ModelCollisionSurfaceV3")
            },
            ModelCollisionMeshV3: {
                animationSequence: Uint64,
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionCloudV3: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelCollisionCubeV3: {
                transform: FixedArray(FixedArray(Float32, 4), 3),
                surface: Uint8
            },
            ModelCollisionSphereV3: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionSurfaceV3: {
                tokens: DynArray(Uint64)
            },
            ModelCloudDataV3: {
                clouds: DynArray("ModelParticleCloudV3"),
                emitters: DynArray("ModelParticleEmitterV3"),
                obstacles: DynArray("ModelParticleObstacleV3")
            },
            ModelParticleCloudV3: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flipbook: DynArray("ModelParticleFlipbookV3"),
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                opacityCurveType: Uint8,
                opacityKeys: DynArray(FixedArray(Float32, 2)),
                scaleCurveType: Uint8,
                scaleKeys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV3: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleEmitterV3: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8
            },
            ModelParticleObstacleV3: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV3"),
            meshes: RefArray("ModelMeshDataV3"),
            animations: RefArray("ModelAnimationDataV3"),
            model: Pointer("ModelModelDataV3"),
            properties: Pointer("ModelPropertyDataV3"),
            collisionData: Pointer("ModelCollisionDataV3"),
            cloudData: Pointer("ModelCloudDataV3")
        }
    };
    var V4$5 = {
        chunkName: "MODL",
        name: "ModelFileDataV4",
        version: 4,
        definitions: {
            ModelMaterialDataV4: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV4"),
                constants: DynArray("ModelConstantDataV4")
            },
            ModelTextureDataV4: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64
            },
            ModelConstantDataV4: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV4: {
                mesh: "PackGrannyMeshType",
                visTokens: DynArray(Uint64)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelAnimationDataV4: {
                token: Uint64,
                animation: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV4")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV4: {
                token: Uint64,
                keys: DynArray(Float32)
            },
            ModelModelDataV4: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV4"),
                InitialPlacement: "ModelTransformDataV4",
                MeshBindings: DynArray("ModelMeshBindingDataV4")
            },
            ModelSkeletonDataV4: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV4"),
                LODType: Uint32
            },
            ModelBoneDataV4: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV4",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV4: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV4: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV4: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV4")
            },
            ModelFloatPropertyDataV4: {
                token: Uint64,
                value: Float32
            },
            ModelCollisionDataV4: {
                meshes: DynArray("ModelCollisionMeshV4"),
                clouds: DynArray("ModelCollisionCloudV4"),
                cubes: DynArray("ModelCollisionCubeV4"),
                spheres: DynArray("ModelCollisionSphereV4"),
                surfaces: DynArray("ModelCollisionSurfaceV4")
            },
            ModelCollisionMeshV4: {
                animationSequence: Uint64,
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionCloudV4: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelCollisionCubeV4: {
                transform: FixedArray(FixedArray(Float32, 4), 3),
                surface: Uint8
            },
            ModelCollisionSphereV4: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionSurfaceV4: {
                tokens: DynArray(Uint64)
            },
            ModelCloudDataV4: {
                clouds: DynArray("ModelParticleCloudV4"),
                emitters: DynArray("ModelParticleEmitterV4"),
                obstacles: DynArray("ModelParticleObstacleV4")
            },
            ModelParticleCloudV4: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flipbook: DynArray("ModelParticleFlipbookV4"),
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                opacityCurveType: Uint8,
                opacityKeys: DynArray(FixedArray(Float32, 2)),
                scaleCurveType: Uint8,
                scaleKeys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV4: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleEmitterV4: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8
            },
            ModelParticleObstacleV4: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV4"),
            meshes: RefArray("ModelMeshDataV4"),
            animations: RefArray("ModelAnimationDataV4"),
            model: Pointer("ModelModelDataV4"),
            properties: Pointer("ModelPropertyDataV4"),
            collisionData: Pointer("ModelCollisionDataV4"),
            cloudData: Pointer("ModelCloudDataV4")
        }
    };
    var V5$5 = {
        chunkName: "MODL",
        name: "ModelFileDataV5",
        version: 5,
        definitions: {
            ModelMaterialDataV5: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV5"),
                constants: DynArray("ModelConstantDataV5")
            },
            ModelTextureDataV5: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64
            },
            ModelConstantDataV5: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV5: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visTokens: DynArray(Uint64)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelAnimationDataV5: {
                token: Uint64,
                animation: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV5")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV5: {
                token: Uint64,
                keys: DynArray(Float32)
            },
            ModelModelDataV5: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV5"),
                InitialPlacement: "ModelTransformDataV5",
                MeshBindings: DynArray("ModelMeshBindingDataV5")
            },
            ModelSkeletonDataV5: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV5"),
                LODType: Uint32
            },
            ModelBoneDataV5: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV5",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV5: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV5: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV5: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV5")
            },
            ModelFloatPropertyDataV5: {
                token: Uint64,
                value: Float32
            },
            ModelCollisionDataV5: {
                meshes: DynArray("ModelCollisionMeshV5"),
                clouds: DynArray("ModelCollisionCloudV5"),
                cubes: DynArray("ModelCollisionCubeV5"),
                spheres: DynArray("ModelCollisionSphereV5"),
                surfaces: DynArray("ModelCollisionSurfaceV5")
            },
            ModelCollisionMeshV5: {
                animationSequence: Uint64,
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionCloudV5: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelCollisionCubeV5: {
                transform: FixedArray(FixedArray(Float32, 4), 3),
                surface: Uint8
            },
            ModelCollisionSphereV5: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionSurfaceV5: {
                tokens: DynArray(Uint64)
            },
            ModelCloudDataV5: {
                clouds: DynArray("ModelParticleCloudV5"),
                emitters: DynArray("ModelParticleEmitterV5"),
                obstacles: DynArray("ModelParticleObstacleV5")
            },
            ModelParticleCloudV5: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                flipbook: DynArray("ModelParticleFlipbookV5"),
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                opacityCurveType: Uint8,
                opacityKeys: DynArray(FixedArray(Float32, 2)),
                scaleCurveType: Uint8,
                scaleKeys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV5: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleEmitterV5: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8
            },
            ModelParticleObstacleV5: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV5"),
            meshes: RefArray("ModelMeshDataV5"),
            animations: RefArray("ModelAnimationDataV5"),
            model: Pointer("ModelModelDataV5"),
            properties: Pointer("ModelPropertyDataV5"),
            collisionData: Pointer("ModelCollisionDataV5"),
            cloudData: Pointer("ModelCloudDataV5")
        }
    };
    var V6$4 = {
        chunkName: "MODL",
        name: "ModelFileDataV6",
        version: 6,
        definitions: {
            ModelMaterialDataV6: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV6"),
                constants: DynArray("ModelConstantDataV6")
            },
            ModelTextureDataV6: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64
            },
            ModelConstantDataV6: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV6: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelAnimationDataV6: {
                token: Uint64,
                animation: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV6")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV6: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelAnimationImportDataV6: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            },
            ModelModelDataV6: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV6"),
                InitialPlacement: "ModelTransformDataV6",
                MeshBindings: DynArray("ModelMeshBindingDataV6")
            },
            ModelSkeletonDataV6: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV6"),
                LODType: Uint32
            },
            ModelBoneDataV6: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV6",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV6: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV6: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV6: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV6")
            },
            ModelFloatPropertyDataV6: {
                token: Uint64,
                value: Float32
            },
            ModelCollisionDataV6: {
                meshes: DynArray("ModelCollisionMeshV6"),
                clouds: DynArray("ModelCollisionCloudV6"),
                cubes: DynArray("ModelCollisionCubeV6"),
                spheres: DynArray("ModelCollisionSphereV6"),
                surfaces: DynArray("ModelCollisionSurfaceV6")
            },
            ModelCollisionMeshV6: {
                animationSequence: Uint64,
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionCloudV6: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelCollisionCubeV6: {
                transform: FixedArray(FixedArray(Float32, 4), 3),
                surface: Uint8
            },
            ModelCollisionSphereV6: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionSurfaceV6: {
                tokens: DynArray(Uint64)
            },
            ModelCloudDataV6: {
                clouds: DynArray("ModelParticleCloudV6"),
                emitters: DynArray("ModelParticleEmitterV6"),
                obstacles: DynArray("ModelParticleObstacleV6")
            },
            ModelParticleCloudV6: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                flipbook: DynArray("ModelParticleFlipbookV6"),
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                opacityCurveType: Uint8,
                opacityKeys: DynArray(FixedArray(Float32, 2)),
                scaleCurveType: Uint8,
                scaleKeys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV6: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleEmitterV6: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                visBoneIndex: Uint32
            },
            ModelParticleObstacleV6: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV6"),
            meshes: RefArray("ModelMeshDataV6"),
            animations: RefArray("ModelAnimationDataV6"),
            animationFallbacks: DynArray(Uint64),
            animationImports: DynArray("ModelAnimationImportDataV6"),
            model: Pointer("ModelModelDataV6"),
            properties: Pointer("ModelPropertyDataV6"),
            collisionData: Pointer("ModelCollisionDataV6"),
            cloudData: Pointer("ModelCloudDataV6")
        }
    };
    var V7$4 = {
        chunkName: "MODL",
        name: "ModelFileDataV7",
        version: 7,
        definitions: {
            ModelMaterialDataV7: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV7"),
                constants: DynArray("ModelConstantDataV7")
            },
            ModelTextureDataV7: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64
            },
            ModelConstantDataV7: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV7: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelAnimationDataV7: {
                token: Uint64,
                animation: "PackGrannyAnimationTypeV0",
                moveSpeed: Float32,
                visTrackData: DynArray("ModelVisTrackDataV7")
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelVisTrackDataV7: {
                boneIndex: Uint32,
                keys: DynArray(Float32)
            },
            ModelAnimationImportDataV7: {
                filename: Filename(),
                sequenceTokens: DynArray(Uint64)
            },
            ModelModelDataV7: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV7"),
                InitialPlacement: "ModelTransformDataV7",
                MeshBindings: DynArray("ModelMeshBindingDataV7"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV7: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV7"),
                LODType: Uint32
            },
            ModelBoneDataV7: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV7",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV7: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV7: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV7: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV7")
            },
            ModelFloatPropertyDataV7: {
                token: Uint64,
                value: Float32
            },
            ModelCollisionDataV7: {
                meshes: DynArray("ModelCollisionMeshV7"),
                clouds: DynArray("ModelCollisionCloudV7"),
                cubes: DynArray("ModelCollisionCubeV7"),
                spheres: DynArray("ModelCollisionSphereV7"),
                surfaces: DynArray("ModelCollisionSurfaceV7")
            },
            ModelCollisionMeshV7: {
                animationSequence: Uint64,
                vertices: DynArray(FixedArray(Float32, 3)),
                indices: DynArray(Uint16),
                surfaces: DynArray(Uint8)
            },
            ModelCollisionCloudV7: {
                animationSequence: Uint64,
                points: DynArray(FixedArray(Float32, 3)),
                surface: Uint8
            },
            ModelCollisionCubeV7: {
                transform: FixedArray(FixedArray(Float32, 4), 3),
                surface: Uint8
            },
            ModelCollisionSphereV7: {
                radius: Float32,
                position: FixedArray(Float32, 3),
                surface: Uint8
            },
            ModelCollisionSurfaceV7: {
                tokens: DynArray(Uint64)
            },
            ModelCloudDataV7: {
                clouds: DynArray("ModelParticleCloudV7"),
                emitters: DynArray("ModelParticleEmitterV7"),
                obstacles: DynArray("ModelParticleObstacleV7")
            },
            ModelParticleCloudV7: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                flipbook: DynArray("ModelParticleFlipbookV7"),
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                opacityCurveType: Uint8,
                opacityKeys: DynArray(FixedArray(Float32, 2)),
                scaleCurveType: Uint8,
                scaleKeys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV7: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleEmitterV7: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                visBoneIndex: Uint32
            },
            ModelParticleObstacleV7: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV7"),
            meshes: RefArray("ModelMeshDataV7"),
            animations: RefArray("ModelAnimationDataV7"),
            animationFallbacks: DynArray(Uint64),
            animationImports: DynArray("ModelAnimationImportDataV7"),
            model: Pointer("ModelModelDataV7"),
            properties: Pointer("ModelPropertyDataV7"),
            collisionData: Pointer("ModelCollisionDataV7"),
            cloudData: Pointer("ModelCloudDataV7")
        }
    };
    var V8$4 = {
        chunkName: "MODL",
        name: "ModelFileDataV8",
        version: 8,
        definitions: {
            ModelMaterialDataV8: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV8"),
                constants: DynArray("ModelConstantDataV8")
            },
            ModelTextureDataV8: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV8: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV8: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV8: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV8"),
                InitialPlacement: "ModelTransformDataV8",
                MeshBindings: DynArray("ModelMeshBindingDataV8"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV8: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV8"),
                LODType: Uint32
            },
            ModelBoneDataV8: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV8",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV8: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV8: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV8: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV8")
            },
            ModelFloatPropertyDataV8: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV8: {
                clouds: DynArray("ModelParticleCloudV8"),
                emitters: DynArray("ModelParticleEmitterV8"),
                obstacles: DynArray("ModelParticleObstacleV8")
            },
            ModelParticleCloudV8: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                flipbook: DynArray("ModelParticleFlipbookV8"),
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                opacityCurveType: Uint8,
                opacityKeys: DynArray(FixedArray(Float32, 2)),
                scaleCurveType: Uint8,
                scaleKeys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV8: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleEmitterV8: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                visBoneIndex: Uint32
            },
            ModelParticleObstacleV8: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV8"),
            meshes: RefArray("ModelMeshDataV8"),
            model: Pointer("ModelModelDataV8"),
            properties: Pointer("ModelPropertyDataV8"),
            cloudData: Pointer("ModelCloudDataV8")
        }
    };
    var V9$3 = {
        chunkName: "MODL",
        name: "ModelFileDataV9",
        version: 9,
        definitions: {
            ModelMaterialDataV9: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV9"),
                constants: DynArray("ModelConstantDataV9")
            },
            ModelTextureDataV9: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV9: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV9: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV9: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV9"),
                InitialPlacement: "ModelTransformDataV9",
                MeshBindings: DynArray("ModelMeshBindingDataV9"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV9: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV9"),
                LODType: Uint32
            },
            ModelBoneDataV9: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV9",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV9: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV9: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV9: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV9")
            },
            ModelFloatPropertyDataV9: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV9: {
                clouds: DynArray("ModelParticleCloudV9"),
                emitters: DynArray("ModelParticleEmitterV9"),
                obstacles: DynArray("ModelParticleObstacleV9")
            },
            ModelParticleCloudV9: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                flipbook: DynArray("ModelParticleFlipbookV9"),
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                opacityCurveType: Uint8,
                opacityKeys: DynArray(FixedArray(Float32, 2)),
                scaleCurveType: Uint8,
                scaleKeys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV9: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleEmitterV9: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                visBoneIndex: Uint32
            },
            ModelParticleObstacleV9: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV9"),
            meshes: RefArray("ModelMeshDataV9"),
            model: Pointer("ModelModelDataV9"),
            properties: Pointer("ModelPropertyDataV9"),
            cloudData: Pointer("ModelCloudDataV9")
        }
    };
    var V10$4 = {
        chunkName: "MODL",
        name: "ModelFileDataV10",
        version: 10,
        definitions: {
            ModelMaterialDataV10: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV10"),
                constants: DynArray("ModelConstantDataV10")
            },
            ModelTextureDataV10: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV10: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV10: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV10: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV10"),
                InitialPlacement: "ModelTransformDataV10",
                MeshBindings: DynArray("ModelMeshBindingDataV10"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV10: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV10"),
                LODType: Uint32
            },
            ModelBoneDataV10: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV10",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV10: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV10: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV10: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV10")
            },
            ModelFloatPropertyDataV10: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV10: {
                clouds: DynArray("ModelParticleCloudV10"),
                emitters: DynArray("ModelParticleEmitterV10"),
                obstacles: DynArray("ModelParticleObstacleV10")
            },
            ModelParticleCloudV10: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                flipbook: DynArray("ModelParticleFlipbookV10"),
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                opacityCurveType: Uint8,
                opacityKeys: DynArray(FixedArray(Float32, 2)),
                scaleCurveType: Uint8,
                scaleKeys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV10: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleEmitterV10: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                visBoneIndex: Uint32
            },
            ModelParticleObstacleV10: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV10: {
                streaks: DynArray("ModelStreakV10"),
                anchors: DynArray("ModelStreakAnchorV10")
            },
            ModelStreakV10: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV10: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV10"),
            meshes: RefArray("ModelMeshDataV10"),
            model: Pointer("ModelModelDataV10"),
            properties: Pointer("ModelPropertyDataV10"),
            cloudData: Pointer("ModelCloudDataV10"),
            streakData: Pointer("ModelStreakDataV10")
        }
    };
    var V11$4 = {
        chunkName: "MODL",
        name: "ModelFileDataV11",
        version: 11,
        definitions: {
            ModelMaterialDataV11: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV11"),
                constants: DynArray("ModelConstantDataV11")
            },
            ModelTextureDataV11: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV11: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV11: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV11: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV11"),
                InitialPlacement: "ModelTransformDataV11",
                MeshBindings: DynArray("ModelMeshBindingDataV11"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV11: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV11"),
                LODType: Uint32
            },
            ModelBoneDataV11: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV11",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV11: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV11: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV11: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV11")
            },
            ModelFloatPropertyDataV11: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV11: {
                clouds: DynArray("ModelParticleCloudV11"),
                emitters: DynArray("ModelParticleEmitterV11"),
                obstacles: DynArray("ModelParticleObstacleV11")
            },
            ModelParticleCloudV11: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV11: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV11"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV11"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV11"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV11: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV11: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV11: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV11: {
                streaks: DynArray("ModelStreakV11"),
                anchors: DynArray("ModelStreakAnchorV11")
            },
            ModelStreakV11: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV11: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV11"),
            meshes: RefArray("ModelMeshDataV11"),
            model: Pointer("ModelModelDataV11"),
            properties: Pointer("ModelPropertyDataV11"),
            cloudData: Pointer("ModelCloudDataV11"),
            streakData: Pointer("ModelStreakDataV11")
        }
    };
    var V12$4 = {
        chunkName: "MODL",
        name: "ModelFileDataV12",
        version: 12,
        definitions: {
            ModelMaterialDataV12: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV12"),
                constants: DynArray("ModelConstantDataV12")
            },
            ModelTextureDataV12: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV12: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV12: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV12: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV12"),
                InitialPlacement: "ModelTransformDataV12",
                MeshBindings: DynArray("ModelMeshBindingDataV12"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV12: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV12"),
                LODType: Uint32
            },
            ModelBoneDataV12: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV12",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV12: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV12: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV12: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV12")
            },
            ModelFloatPropertyDataV12: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV12: {
                clouds: DynArray("ModelParticleCloudV12"),
                emitters: DynArray("ModelParticleEmitterV12"),
                obstacles: DynArray("ModelParticleObstacleV12")
            },
            ModelParticleCloudV12: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV12: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV12"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV12"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV12"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV12: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV12: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV12: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV12: {
                streaks: DynArray("ModelStreakV12"),
                anchors: DynArray("ModelStreakAnchorV12")
            },
            ModelStreakV12: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV12: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV12"),
            meshes: RefArray("ModelMeshDataV12"),
            model: Pointer("ModelModelDataV12"),
            properties: Pointer("ModelPropertyDataV12"),
            cloudData: Pointer("ModelCloudDataV12"),
            streakData: Pointer("ModelStreakDataV12")
        }
    };
    var V13$4 = {
        chunkName: "MODL",
        name: "ModelFileDataV13",
        version: 13,
        definitions: {
            ModelMaterialDataV13: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV13"),
                constants: DynArray("ModelConstantDataV13")
            },
            ModelTextureDataV13: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV13: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV13: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV13: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV13"),
                InitialPlacement: "ModelTransformDataV13",
                MeshBindings: DynArray("ModelMeshBindingDataV13"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV13: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV13"),
                LODType: Uint32
            },
            ModelBoneDataV13: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV13",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV13: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV13: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV13: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV13")
            },
            ModelFloatPropertyDataV13: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV13: {
                clouds: DynArray("ModelParticleCloudV13"),
                emitters: DynArray("ModelParticleEmitterV13"),
                obstacles: DynArray("ModelParticleObstacleV13")
            },
            ModelParticleCloudV13: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV13: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV13"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV13"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV13"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV13: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV13: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV13: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV13: {
                streaks: DynArray("ModelStreakV13"),
                anchors: DynArray("ModelStreakAnchorV13")
            },
            ModelStreakV13: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV13: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV13"),
            meshes: RefArray("ModelMeshDataV13"),
            model: Pointer("ModelModelDataV13"),
            properties: Pointer("ModelPropertyDataV13"),
            cloudData: Pointer("ModelCloudDataV13"),
            streakData: Pointer("ModelStreakDataV13")
        }
    };
    var V14$4 = {
        chunkName: "MODL",
        name: "ModelFileDataV14",
        version: 14,
        definitions: {
            ModelMaterialDataV14: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV14"),
                constants: DynArray("ModelConstantDataV14")
            },
            ModelTextureDataV14: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV14: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV14: {
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32),
                actionOffsetNames: DynArray(Uint64),
                actionOffsets: DynArray(FixedArray(Float32, 3))
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV14: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV14"),
                InitialPlacement: "ModelTransformDataV14",
                MeshBindings: DynArray("ModelMeshBindingDataV14"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV14: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV14"),
                LODType: Uint32
            },
            ModelBoneDataV14: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV14",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV14: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV14: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV14: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV14")
            },
            ModelFloatPropertyDataV14: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV14: {
                clouds: DynArray("ModelParticleCloudV14"),
                emitters: DynArray("ModelParticleEmitterV14"),
                obstacles: DynArray("ModelParticleObstacleV14")
            },
            ModelParticleCloudV14: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV14: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV14"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV14"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV14"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV14: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV14: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV14: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV14: {
                streaks: DynArray("ModelStreakV14"),
                anchors: DynArray("ModelStreakAnchorV14")
            },
            ModelStreakV14: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV14: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV14"),
            meshes: RefArray("ModelMeshDataV14"),
            model: Pointer("ModelModelDataV14"),
            properties: Pointer("ModelPropertyDataV14"),
            cloudData: Pointer("ModelCloudDataV14"),
            streakData: Pointer("ModelStreakDataV14")
        }
    };
    var V15$4 = {
        chunkName: "MODL",
        name: "ModelFileDataV15",
        version: 15,
        definitions: {
            ModelMaterialDataV15: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV15"),
                constants: DynArray("ModelConstantDataV15")
            },
            ModelTextureDataV15: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV15: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV15: {
                lods: DynArray("ModelMeshLodDataV15"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV15: {
                indices: DynArray(Uint16)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV15: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV15"),
                InitialPlacement: "ModelTransformDataV15",
                MeshBindings: DynArray("ModelMeshBindingDataV15"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV15: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV15"),
                LODType: Uint32
            },
            ModelBoneDataV15: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV15",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV15: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV15: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV15: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV15")
            },
            ModelFloatPropertyDataV15: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV15: {
                clouds: DynArray("ModelParticleCloudV15"),
                emitters: DynArray("ModelParticleEmitterV15"),
                obstacles: DynArray("ModelParticleObstacleV15")
            },
            ModelParticleCloudV15: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV15: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV15"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV15"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV15"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV15: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV15: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV15: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV15: {
                streaks: DynArray("ModelStreakV15"),
                anchors: DynArray("ModelStreakAnchorV15")
            },
            ModelStreakV15: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV15: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV15: {
                effectLights: DynArray("ModelEffectLightV15")
            },
            ModelEffectLightV15: {
                bone: Uint64,
                color: FixedArray(Uint8, 4),
                ranges: FixedArray(Float32, 2)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV15"),
            meshes: RefArray("ModelMeshDataV15"),
            model: Pointer("ModelModelDataV15"),
            properties: Pointer("ModelPropertyDataV15"),
            cloudData: Pointer("ModelCloudDataV15"),
            streakData: Pointer("ModelStreakDataV15"),
            lightData: Pointer("ModelLightDataV15"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3))
        }
    };
    var V16$3 = {
        chunkName: "MODL",
        name: "ModelFileDataV16",
        version: 16,
        definitions: {
            ModelMaterialDataV16: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV16"),
                constants: DynArray("ModelConstantDataV16")
            },
            ModelTextureDataV16: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV16: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV16: {
                lods: DynArray("ModelMeshLodDataV16"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV16: {
                indices: DynArray(Uint16)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV16: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV16"),
                InitialPlacement: "ModelTransformDataV16",
                MeshBindings: DynArray("ModelMeshBindingDataV16"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV16: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV16"),
                LODType: Uint32
            },
            ModelBoneDataV16: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV16",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV16: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV16: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV16: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV16")
            },
            ModelFloatPropertyDataV16: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV16: {
                clouds: DynArray("ModelParticleCloudV16"),
                emitters: DynArray("ModelParticleEmitterV16"),
                obstacles: DynArray("ModelParticleObstacleV16")
            },
            ModelParticleCloudV16: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV16: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV16"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV16"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV16"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV16: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV16: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV16: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV16: {
                streaks: DynArray("ModelStreakV16"),
                anchors: DynArray("ModelStreakAnchorV16")
            },
            ModelStreakV16: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV16: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV16: {
                effectLights: DynArray("ModelEffectLightV16")
            },
            ModelEffectLightV16: {
                bone: Uint64,
                color: FixedArray(Uint8, 4),
                ranges: FixedArray(Float32, 2)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV16"),
            meshes: RefArray("ModelMeshDataV16"),
            model: Pointer("ModelModelDataV16"),
            properties: Pointer("ModelPropertyDataV16"),
            cloudData: Pointer("ModelCloudDataV16"),
            streakData: Pointer("ModelStreakDataV16"),
            lightData: Pointer("ModelLightDataV16"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2)
        }
    };
    var V17$2 = {
        chunkName: "MODL",
        name: "ModelFileDataV17",
        version: 17,
        definitions: {
            ModelMaterialDataV17: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV17"),
                constants: DynArray("ModelConstantDataV17")
            },
            ModelTextureDataV17: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV17: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV17: {
                lods: DynArray("ModelMeshLodDataV17"),
                morphTargets: DynArray("ModelMeshMorphTargetV17"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV17: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV17: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3))
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV17: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV17"),
                InitialPlacement: "ModelTransformDataV17",
                MeshBindings: DynArray("ModelMeshBindingDataV17"),
                boneFlags: DynArray(Uint32)
            },
            ModelSkeletonDataV17: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV17"),
                LODType: Uint32
            },
            ModelBoneDataV17: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV17",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV17: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV17: {
                Mesh: Pointer(Uint8)
            },
            ModelPropertyDataV17: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV17")
            },
            ModelFloatPropertyDataV17: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV17: {
                clouds: DynArray("ModelParticleCloudV17"),
                emitters: DynArray("ModelParticleEmitterV17"),
                obstacles: DynArray("ModelParticleObstacleV17")
            },
            ModelParticleCloudV17: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV17: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV17"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV17"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV17"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV17: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV17: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV17: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV17: {
                streaks: DynArray("ModelStreakV17"),
                anchors: DynArray("ModelStreakAnchorV17")
            },
            ModelStreakV17: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV17: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV17: {
                effectLights: DynArray("ModelEffectLightV17")
            },
            ModelEffectLightV17: {
                bone: Uint64,
                color: FixedArray(Uint8, 4),
                ranges: FixedArray(Float32, 2)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV17"),
            meshes: RefArray("ModelMeshDataV17"),
            model: Pointer("ModelModelDataV17"),
            properties: Pointer("ModelPropertyDataV17"),
            cloudData: Pointer("ModelCloudDataV17"),
            streakData: Pointer("ModelStreakDataV17"),
            lightData: Pointer("ModelLightDataV17"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V18$2 = {
        chunkName: "MODL",
        name: "ModelFileDataV18",
        version: 18,
        definitions: {
            ModelMaterialDataV18: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV18"),
                constants: DynArray("ModelConstantDataV18")
            },
            ModelTextureDataV18: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV18: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV18: {
                lods: DynArray("ModelMeshLodDataV18"),
                morphTargets: DynArray("ModelMeshMorphTargetV18"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV18: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV18: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV18: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV18"),
                InitialPlacement: "ModelTransformDataV18",
                MeshBindings: DynArray("ModelMeshBindingDataV18"),
                boneFlags: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV18"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV18: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV18"),
                LODType: Uint32
            },
            ModelBoneDataV18: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV18",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV18: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV18: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV18: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV18: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV18")
            },
            ModelFloatPropertyDataV18: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV18: {
                clouds: DynArray("ModelParticleCloudV18"),
                emitters: DynArray("ModelParticleEmitterV18"),
                obstacles: DynArray("ModelParticleObstacleV18")
            },
            ModelParticleCloudV18: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV18: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV18"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV18"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV18"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV18: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV18: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV18: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV18: {
                streaks: DynArray("ModelStreakV18"),
                anchors: DynArray("ModelStreakAnchorV18")
            },
            ModelStreakV18: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV18: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV18: {
                effectLights: DynArray("ModelEffectLightV18")
            },
            ModelEffectLightV18: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV18"),
            meshes: RefArray("ModelMeshDataV18"),
            model: Pointer("ModelModelDataV18"),
            properties: Pointer("ModelPropertyDataV18"),
            cloudData: Pointer("ModelCloudDataV18"),
            streakData: Pointer("ModelStreakDataV18"),
            lightData: Pointer("ModelLightDataV18"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V19$2 = {
        chunkName: "MODL",
        name: "ModelFileDataV19",
        version: 19,
        definitions: {
            ModelMaterialDataV19: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV19"),
                constants: DynArray("ModelConstantDataV19")
            },
            ModelTextureDataV19: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV19: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV19: {
                lods: DynArray("ModelMeshLodDataV19"),
                morphTargets: DynArray("ModelMeshMorphTargetV19"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV19: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV19: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV19: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV19"),
                InitialPlacement: "ModelTransformDataV19",
                MeshBindings: DynArray("ModelMeshBindingDataV19"),
                boneFlags: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV19"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV19: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV19"),
                LODType: Uint32
            },
            ModelBoneDataV19: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV19",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV19: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV19: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV19: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV19: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV19")
            },
            ModelFloatPropertyDataV19: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV19: {
                clouds: DynArray("ModelParticleCloudV19"),
                emitters: DynArray("ModelParticleEmitterV19"),
                obstacles: DynArray("ModelParticleObstacleV19")
            },
            ModelParticleCloudV19: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV19: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV19"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV19"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV19"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV19: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV19: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV19: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV19: {
                streaks: DynArray("ModelStreakV19"),
                anchors: DynArray("ModelStreakAnchorV19")
            },
            ModelStreakV19: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV19: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV19: {
                effectLights: DynArray("ModelEffectLightV19")
            },
            ModelEffectLightV19: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV19: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV19"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV19"),
                lod1Constraints: DynArray("ModelClothConstraintV19"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV19: {
                weights: DynArray("ModelClothBoneWeightV19")
            },
            ModelClothBoneWeightV19: {
                index: Uint16,
                weight: Uint8
            },
            ModelClothConstraintV19: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV19"),
            meshes: RefArray("ModelMeshDataV19"),
            model: Pointer("ModelModelDataV19"),
            properties: Pointer("ModelPropertyDataV19"),
            cloudData: Pointer("ModelCloudDataV19"),
            streakData: Pointer("ModelStreakDataV19"),
            lightData: Pointer("ModelLightDataV19"),
            clothData: DynArray("ModelClothDataV19"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V20$2 = {
        chunkName: "MODL",
        name: "ModelFileDataV20",
        version: 20,
        definitions: {
            ModelMaterialDataV20: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV20"),
                constants: DynArray("ModelConstantDataV20")
            },
            ModelTextureDataV20: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV20: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV20: {
                lods: DynArray("ModelMeshLodDataV20"),
                morphTargets: DynArray("ModelMeshMorphTargetV20"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV20: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV20: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV20: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV20"),
                InitialPlacement: "ModelTransformDataV20",
                MeshBindings: DynArray("ModelMeshBindingDataV20"),
                boneFlags: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV20"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV20: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV20"),
                LODType: Uint32
            },
            ModelBoneDataV20: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV20",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV20: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV20: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV20: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV20: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV20")
            },
            ModelFloatPropertyDataV20: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV20: {
                clouds: DynArray("ModelParticleCloudV20"),
                emitters: DynArray("ModelParticleEmitterV20"),
                obstacles: DynArray("ModelParticleObstacleV20")
            },
            ModelParticleCloudV20: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32)
            },
            ModelParticleEmitterV20: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: FixedArray(Float32, 2),
                colorFalloff: Float32,
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV20"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV20"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV20"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32
            },
            ModelParticleCurveV20: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV20: {
                columns: Uint8,
                count: Uint8,
                flags: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV20: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV20: {
                streaks: DynArray("ModelStreakV20"),
                anchors: DynArray("ModelStreakAnchorV20")
            },
            ModelStreakV20: {
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                spawnFreq: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32
            },
            ModelStreakAnchorV20: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV20: {
                effectLights: DynArray("ModelEffectLightV20")
            },
            ModelEffectLightV20: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV20: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV20"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV20"),
                lod1Constraints: DynArray("ModelClothConstraintV20"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV20: {
                weights: DynArray("ModelClothBoneWeightV20")
            },
            ModelClothBoneWeightV20: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV20: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV20"),
            meshes: RefArray("ModelMeshDataV20"),
            model: Pointer("ModelModelDataV20"),
            properties: Pointer("ModelPropertyDataV20"),
            cloudData: Pointer("ModelCloudDataV20"),
            streakData: Pointer("ModelStreakDataV20"),
            lightData: Pointer("ModelLightDataV20"),
            clothData: DynArray("ModelClothDataV20"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V21$2 = {
        chunkName: "MODL",
        name: "ModelFileDataV21",
        version: 21,
        definitions: {
            ModelMaterialDataV21: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV21"),
                constants: DynArray("ModelConstantDataV21")
            },
            ModelTextureDataV21: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV21: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV21: {
                lods: DynArray("ModelMeshLodDataV21"),
                morphTargets: DynArray("ModelMeshMorphTargetV21"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV21: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV21: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV21: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV21"),
                InitialPlacement: "ModelTransformDataV21",
                MeshBindings: DynArray("ModelMeshBindingDataV21"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV21"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV21: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV21"),
                LODType: Uint32
            },
            ModelBoneDataV21: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV21",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV21: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV21: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV21: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV21: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV21")
            },
            ModelFloatPropertyDataV21: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV21: {
                clouds: DynArray("ModelParticleCloudV21"),
                emitters: DynArray("ModelParticleEmitterV21"),
                obstacles: DynArray("ModelParticleObstacleV21")
            },
            ModelParticleCloudV21: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV21: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV21"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV21"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV21"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV21: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV21: {
                columns: Uint8,
                count: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV21: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV21: {
                streaks: DynArray("ModelStreakV21"),
                anchors: DynArray("ModelStreakAnchorV21")
            },
            ModelStreakV21: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV21: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV21: {
                effectLights: DynArray("ModelEffectLightV21")
            },
            ModelEffectLightV21: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV21: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV21"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV21"),
                lod1Constraints: DynArray("ModelClothConstraintV21"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV21: {
                weights: DynArray("ModelClothBoneWeightV21")
            },
            ModelClothBoneWeightV21: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV21: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV21"),
            meshes: RefArray("ModelMeshDataV21"),
            model: Pointer("ModelModelDataV21"),
            properties: Pointer("ModelPropertyDataV21"),
            cloudData: Pointer("ModelCloudDataV21"),
            streakData: Pointer("ModelStreakDataV21"),
            lightData: Pointer("ModelLightDataV21"),
            clothData: DynArray("ModelClothDataV21"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V22$1 = {
        chunkName: "MODL",
        name: "ModelFileDataV22",
        version: 22,
        definitions: {
            ModelMaterialDataV22: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV22"),
                constants: DynArray("ModelConstantDataV22")
            },
            ModelTextureDataV22: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV22: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV22: {
                lods: DynArray("ModelMeshLodDataV22"),
                morphTargets: DynArray("ModelMeshMorphTargetV22"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV22: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV22: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV22: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV22"),
                InitialPlacement: "ModelTransformDataV22",
                MeshBindings: DynArray("ModelMeshBindingDataV22"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV22"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV22: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV22"),
                LODType: Uint32
            },
            ModelBoneDataV22: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV22",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV22: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV22: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV22: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV22: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV22")
            },
            ModelFloatPropertyDataV22: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV22: {
                clouds: DynArray("ModelParticleCloudV22"),
                emitters: DynArray("ModelParticleEmitterV22"),
                obstacles: DynArray("ModelParticleObstacleV22")
            },
            ModelParticleCloudV22: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV22: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV22"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV22"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV22"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV22: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV22: {
                columns: Uint8,
                count: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelParticleObstacleV22: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV22: {
                streaks: DynArray("ModelStreakV22"),
                anchors: DynArray("ModelStreakAnchorV22")
            },
            ModelStreakV22: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV22: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV22: {
                effectLights: DynArray("ModelEffectLightV22")
            },
            ModelEffectLightV22: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV22: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV22"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV22"),
                lod1Constraints: DynArray("ModelClothConstraintV22"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV22: {
                weights: DynArray("ModelClothBoneWeightV22")
            },
            ModelClothBoneWeightV22: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV22: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV22"),
            meshes: RefArray("ModelMeshDataV22"),
            model: Pointer("ModelModelDataV22"),
            properties: Pointer("ModelPropertyDataV22"),
            cloudData: Pointer("ModelCloudDataV22"),
            streakData: Pointer("ModelStreakDataV22"),
            lightData: Pointer("ModelLightDataV22"),
            clothData: DynArray("ModelClothDataV22"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V23 = {
        chunkName: "MODL",
        name: "ModelFileDataV23",
        version: 23,
        definitions: {
            ModelMaterialDataV23: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV23"),
                constants: DynArray("ModelConstantDataV23")
            },
            ModelTextureDataV23: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV23: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV23: {
                lods: DynArray("ModelMeshLodDataV23"),
                morphTargets: DynArray("ModelMeshMorphTargetV23"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV23: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV23: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV23: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV23"),
                InitialPlacement: "ModelTransformDataV23",
                MeshBindings: DynArray("ModelMeshBindingDataV23"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV23"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV23: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV23"),
                LODType: Uint32
            },
            ModelBoneDataV23: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV23",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV23: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV23: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV23: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV23: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV23")
            },
            ModelFloatPropertyDataV23: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV23: {
                clouds: DynArray("ModelParticleCloudV23"),
                emitters: DynArray("ModelParticleEmitterV23")
            },
            ModelParticleCloudV23: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV23: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                opacityCurve: Pointer("ModelParticleCurveV23"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV23"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV23"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV23: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV23: {
                columns: Uint8,
                count: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV23: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV23: {
                streaks: DynArray("ModelStreakV23"),
                anchors: DynArray("ModelStreakAnchorV23")
            },
            ModelStreakV23: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV23: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV23: {
                effectLights: DynArray("ModelEffectLightV23")
            },
            ModelEffectLightV23: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV23: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV23"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV23"),
                lod1Constraints: DynArray("ModelClothConstraintV23"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV23: {
                weights: DynArray("ModelClothBoneWeightV23")
            },
            ModelClothBoneWeightV23: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV23: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV23"),
            meshes: RefArray("ModelMeshDataV23"),
            model: Pointer("ModelModelDataV23"),
            properties: Pointer("ModelPropertyDataV23"),
            cloudData: Pointer("ModelCloudDataV23"),
            obstacles: DynArray("ModelObstacleDataV23"),
            streakData: Pointer("ModelStreakDataV23"),
            lightData: Pointer("ModelLightDataV23"),
            clothData: DynArray("ModelClothDataV23"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V24 = {
        chunkName: "MODL",
        name: "ModelFileDataV24",
        version: 24,
        definitions: {
            ModelMaterialDataV24: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV24"),
                constants: DynArray("ModelConstantDataV24")
            },
            ModelTextureDataV24: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV24: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV24: {
                lods: DynArray("ModelMeshLodDataV24"),
                morphTargets: DynArray("ModelMeshMorphTargetV24"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV24: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV24: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV24: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV24"),
                InitialPlacement: "ModelTransformDataV24",
                MeshBindings: DynArray("ModelMeshBindingDataV24"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV24"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV24: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV24"),
                LODType: Uint32
            },
            ModelBoneDataV24: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV24",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV24: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV24: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV24: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV24: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV24")
            },
            ModelFloatPropertyDataV24: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV24: {
                clouds: DynArray("ModelParticleCloudV24"),
                emitters: DynArray("ModelParticleEmitterV24")
            },
            ModelParticleCloudV24: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV24: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV24"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV24"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV24"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV24: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV24: {
                columns: Uint8,
                count: Uint8,
                fps: Uint32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV24: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV24: {
                streaks: DynArray("ModelStreakV24"),
                anchors: DynArray("ModelStreakAnchorV24")
            },
            ModelStreakV24: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV24: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV24: {
                effectLights: DynArray("ModelEffectLightV24")
            },
            ModelEffectLightV24: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV24: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV24"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV24"),
                lod1Constraints: DynArray("ModelClothConstraintV24"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV24: {
                weights: DynArray("ModelClothBoneWeightV24")
            },
            ModelClothBoneWeightV24: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV24: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV24"),
            meshes: RefArray("ModelMeshDataV24"),
            model: Pointer("ModelModelDataV24"),
            properties: Pointer("ModelPropertyDataV24"),
            cloudData: Pointer("ModelCloudDataV24"),
            obstacles: DynArray("ModelObstacleDataV24"),
            streakData: Pointer("ModelStreakDataV24"),
            lightData: Pointer("ModelLightDataV24"),
            clothData: DynArray("ModelClothDataV24"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V25 = {
        chunkName: "MODL",
        name: "ModelFileDataV25",
        version: 25,
        definitions: {
            ModelMaterialDataV25: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV25"),
                constants: DynArray("ModelConstantDataV25")
            },
            ModelTextureDataV25: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV25: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV25: {
                lods: DynArray("ModelMeshLodDataV25"),
                morphTargets: DynArray("ModelMeshMorphTargetV25"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV25: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV25: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV25: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV25"),
                InitialPlacement: "ModelTransformDataV25",
                MeshBindings: DynArray("ModelMeshBindingDataV25"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV25"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV25: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV25"),
                LODType: Uint32
            },
            ModelBoneDataV25: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV25",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV25: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV25: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV25: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV25: {
                boolTokens: DynArray(Uint64),
                floatValues: DynArray("ModelFloatPropertyDataV25")
            },
            ModelFloatPropertyDataV25: {
                token: Uint64,
                value: Float32
            },
            ModelCloudDataV25: {
                clouds: DynArray("ModelParticleCloudV25"),
                emitters: DynArray("ModelParticleEmitterV25")
            },
            ModelParticleCloudV25: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV25: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV25"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV25"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV25"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV25: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV25: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV25: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV25: {
                streaks: DynArray("ModelStreakV25"),
                anchors: DynArray("ModelStreakAnchorV25")
            },
            ModelStreakV25: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV25: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV25: {
                effectLights: DynArray("ModelEffectLightV25")
            },
            ModelEffectLightV25: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV25: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV25"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV25"),
                lod1Constraints: DynArray("ModelClothConstraintV25"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV25: {
                weights: DynArray("ModelClothBoneWeightV25")
            },
            ModelClothBoneWeightV25: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV25: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV25"),
            meshes: RefArray("ModelMeshDataV25"),
            model: Pointer("ModelModelDataV25"),
            properties: Pointer("ModelPropertyDataV25"),
            cloudData: Pointer("ModelCloudDataV25"),
            obstacles: DynArray("ModelObstacleDataV25"),
            streakData: Pointer("ModelStreakDataV25"),
            lightData: Pointer("ModelLightDataV25"),
            clothData: DynArray("ModelClothDataV25"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V26 = {
        chunkName: "MODL",
        name: "ModelFileDataV26",
        version: 26,
        definitions: {
            ModelMaterialDataV26: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV26"),
                constants: DynArray("ModelConstantDataV26")
            },
            ModelTextureDataV26: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV26: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV26: {
                lods: DynArray("ModelMeshLodDataV26"),
                morphTargets: DynArray("ModelMeshMorphTargetV26"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32)
            },
            ModelMeshLodDataV26: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV26: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV26: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV26"),
                InitialPlacement: "ModelTransformDataV26",
                MeshBindings: DynArray("ModelMeshBindingDataV26"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV26"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV26: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV26"),
                LODType: Uint32
            },
            ModelBoneDataV26: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV26",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV26: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV26: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV26: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV26: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV26: {
                clouds: DynArray("ModelParticleCloudV26"),
                emitters: DynArray("ModelParticleEmitterV26")
            },
            ModelParticleCloudV26: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV26: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV26"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV26"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV26"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV26: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV26: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV26: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV26: {
                streaks: DynArray("ModelStreakV26"),
                anchors: DynArray("ModelStreakAnchorV26")
            },
            ModelStreakV26: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV26: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV26: {
                effectLights: DynArray("ModelEffectLightV26")
            },
            ModelEffectLightV26: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV26: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV26"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV26"),
                lod1Constraints: DynArray("ModelClothConstraintV26"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV26: {
                weights: DynArray("ModelClothBoneWeightV26")
            },
            ModelClothBoneWeightV26: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV26: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV26"),
            meshes: RefArray("ModelMeshDataV26"),
            model: Pointer("ModelModelDataV26"),
            properties: DynArray("ModelPropertyDataV26"),
            cloudData: Pointer("ModelCloudDataV26"),
            obstacles: DynArray("ModelObstacleDataV26"),
            streakData: Pointer("ModelStreakDataV26"),
            lightData: Pointer("ModelLightDataV26"),
            clothData: DynArray("ModelClothDataV26"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V27 = {
        chunkName: "MODL",
        name: "ModelFileDataV27",
        version: 27,
        definitions: {
            ModelMaterialDataV27: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV27"),
                constants: DynArray("ModelConstantDataV27")
            },
            ModelTextureDataV27: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV27: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV27: {
                lods: DynArray("ModelMeshLodDataV27"),
                morphTargets: DynArray("ModelMeshMorphTargetV27"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64
            },
            ModelMeshLodDataV27: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV27: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV27: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV27"),
                InitialPlacement: "ModelTransformDataV27",
                MeshBindings: DynArray("ModelMeshBindingDataV27"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV27"),
                skeletonHash: DynArray(Uint8)
            },
            ModelSkeletonDataV27: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV27"),
                LODType: Uint32
            },
            ModelBoneDataV27: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV27",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV27: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV27: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV27: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV27: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV27: {
                clouds: DynArray("ModelParticleCloudV27"),
                emitters: DynArray("ModelParticleEmitterV27")
            },
            ModelParticleCloudV27: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV27: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV27"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV27"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV27"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV27: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV27: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV27: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV27: {
                streaks: DynArray("ModelStreakV27"),
                anchors: DynArray("ModelStreakAnchorV27")
            },
            ModelStreakV27: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV27: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV27: {
                effectLights: DynArray("ModelEffectLightV27")
            },
            ModelEffectLightV27: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV27: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV27"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV27"),
                lod1Constraints: DynArray("ModelClothConstraintV27"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV27: {
                weights: DynArray("ModelClothBoneWeightV27")
            },
            ModelClothBoneWeightV27: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV27: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV27"),
            meshes: RefArray("ModelMeshDataV27"),
            model: Pointer("ModelModelDataV27"),
            properties: DynArray("ModelPropertyDataV27"),
            cloudData: Pointer("ModelCloudDataV27"),
            obstacles: DynArray("ModelObstacleDataV27"),
            streakData: Pointer("ModelStreakDataV27"),
            lightData: Pointer("ModelLightDataV27"),
            clothData: DynArray("ModelClothDataV27"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V28 = {
        chunkName: "MODL",
        name: "ModelFileDataV28",
        version: 28,
        definitions: {
            ModelMaterialDataV28: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV28"),
                constants: DynArray("ModelConstantDataV28")
            },
            ModelTextureDataV28: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint8,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV28: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMeshDataV28: {
                lods: DynArray("ModelMeshLodDataV28"),
                morphTargets: DynArray("ModelMeshMorphTargetV28"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV28: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV28: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV28: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV28"),
                InitialPlacement: "ModelTransformDataV28",
                MeshBindings: DynArray("ModelMeshBindingDataV28"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV28"),
                skeletonHash: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV28: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV28"),
                LODType: Uint32
            },
            ModelBoneDataV28: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV28",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV28: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV28: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV28: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV28: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV28: {
                clouds: DynArray("ModelParticleCloudV28"),
                emitters: DynArray("ModelParticleEmitterV28")
            },
            ModelParticleCloudV28: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV28: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV28"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV28"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV28"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV28: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV28: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV28: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV28: {
                streaks: DynArray("ModelStreakV28"),
                anchors: DynArray("ModelStreakAnchorV28")
            },
            ModelStreakV28: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV28: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV28: {
                effectLights: DynArray("ModelEffectLightV28")
            },
            ModelEffectLightV28: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV28: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV28"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV28"),
                lod1Constraints: DynArray("ModelClothConstraintV28"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV28: {
                weights: DynArray("ModelClothBoneWeightV28")
            },
            ModelClothBoneWeightV28: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV28: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV28"),
            meshes: RefArray("ModelMeshDataV28"),
            model: Pointer("ModelModelDataV28"),
            properties: DynArray("ModelPropertyDataV28"),
            cloudData: Pointer("ModelCloudDataV28"),
            obstacles: DynArray("ModelObstacleDataV28"),
            streakData: Pointer("ModelStreakDataV28"),
            lightData: Pointer("ModelLightDataV28"),
            clothData: DynArray("ModelClothDataV28"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V29 = {
        chunkName: "MODL",
        name: "ModelFileDataV29",
        version: 29,
        definitions: {
            ModelMaterialDataV29: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV29"),
                constants: DynArray("ModelConstantDataV29"),
                matConstLinks: DynArray("ModelMatConstLinkV29"),
                uvTransLinks: DynArray("ModelUVTransLinkV29")
            },
            ModelTextureDataV29: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV29: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV29: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV29: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV29: {
                lods: DynArray("ModelMeshLodDataV29"),
                morphTargets: DynArray("ModelMeshMorphTargetV29"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV29: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV29: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV29: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV29"),
                InitialPlacement: "ModelTransformDataV29",
                MeshBindings: DynArray("ModelMeshBindingDataV29"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV29"),
                skeletonHash: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV29: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV29"),
                LODType: Uint32
            },
            ModelBoneDataV29: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV29",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV29: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV29: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV29: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV29: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV29: {
                clouds: DynArray("ModelParticleCloudV29"),
                emitters: DynArray("ModelParticleEmitterV29")
            },
            ModelParticleCloudV29: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV29: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV29"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV29"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV29"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV29: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV29: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV29: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV29: {
                streaks: DynArray("ModelStreakV29"),
                anchors: DynArray("ModelStreakAnchorV29")
            },
            ModelStreakV29: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV29: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV29: {
                effectLights: DynArray("ModelEffectLightV29")
            },
            ModelEffectLightV29: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV29: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV29"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV29"),
                lod1Constraints: DynArray("ModelClothConstraintV29"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV29")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV29: {
                weights: DynArray("ModelClothBoneWeightV29")
            },
            ModelClothBoneWeightV29: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV29: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV29: {
                bone: Uint64,
                type: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV29"),
            meshes: RefArray("ModelMeshDataV29"),
            model: Pointer("ModelModelDataV29"),
            properties: DynArray("ModelPropertyDataV29"),
            cloudData: Pointer("ModelCloudDataV29"),
            obstacles: DynArray("ModelObstacleDataV29"),
            streakData: Pointer("ModelStreakDataV29"),
            lightData: Pointer("ModelLightDataV29"),
            clothData: DynArray("ModelClothDataV29"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V30 = {
        chunkName: "MODL",
        name: "ModelFileDataV30",
        version: 30,
        definitions: {
            ModelMaterialDataV30: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV30"),
                constants: DynArray("ModelConstantDataV30"),
                matConstLinks: DynArray("ModelMatConstLinkV30"),
                uvTransLinks: DynArray("ModelUVTransLinkV30")
            },
            ModelTextureDataV30: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV30: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV30: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV30: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV30: {
                lods: DynArray("ModelMeshLodDataV30"),
                morphTargets: DynArray("ModelMeshMorphTargetV30"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV30: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV30: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV30: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV30"),
                InitialPlacement: "ModelTransformDataV30",
                MeshBindings: DynArray("ModelMeshBindingDataV30"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV30"),
                skeletonHash: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV30: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV30"),
                LODType: Uint32
            },
            ModelBoneDataV30: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV30",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV30: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV30: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV30: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV30: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV30: {
                clouds: DynArray("ModelParticleCloudV30"),
                emitters: DynArray("ModelParticleEmitterV30")
            },
            ModelParticleCloudV30: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV30: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV30"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV30"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV30"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV30: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV30: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV30: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV30: {
                streaks: DynArray("ModelStreakV30"),
                anchors: DynArray("ModelStreakAnchorV30")
            },
            ModelStreakV30: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                stretchDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV30: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32
            },
            ModelLightDataV30: {
                effectLights: DynArray("ModelEffectLightV30")
            },
            ModelEffectLightV30: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV30: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV30"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV30"),
                lod1Constraints: DynArray("ModelClothConstraintV30"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV30")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV30: {
                weights: DynArray("ModelClothBoneWeightV30")
            },
            ModelClothBoneWeightV30: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV30: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV30: {
                bone: Uint64,
                type: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV30"),
            meshes: RefArray("ModelMeshDataV30"),
            model: Pointer("ModelModelDataV30"),
            properties: DynArray("ModelPropertyDataV30"),
            cloudData: Pointer("ModelCloudDataV30"),
            obstacles: DynArray("ModelObstacleDataV30"),
            streakData: Pointer("ModelStreakDataV30"),
            lightData: Pointer("ModelLightDataV30"),
            clothData: DynArray("ModelClothDataV30"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V31 = {
        chunkName: "MODL",
        name: "ModelFileDataV31",
        version: 31,
        definitions: {
            ModelMaterialDataV31: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV31"),
                constants: DynArray("ModelConstantDataV31"),
                matConstLinks: DynArray("ModelMatConstLinkV31"),
                uvTransLinks: DynArray("ModelUVTransLinkV31")
            },
            ModelTextureDataV31: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV31: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV31: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV31: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV31: {
                lods: DynArray("ModelMeshLodDataV31"),
                morphTargets: DynArray("ModelMeshMorphTargetV31"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV31: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV31: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV31: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV31"),
                InitialPlacement: "ModelTransformDataV31",
                MeshBindings: DynArray("ModelMeshBindingDataV31"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV31"),
                skeletonHash: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV31: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV31"),
                LODType: Uint32
            },
            ModelBoneDataV31: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV31",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV31: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV31: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV31: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV31: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV31: {
                clouds: DynArray("ModelParticleCloudV31"),
                emitters: DynArray("ModelParticleEmitterV31")
            },
            ModelParticleCloudV31: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV31: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV31"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV31"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV31"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV31: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV31: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV31: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV31: {
                streaks: DynArray("ModelStreakV31"),
                anchors: DynArray("ModelStreakAnchorV31")
            },
            ModelStreakV31: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV31: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV31: {
                effectLights: DynArray("ModelEffectLightV31")
            },
            ModelEffectLightV31: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV31: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV31"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV31"),
                lod1Constraints: DynArray("ModelClothConstraintV31"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV31")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV31: {
                weights: DynArray("ModelClothBoneWeightV31")
            },
            ModelClothBoneWeightV31: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV31: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV31: {
                bone: Uint64,
                type: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV31"),
            meshes: RefArray("ModelMeshDataV31"),
            model: Pointer("ModelModelDataV31"),
            properties: DynArray("ModelPropertyDataV31"),
            cloudData: Pointer("ModelCloudDataV31"),
            obstacles: DynArray("ModelObstacleDataV31"),
            streakData: Pointer("ModelStreakDataV31"),
            lightData: Pointer("ModelLightDataV31"),
            clothData: DynArray("ModelClothDataV31"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename()
        }
    };
    var V32 = {
        chunkName: "MODL",
        name: "ModelFileDataV32",
        version: 32,
        definitions: {
            ModelMaterialDataV32: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV32"),
                constants: DynArray("ModelConstantDataV32"),
                matConstLinks: DynArray("ModelMatConstLinkV32"),
                uvTransLinks: DynArray("ModelUVTransLinkV32")
            },
            ModelTextureDataV32: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV32: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV32: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV32: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV32: {
                lods: DynArray("ModelMeshLodDataV32"),
                morphTargets: DynArray("ModelMeshMorphTargetV32"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV32: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV32: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV32: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV32"),
                InitialPlacement: "ModelTransformDataV32",
                MeshBindings: DynArray("ModelMeshBindingDataV32"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV32"),
                skeletonHash: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV32: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV32"),
                LODType: Uint32
            },
            ModelBoneDataV32: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV32",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV32: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV32: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV32: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV32: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV32: {
                clouds: DynArray("ModelParticleCloudV32"),
                emitters: DynArray("ModelParticleEmitterV32")
            },
            ModelParticleCloudV32: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV32: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV32"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV32"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV32"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV32: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV32: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV32: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV32: {
                streaks: DynArray("ModelStreakV32"),
                anchors: DynArray("ModelStreakAnchorV32")
            },
            ModelStreakV32: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV32: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV32: {
                effectLights: DynArray("ModelEffectLightV32")
            },
            ModelEffectLightV32: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV32: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV32"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV32"),
                lod1Constraints: DynArray("ModelClothConstraintV32"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV32")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV32: {
                weights: DynArray("ModelClothBoneWeightV32")
            },
            ModelClothBoneWeightV32: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV32: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV32: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV32: {
                systems: DynArray("ModelLightningSystemV32"),
                bolts: DynArray("ModelLightningBoltV32"),
                nodes: DynArray("ModelLightningNodeV32")
            },
            ModelLightningSystemV32: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV32: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: Uint32,
                colorEnd: Uint32,
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV32: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                visBoneIndex: Uint32
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV32"),
            meshes: RefArray("ModelMeshDataV32"),
            model: Pointer("ModelModelDataV32"),
            properties: DynArray("ModelPropertyDataV32"),
            cloudData: Pointer("ModelCloudDataV32"),
            obstacles: DynArray("ModelObstacleDataV32"),
            streakData: Pointer("ModelStreakDataV32"),
            lightData: Pointer("ModelLightDataV32"),
            clothData: DynArray("ModelClothDataV32"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV32")
        }
    };
    var V33 = {
        chunkName: "MODL",
        name: "ModelFileDataV33",
        version: 33,
        definitions: {
            ModelMaterialDataV33: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV33"),
                constants: DynArray("ModelConstantDataV33"),
                matConstLinks: DynArray("ModelMatConstLinkV33"),
                uvTransLinks: DynArray("ModelUVTransLinkV33")
            },
            ModelTextureDataV33: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV33: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV33: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV33: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV33: {
                lods: DynArray("ModelMeshLodDataV33"),
                morphTargets: DynArray("ModelMeshMorphTargetV33"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                visBoneIndices: DynArray(Uint32),
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV33: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV33: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV33: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV33"),
                InitialPlacement: "ModelTransformDataV33",
                MeshBindings: DynArray("ModelMeshBindingDataV33"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV33"),
                skeletonHash: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV33: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV33"),
                LODType: Uint32
            },
            ModelBoneDataV33: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV33",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV33: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV33: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV33: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV33: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV33: {
                clouds: DynArray("ModelParticleCloudV33"),
                emitters: DynArray("ModelParticleEmitterV33")
            },
            ModelParticleCloudV33: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV33: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV33"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV33"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV33"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                visBoneIndex: Uint32,
                windInfluence: Uint8
            },
            ModelParticleCurveV33: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV33: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV33: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8,
                visBoneIndex: Uint32
            },
            ModelStreakDataV33: {
                streaks: DynArray("ModelStreakV33"),
                anchors: DynArray("ModelStreakAnchorV33")
            },
            ModelStreakV33: {
                acceleration: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                visBoneIndex: Uint32,
                wind: Float32
            },
            ModelStreakAnchorV33: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV33: {
                effectLights: DynArray("ModelEffectLightV33")
            },
            ModelEffectLightV33: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32,
                visBoneIndex: Uint32
            },
            ModelClothDataV33: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV33"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV33"),
                lod1Constraints: DynArray("ModelClothConstraintV33"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV33")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV33: {
                weights: DynArray("ModelClothBoneWeightV33")
            },
            ModelClothBoneWeightV33: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV33: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV33: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV33: {
                systems: DynArray("ModelLightningSystemV33"),
                bolts: DynArray("ModelLightningBoltV33"),
                nodes: DynArray("ModelLightningNodeV33")
            },
            ModelLightningSystemV33: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV33: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: Uint32,
                colorEnd: Uint32,
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV33: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                visBoneIndex: Uint32
            },
            ModelBoneConstraintV33: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Uint8,
                drag: Uint8,
                ellipseRatio: Float32,
                gravity: Uint8,
                collisionRadius: Float32,
                wind: Uint8,
                angle: FixedArray(Float32, 2),
                angleStrength: Uint8,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Uint8,
                distanceInnerType: Uint8,
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Uint8,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Uint8,
                twistType: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV33"),
            meshes: RefArray("ModelMeshDataV33"),
            model: Pointer("ModelModelDataV33"),
            properties: DynArray("ModelPropertyDataV33"),
            cloudData: Pointer("ModelCloudDataV33"),
            obstacles: DynArray("ModelObstacleDataV33"),
            streakData: Pointer("ModelStreakDataV33"),
            lightData: Pointer("ModelLightDataV33"),
            clothData: DynArray("ModelClothDataV33"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV33"),
            boneConstraints: DynArray("ModelBoneConstraintV33")
        }
    };
    var V34 = {
        chunkName: "MODL",
        name: "ModelFileDataV34",
        version: 34,
        definitions: {
            ModelMaterialDataV34: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV34"),
                constants: DynArray("ModelConstantDataV34"),
                matConstLinks: DynArray("ModelMatConstLinkV34"),
                uvTransLinks: DynArray("ModelUVTransLinkV34")
            },
            ModelTextureDataV34: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV34: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV34: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV34: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV34: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV34"),
                morphTargets: DynArray("ModelMeshMorphTargetV34"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV34: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV34: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV34: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV34"),
                InitialPlacement: "ModelTransformDataV34",
                MeshBindings: DynArray("ModelMeshBindingDataV34"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV34"),
                skeletonHash: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV34: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV34"),
                LODType: Uint32
            },
            ModelBoneDataV34: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV34",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV34: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV34: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV34: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV34: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV34: {
                clouds: DynArray("ModelParticleCloudV34"),
                emitters: DynArray("ModelParticleEmitterV34")
            },
            ModelParticleCloudV34: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV34: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV34"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV34"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV34"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV34: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV34: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV34: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV34: {
                streaks: DynArray("ModelStreakV34"),
                anchors: DynArray("ModelStreakAnchorV34")
            },
            ModelStreakV34: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV34: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV34: {
                effectLights: DynArray("ModelEffectLightV34")
            },
            ModelEffectLightV34: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV34: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV34"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV34"),
                lod1Constraints: DynArray("ModelClothConstraintV34"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV34")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV34: {
                weights: DynArray("ModelClothBoneWeightV34")
            },
            ModelClothBoneWeightV34: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV34: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV34: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV34: {
                systems: DynArray("ModelLightningSystemV34"),
                bolts: DynArray("ModelLightningBoltV34"),
                nodes: DynArray("ModelLightningNodeV34")
            },
            ModelLightningSystemV34: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV34: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: Uint32,
                colorEnd: Uint32,
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV34: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8
            },
            ModelBoneConstraintV34: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Uint8,
                drag: Uint8,
                ellipseRatio: Float32,
                gravity: Uint8,
                collisionRadius: Float32,
                wind: Uint8,
                angle: FixedArray(Float32, 2),
                angleStrength: Uint8,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Uint8,
                distanceInnerType: Uint8,
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Uint8,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Uint8,
                twistType: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV34"),
            meshes: RefArray("ModelMeshDataV34"),
            model: Pointer("ModelModelDataV34"),
            properties: DynArray("ModelPropertyDataV34"),
            cloudData: Pointer("ModelCloudDataV34"),
            obstacles: DynArray("ModelObstacleDataV34"),
            streakData: Pointer("ModelStreakDataV34"),
            lightData: Pointer("ModelLightDataV34"),
            clothData: DynArray("ModelClothDataV34"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV34"),
            boneConstraints: DynArray("ModelBoneConstraintV34")
        }
    };
    var V35 = {
        chunkName: "MODL",
        name: "ModelFileDataV35",
        version: 35,
        definitions: {
            ModelMaterialDataV35: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV35"),
                constants: DynArray("ModelConstantDataV35"),
                matConstLinks: DynArray("ModelMatConstLinkV35"),
                uvTransLinks: DynArray("ModelUVTransLinkV35")
            },
            ModelTextureDataV35: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV35: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV35: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV35: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV35: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV35"),
                morphTargets: DynArray("ModelMeshMorphTargetV35"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV35: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV35: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV35: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV35"),
                InitialPlacement: "ModelTransformDataV35",
                MeshBindings: DynArray("ModelMeshBindingDataV35"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV35"),
                skeletonHash: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV35: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV35"),
                LODType: Uint32
            },
            ModelBoneDataV35: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV35",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV35: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV35: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV35: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV35: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV35: {
                clouds: DynArray("ModelParticleCloudV35"),
                emitters: DynArray("ModelParticleEmitterV35")
            },
            ModelParticleCloudV35: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV35: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV35"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV35"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV35"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV35: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV35: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV35: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV35: {
                streaks: DynArray("ModelStreakV35"),
                anchors: DynArray("ModelStreakAnchorV35")
            },
            ModelStreakV35: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV35: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV35: {
                effectLights: DynArray("ModelEffectLightV35")
            },
            ModelEffectLightV35: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV35: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV35"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV35"),
                lod1Constraints: DynArray("ModelClothConstraintV35"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV35")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV35: {
                weights: DynArray("ModelClothBoneWeightV35")
            },
            ModelClothBoneWeightV35: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV35: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV35: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV35: {
                systems: DynArray("ModelLightningSystemV35"),
                bolts: DynArray("ModelLightningBoltV35"),
                nodes: DynArray("ModelLightningNodeV35")
            },
            ModelLightningSystemV35: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV35: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV35: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV35: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Uint8,
                drag: Uint8,
                ellipseRatio: Float32,
                gravity: Uint8,
                collisionRadius: Float32,
                wind: Uint8,
                angle: FixedArray(Float32, 2),
                angleStrength: Uint8,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Uint8,
                distanceInnerType: Uint8,
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Uint8,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Uint8,
                twistType: Uint8
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV35"),
            meshes: RefArray("ModelMeshDataV35"),
            model: Pointer("ModelModelDataV35"),
            properties: DynArray("ModelPropertyDataV35"),
            cloudData: Pointer("ModelCloudDataV35"),
            obstacles: DynArray("ModelObstacleDataV35"),
            streakData: Pointer("ModelStreakDataV35"),
            lightData: Pointer("ModelLightDataV35"),
            clothData: DynArray("ModelClothDataV35"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV35"),
            boneConstraints: DynArray("ModelBoneConstraintV35")
        }
    };
    var V36 = {
        chunkName: "MODL",
        name: "ModelFileDataV36",
        version: 36,
        definitions: {
            ModelMaterialDataV36: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV36"),
                constants: DynArray("ModelConstantDataV36"),
                matConstLinks: DynArray("ModelMatConstLinkV36"),
                uvTransLinks: DynArray("ModelUVTransLinkV36")
            },
            ModelTextureDataV36: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV36: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV36: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV36: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV36: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV36"),
                morphTargets: DynArray("ModelMeshMorphTargetV36"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV36: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV36: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV36: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV36"),
                InitialPlacement: "ModelTransformDataV36",
                MeshBindings: DynArray("ModelMeshBindingDataV36"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV36"),
                skeletonHash: DynArray(Uint8),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV36: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV36"),
                LODType: Uint32
            },
            ModelBoneDataV36: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV36",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV36: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV36: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV36: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV36: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV36: {
                clouds: DynArray("ModelParticleCloudV36"),
                emitters: DynArray("ModelParticleEmitterV36")
            },
            ModelParticleCloudV36: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV36: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV36"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV36"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV36"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV36: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV36: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV36: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV36: {
                streaks: DynArray("ModelStreakV36"),
                anchors: DynArray("ModelStreakAnchorV36")
            },
            ModelStreakV36: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV36: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV36: {
                effectLights: DynArray("ModelEffectLightV36")
            },
            ModelEffectLightV36: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV36: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV36"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV36"),
                lod1Constraints: DynArray("ModelClothConstraintV36"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV36")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV36: {
                weights: DynArray("ModelClothBoneWeightV36")
            },
            ModelClothBoneWeightV36: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV36: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV36: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV36: {
                systems: DynArray("ModelLightningSystemV36"),
                bolts: DynArray("ModelLightningBoltV36"),
                nodes: DynArray("ModelLightningNodeV36")
            },
            ModelLightningSystemV36: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV36: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV36: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV36: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV36"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV36: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV36"),
            meshes: RefArray("ModelMeshDataV36"),
            model: Pointer("ModelModelDataV36"),
            properties: DynArray("ModelPropertyDataV36"),
            cloudData: Pointer("ModelCloudDataV36"),
            obstacles: DynArray("ModelObstacleDataV36"),
            streakData: Pointer("ModelStreakDataV36"),
            lightData: Pointer("ModelLightDataV36"),
            clothData: DynArray("ModelClothDataV36"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV36"),
            boneConstraints: DynArray("ModelBoneConstraintV36")
        }
    };
    var V37 = {
        chunkName: "MODL",
        name: "ModelFileDataV37",
        version: 37,
        definitions: {
            ModelMaterialDataV37: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV37"),
                constants: DynArray("ModelConstantDataV37"),
                matConstLinks: DynArray("ModelMatConstLinkV37"),
                uvTransLinks: DynArray("ModelUVTransLinkV37")
            },
            ModelTextureDataV37: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV37: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV37: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV37: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV37: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV37"),
                morphTargets: DynArray("ModelMeshMorphTargetV37"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV37: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV37: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV37: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV37"),
                InitialPlacement: "ModelTransformDataV37",
                MeshBindings: DynArray("ModelMeshBindingDataV37"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV37"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV37: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV37"),
                LODType: Uint32
            },
            ModelBoneDataV37: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV37",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV37: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV37: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV37: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV37: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV37: {
                clouds: DynArray("ModelParticleCloudV37"),
                emitters: DynArray("ModelParticleEmitterV37")
            },
            ModelParticleCloudV37: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV37: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV37"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV37"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV37"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV37: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV37: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV37: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV37: {
                streaks: DynArray("ModelStreakV37"),
                anchors: DynArray("ModelStreakAnchorV37")
            },
            ModelStreakV37: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV37: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV37: {
                effectLights: DynArray("ModelEffectLightV37")
            },
            ModelEffectLightV37: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV37: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV37"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV37"),
                lod1Constraints: DynArray("ModelClothConstraintV37"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV37")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV37: {
                weights: DynArray("ModelClothBoneWeightV37")
            },
            ModelClothBoneWeightV37: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV37: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV37: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV37: {
                systems: DynArray("ModelLightningSystemV37"),
                bolts: DynArray("ModelLightningBoltV37"),
                nodes: DynArray("ModelLightningNodeV37")
            },
            ModelLightningSystemV37: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV37: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV37: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV37: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV37"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV37: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV37"),
            meshes: RefArray("ModelMeshDataV37"),
            model: Pointer("ModelModelDataV37"),
            properties: DynArray("ModelPropertyDataV37"),
            cloudData: Pointer("ModelCloudDataV37"),
            obstacles: DynArray("ModelObstacleDataV37"),
            streakData: Pointer("ModelStreakDataV37"),
            lightData: Pointer("ModelLightDataV37"),
            clothData: DynArray("ModelClothDataV37"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV37"),
            boneConstraints: DynArray("ModelBoneConstraintV37")
        }
    };
    var V38 = {
        chunkName: "MODL",
        name: "ModelFileDataV38",
        version: 38,
        definitions: {
            ModelMaterialDataV38: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV38"),
                constants: DynArray("ModelConstantDataV38"),
                matConstLinks: DynArray("ModelMatConstLinkV38"),
                uvTransLinks: DynArray("ModelUVTransLinkV38")
            },
            ModelTextureDataV38: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV38: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV38: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV38: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV38: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV38"),
                morphTargets: DynArray("ModelMeshMorphTargetV38"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV38: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV38: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV38: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV38"),
                InitialPlacement: "ModelTransformDataV38",
                MeshBindings: DynArray("ModelMeshBindingDataV38"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV38"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV38: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV38"),
                LODType: Uint32
            },
            ModelBoneDataV38: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV38",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV38: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV38: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV38: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV38: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV38: {
                clouds: DynArray("ModelParticleCloudV38"),
                emitters: DynArray("ModelParticleEmitterV38")
            },
            ModelParticleCloudV38: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV38: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV38"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV38"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV38"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV38: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV38: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV38: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV38: {
                streaks: DynArray("ModelStreakV38"),
                anchors: DynArray("ModelStreakAnchorV38")
            },
            ModelStreakV38: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV38: {
                bone: Uint64,
                color: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV38: {
                effectLights: DynArray("ModelEffectLightV38")
            },
            ModelEffectLightV38: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV38: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV38"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV38"),
                lod1Constraints: DynArray("ModelClothConstraintV38"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV38")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV38: {
                weights: DynArray("ModelClothBoneWeightV38")
            },
            ModelClothBoneWeightV38: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV38: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV38: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV38: {
                systems: DynArray("ModelLightningSystemV38"),
                bolts: DynArray("ModelLightningBoltV38"),
                nodes: DynArray("ModelLightningNodeV38")
            },
            ModelLightningSystemV38: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV38: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV38: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV38: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV38"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV38: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV38"),
            meshes: RefArray("ModelMeshDataV38"),
            model: Pointer("ModelModelDataV38"),
            properties: DynArray("ModelPropertyDataV38"),
            cloudData: Pointer("ModelCloudDataV38"),
            obstacles: DynArray("ModelObstacleDataV38"),
            streakData: Pointer("ModelStreakDataV38"),
            lightData: Pointer("ModelLightDataV38"),
            clothData: DynArray("ModelClothDataV38"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV38"),
            boneConstraints: DynArray("ModelBoneConstraintV38")
        }
    };
    var V39 = {
        chunkName: "MODL",
        name: "ModelFileDataV39",
        version: 39,
        definitions: {
            ModelMaterialDataV39: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV39"),
                constants: DynArray("ModelConstantDataV39"),
                matConstLinks: DynArray("ModelMatConstLinkV39"),
                uvTransLinks: DynArray("ModelUVTransLinkV39")
            },
            ModelTextureDataV39: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV39: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV39: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV39: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV39: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV39"),
                morphTargets: DynArray("ModelMeshMorphTargetV39"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV39: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV39: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV39: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV39"),
                InitialPlacement: "ModelTransformDataV39",
                MeshBindings: DynArray("ModelMeshBindingDataV39"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV39"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV39: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV39"),
                LODType: Uint32
            },
            ModelBoneDataV39: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV39",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV39: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV39: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV39: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV39: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV39: {
                clouds: DynArray("ModelParticleCloudV39"),
                emitters: DynArray("ModelParticleEmitterV39")
            },
            ModelParticleCloudV39: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV39: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                opacityCurve: Pointer("ModelParticleCurveV39"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV39"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV39"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV39: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV39: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV39: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV39: {
                streaks: DynArray("ModelStreakV39"),
                anchors: DynArray("ModelStreakAnchorV39")
            },
            ModelStreakV39: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV39: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV39: {
                effectLights: DynArray("ModelEffectLightV39")
            },
            ModelEffectLightV39: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV39: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV39"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV39"),
                lod1Constraints: DynArray("ModelClothConstraintV39"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV39")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV39: {
                weights: DynArray("ModelClothBoneWeightV39")
            },
            ModelClothBoneWeightV39: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV39: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV39: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV39: {
                systems: DynArray("ModelLightningSystemV39"),
                bolts: DynArray("ModelLightningBoltV39"),
                nodes: DynArray("ModelLightningNodeV39")
            },
            ModelLightningSystemV39: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV39: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV39: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV39: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV39"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV39: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV39"),
            meshes: RefArray("ModelMeshDataV39"),
            model: Pointer("ModelModelDataV39"),
            properties: DynArray("ModelPropertyDataV39"),
            cloudData: Pointer("ModelCloudDataV39"),
            obstacles: DynArray("ModelObstacleDataV39"),
            streakData: Pointer("ModelStreakDataV39"),
            lightData: Pointer("ModelLightDataV39"),
            clothData: DynArray("ModelClothDataV39"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV39"),
            boneConstraints: DynArray("ModelBoneConstraintV39")
        }
    };
    var V40 = {
        chunkName: "MODL",
        name: "ModelFileDataV40",
        version: 40,
        definitions: {
            ModelMaterialDataV40: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV40"),
                constants: DynArray("ModelConstantDataV40"),
                matConstLinks: DynArray("ModelMatConstLinkV40"),
                uvTransLinks: DynArray("ModelUVTransLinkV40")
            },
            ModelTextureDataV40: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV40: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV40: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV40: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV40: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV40"),
                morphTargets: DynArray("ModelMeshMorphTargetV40"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV40: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV40: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV40: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV40"),
                InitialPlacement: "ModelTransformDataV40",
                MeshBindings: DynArray("ModelMeshBindingDataV40"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV40"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV40: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV40"),
                LODType: Uint32
            },
            ModelBoneDataV40: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV40",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV40: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV40: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV40: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV40: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV40: {
                clouds: DynArray("ModelParticleCloudV40"),
                emitters: DynArray("ModelParticleEmitterV40")
            },
            ModelParticleCloudV40: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV40: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV40"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV40"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV40"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV40: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV40: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV40: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV40: {
                streaks: DynArray("ModelStreakV40"),
                anchors: DynArray("ModelStreakAnchorV40")
            },
            ModelStreakV40: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV40: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV40: {
                effectLights: DynArray("ModelEffectLightV40")
            },
            ModelEffectLightV40: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV40: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV40"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV40"),
                lod1Constraints: DynArray("ModelClothConstraintV40"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV40")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV40: {
                weights: DynArray("ModelClothBoneWeightV40")
            },
            ModelClothBoneWeightV40: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV40: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV40: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV40: {
                systems: DynArray("ModelLightningSystemV40"),
                bolts: DynArray("ModelLightningBoltV40"),
                nodes: DynArray("ModelLightningNodeV40")
            },
            ModelLightningSystemV40: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV40: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV40: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV40: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV40"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV40: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV40"),
            meshes: RefArray("ModelMeshDataV40"),
            model: Pointer("ModelModelDataV40"),
            properties: DynArray("ModelPropertyDataV40"),
            cloudData: Pointer("ModelCloudDataV40"),
            obstacles: DynArray("ModelObstacleDataV40"),
            streakData: Pointer("ModelStreakDataV40"),
            lightData: Pointer("ModelLightDataV40"),
            clothData: DynArray("ModelClothDataV40"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV40"),
            boneConstraints: DynArray("ModelBoneConstraintV40")
        }
    };
    var V41 = {
        chunkName: "MODL",
        name: "ModelFileDataV41",
        version: 41,
        definitions: {
            ModelMaterialDataV41: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV41"),
                constants: DynArray("ModelConstantDataV41"),
                matConstLinks: DynArray("ModelMatConstLinkV41"),
                uvTransLinks: DynArray("ModelUVTransLinkV41")
            },
            ModelTextureDataV41: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV41: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV41: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV41: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV41: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV41"),
                morphTargets: DynArray("ModelMeshMorphTargetV41"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV41: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV41: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV41: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV41"),
                InitialPlacement: "ModelTransformDataV41",
                MeshBindings: DynArray("ModelMeshBindingDataV41"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV41"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV41: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV41"),
                LODType: Uint32
            },
            ModelBoneDataV41: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV41",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV41: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV41: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV41: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV41: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV41: {
                clouds: DynArray("ModelParticleCloudV41"),
                emitters: DynArray("ModelParticleEmitterV41")
            },
            ModelParticleCloudV41: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV41: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV41"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV41"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV41"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV41: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV41: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV41: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV41: {
                streaks: DynArray("ModelStreakV41"),
                anchors: DynArray("ModelStreakAnchorV41")
            },
            ModelStreakV41: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV41: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV41: {
                effectLights: DynArray("ModelEffectLightV41")
            },
            ModelEffectLightV41: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV41: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV41"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV41"),
                lod1Constraints: DynArray("ModelClothConstraintV41"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV41")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV41: {
                weights: DynArray("ModelClothBoneWeightV41")
            },
            ModelClothBoneWeightV41: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV41: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV41: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV41: {
                systems: DynArray("ModelLightningSystemV41"),
                bolts: DynArray("ModelLightningBoltV41"),
                nodes: DynArray("ModelLightningNodeV41")
            },
            ModelLightningSystemV41: {
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV41: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV41: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV41: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV41"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV41: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV41: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV41"),
            meshes: RefArray("ModelMeshDataV41"),
            model: Pointer("ModelModelDataV41"),
            properties: DynArray("ModelPropertyDataV41"),
            cloudData: Pointer("ModelCloudDataV41"),
            obstacles: DynArray("ModelObstacleDataV41"),
            streakData: Pointer("ModelStreakDataV41"),
            lightData: Pointer("ModelLightDataV41"),
            clothData: DynArray("ModelClothDataV41"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV41"),
            boneConstraints: DynArray("ModelBoneConstraintV41"),
            softBodyData: DynArray("ModelSoftBodyDataV41")
        }
    };
    var V42 = {
        chunkName: "MODL",
        name: "ModelFileDataV42",
        version: 42,
        definitions: {
            ModelMaterialDataV42: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV42"),
                constants: DynArray("ModelConstantDataV42"),
                matConstLinks: DynArray("ModelMatConstLinkV42"),
                uvTransLinks: DynArray("ModelUVTransLinkV42")
            },
            ModelTextureDataV42: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV42: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV42: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV42: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV42: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV42"),
                morphTargets: DynArray("ModelMeshMorphTargetV42"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV42: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV42: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV42: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV42"),
                InitialPlacement: "ModelTransformDataV42",
                MeshBindings: DynArray("ModelMeshBindingDataV42"),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV42"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV42: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV42"),
                LODType: Uint32
            },
            ModelBoneDataV42: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV42",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV42: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV42: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV42: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV42: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV42: {
                clouds: DynArray("ModelParticleCloudV42"),
                emitters: DynArray("ModelParticleEmitterV42")
            },
            ModelParticleCloudV42: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV42: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV42"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV42"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV42"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV42: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV42: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV42: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV42: {
                streaks: DynArray("ModelStreakV42"),
                anchors: DynArray("ModelStreakAnchorV42")
            },
            ModelStreakV42: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV42: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV42: {
                effectLights: DynArray("ModelEffectLightV42")
            },
            ModelEffectLightV42: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV42: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV42"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV42"),
                lod1Constraints: DynArray("ModelClothConstraintV42"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV42")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV42: {
                weights: DynArray("ModelClothBoneWeightV42")
            },
            ModelClothBoneWeightV42: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV42: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV42: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV42: {
                systems: DynArray("ModelLightningSystemV42"),
                bolts: DynArray("ModelLightningBoltV42"),
                nodes: DynArray("ModelLightningNodeV42")
            },
            ModelLightningSystemV42: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV42: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV42: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV42: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV42"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV42: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV42: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV42"),
            meshes: RefArray("ModelMeshDataV42"),
            model: Pointer("ModelModelDataV42"),
            properties: DynArray("ModelPropertyDataV42"),
            cloudData: Pointer("ModelCloudDataV42"),
            obstacles: DynArray("ModelObstacleDataV42"),
            streakData: Pointer("ModelStreakDataV42"),
            lightData: Pointer("ModelLightDataV42"),
            clothData: DynArray("ModelClothDataV42"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV42"),
            boneConstraints: DynArray("ModelBoneConstraintV42"),
            softBodyData: DynArray("ModelSoftBodyDataV42")
        }
    };
    var V43 = {
        chunkName: "MODL",
        name: "ModelFileDataV43",
        version: 43,
        definitions: {
            ModelMaterialDataV43: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV43"),
                constants: DynArray("ModelConstantDataV43"),
                matConstLinks: DynArray("ModelMatConstLinkV43"),
                uvTransLinks: DynArray("ModelUVTransLinkV43")
            },
            ModelTextureDataV43: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV43: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV43: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV43: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV43: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV43"),
                morphTargets: DynArray("ModelMeshMorphTargetV43"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV43: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV43: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV43: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV43"),
                InitialPlacement: "ModelTransformDataV43",
                MeshBindings: DynArray("ModelMeshBindingDataV43"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV43"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV43: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV43"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV43: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV43",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV43: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV43: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV43: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV43: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV43: {
                clouds: DynArray("ModelParticleCloudV43"),
                emitters: DynArray("ModelParticleEmitterV43")
            },
            ModelParticleCloudV43: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV43: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV43"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV43"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV43"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV43: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV43: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV43: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV43: {
                streaks: DynArray("ModelStreakV43"),
                anchors: DynArray("ModelStreakAnchorV43")
            },
            ModelStreakV43: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV43: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV43: {
                effectLights: DynArray("ModelEffectLightV43")
            },
            ModelEffectLightV43: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV43: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV43"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV43"),
                lod1Constraints: DynArray("ModelClothConstraintV43"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV43")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV43: {
                weights: DynArray("ModelClothBoneWeightV43")
            },
            ModelClothBoneWeightV43: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV43: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV43: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV43: {
                systems: DynArray("ModelLightningSystemV43"),
                bolts: DynArray("ModelLightningBoltV43"),
                nodes: DynArray("ModelLightningNodeV43")
            },
            ModelLightningSystemV43: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV43: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV43: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV43: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV43"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV43: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV43: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV43"),
            meshes: RefArray("ModelMeshDataV43"),
            model: Pointer("ModelModelDataV43"),
            properties: DynArray("ModelPropertyDataV43"),
            cloudData: Pointer("ModelCloudDataV43"),
            obstacles: DynArray("ModelObstacleDataV43"),
            streakData: Pointer("ModelStreakDataV43"),
            lightData: Pointer("ModelLightDataV43"),
            clothData: DynArray("ModelClothDataV43"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV43"),
            boneConstraints: DynArray("ModelBoneConstraintV43"),
            softBodyData: DynArray("ModelSoftBodyDataV43")
        }
    };
    var V44 = {
        chunkName: "MODL",
        name: "ModelFileDataV44",
        version: 44,
        definitions: {
            ModelMaterialDataV44: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV44"),
                constants: DynArray("ModelConstantDataV44"),
                matConstLinks: DynArray("ModelMatConstLinkV44"),
                uvTransLinks: DynArray("ModelUVTransLinkV44")
            },
            ModelTextureDataV44: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV44: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV44: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV44: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMeshDataV44: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV44"),
                morphTargets: DynArray("ModelMeshMorphTargetV44"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV44: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV44: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV44: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV44"),
                InitialPlacement: "ModelTransformDataV44",
                MeshBindings: DynArray("ModelMeshBindingDataV44"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV44"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV44: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV44"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV44: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV44",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV44: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV44: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV44: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV44: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV44: {
                clouds: DynArray("ModelParticleCloudV44"),
                emitters: DynArray("ModelParticleEmitterV44")
            },
            ModelParticleCloudV44: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV44: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV44"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV44"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV44"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV44: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV44: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV44: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV44: {
                streaks: DynArray("ModelStreakV44"),
                anchors: DynArray("ModelStreakAnchorV44")
            },
            ModelStreakV44: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV44: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV44: {
                effectLights: DynArray("ModelEffectLightV44")
            },
            ModelEffectLightV44: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV44: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV44"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV44"),
                lod1Constraints: DynArray("ModelClothConstraintV44"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV44")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV44: {
                weights: DynArray("ModelClothBoneWeightV44")
            },
            ModelClothBoneWeightV44: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV44: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV44: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV44: {
                systems: DynArray("ModelLightningSystemV44"),
                bolts: DynArray("ModelLightningBoltV44"),
                nodes: DynArray("ModelLightningNodeV44")
            },
            ModelLightningSystemV44: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV44: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV44: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV44: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV44"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV44: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV44: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV44"),
            meshes: RefArray("ModelMeshDataV44"),
            model: Pointer("ModelModelDataV44"),
            properties: DynArray("ModelPropertyDataV44"),
            cloudData: Pointer("ModelCloudDataV44"),
            obstacles: DynArray("ModelObstacleDataV44"),
            streakData: Pointer("ModelStreakDataV44"),
            lightData: Pointer("ModelLightDataV44"),
            clothData: DynArray("ModelClothDataV44"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV44"),
            boneConstraints: DynArray("ModelBoneConstraintV44"),
            softBodyData: DynArray("ModelSoftBodyDataV44")
        }
    };
    var V45 = {
        chunkName: "MODL",
        name: "ModelFileDataV45",
        version: 45,
        definitions: {
            ModelMaterialDataV45: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV45"),
                constants: DynArray("ModelConstantDataV45"),
                matConstLinks: DynArray("ModelMatConstLinkV45"),
                uvTransLinks: DynArray("ModelUVTransLinkV45"),
                texTransforms: DynArray("ModelMaterialTexTransformV45")
            },
            ModelTextureDataV45: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV45: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV45: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV45: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV45: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV45: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV45"),
                morphTargets: DynArray("ModelMeshMorphTargetV45"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV45: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV45: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV45: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV45"),
                InitialPlacement: "ModelTransformDataV45",
                MeshBindings: DynArray("ModelMeshBindingDataV45"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV45"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV45: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV45"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV45: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV45",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV45: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV45: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV45: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV45: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV45: {
                clouds: DynArray("ModelParticleCloudV45"),
                emitters: DynArray("ModelParticleEmitterV45")
            },
            ModelParticleCloudV45: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV45: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV45"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV45"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV45"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV45: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV45: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV45: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV45: {
                streaks: DynArray("ModelStreakV45"),
                anchors: DynArray("ModelStreakAnchorV45")
            },
            ModelStreakV45: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV45: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV45: {
                effectLights: DynArray("ModelEffectLightV45")
            },
            ModelEffectLightV45: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV45: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV45"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV45"),
                lod1Constraints: DynArray("ModelClothConstraintV45"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV45")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV45: {
                weights: DynArray("ModelClothBoneWeightV45")
            },
            ModelClothBoneWeightV45: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV45: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV45: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV45: {
                systems: DynArray("ModelLightningSystemV45"),
                bolts: DynArray("ModelLightningBoltV45"),
                nodes: DynArray("ModelLightningNodeV45")
            },
            ModelLightningSystemV45: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV45: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV45: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV45: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV45"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV45: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV45: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV45"),
            meshes: RefArray("ModelMeshDataV45"),
            model: Pointer("ModelModelDataV45"),
            properties: DynArray("ModelPropertyDataV45"),
            cloudData: Pointer("ModelCloudDataV45"),
            obstacles: DynArray("ModelObstacleDataV45"),
            streakData: Pointer("ModelStreakDataV45"),
            lightData: Pointer("ModelLightDataV45"),
            clothData: DynArray("ModelClothDataV45"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV45"),
            boneConstraints: DynArray("ModelBoneConstraintV45"),
            softBodyData: DynArray("ModelSoftBodyDataV45")
        }
    };
    var V46 = {
        chunkName: "MODL",
        name: "ModelFileDataV46",
        version: 46,
        definitions: {
            ModelMaterialDataV46: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV46"),
                constants: DynArray("ModelConstantDataV46"),
                matConstLinks: DynArray("ModelMatConstLinkV46"),
                uvTransLinks: DynArray("ModelUVTransLinkV46"),
                texTransforms: DynArray("ModelMaterialTexTransformV46")
            },
            ModelTextureDataV46: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV46: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV46: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV46: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV46: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV46: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV46"),
                morphTargets: DynArray("ModelMeshMorphTargetV46"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV46: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV46: {
                positionIndices: DynArray(Uint16),
                positions: DynArray(FixedArray(Float32, 3)),
                normalIndices: DynArray(Uint16),
                normals: DynArray(FixedArray(Float32, 3)),
                meshName: RefString()
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV46: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV46"),
                InitialPlacement: "ModelTransformDataV46",
                MeshBindings: DynArray("ModelMeshBindingDataV46"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV46"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV46: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV46"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV46: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV46",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV46: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV46: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV46: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV46: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV46: {
                clouds: DynArray("ModelParticleCloudV46"),
                emitters: DynArray("ModelParticleEmitterV46")
            },
            ModelParticleCloudV46: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV46: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV46"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV46"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV46"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV46: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV46: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV46: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV46: {
                streaks: DynArray("ModelStreakV46"),
                anchors: DynArray("ModelStreakAnchorV46")
            },
            ModelStreakV46: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV46: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV46: {
                effectLights: DynArray("ModelEffectLightV46")
            },
            ModelEffectLightV46: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV46: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV46"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV46"),
                lod1Constraints: DynArray("ModelClothConstraintV46"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV46")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV46: {
                weights: DynArray("ModelClothBoneWeightV46")
            },
            ModelClothBoneWeightV46: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV46: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV46: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV46: {
                systems: DynArray("ModelLightningSystemV46"),
                bolts: DynArray("ModelLightningBoltV46"),
                nodes: DynArray("ModelLightningNodeV46")
            },
            ModelLightningSystemV46: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV46: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV46: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV46: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV46"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV46: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV46: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV46"),
            meshes: RefArray("ModelMeshDataV46"),
            model: Pointer("ModelModelDataV46"),
            properties: DynArray("ModelPropertyDataV46"),
            cloudData: Pointer("ModelCloudDataV46"),
            obstacles: DynArray("ModelObstacleDataV46"),
            streakData: Pointer("ModelStreakDataV46"),
            lightData: Pointer("ModelLightDataV46"),
            clothData: DynArray("ModelClothDataV46"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV46"),
            boneConstraints: DynArray("ModelBoneConstraintV46"),
            softBodyData: DynArray("ModelSoftBodyDataV46")
        }
    };
    var V47 = {
        chunkName: "MODL",
        name: "ModelFileDataV47",
        version: 47,
        definitions: {
            ModelMaterialDataV47: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV47"),
                constants: DynArray("ModelConstantDataV47"),
                matConstLinks: DynArray("ModelMatConstLinkV47"),
                uvTransLinks: DynArray("ModelUVTransLinkV47"),
                texTransforms: DynArray("ModelMaterialTexTransformV47")
            },
            ModelTextureDataV47: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV47: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV47: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV47: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV47: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV47: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV47"),
                morphTargets: DynArray("ModelMeshMorphTargetV47"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3)
            },
            ModelMeshLodDataV47: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV47: {
                positions: DynArray("ModelMeshMorphVertV47"),
                normals: DynArray("ModelMeshMorphVertV47"),
                mesh: Uint64
            },
            ModelMeshMorphVertV47: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            ModelModelDataV47: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV47"),
                InitialPlacement: "ModelTransformDataV47",
                MeshBindings: DynArray("ModelMeshBindingDataV47"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV47"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV47: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV47"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV47: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV47",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV47: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV47: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV47: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV47: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV47: {
                clouds: DynArray("ModelParticleCloudV47"),
                emitters: DynArray("ModelParticleEmitterV47")
            },
            ModelParticleCloudV47: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV47: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV47"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV47"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV47"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV47: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV47: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV47: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV47: {
                streaks: DynArray("ModelStreakV47"),
                anchors: DynArray("ModelStreakAnchorV47")
            },
            ModelStreakV47: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV47: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV47: {
                effectLights: DynArray("ModelEffectLightV47")
            },
            ModelEffectLightV47: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV47: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV47"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV47"),
                lod1Constraints: DynArray("ModelClothConstraintV47"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV47")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV47: {
                weights: DynArray("ModelClothBoneWeightV47")
            },
            ModelClothBoneWeightV47: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV47: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV47: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV47: {
                systems: DynArray("ModelLightningSystemV47"),
                bolts: DynArray("ModelLightningBoltV47"),
                nodes: DynArray("ModelLightningNodeV47")
            },
            ModelLightningSystemV47: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV47: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV47: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV47: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV47"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV47: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV47: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV47"),
            meshes: RefArray("ModelMeshDataV47"),
            model: Pointer("ModelModelDataV47"),
            properties: DynArray("ModelPropertyDataV47"),
            cloudData: Pointer("ModelCloudDataV47"),
            obstacles: DynArray("ModelObstacleDataV47"),
            streakData: Pointer("ModelStreakDataV47"),
            lightData: Pointer("ModelLightDataV47"),
            clothData: DynArray("ModelClothDataV47"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV47"),
            boneConstraints: DynArray("ModelBoneConstraintV47"),
            softBodyData: DynArray("ModelSoftBodyDataV47")
        }
    };
    var V48 = {
        chunkName: "MODL",
        name: "ModelFileDataV48",
        version: 48,
        definitions: {
            ModelMaterialDataV48: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV48"),
                constants: DynArray("ModelConstantDataV48"),
                matConstLinks: DynArray("ModelMatConstLinkV48"),
                uvTransLinks: DynArray("ModelUVTransLinkV48"),
                texTransforms: DynArray("ModelMaterialTexTransformV48")
            },
            ModelTextureDataV48: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV48: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV48: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV48: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV48: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV48: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV48"),
                morphTargets: DynArray("ModelMeshMorphTargetV48"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData")
            },
            ModelMeshLodDataV48: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV48: {
                positions: DynArray("ModelMeshMorphVertV48"),
                normals: DynArray("ModelMeshMorphVertV48"),
                mesh: Uint64
            },
            ModelMeshMorphVertV48: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV48: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV48"),
                InitialPlacement: "ModelTransformDataV48",
                MeshBindings: DynArray("ModelMeshBindingDataV48"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV48"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV48: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV48"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV48: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV48",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV48: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV48: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV48: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV48: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV48: {
                clouds: DynArray("ModelParticleCloudV48"),
                emitters: DynArray("ModelParticleEmitterV48")
            },
            ModelParticleCloudV48: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV48: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV48"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV48"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV48"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV48: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV48: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV48: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV48: {
                streaks: DynArray("ModelStreakV48"),
                anchors: DynArray("ModelStreakAnchorV48")
            },
            ModelStreakV48: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV48: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV48: {
                effectLights: DynArray("ModelEffectLightV48")
            },
            ModelEffectLightV48: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV48: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV48"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV48"),
                lod1Constraints: DynArray("ModelClothConstraintV48"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV48")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV48: {
                weights: DynArray("ModelClothBoneWeightV48")
            },
            ModelClothBoneWeightV48: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV48: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV48: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV48: {
                systems: DynArray("ModelLightningSystemV48"),
                bolts: DynArray("ModelLightningBoltV48"),
                nodes: DynArray("ModelLightningNodeV48")
            },
            ModelLightningSystemV48: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV48: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV48: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV48: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV48"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV48: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV48: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV48"),
            meshes: RefArray("ModelMeshDataV48"),
            model: Pointer("ModelModelDataV48"),
            properties: DynArray("ModelPropertyDataV48"),
            cloudData: Pointer("ModelCloudDataV48"),
            obstacles: DynArray("ModelObstacleDataV48"),
            streakData: Pointer("ModelStreakDataV48"),
            lightData: Pointer("ModelLightDataV48"),
            clothData: DynArray("ModelClothDataV48"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV48"),
            boneConstraints: DynArray("ModelBoneConstraintV48"),
            softBodyData: DynArray("ModelSoftBodyDataV48")
        }
    };
    var V49 = {
        chunkName: "MODL",
        name: "ModelFileDataV49",
        version: 49,
        definitions: {
            ModelMaterialDataV49: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV49"),
                constants: DynArray("ModelConstantDataV49"),
                matConstLinks: DynArray("ModelMatConstLinkV49"),
                uvTransLinks: DynArray("ModelUVTransLinkV49"),
                texTransforms: DynArray("ModelMaterialTexTransformV49")
            },
            ModelTextureDataV49: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV49: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV49: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV49: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV49: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV49: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV49"),
                morphTargets: DynArray("ModelMeshMorphTargetV49"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData")
            },
            ModelMeshLodDataV49: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV49: {
                positions: DynArray("ModelMeshMorphVertV49"),
                normals: DynArray("ModelMeshMorphVertV49"),
                mesh: Uint64
            },
            ModelMeshMorphVertV49: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV49: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV49"),
                InitialPlacement: "ModelTransformDataV49",
                MeshBindings: DynArray("ModelMeshBindingDataV49"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV49"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV49: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV49"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV49: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV49",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV49: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV49: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV49: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV49: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV49: {
                clouds: DynArray("ModelParticleCloudV49"),
                emitters: DynArray("ModelParticleEmitterV49")
            },
            ModelParticleCloudV49: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV49: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV49"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV49"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV49"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV49: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV49: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV49: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV49: {
                streaks: DynArray("ModelStreakV49"),
                anchors: DynArray("ModelStreakAnchorV49")
            },
            ModelStreakV49: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV49: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV49: {
                effectLights: DynArray("ModelEffectLightV49")
            },
            ModelEffectLightV49: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV49: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV49"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV49"),
                lod1Constraints: DynArray("ModelClothConstraintV49"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV49")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV49: {
                weights: DynArray("ModelClothBoneWeightV49")
            },
            ModelClothBoneWeightV49: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV49: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV49: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV49: {
                systems: DynArray("ModelLightningSystemV49"),
                bolts: DynArray("ModelLightningBoltV49"),
                nodes: DynArray("ModelLightningNodeV49")
            },
            ModelLightningSystemV49: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV49: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV49: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV49: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV49"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV49: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV49: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV49: {
                bone: Uint64,
                offset: FixedArray(Float32, 3)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV49"),
            meshes: RefArray("ModelMeshDataV49"),
            model: Pointer("ModelModelDataV49"),
            properties: DynArray("ModelPropertyDataV49"),
            cloudData: Pointer("ModelCloudDataV49"),
            obstacles: DynArray("ModelObstacleDataV49"),
            streakData: Pointer("ModelStreakDataV49"),
            lightData: Pointer("ModelLightDataV49"),
            clothData: DynArray("ModelClothDataV49"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV49"),
            boneConstraints: DynArray("ModelBoneConstraintV49"),
            softBodyData: DynArray("ModelSoftBodyDataV49"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV49")
        }
    };
    var V50 = {
        chunkName: "MODL",
        name: "ModelFileDataV50",
        version: 50,
        definitions: {
            ModelMaterialDataV50: {
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV50"),
                constants: DynArray("ModelConstantDataV50"),
                matConstLinks: DynArray("ModelMatConstLinkV50"),
                uvTransLinks: DynArray("ModelUVTransLinkV50"),
                texTransforms: DynArray("ModelMaterialTexTransformV50")
            },
            ModelTextureDataV50: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV50: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV50: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV50: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV50: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV50: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV50"),
                morphTargets: DynArray("ModelMeshMorphTargetV50"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData")
            },
            ModelMeshLodDataV50: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV50: {
                positions: DynArray("ModelMeshMorphVertV50"),
                normals: DynArray("ModelMeshMorphVertV50"),
                mesh: Uint64
            },
            ModelMeshMorphVertV50: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV50: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV50"),
                InitialPlacement: "ModelTransformDataV50",
                MeshBindings: DynArray("ModelMeshBindingDataV50"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV50"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV50: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV50"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV50: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV50",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV50: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV50: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV50: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV50: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV50: {
                clouds: DynArray("ModelParticleCloudV50"),
                emitters: DynArray("ModelParticleEmitterV50")
            },
            ModelParticleCloudV50: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV50: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV50"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV50"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV50"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV50: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV50: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV50: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV50: {
                streaks: DynArray("ModelStreakV50"),
                anchors: DynArray("ModelStreakAnchorV50")
            },
            ModelStreakV50: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV50: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV50: {
                effectLights: DynArray("ModelEffectLightV50")
            },
            ModelEffectLightV50: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV50: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV50"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV50"),
                lod1Constraints: DynArray("ModelClothConstraintV50"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV50")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV50: {
                weights: DynArray("ModelClothBoneWeightV50")
            },
            ModelClothBoneWeightV50: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV50: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV50: {
                bone: Uint64,
                type: Uint8
            },
            ModelLightningDataV50: {
                systems: DynArray("ModelLightningSystemV50"),
                bolts: DynArray("ModelLightningBoltV50"),
                nodes: DynArray("ModelLightningNodeV50")
            },
            ModelLightningSystemV50: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV50: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV50: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: Float32,
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV50: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV50"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV50: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV50: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV50: {
                bone: Uint64,
                offset: FixedArray(Float32, 3)
            }
        },
        root: {
            materials: RefArray("ModelMaterialDataV50"),
            meshes: RefArray("ModelMeshDataV50"),
            model: Pointer("ModelModelDataV50"),
            properties: DynArray("ModelPropertyDataV50"),
            cloudData: Pointer("ModelCloudDataV50"),
            obstacles: DynArray("ModelObstacleDataV50"),
            streakData: Pointer("ModelStreakDataV50"),
            lightData: Pointer("ModelLightDataV50"),
            clothData: DynArray("ModelClothDataV50"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV50"),
            boneConstraints: DynArray("ModelBoneConstraintV50"),
            softBodyData: DynArray("ModelSoftBodyDataV50"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV50")
        }
    };
    var V51 = {
        chunkName: "MODL",
        name: "ModelFileDataV51",
        version: 51,
        definitions: {
            ModelPermutationDataV51: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV51")
            },
            ModelMaterialDataV51: {
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV51"),
                constants: DynArray("ModelConstantDataV51"),
                matConstLinks: DynArray("ModelMatConstLinkV51"),
                uvTransLinks: DynArray("ModelUVTransLinkV51"),
                texTransforms: DynArray("ModelMaterialTexTransformV51")
            },
            ModelTextureDataV51: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV51: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV51: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV51: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV51: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV51: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV51"),
                morphTargets: DynArray("ModelMeshMorphTargetV51"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV51: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV51: {
                positions: DynArray("ModelMeshMorphVertV51"),
                normals: DynArray("ModelMeshMorphVertV51"),
                mesh: Uint64
            },
            ModelMeshMorphVertV51: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV51: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV51"),
                InitialPlacement: "ModelTransformDataV51",
                MeshBindings: DynArray("ModelMeshBindingDataV51"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV51"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV51: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV51"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV51: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV51",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV51: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV51: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV51: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV51: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV51: {
                clouds: DynArray("ModelParticleCloudV51"),
                emitters: DynArray("ModelParticleEmitterV51")
            },
            ModelParticleCloudV51: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV51: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV51"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV51"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV51"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV51: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV51: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV51: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV51: {
                streaks: DynArray("ModelStreakV51"),
                anchors: DynArray("ModelStreakAnchorV51")
            },
            ModelStreakV51: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV51: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV51: {
                effectLights: DynArray("ModelEffectLightV51")
            },
            ModelEffectLightV51: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV51: {
                materialIndex: Uint32,
                flags: Uint8,
                gravity: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV51"),
                softLocks: DynArray(Uint8),
                lod0Constraints: DynArray("ModelClothConstraintV51"),
                lod1Constraints: DynArray("ModelClothConstraintV51"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV51")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV51: {
                weights: DynArray("ModelClothBoneWeightV51")
            },
            ModelClothBoneWeightV51: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothConstraintV51: {
                vertIndexA: Uint16,
                vertIndexB: Uint16,
                distance: Float32
            },
            ModelClothObstacleV51: {
                bone: Uint64,
                type: Uint8,
                depth: Float32,
                height: Float32,
                radius: Float32,
                width: Float32
            },
            ModelLightningDataV51: {
                systems: DynArray("ModelLightningSystemV51"),
                bolts: DynArray("ModelLightningBoltV51"),
                nodes: DynArray("ModelLightningNodeV51")
            },
            ModelLightningSystemV51: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV51: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV51: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV51: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV51"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV51: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV51: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV51: {
                bone: Uint64,
                offset: FixedArray(Float32, 3)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV51"),
            meshes: RefArray("ModelMeshDataV51"),
            model: Pointer("ModelModelDataV51"),
            properties: DynArray("ModelPropertyDataV51"),
            cloudData: Pointer("ModelCloudDataV51"),
            obstacles: DynArray("ModelObstacleDataV51"),
            streakData: Pointer("ModelStreakDataV51"),
            lightData: Pointer("ModelLightDataV51"),
            clothData: DynArray("ModelClothDataV51"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV51"),
            boneConstraints: DynArray("ModelBoneConstraintV51"),
            softBodyData: DynArray("ModelSoftBodyDataV51"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV51")
        }
    };
    var V52 = {
        chunkName: "MODL",
        name: "ModelFileDataV52",
        version: 52,
        definitions: {
            ModelPermutationDataV52: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV52")
            },
            ModelMaterialDataV52: {
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV52"),
                constants: DynArray("ModelConstantDataV52"),
                matConstLinks: DynArray("ModelMatConstLinkV52"),
                uvTransLinks: DynArray("ModelUVTransLinkV52"),
                texTransforms: DynArray("ModelMaterialTexTransformV52")
            },
            ModelTextureDataV52: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV52: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV52: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV52: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV52: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV52: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV52"),
                morphTargets: DynArray("ModelMeshMorphTargetV52"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV52: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV52: {
                positions: DynArray("ModelMeshMorphVertV52"),
                normals: DynArray("ModelMeshMorphVertV52"),
                mesh: Uint64
            },
            ModelMeshMorphVertV52: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV52: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV52"),
                InitialPlacement: "ModelTransformDataV52",
                MeshBindings: DynArray("ModelMeshBindingDataV52"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV52"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV52: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV52"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV52: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV52",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV52: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV52: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV52: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV52: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV52: {
                clouds: DynArray("ModelParticleCloudV52"),
                emitters: DynArray("ModelParticleEmitterV52")
            },
            ModelParticleCloudV52: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV52: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV52"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV52"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV52"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV52: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV52: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV52: {
                bone: Uint64,
                dragCoef: Float32,
                flags: Uint32,
                geoData: FixedArray(Float32, 3),
                gravityCoef: Float32,
                response: Uint8,
                type: Uint8
            },
            ModelStreakDataV52: {
                streaks: DynArray("ModelStreakV52"),
                anchors: DynArray("ModelStreakAnchorV52")
            },
            ModelStreakV52: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV52: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV52: {
                effectLights: DynArray("ModelEffectLightV52")
            },
            ModelEffectLightV52: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV52: {
                materialIndex: Uint32,
                flags: Uint8,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV52"),
                softLocks: DynArray("ModelClothSoftLockV52"),
                lod0Constraints: DynArray("ModelClothConstraintV52"),
                lod1Constraints: DynArray("ModelClothConstraintV52"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacles: DynArray("ModelClothObstacleV52")
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV52: {
                weights: DynArray("ModelClothBoneWeightV52")
            },
            ModelClothBoneWeightV52: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothSoftLockV52: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV52: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelClothObstacleV52: {
                bone: Uint64,
                type: Uint8,
                depth: Float32,
                height: Float32,
                radius: Float32,
                width: Float32
            },
            ModelLightningDataV52: {
                systems: DynArray("ModelLightningSystemV52"),
                bolts: DynArray("ModelLightningBoltV52"),
                nodes: DynArray("ModelLightningNodeV52")
            },
            ModelLightningSystemV52: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV52: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV52: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV52: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV52"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV52: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV52: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV52: {
                bone: Uint64,
                offset: FixedArray(Float32, 3)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV52"),
            meshes: RefArray("ModelMeshDataV52"),
            model: Pointer("ModelModelDataV52"),
            properties: DynArray("ModelPropertyDataV52"),
            cloudData: Pointer("ModelCloudDataV52"),
            obstacles: DynArray("ModelObstacleDataV52"),
            streakData: Pointer("ModelStreakDataV52"),
            lightData: Pointer("ModelLightDataV52"),
            clothData: DynArray("ModelClothDataV52"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV52"),
            boneConstraints: DynArray("ModelBoneConstraintV52"),
            softBodyData: DynArray("ModelSoftBodyDataV52"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV52")
        }
    };
    var V53 = {
        chunkName: "MODL",
        name: "ModelFileDataV53",
        version: 53,
        definitions: {
            ModelPermutationDataV53: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV53")
            },
            ModelMaterialDataV53: {
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                texCoordCount: Uint8,
                textures: DynArray("ModelTextureDataV53"),
                constants: DynArray("ModelConstantDataV53"),
                matConstLinks: DynArray("ModelMatConstLinkV53"),
                uvTransLinks: DynArray("ModelUVTransLinkV53"),
                texTransforms: DynArray("ModelMaterialTexTransformV53")
            },
            ModelTextureDataV53: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV53: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV53: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV53: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV53: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV53: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV53"),
                morphTargets: DynArray("ModelMeshMorphTargetV53"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV53: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV53: {
                positions: DynArray("ModelMeshMorphVertV53"),
                normals: DynArray("ModelMeshMorphVertV53"),
                mesh: Uint64
            },
            ModelMeshMorphVertV53: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV53: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV53"),
                InitialPlacement: "ModelTransformDataV53",
                MeshBindings: DynArray("ModelMeshBindingDataV53"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV53"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV53: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV53"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneDataV53: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV53",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV53: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingDataV53: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV53: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV53: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV53: {
                clouds: DynArray("ModelParticleCloudV53"),
                emitters: DynArray("ModelParticleEmitterV53")
            },
            ModelParticleCloudV53: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV53: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentType: Uint8,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV53"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV53"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV53"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnShape: Uint8,
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                windInfluence: Uint8
            },
            ModelParticleCurveV53: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV53: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelObstacleDataV53: {
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V53")
            },
            ModelMatrix43V53: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelStreakDataV53: {
                streaks: DynArray("ModelStreakV53"),
                anchors: DynArray("ModelStreakAnchorV53")
            },
            ModelStreakV53: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV53: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV53: {
                effectLights: DynArray("ModelEffectLightV53")
            },
            ModelEffectLightV53: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV53: {
                materialIndex: Uint32,
                flags: Uint8,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                rigidness: Uint8,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                lockCount: Uint16,
                groups: DynArray("ModelClothMeshGroupV53"),
                softLocks: DynArray("ModelClothSoftLockV53"),
                lod0Constraints: DynArray("ModelClothConstraintV53"),
                lod1Constraints: DynArray("ModelClothConstraintV53"),
                lod1VertexCount: Uint16,
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32)
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV53: {
                weights: DynArray("ModelClothBoneWeightV53")
            },
            ModelClothBoneWeightV53: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothSoftLockV53: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV53: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelLightningDataV53: {
                systems: DynArray("ModelLightningSystemV53"),
                bolts: DynArray("ModelLightningBoltV53"),
                nodes: DynArray("ModelLightningNodeV53")
            },
            ModelLightningSystemV53: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV53: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV53: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV53: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV53"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV53: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV53: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV53: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV53"),
            meshes: RefArray("ModelMeshDataV53"),
            model: Pointer("ModelModelDataV53"),
            properties: DynArray("ModelPropertyDataV53"),
            cloudData: Pointer("ModelCloudDataV53"),
            obstacles: DynArray("ModelObstacleDataV53"),
            streakData: Pointer("ModelStreakDataV53"),
            lightData: Pointer("ModelLightDataV53"),
            clothData: DynArray("ModelClothDataV53"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV53"),
            boneConstraints: DynArray("ModelBoneConstraintV53"),
            softBodyData: DynArray("ModelSoftBodyDataV53"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV53")
        }
    };
    var V54 = {
        chunkName: "MODL",
        name: "ModelFileDataV54",
        version: 54,
        definitions: {
            ModelPermutationDataV54: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV54")
            },
            ModelMaterialDataV54: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV54"),
                constants: DynArray("ModelConstantDataV54"),
                matConstLinks: DynArray("ModelMatConstLinkV54"),
                uvTransLinks: DynArray("ModelUVTransLinkV54"),
                texTransforms: DynArray("ModelMaterialTexTransformV54"),
                texCoordCount: Uint8
            },
            ModelTextureDataV54: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV54: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV54: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV54: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV54: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV54: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV54"),
                morphTargets: DynArray("ModelMeshMorphTargetV54"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV54: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV54: {
                positions: DynArray("ModelMeshMorphVertV54"),
                normals: DynArray("ModelMeshMorphVertV54"),
                mesh: Uint64
            },
            ModelMeshMorphVertV54: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV54: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV54"),
                InitialPlacement: "ModelTransformDataV54",
                MeshBindings: DynArray("ModelMeshBindingDataV54"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV54"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV54: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV54"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneSymmetries: DynArray("ModelBoneSymmetryV54")
            },
            ModelBoneDataV54: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV54",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV54: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelBoneSymmetryV54: {
                boneLeft: Uint64,
                boneRight: Uint64
            },
            ModelMeshBindingDataV54: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV54: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV54: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV54: {
                clouds: DynArray("ModelParticleCloudV54"),
                emitters: DynArray("ModelParticleEmitterV54")
            },
            ModelParticleCloudV54: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV54: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV54"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV54"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV54"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V54"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV54: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV54: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V54: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV54: {
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V54")
            },
            ModelStreakDataV54: {
                streaks: DynArray("ModelStreakV54"),
                anchors: DynArray("ModelStreakAnchorV54")
            },
            ModelStreakV54: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV54: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV54: {
                effectLights: DynArray("ModelEffectLightV54")
            },
            ModelEffectLightV54: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV54: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV54"),
                softLocks: DynArray("ModelClothSoftLockV54"),
                lod0Constraints: DynArray("ModelClothConstraintV54"),
                lod1Constraints: DynArray("ModelClothConstraintV54"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV54: {
                weights: DynArray("ModelClothBoneWeightV54")
            },
            ModelClothBoneWeightV54: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothSoftLockV54: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV54: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelLightningDataV54: {
                systems: DynArray("ModelLightningSystemV54"),
                bolts: DynArray("ModelLightningBoltV54"),
                nodes: DynArray("ModelLightningNodeV54")
            },
            ModelLightningSystemV54: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV54: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV54: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV54: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV54"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV54: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV54: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV54: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV54"),
            meshes: RefArray("ModelMeshDataV54"),
            model: Pointer("ModelModelDataV54"),
            properties: DynArray("ModelPropertyDataV54"),
            cloudData: Pointer("ModelCloudDataV54"),
            obstacles: DynArray("ModelObstacleDataV54"),
            streakData: Pointer("ModelStreakDataV54"),
            lightData: Pointer("ModelLightDataV54"),
            clothData: DynArray("ModelClothDataV54"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV54"),
            boneConstraints: DynArray("ModelBoneConstraintV54"),
            softBodyData: DynArray("ModelSoftBodyDataV54"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV54")
        }
    };
    var V55 = {
        chunkName: "MODL",
        name: "ModelFileDataV55",
        version: 55,
        definitions: {
            ModelPermutationDataV55: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV55")
            },
            ModelMaterialDataV55: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV55"),
                constants: DynArray("ModelConstantDataV55"),
                matConstLinks: DynArray("ModelMatConstLinkV55"),
                uvTransLinks: DynArray("ModelUVTransLinkV55"),
                texTransforms: DynArray("ModelMaterialTexTransformV55"),
                texCoordCount: Uint8
            },
            ModelTextureDataV55: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV55: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV55: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV55: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV55: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV55: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV55"),
                morphTargets: DynArray("ModelMeshMorphTargetV55"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV55: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV55: {
                positions: DynArray("ModelMeshMorphVertV55"),
                normals: DynArray("ModelMeshMorphVertV55"),
                mesh: Uint64
            },
            ModelMeshMorphVertV55: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV55: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV55"),
                InitialPlacement: "ModelTransformDataV55",
                MeshBindings: DynArray("ModelMeshBindingDataV55"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV55"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV55: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV55"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneSymmetries: DynArray("ModelBoneSymmetryV55")
            },
            ModelBoneDataV55: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV55",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV55: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelBoneSymmetryV55: {
                boneLeft: Uint64,
                boneRight: Uint64
            },
            ModelMeshBindingDataV55: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV55: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV55: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV55: {
                clouds: DynArray("ModelParticleCloudV55"),
                emitters: DynArray("ModelParticleEmitterV55")
            },
            ModelParticleCloudV55: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV55: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV55"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV55"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV55"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V55"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV55: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV55: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V55: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV55: {
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V55")
            },
            ModelStreakDataV55: {
                streaks: DynArray("ModelStreakV55"),
                anchors: DynArray("ModelStreakAnchorV55")
            },
            ModelStreakV55: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV55: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV55: {
                effectLights: DynArray("ModelEffectLightV55")
            },
            ModelEffectLightV55: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV55: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV55"),
                softLocks: DynArray("ModelClothSoftLockV55"),
                lod0Constraints: DynArray("ModelClothConstraintV55"),
                lod1Constraints: DynArray("ModelClothConstraintV55"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV55: {
                weights: DynArray("ModelClothBoneWeightV55")
            },
            ModelClothBoneWeightV55: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothSoftLockV55: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV55: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelLightningDataV55: {
                systems: DynArray("ModelLightningSystemV55"),
                bolts: DynArray("ModelLightningBoltV55"),
                nodes: DynArray("ModelLightningNodeV55")
            },
            ModelLightningSystemV55: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV55: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV55: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV55: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV55"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV55: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV55: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV55: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV55"),
            meshes: RefArray("ModelMeshDataV55"),
            model: Pointer("ModelModelDataV55"),
            properties: DynArray("ModelPropertyDataV55"),
            cloudData: Pointer("ModelCloudDataV55"),
            obstacles: DynArray("ModelObstacleDataV55"),
            streakData: Pointer("ModelStreakDataV55"),
            lightData: Pointer("ModelLightDataV55"),
            clothData: DynArray("ModelClothDataV55"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV55"),
            boneConstraints: DynArray("ModelBoneConstraintV55"),
            softBodyData: DynArray("ModelSoftBodyDataV55"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV55")
        }
    };
    var V56 = {
        chunkName: "MODL",
        name: "ModelFileDataV56",
        version: 56,
        definitions: {
            ModelPermutationDataV56: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV56")
            },
            ModelMaterialDataV56: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV56"),
                constants: DynArray("ModelConstantDataV56"),
                matConstLinks: DynArray("ModelMatConstLinkV56"),
                uvTransLinks: DynArray("ModelUVTransLinkV56"),
                texTransforms: DynArray("ModelMaterialTexTransformV56"),
                texCoordCount: Uint8
            },
            ModelTextureDataV56: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV56: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV56: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV56: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV56: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV56: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV56"),
                morphTargets: DynArray("ModelMeshMorphTargetV56"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV56: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV56: {
                positions: DynArray("ModelMeshMorphVertV56"),
                normals: DynArray("ModelMeshMorphVertV56"),
                mesh: Uint64
            },
            ModelMeshMorphVertV56: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV56: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV56"),
                InitialPlacement: "ModelTransformDataV56",
                MeshBindings: DynArray("ModelMeshBindingDataV56"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV56"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV56: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV56"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneSymmetries: DynArray("ModelBoneSymmetryV56")
            },
            ModelBoneDataV56: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV56",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV56: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelBoneSymmetryV56: {
                boneLeft: Uint64,
                boneRight: Uint64
            },
            ModelMeshBindingDataV56: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV56: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV56: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV56: {
                clouds: DynArray("ModelParticleCloudV56"),
                emitters: DynArray("ModelParticleEmitterV56")
            },
            ModelParticleCloudV56: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV56: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV56"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV56"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV56"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V56"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV56: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV56: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V56: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV56: {
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V56")
            },
            ModelStreakDataV56: {
                streaks: DynArray("ModelStreakV56"),
                anchors: DynArray("ModelStreakAnchorV56")
            },
            ModelStreakV56: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV56: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV56: {
                effectLights: DynArray("ModelEffectLightV56")
            },
            ModelEffectLightV56: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV56: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV56"),
                softLocks: DynArray("ModelClothSoftLockV56"),
                lod0Constraints: DynArray("ModelClothConstraintV56"),
                lod1Constraints: DynArray("ModelClothConstraintV56"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV56: {
                weights: DynArray("ModelClothBoneWeightV56")
            },
            ModelClothBoneWeightV56: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothSoftLockV56: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV56: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelLightningDataV56: {
                systems: DynArray("ModelLightningSystemV56"),
                bolts: DynArray("ModelLightningBoltV56"),
                nodes: DynArray("ModelLightningNodeV56")
            },
            ModelLightningSystemV56: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV56: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV56: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV56: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV56"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV56: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV56: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV56: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV56"),
            meshes: RefArray("ModelMeshDataV56"),
            model: Pointer("ModelModelDataV56"),
            properties: DynArray("ModelPropertyDataV56"),
            cloudData: Pointer("ModelCloudDataV56"),
            obstacles: DynArray("ModelObstacleDataV56"),
            streakData: Pointer("ModelStreakDataV56"),
            lightData: Pointer("ModelLightDataV56"),
            clothData: DynArray("ModelClothDataV56"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV56"),
            boneConstraints: DynArray("ModelBoneConstraintV56"),
            softBodyData: DynArray("ModelSoftBodyDataV56"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV56"),
            modelReference: Filename()
        }
    };
    var V57 = {
        chunkName: "MODL",
        name: "ModelFileDataV57",
        version: 57,
        definitions: {
            ModelPermutationDataV57: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV57")
            },
            ModelMaterialDataV57: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV57"),
                constants: DynArray("ModelConstantDataV57"),
                matConstLinks: DynArray("ModelMatConstLinkV57"),
                uvTransLinks: DynArray("ModelUVTransLinkV57"),
                texTransforms: DynArray("ModelMaterialTexTransformV57"),
                texCoordCount: Uint8
            },
            ModelTextureDataV57: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV57: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV57: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV57: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV57: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV57: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV57"),
                morphTargets: DynArray("ModelMeshMorphTargetV57"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV57: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV57: {
                positions: DynArray("ModelMeshMorphVertV57"),
                normals: DynArray("ModelMeshMorphVertV57"),
                mesh: Uint64
            },
            ModelMeshMorphVertV57: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV57: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV57"),
                InitialPlacement: "ModelTransformDataV57",
                MeshBindings: DynArray("ModelMeshBindingDataV57"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV57"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV57: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV57"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneSymmetries: DynArray("ModelBoneSymmetryV57")
            },
            ModelBoneDataV57: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV57",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV57: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelBoneSymmetryV57: {
                boneLeft: Uint64,
                boneRight: Uint64
            },
            ModelMeshBindingDataV57: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV57: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV57: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV57: {
                clouds: DynArray("ModelParticleCloudV57"),
                emitters: DynArray("ModelParticleEmitterV57")
            },
            ModelParticleCloudV57: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV57: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV57"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV57"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV57"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V57"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV57: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV57: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V57: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV57: {
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V57")
            },
            ModelStreakDataV57: {
                streaks: DynArray("ModelStreakV57"),
                anchors: DynArray("ModelStreakAnchorV57")
            },
            ModelStreakV57: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV57: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV57: {
                effectLights: DynArray("ModelEffectLightV57")
            },
            ModelEffectLightV57: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV57: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV57"),
                softLocks: DynArray("ModelClothSoftLockV57"),
                lod0Constraints: DynArray("ModelClothConstraintV57"),
                lod1Constraints: DynArray("ModelClothConstraintV57"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV57: {
                weights: DynArray("ModelClothBoneWeightV57")
            },
            ModelClothBoneWeightV57: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothSoftLockV57: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV57: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelLightningDataV57: {
                systems: DynArray("ModelLightningSystemV57"),
                bolts: DynArray("ModelLightningBoltV57"),
                nodes: DynArray("ModelLightningNodeV57")
            },
            ModelLightningSystemV57: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV57: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                fps: Float32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                period: Float32,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thickness: Float32,
                thicknessPreset: Uint8,
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV57: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV57: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV57"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV57: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV57: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV57: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelFixedOffsetDataV57: {
                name: Uint64,
                parentBone: Uint64,
                translation: FixedArray(Float32, 3)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV57"),
            meshes: RefArray("ModelMeshDataV57"),
            model: Pointer("ModelModelDataV57"),
            properties: DynArray("ModelPropertyDataV57"),
            cloudData: Pointer("ModelCloudDataV57"),
            obstacles: DynArray("ModelObstacleDataV57"),
            streakData: Pointer("ModelStreakDataV57"),
            lightData: Pointer("ModelLightDataV57"),
            clothData: DynArray("ModelClothDataV57"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV57"),
            boneConstraints: DynArray("ModelBoneConstraintV57"),
            softBodyData: DynArray("ModelSoftBodyDataV57"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV57"),
            fixedOffsetData: DynArray("ModelFixedOffsetDataV57"),
            modelReference: Filename()
        }
    };
    var V58 = {
        chunkName: "MODL",
        name: "ModelFileDataV58",
        version: 58,
        definitions: {
            ModelPermutationDataV58: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV58")
            },
            ModelMaterialDataV58: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV58"),
                constants: DynArray("ModelConstantDataV58"),
                matConstLinks: DynArray("ModelMatConstLinkV58"),
                uvTransLinks: DynArray("ModelUVTransLinkV58"),
                texTransforms: DynArray("ModelMaterialTexTransformV58"),
                texCoordCount: Uint8
            },
            ModelTextureDataV58: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV58: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV58: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV58: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV58: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV58: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV58"),
                morphTargets: DynArray("ModelMeshMorphTargetV58"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV58: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV58: {
                positions: DynArray("ModelMeshMorphVertV58"),
                normals: DynArray("ModelMeshMorphVertV58"),
                mesh: Uint64
            },
            ModelMeshMorphVertV58: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV58: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV58"),
                InitialPlacement: "ModelTransformDataV58",
                MeshBindings: DynArray("ModelMeshBindingDataV58"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV58"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV58: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV58"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneSymmetries: DynArray("ModelBoneSymmetryV58")
            },
            ModelBoneDataV58: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV58",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV58: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelBoneSymmetryV58: {
                boneLeft: Uint64,
                boneRight: Uint64
            },
            ModelMeshBindingDataV58: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV58: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV58: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV58: {
                clouds: DynArray("ModelParticleCloudV58"),
                emitters: DynArray("ModelParticleEmitterV58")
            },
            ModelParticleCloudV58: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV58: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV58"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV58"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV58"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V58"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV58: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV58: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V58: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV58: {
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V58")
            },
            ModelStreakDataV58: {
                streaks: DynArray("ModelStreakV58"),
                anchors: DynArray("ModelStreakAnchorV58")
            },
            ModelStreakV58: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV58: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV58: {
                effectLights: DynArray("ModelEffectLightV58")
            },
            ModelEffectLightV58: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV58: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV58"),
                softLocks: DynArray("ModelClothSoftLockV58"),
                lod0Constraints: DynArray("ModelClothConstraintV58"),
                lod1Constraints: DynArray("ModelClothConstraintV58"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV58: {
                weights: DynArray("ModelClothBoneWeightV58")
            },
            ModelClothBoneWeightV58: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothSoftLockV58: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV58: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelLightningDataV58: {
                systems: DynArray("ModelLightningSystemV58"),
                bolts: DynArray("ModelLightningBoltV58"),
                nodes: DynArray("ModelLightningNodeV58")
            },
            ModelLightningSystemV58: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV58: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV58"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV58: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV58: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV58"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV58: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV58: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV58: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelFixedOffsetDataV58: {
                name: Uint64,
                parentBone: Uint64,
                translation: FixedArray(Float32, 3)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV58"),
            meshes: RefArray("ModelMeshDataV58"),
            model: Pointer("ModelModelDataV58"),
            properties: DynArray("ModelPropertyDataV58"),
            cloudData: Pointer("ModelCloudDataV58"),
            obstacles: DynArray("ModelObstacleDataV58"),
            streakData: Pointer("ModelStreakDataV58"),
            lightData: Pointer("ModelLightDataV58"),
            clothData: DynArray("ModelClothDataV58"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV58"),
            boneConstraints: DynArray("ModelBoneConstraintV58"),
            softBodyData: DynArray("ModelSoftBodyDataV58"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV58"),
            fixedOffsetData: DynArray("ModelFixedOffsetDataV58"),
            modelReference: Filename()
        }
    };
    var V59 = {
        chunkName: "MODL",
        name: "ModelFileDataV59",
        version: 59,
        definitions: {
            ModelPermutationDataV59: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV59")
            },
            ModelMaterialDataV59: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV59"),
                constants: DynArray("ModelConstantDataV59"),
                matConstLinks: DynArray("ModelMatConstLinkV59"),
                uvTransLinks: DynArray("ModelUVTransLinkV59"),
                texTransforms: DynArray("ModelMaterialTexTransformV59"),
                texCoordCount: Uint8
            },
            ModelTextureDataV59: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV59: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV59: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV59: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV59: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV59: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV59"),
                morphTargets: DynArray("ModelMeshMorphTargetV59"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV59: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV59: {
                positions: DynArray("ModelMeshMorphVertV59"),
                normals: DynArray("ModelMeshMorphVertV59"),
                mesh: Uint64
            },
            ModelMeshMorphVertV59: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV59: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV59"),
                InitialPlacement: "ModelTransformDataV59",
                MeshBindings: DynArray("ModelMeshBindingDataV59"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV59"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV59: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV59"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneSymmetries: DynArray("ModelBoneSymmetryV59")
            },
            ModelBoneDataV59: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV59",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV59: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelBoneSymmetryV59: {
                boneLeft: Uint64,
                boneRight: Uint64
            },
            ModelMeshBindingDataV59: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV59: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV59: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV59: {
                clouds: DynArray("ModelParticleCloudV59"),
                emitters: DynArray("ModelParticleEmitterV59")
            },
            ModelParticleCloudV59: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV59: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV59"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV59"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV59"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V59"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV59: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV59: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V59: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV59: {
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V59")
            },
            ModelStreakDataV59: {
                streaks: DynArray("ModelStreakV59"),
                anchors: DynArray("ModelStreakAnchorV59")
            },
            ModelStreakV59: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV59: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV59: {
                effectLights: DynArray("ModelEffectLightV59")
            },
            ModelEffectLightV59: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV59: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV59"),
                softLocks: DynArray("ModelClothSoftLockV59"),
                lod0Constraints: DynArray("ModelClothConstraintV59"),
                lod1Constraints: DynArray("ModelClothConstraintV59"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV59: {
                weights: DynArray("ModelClothBoneWeightV59")
            },
            ModelClothBoneWeightV59: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothSoftLockV59: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV59: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelLightningDataV59: {
                systems: DynArray("ModelLightningSystemV59"),
                bolts: DynArray("ModelLightningBoltV59"),
                nodes: DynArray("ModelLightningNodeV59")
            },
            ModelLightningSystemV59: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV59: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV59"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV59: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV59: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV59"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV59: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV59: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV59: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelFixedOffsetDataV59: {
                name: Uint64,
                parentBone: Uint64,
                translation: FixedArray(Float32, 3)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV59"),
            meshes: RefArray("ModelMeshDataV59"),
            model: Pointer("ModelModelDataV59"),
            properties: DynArray("ModelPropertyDataV59"),
            cloudData: Pointer("ModelCloudDataV59"),
            obstacles: DynArray("ModelObstacleDataV59"),
            streakData: Pointer("ModelStreakDataV59"),
            lightData: Pointer("ModelLightDataV59"),
            clothData: DynArray("ModelClothDataV59"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV59"),
            boneConstraints: DynArray("ModelBoneConstraintV59"),
            softBodyData: DynArray("ModelSoftBodyDataV59"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV59"),
            fixedOffsetData: DynArray("ModelFixedOffsetDataV59"),
            modelReference: Filename()
        }
    };
    var V60 = {
        chunkName: "MODL",
        name: "ModelFileDataV60",
        version: 60,
        definitions: {
            ModelPermutationDataV60: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV60")
            },
            ModelMaterialDataV60: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV60"),
                constants: DynArray("ModelConstantDataV60"),
                matConstLinks: DynArray("ModelMatConstLinkV60"),
                uvTransLinks: DynArray("ModelUVTransLinkV60"),
                texTransforms: DynArray("ModelMaterialTexTransformV60"),
                texCoordCount: Uint8
            },
            ModelTextureDataV60: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV60: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV60: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV60: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV60: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV60: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV60"),
                morphTargets: DynArray("ModelMeshMorphTargetV60"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV60: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV60: {
                positions: DynArray("ModelMeshMorphVertV60"),
                normals: DynArray("ModelMeshMorphVertV60"),
                mesh: Uint64
            },
            ModelMeshMorphVertV60: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV60: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV60"),
                InitialPlacement: "ModelTransformDataV60",
                MeshBindings: DynArray("ModelMeshBindingDataV60"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV60"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV60: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV60"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneSymmetries: DynArray("ModelBoneSymmetryV60")
            },
            ModelBoneDataV60: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV60",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV60: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelBoneSymmetryV60: {
                boneLeft: Uint64,
                boneRight: Uint64
            },
            ModelMeshBindingDataV60: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV60: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV60: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV60: {
                clouds: DynArray("ModelParticleCloudV60"),
                emitters: DynArray("ModelParticleEmitterV60")
            },
            ModelParticleCloudV60: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV60: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV60"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV60"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV60"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V60"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV60: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV60: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V60: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV60: {
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V60")
            },
            ModelStreakDataV60: {
                streaks: DynArray("ModelStreakV60"),
                anchors: DynArray("ModelStreakAnchorV60")
            },
            ModelStreakV60: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV60: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV60: {
                effectLights: DynArray("ModelEffectLightV60")
            },
            ModelEffectLightV60: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV60: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV60"),
                groupBindings: DynArray("ModelClothGroupBindingV60"),
                softLocks: DynArray("ModelClothSoftLockV60"),
                lod0Constraints: DynArray("ModelClothConstraintV60"),
                lod1Constraints: DynArray("ModelClothConstraintV60"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV60: {
                weights: DynArray("ModelClothBoneWeightV60")
            },
            ModelClothBoneWeightV60: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV60: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV60: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV60: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelLightningDataV60: {
                systems: DynArray("ModelLightningSystemV60"),
                bolts: DynArray("ModelLightningBoltV60"),
                nodes: DynArray("ModelLightningNodeV60")
            },
            ModelLightningSystemV60: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV60: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV60"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV60: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV60: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV60"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV60: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV60: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV60: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelFixedOffsetDataV60: {
                name: Uint64,
                parentBone: Uint64,
                translation: FixedArray(Float32, 3)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV60"),
            meshes: RefArray("ModelMeshDataV60"),
            model: Pointer("ModelModelDataV60"),
            properties: DynArray("ModelPropertyDataV60"),
            cloudData: Pointer("ModelCloudDataV60"),
            obstacles: DynArray("ModelObstacleDataV60"),
            streakData: Pointer("ModelStreakDataV60"),
            lightData: Pointer("ModelLightDataV60"),
            clothData: DynArray("ModelClothDataV60"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV60"),
            boneConstraints: DynArray("ModelBoneConstraintV60"),
            softBodyData: DynArray("ModelSoftBodyDataV60"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV60"),
            fixedOffsetData: DynArray("ModelFixedOffsetDataV60"),
            modelReference: Filename()
        }
    };
    var V61 = {
        chunkName: "MODL",
        name: "ModelFileDataV61",
        version: 61,
        definitions: {
            ModelPermutationDataV61: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV61")
            },
            ModelMaterialDataV61: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV61"),
                constants: DynArray("ModelConstantDataV61"),
                matConstLinks: DynArray("ModelMatConstLinkV61"),
                uvTransLinks: DynArray("ModelUVTransLinkV61"),
                texTransforms: DynArray("ModelMaterialTexTransformV61"),
                texCoordCount: Uint8
            },
            ModelTextureDataV61: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV61: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV61: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV61: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV61: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV61: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV61"),
                morphTargets: DynArray("ModelMeshMorphTargetV61"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV61: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV61: {
                positions: DynArray("ModelMeshMorphVertV61"),
                normals: DynArray("ModelMeshMorphVertV61"),
                mesh: Uint64
            },
            ModelMeshMorphVertV61: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelModelDataV61: {
                Name: RefString(),
                Skeleton: Pointer("ModelSkeletonDataV61"),
                InitialPlacement: "ModelTransformDataV61",
                MeshBindings: DynArray("ModelMeshBindingDataV61"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneFlags: DynArray(Uint32),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV61"),
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            ModelSkeletonDataV61: {
                Name: RefString(),
                Bones: DynArray("ModelBoneDataV61"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8),
                boneSymmetries: DynArray("ModelBoneSymmetryV61")
            },
            ModelBoneDataV61: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformDataV61",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformDataV61: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelBoneSymmetryV61: {
                boneLeft: Uint64,
                boneRight: Uint64
            },
            ModelMeshBindingDataV61: {
                Mesh: Pointer(Uint8)
            },
            ModelTrackMaskV61: {
                trackMask: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelPropertyDataV61: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            },
            ModelCloudDataV61: {
                clouds: DynArray("ModelParticleCloudV61"),
                emitters: DynArray("ModelParticleEmitterV61")
            },
            ModelParticleCloudV61: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV61: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV61"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV61"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV61"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V61"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV61: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV61: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V61: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV61: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V61")
            },
            ModelStreakDataV61: {
                streaks: DynArray("ModelStreakV61"),
                anchors: DynArray("ModelStreakAnchorV61")
            },
            ModelStreakV61: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV61: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV61: {
                effectLights: DynArray("ModelEffectLightV61")
            },
            ModelEffectLightV61: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV61: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV61"),
                groupBindings: DynArray("ModelClothGroupBindingV61"),
                softLocks: DynArray("ModelClothSoftLockV61"),
                lod0Constraints: DynArray("ModelClothConstraintV61"),
                lod1Constraints: DynArray("ModelClothConstraintV61"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV61: {
                weights: DynArray("ModelClothBoneWeightV61")
            },
            ModelClothBoneWeightV61: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV61: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV61: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV61: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV61: {
                effectWind: DynArray("ModelEffectWindV61")
            },
            ModelEffectWindV61: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV61: {
                systems: DynArray("ModelLightningSystemV61"),
                bolts: DynArray("ModelLightningBoltV61"),
                nodes: DynArray("ModelLightningNodeV61")
            },
            ModelLightningSystemV61: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV61: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV61"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV61: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelBoneConstraintV61: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV61"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV61: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelSoftBodyDataV61: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV61: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelFixedOffsetDataV61: {
                name: Uint64,
                parentBone: Uint64,
                translation: FixedArray(Float32, 3)
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV61"),
            meshes: RefArray("ModelMeshDataV61"),
            model: Pointer("ModelModelDataV61"),
            properties: DynArray("ModelPropertyDataV61"),
            cloudData: Pointer("ModelCloudDataV61"),
            obstacles: DynArray("ModelObstacleDataV61"),
            streakData: Pointer("ModelStreakDataV61"),
            lightData: Pointer("ModelLightDataV61"),
            clothData: DynArray("ModelClothDataV61"),
            windData: Pointer("ModelWindDataV61"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV61"),
            boneConstraints: DynArray("ModelBoneConstraintV61"),
            softBodyData: DynArray("ModelSoftBodyDataV61"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV61"),
            fixedOffsetData: DynArray("ModelFixedOffsetDataV61"),
            modelReference: Filename()
        }
    };
    var V62 = {
        chunkName: "MODL",
        name: "ModelFileDataV62",
        version: 62,
        definitions: {
            ModelPermutationDataV62: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV62")
            },
            ModelMaterialDataV62: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV62"),
                constants: DynArray("ModelConstantDataV62"),
                matConstLinks: DynArray("ModelMatConstLinkV62"),
                uvTransLinks: DynArray("ModelUVTransLinkV62"),
                texTransforms: DynArray("ModelMaterialTexTransformV62"),
                texCoordCount: Uint8
            },
            ModelTextureDataV62: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV62: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV62: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV62: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV62: {
                random: Uint8,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV62: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV62"),
                morphTargets: DynArray("ModelMeshMorphTargetV62"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV62: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV62: {
                positions: DynArray("ModelMeshMorphVertV62"),
                normals: DynArray("ModelMeshMorphVertV62"),
                mesh: Uint64
            },
            ModelMeshMorphVertV62: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelCloudDataV62: {
                clouds: DynArray("ModelParticleCloudV62"),
                emitters: DynArray("ModelParticleEmitterV62")
            },
            ModelParticleCloudV62: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV62: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV62"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV62"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV62"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V62"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV62: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV62: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V62: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV62: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V62")
            },
            ModelStreakDataV62: {
                streaks: DynArray("ModelStreakV62"),
                anchors: DynArray("ModelStreakAnchorV62")
            },
            ModelStreakV62: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV62: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV62: {
                effectLights: DynArray("ModelEffectLightV62")
            },
            ModelEffectLightV62: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV62: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV62"),
                groupBindings: DynArray("ModelClothGroupBindingV62"),
                softLocks: DynArray("ModelClothSoftLockV62"),
                lod0Constraints: DynArray("ModelClothConstraintV62"),
                lod1Constraints: DynArray("ModelClothConstraintV62"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8,
                translateWeight: Float32
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV62: {
                weights: DynArray("ModelClothBoneWeightV62")
            },
            ModelClothBoneWeightV62: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV62: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV62: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV62: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV62: {
                effectWind: DynArray("ModelEffectWindV62")
            },
            ModelEffectWindV62: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV62: {
                systems: DynArray("ModelLightningSystemV62"),
                bolts: DynArray("ModelLightningBoltV62"),
                nodes: DynArray("ModelLightningNodeV62")
            },
            ModelLightningSystemV62: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV62: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV62"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV62: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelSoftBodyDataV62: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV62: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelBoundingSphereV62: {
                center: FixedArray(Float32, 3),
                radius: Float32
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV62"),
            meshes: RefArray("ModelMeshDataV62"),
            cloudData: Pointer("ModelCloudDataV62"),
            obstacles: DynArray("ModelObstacleDataV62"),
            streakData: Pointer("ModelStreakDataV62"),
            lightData: Pointer("ModelLightDataV62"),
            clothData: DynArray("ModelClothDataV62"),
            windData: Pointer("ModelWindDataV62"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV62"),
            softBodyData: DynArray("ModelSoftBodyDataV62"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV62"),
            boundingSphere: Pointer("ModelBoundingSphereV62")
        }
    };
    var V63 = {
        chunkName: "MODL",
        name: "ModelFileDataV63",
        version: 63,
        definitions: {
            ModelPermutationDataV63: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV63")
            },
            ModelMaterialDataV63: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV63"),
                constants: DynArray("ModelConstantDataV63"),
                matConstLinks: DynArray("ModelMatConstLinkV63"),
                uvTransLinks: DynArray("ModelUVTransLinkV63"),
                texTransforms: DynArray("ModelMaterialTexTransformV63"),
                texCoordCount: Uint8
            },
            ModelTextureDataV63: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV63: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV63: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV63: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV63: {
                flags: Uint32,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2)
            },
            ModelMeshDataV63: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV63"),
                morphTargets: DynArray("ModelMeshMorphTargetV63"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV63: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV63: {
                positions: DynArray("ModelMeshMorphVertV63"),
                normals: DynArray("ModelMeshMorphVertV63"),
                mesh: Uint64
            },
            ModelMeshMorphVertV63: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelCloudDataV63: {
                clouds: DynArray("ModelParticleCloudV63"),
                emitters: DynArray("ModelParticleEmitterV63")
            },
            ModelParticleCloudV63: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV63: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV63"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV63"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV63"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V63"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV63: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV63: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V63: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV63: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V63")
            },
            ModelStreakDataV63: {
                streaks: DynArray("ModelStreakV63"),
                anchors: DynArray("ModelStreakAnchorV63")
            },
            ModelStreakV63: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV63: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV63: {
                effectLights: DynArray("ModelEffectLightV63")
            },
            ModelEffectLightV63: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV63: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV63"),
                groupBindings: DynArray("ModelClothGroupBindingV63"),
                softLocks: DynArray("ModelClothSoftLockV63"),
                lod0Constraints: DynArray("ModelClothConstraintV63"),
                lod1Constraints: DynArray("ModelClothConstraintV63"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8,
                translateWeight: Float32
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV63: {
                weights: DynArray("ModelClothBoneWeightV63")
            },
            ModelClothBoneWeightV63: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV63: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV63: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV63: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV63: {
                effectWind: DynArray("ModelEffectWindV63")
            },
            ModelEffectWindV63: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV63: {
                systems: DynArray("ModelLightningSystemV63"),
                bolts: DynArray("ModelLightningBoltV63"),
                nodes: DynArray("ModelLightningNodeV63")
            },
            ModelLightningSystemV63: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV63: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV63"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV63: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelSoftBodyDataV63: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV63: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelBoundingSphereV63: {
                center: FixedArray(Float32, 3),
                radius: Float32
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV63"),
            meshes: RefArray("ModelMeshDataV63"),
            cloudData: Pointer("ModelCloudDataV63"),
            obstacles: DynArray("ModelObstacleDataV63"),
            streakData: Pointer("ModelStreakDataV63"),
            lightData: Pointer("ModelLightDataV63"),
            clothData: DynArray("ModelClothDataV63"),
            windData: Pointer("ModelWindDataV63"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV63"),
            softBodyData: DynArray("ModelSoftBodyDataV63"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV63"),
            boundingSphere: Pointer("ModelBoundingSphereV63")
        }
    };
    var V64 = {
        chunkName: "MODL",
        name: "ModelFileDataV64",
        version: 64,
        definitions: {
            ModelPermutationDataV64: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV64")
            },
            ModelMaterialDataV64: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV64"),
                constants: DynArray("ModelConstantDataV64"),
                matConstLinks: DynArray("ModelMatConstLinkV64"),
                uvTransLinks: DynArray("ModelUVTransLinkV64"),
                texTransforms: DynArray("ModelMaterialTexTransformV64"),
                texCoordCount: Uint8
            },
            ModelTextureDataV64: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV64: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV64: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV64: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV64: {
                flags: Uint32,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2),
                scrollFreq: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                scaleFreq: FixedArray(Float32, 2),
                rotate: Float32,
                rotate_: Float32
            },
            ModelMeshDataV64: {
                visBone: Uint64,
                lods: DynArray("ModelMeshLodDataV64"),
                morphTargets: DynArray("ModelMeshMorphTargetV64"),
                mesh: "PackGrannyMeshType",
                flags: Uint32,
                seamVertIndices: DynArray(Uint32),
                meshName: Uint64,
                minBound: FixedArray(Float32, 3),
                maxBound: FixedArray(Float32, 3),
                bounds: DynArray("GrBoundData"),
                materialIndex: Uint32,
                materialName: RefString()
            },
            ModelMeshLodDataV64: {
                indices: DynArray(Uint16)
            },
            ModelMeshMorphTargetV64: {
                positions: DynArray("ModelMeshMorphVertV64"),
                normals: DynArray("ModelMeshMorphVertV64"),
                mesh: Uint64
            },
            ModelMeshMorphVertV64: {
                index: Uint16,
                vector: FixedArray(Float32, 3)
            },
            PackGrannyMeshType: {
                mesh: DynArray(Uint8)
            },
            GrBoundData: {
                center: FixedArray(Float32, 3),
                boxExtent: FixedArray(Float32, 3),
                sphereRadius: Float32
            },
            ModelCloudDataV64: {
                clouds: DynArray("ModelParticleCloudV64"),
                emitters: DynArray("ModelParticleEmitterV64")
            },
            ModelParticleCloudV64: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV64: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV64"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV64"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV64"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V64"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV64: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV64: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V64: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV64: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V64")
            },
            ModelStreakDataV64: {
                streaks: DynArray("ModelStreakV64"),
                anchors: DynArray("ModelStreakAnchorV64")
            },
            ModelStreakV64: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV64: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV64: {
                effectLights: DynArray("ModelEffectLightV64")
            },
            ModelEffectLightV64: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV64: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV64"),
                groupBindings: DynArray("ModelClothGroupBindingV64"),
                softLocks: DynArray("ModelClothSoftLockV64"),
                lod0Constraints: DynArray("ModelClothConstraintV64"),
                lod1Constraints: DynArray("ModelClothConstraintV64"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8,
                translateWeight: Float32,
                visBone: Uint64
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV64: {
                weights: DynArray("ModelClothBoneWeightV64")
            },
            ModelClothBoneWeightV64: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV64: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV64: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV64: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV64: {
                effectWind: DynArray("ModelEffectWindV64")
            },
            ModelEffectWindV64: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV64: {
                systems: DynArray("ModelLightningSystemV64"),
                bolts: DynArray("ModelLightningBoltV64"),
                nodes: DynArray("ModelLightningNodeV64")
            },
            ModelLightningSystemV64: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV64: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV64"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV64: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelSoftBodyDataV64: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV64: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelBoundingSphereV64: {
                center: FixedArray(Float32, 3),
                radius: Float32
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV64"),
            meshes: RefArray("ModelMeshDataV64"),
            cloudData: Pointer("ModelCloudDataV64"),
            obstacles: DynArray("ModelObstacleDataV64"),
            streakData: Pointer("ModelStreakDataV64"),
            lightData: Pointer("ModelLightDataV64"),
            clothData: DynArray("ModelClothDataV64"),
            windData: Pointer("ModelWindDataV64"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV64"),
            softBodyData: DynArray("ModelSoftBodyDataV64"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV64"),
            boundingSphere: Pointer("ModelBoundingSphereV64")
        }
    };
    var V65 = {
        chunkName: "MODL",
        name: "ModelFileDataV65",
        version: 65,
        definitions: {
            ModelPermutationDataV65: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV65")
            },
            ModelMaterialDataV65: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV65"),
                constants: DynArray("ModelConstantDataV65"),
                matConstLinks: DynArray("ModelMatConstLinkV65"),
                uvTransLinks: DynArray("ModelUVTransLinkV65"),
                texTransforms: DynArray("ModelMaterialTexTransformV65"),
                texCoordCount: Uint8
            },
            ModelTextureDataV65: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV65: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV65: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV65: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV65: {
                flags: Uint32,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2),
                scrollFreq: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                scaleFreq: FixedArray(Float32, 2),
                rotate: Float32,
                rotate_: Float32
            },
            ModelCloudDataV65: {
                clouds: DynArray("ModelParticleCloudV65"),
                emitters: DynArray("ModelParticleEmitterV65")
            },
            ModelParticleCloudV65: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV65: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV65"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV65"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV65"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V65"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV65: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV65: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V65: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV65: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V65")
            },
            ModelStreakDataV65: {
                streaks: DynArray("ModelStreakV65"),
                anchors: DynArray("ModelStreakAnchorV65")
            },
            ModelStreakV65: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV65: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV65: {
                effectLights: DynArray("ModelEffectLightV65")
            },
            ModelEffectLightV65: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV65: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV65"),
                groupBindings: DynArray("ModelClothGroupBindingV65"),
                softLocks: DynArray("ModelClothSoftLockV65"),
                lod0Constraints: DynArray("ModelClothConstraintV65"),
                lod1Constraints: DynArray("ModelClothConstraintV65"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8,
                translateWeight: Float32,
                visBone: Uint64
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV65: {
                weights: DynArray("ModelClothBoneWeightV65")
            },
            ModelClothBoneWeightV65: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV65: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV65: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV65: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV65: {
                effectWind: DynArray("ModelEffectWindV65")
            },
            ModelEffectWindV65: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV65: {
                systems: DynArray("ModelLightningSystemV65"),
                bolts: DynArray("ModelLightningBoltV65"),
                nodes: DynArray("ModelLightningNodeV65")
            },
            ModelLightningSystemV65: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV65: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV65"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV65: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelSoftBodyDataV65: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV65: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelBoundingSphereV65: {
                center: FixedArray(Float32, 3),
                radius: Float32
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV65"),
            cloudData: Pointer("ModelCloudDataV65"),
            obstacles: DynArray("ModelObstacleDataV65"),
            streakData: Pointer("ModelStreakDataV65"),
            lightData: Pointer("ModelLightDataV65"),
            clothData: DynArray("ModelClothDataV65"),
            windData: Pointer("ModelWindDataV65"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV65"),
            softBodyData: DynArray("ModelSoftBodyDataV65"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV65"),
            boundingSphere: Pointer("ModelBoundingSphereV65")
        }
    };
    var V66 = {
        chunkName: "MODL",
        name: "ModelFileDataV66",
        version: 66,
        definitions: {
            ModelPermutationDataV66: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV66")
            },
            ModelMaterialDataV66: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV66"),
                constants: DynArray("ModelConstantDataV66"),
                matConstLinks: DynArray("ModelMatConstLinkV66"),
                uvTransLinks: DynArray("ModelUVTransLinkV66"),
                texTransforms: DynArray("ModelMaterialTexTransformV66"),
                texCoordCount: Uint8,
                sortLayer: Uint32
            },
            ModelTextureDataV66: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV66: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV66: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV66: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV66: {
                flags: Uint32,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2),
                scrollFreq: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                scaleFreq: FixedArray(Float32, 2),
                rotate: Float32,
                rotate_: Float32
            },
            ModelCloudDataV66: {
                clouds: DynArray("ModelParticleCloudV66"),
                emitters: DynArray("ModelParticleEmitterV66")
            },
            ModelParticleCloudV66: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV66: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                alignmentDir: FixedArray(Float32, 3),
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                drag: Float32,
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV66"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                lifetime: FixedArray(Float32, 2),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                scaleCurve: Pointer("ModelParticleCurveV66"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                texCoordRect: FixedArray(Float32, 4),
                transform: Pointer("ModelMatrix43V66"),
                windInfluence: Uint8,
                alignmentType: Uint8,
                spawnShape: Uint8
            },
            ModelParticleCurveV66: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelParticleFlipbookV66: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            ModelMatrix43V66: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            ModelObstacleDataV66: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V66")
            },
            ModelStreakDataV66: {
                streaks: DynArray("ModelStreakV66"),
                anchors: DynArray("ModelStreakAnchorV66")
            },
            ModelStreakV66: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV66: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV66: {
                effectLights: DynArray("ModelEffectLightV66")
            },
            ModelEffectLightV66: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV66: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV66"),
                groupBindings: DynArray("ModelClothGroupBindingV66"),
                softLocks: DynArray("ModelClothSoftLockV66"),
                lod0Constraints: DynArray("ModelClothConstraintV66"),
                lod1Constraints: DynArray("ModelClothConstraintV66"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8,
                translateWeight: Float32,
                visBone: Uint64
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV66: {
                weights: DynArray("ModelClothBoneWeightV66")
            },
            ModelClothBoneWeightV66: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV66: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV66: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV66: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV66: {
                effectWind: DynArray("ModelEffectWindV66")
            },
            ModelEffectWindV66: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV66: {
                systems: DynArray("ModelLightningSystemV66"),
                bolts: DynArray("ModelLightningBoltV66"),
                nodes: DynArray("ModelLightningNodeV66")
            },
            ModelLightningSystemV66: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV66: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV66: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelSoftBodyDataV66: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV66: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelBoundingSphereV66: {
                center: FixedArray(Float32, 3),
                radius: Float32
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV66"),
            cloudData: Pointer("ModelCloudDataV66"),
            obstacles: DynArray("ModelObstacleDataV66"),
            streakData: Pointer("ModelStreakDataV66"),
            lightData: Pointer("ModelLightDataV66"),
            clothData: DynArray("ModelClothDataV66"),
            windData: Pointer("ModelWindDataV66"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV66"),
            softBodyData: DynArray("ModelSoftBodyDataV66"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV66"),
            boundingSphere: Pointer("ModelBoundingSphereV66")
        }
    };
    var V67 = {
        chunkName: "MODL",
        name: "ModelFileDataV67",
        version: 67,
        definitions: {
            ModelPermutationDataV66: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV66")
            },
            ModelMaterialDataV66: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV66"),
                constants: DynArray("ModelConstantDataV66"),
                matConstLinks: DynArray("ModelMatConstLinkV66"),
                uvTransLinks: DynArray("ModelUVTransLinkV66"),
                texTransforms: DynArray("ModelMaterialTexTransformV66"),
                texCoordCount: Uint8,
                sortLayer: Uint32
            },
            ModelTextureDataV66: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV66: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV66: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV66: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV66: {
                flags: Uint32,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2),
                scrollFreq: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                scaleFreq: FixedArray(Float32, 2),
                rotate: Float32,
                rotate_: Float32
            },
            ModelCloudDataV67: {
                clouds: DynArray("ModelParticleCloudV66"),
                emitters: DynArray("ModelParticleEmitterV67")
            },
            ModelParticleCloudV66: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV67: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV66"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                scaleCurve: Pointer("ModelParticleCurveV66"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                transform: Pointer("ModelMatrix43V66"),
                windInfluence: Uint8,
                spawnShape: Uint8,
                planeEmitterSettings: Pointer("PlaneEmitterSettingsV67"),
                meshEmitterSettings: Pointer("MeshEmitterSettingsV67")
            },
            ModelParticleCurveV66: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelMatrix43V66: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PlaneEmitterSettingsV67: {
                alignmentDir: FixedArray(Float32, 3),
                alignmentType: Uint8,
                drag: Float32,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                texCoordRect: FixedArray(Float32, 4)
            },
            ModelParticleFlipbookV66: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            MeshEmitterSettingsV67: {
                alignment: Uint32,
                bankThreshold: Float32,
                bankScale: Float32,
                drag: FixedArray(FixedArray(Float32, 2), 3),
                filename: Filename(),
                obstacleRadius: Float32,
                rotationMin: FixedArray(Float32, 3),
                rotationMax: FixedArray(Float32, 3),
                rotationSpace: Uint32,
                scaleChange: FixedArray(FixedArray(Float32, 2), 3),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 3),
                spinMin: FixedArray(Float32, 3),
                spinMax: FixedArray(Float32, 3)
            },
            ModelObstacleDataV66: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V66")
            },
            ModelStreakDataV66: {
                streaks: DynArray("ModelStreakV66"),
                anchors: DynArray("ModelStreakAnchorV66")
            },
            ModelStreakV66: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV66: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV66: {
                effectLights: DynArray("ModelEffectLightV66")
            },
            ModelEffectLightV66: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV66: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV66"),
                groupBindings: DynArray("ModelClothGroupBindingV66"),
                softLocks: DynArray("ModelClothSoftLockV66"),
                lod0Constraints: DynArray("ModelClothConstraintV66"),
                lod1Constraints: DynArray("ModelClothConstraintV66"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8,
                translateWeight: Float32,
                visBone: Uint64
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV66: {
                weights: DynArray("ModelClothBoneWeightV66")
            },
            ModelClothBoneWeightV66: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV66: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV66: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV66: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV66: {
                effectWind: DynArray("ModelEffectWindV66")
            },
            ModelEffectWindV66: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV66: {
                systems: DynArray("ModelLightningSystemV66"),
                bolts: DynArray("ModelLightningBoltV66"),
                nodes: DynArray("ModelLightningNodeV66")
            },
            ModelLightningSystemV66: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV66: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV66: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelSoftBodyDataV66: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV66: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelBoundingSphereV66: {
                center: FixedArray(Float32, 3),
                radius: Float32
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV66"),
            cloudData: Pointer("ModelCloudDataV67"),
            obstacles: DynArray("ModelObstacleDataV66"),
            streakData: Pointer("ModelStreakDataV66"),
            lightData: Pointer("ModelLightDataV66"),
            clothData: DynArray("ModelClothDataV66"),
            windData: Pointer("ModelWindDataV66"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV66"),
            softBodyData: DynArray("ModelSoftBodyDataV66"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV66"),
            boundingSphere: Pointer("ModelBoundingSphereV66")
        }
    };
    var V68 = {
        chunkName: "MODL",
        name: "ModelFileDataV68",
        version: 68,
        definitions: {
            ModelPermutationDataV66: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV66")
            },
            ModelMaterialDataV66: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV66"),
                constants: DynArray("ModelConstantDataV66"),
                matConstLinks: DynArray("ModelMatConstLinkV66"),
                uvTransLinks: DynArray("ModelUVTransLinkV66"),
                texTransforms: DynArray("ModelMaterialTexTransformV66"),
                texCoordCount: Uint8,
                sortLayer: Uint32
            },
            ModelTextureDataV66: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV66: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV66: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV66: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV66: {
                flags: Uint32,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2),
                scrollFreq: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                scaleFreq: FixedArray(Float32, 2),
                rotate: Float32,
                rotate_: Float32
            },
            ModelCloudDataV68: {
                clouds: DynArray("ModelParticleCloudV66"),
                emitters: DynArray("ModelParticleEmitterV68")
            },
            ModelParticleCloudV66: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV68: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV66"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                scaleCurve: Pointer("ModelParticleCurveV66"),
                scaleCurvePreset: Uint32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                transform: Pointer("ModelMatrix43V66"),
                windInfluence: Uint8,
                spawnShape: Uint8,
                planeEmitterSettings: Pointer("PlaneEmitterSettingsV67"),
                meshEmitterSettings: Pointer("MeshEmitterSettingsV68")
            },
            ModelParticleCurveV66: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelMatrix43V66: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PlaneEmitterSettingsV67: {
                alignmentDir: FixedArray(Float32, 3),
                alignmentType: Uint8,
                drag: Float32,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                texCoordRect: FixedArray(Float32, 4)
            },
            ModelParticleFlipbookV66: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            MeshEmitterSettingsV68: {
                alignment: Uint32,
                bankThreshold: Float32,
                bankScale: Float32,
                drag: FixedArray(FixedArray(Float32, 2), 3),
                filename: Filename(),
                obstacleRadius: Float32,
                rotation: FixedArray(FixedArray(Float32, 2), 3),
                rotationSpace: Uint32,
                scaleChange: FixedArray(FixedArray(Float32, 2), 3),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 3),
                spin: FixedArray(FixedArray(Float32, 2), 3)
            },
            ModelObstacleDataV66: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V66")
            },
            ModelStreakDataV66: {
                streaks: DynArray("ModelStreakV66"),
                anchors: DynArray("ModelStreakAnchorV66")
            },
            ModelStreakV66: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV66: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV66: {
                effectLights: DynArray("ModelEffectLightV66")
            },
            ModelEffectLightV66: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV66: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV66"),
                groupBindings: DynArray("ModelClothGroupBindingV66"),
                softLocks: DynArray("ModelClothSoftLockV66"),
                lod0Constraints: DynArray("ModelClothConstraintV66"),
                lod1Constraints: DynArray("ModelClothConstraintV66"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8,
                translateWeight: Float32,
                visBone: Uint64
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV66: {
                weights: DynArray("ModelClothBoneWeightV66")
            },
            ModelClothBoneWeightV66: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV66: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV66: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV66: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV66: {
                effectWind: DynArray("ModelEffectWindV66")
            },
            ModelEffectWindV66: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV66: {
                systems: DynArray("ModelLightningSystemV66"),
                bolts: DynArray("ModelLightningBoltV66"),
                nodes: DynArray("ModelLightningNodeV66")
            },
            ModelLightningSystemV66: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV66: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV66: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelSoftBodyDataV66: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV66: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelBoundingSphereV66: {
                center: FixedArray(Float32, 3),
                radius: Float32
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV66"),
            cloudData: Pointer("ModelCloudDataV68"),
            obstacles: DynArray("ModelObstacleDataV66"),
            streakData: Pointer("ModelStreakDataV66"),
            lightData: Pointer("ModelLightDataV66"),
            clothData: DynArray("ModelClothDataV66"),
            windData: Pointer("ModelWindDataV66"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV66"),
            softBodyData: DynArray("ModelSoftBodyDataV66"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV66"),
            boundingSphere: Pointer("ModelBoundingSphereV66")
        }
    };
    var V69 = {
        chunkName: "MODL",
        name: "ModelFileDataV69",
        version: 69,
        definitions: {
            ModelPermutationDataV66: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV66")
            },
            ModelMaterialDataV66: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV66"),
                constants: DynArray("ModelConstantDataV66"),
                matConstLinks: DynArray("ModelMatConstLinkV66"),
                uvTransLinks: DynArray("ModelUVTransLinkV66"),
                texTransforms: DynArray("ModelMaterialTexTransformV66"),
                texCoordCount: Uint8,
                sortLayer: Uint32
            },
            ModelTextureDataV66: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV66: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV66: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV66: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV66: {
                flags: Uint32,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2),
                scrollFreq: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                scaleFreq: FixedArray(Float32, 2),
                rotate: Float32,
                rotate_: Float32
            },
            ModelCloudDataV69: {
                clouds: DynArray("ModelParticleCloudV66"),
                emitters: DynArray("ModelParticleEmitterV69")
            },
            ModelParticleCloudV66: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV69: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                bone: Uint64,
                colorBegin: FixedArray(Float32, 4),
                colorEnd: FixedArray(Float32, 4),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV66"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                scaleCurve: Pointer("ModelParticleCurveV66"),
                scaleCurvePreset: Uint32,
                drag: Float32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                transform: Pointer("ModelMatrix43V66"),
                windInfluence: Uint8,
                spawnShape: Uint8,
                planeEmitterSettings: Pointer("PlaneEmitterSettingsV69"),
                meshEmitterSettings: Pointer("MeshEmitterSettingsV69")
            },
            ModelParticleCurveV66: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelMatrix43V66: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PlaneEmitterSettingsV69: {
                alignmentDir: FixedArray(Float32, 3),
                alignmentType: Uint8,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                texCoordRect: FixedArray(Float32, 4)
            },
            ModelParticleFlipbookV66: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            MeshEmitterSettingsV69: {
                alignment: Uint32,
                bankThreshold: Float32,
                bankScale: Float32,
                filename: Filename(),
                obstacleRadius: Float32,
                rotation: FixedArray(FixedArray(Float32, 2), 3),
                scaleChange: FixedArray(FixedArray(Float32, 2), 3),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 3),
                spin: FixedArray(FixedArray(Float32, 2), 3)
            },
            ModelObstacleDataV66: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V66")
            },
            ModelStreakDataV66: {
                streaks: DynArray("ModelStreakV66"),
                anchors: DynArray("ModelStreakAnchorV66")
            },
            ModelStreakV66: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV66: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV66: {
                effectLights: DynArray("ModelEffectLightV66")
            },
            ModelEffectLightV66: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV66: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV66"),
                groupBindings: DynArray("ModelClothGroupBindingV66"),
                softLocks: DynArray("ModelClothSoftLockV66"),
                lod0Constraints: DynArray("ModelClothConstraintV66"),
                lod1Constraints: DynArray("ModelClothConstraintV66"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8,
                translateWeight: Float32,
                visBone: Uint64
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV66: {
                weights: DynArray("ModelClothBoneWeightV66")
            },
            ModelClothBoneWeightV66: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV66: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV66: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV66: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV66: {
                effectWind: DynArray("ModelEffectWindV66")
            },
            ModelEffectWindV66: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV66: {
                systems: DynArray("ModelLightningSystemV66"),
                bolts: DynArray("ModelLightningBoltV66"),
                nodes: DynArray("ModelLightningNodeV66")
            },
            ModelLightningSystemV66: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV66: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV66: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelSoftBodyDataV66: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV66: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelBoundingSphereV66: {
                center: FixedArray(Float32, 3),
                radius: Float32
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV66"),
            cloudData: Pointer("ModelCloudDataV69"),
            obstacles: DynArray("ModelObstacleDataV66"),
            streakData: Pointer("ModelStreakDataV66"),
            lightData: Pointer("ModelLightDataV66"),
            clothData: DynArray("ModelClothDataV66"),
            windData: Pointer("ModelWindDataV66"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV66"),
            softBodyData: DynArray("ModelSoftBodyDataV66"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV66"),
            boundingSphere: Pointer("ModelBoundingSphereV66")
        }
    };
    var V70 = {
        chunkName: "MODL",
        name: "ModelFileDataV70",
        version: 70,
        definitions: {
            ModelPermutationDataV66: {
                token: Uint64,
                materials: RefArray("ModelMaterialDataV66")
            },
            ModelMaterialDataV66: {
                token: Uint64,
                materialId: Uint32,
                filename: Filename(),
                materialFlags: Uint32,
                sortOrder: Uint32,
                textures: DynArray("ModelTextureDataV66"),
                constants: DynArray("ModelConstantDataV66"),
                matConstLinks: DynArray("ModelMatConstLinkV66"),
                uvTransLinks: DynArray("ModelUVTransLinkV66"),
                texTransforms: DynArray("ModelMaterialTexTransformV66"),
                texCoordCount: Uint8,
                sortLayer: Uint32
            },
            ModelTextureDataV66: {
                filename: Filename(),
                textureFlags: Uint32,
                token: Uint64,
                blitId: Uint64,
                uvAnimId: Uint32,
                uvPSInputIndex: Uint8
            },
            ModelConstantDataV66: {
                name: Uint32,
                value: FixedArray(Float32, 4),
                constantFlags: Uint32
            },
            ModelMatConstLinkV66: {
                linkToken: Uint64,
                constantToken: Uint32
            },
            ModelUVTransLinkV66: {
                linkToken: Uint64,
                uvAnimId: Uint32,
                type: Uint8
            },
            ModelMaterialTexTransformV66: {
                flags: Uint32,
                uvIndex: Uint8,
                columns: Uint8,
                rows: Uint8,
                count: Uint16,
                fps: Float32,
                scroll: FixedArray(Float32, 2),
                scrollFreq: FixedArray(Float32, 2),
                scale: FixedArray(Float32, 2),
                scaleFreq: FixedArray(Float32, 2),
                rotate: Float32,
                rotate_: Float32
            },
            ModelCloudDataV70: {
                clouds: DynArray("ModelParticleCloudV66"),
                emitters: DynArray("ModelParticleEmitterV70")
            },
            ModelParticleCloudV66: {
                acceleration: FixedArray(Float32, 3),
                bone: Uint64,
                drag: Float32,
                emitterIndices: DynArray(Uint32),
                fvf: Uint32,
                flags: Uint32,
                materialIndex: Uint32,
                obstacleIndices: DynArray(Uint32),
                velocity: FixedArray(Float32, 3)
            },
            ModelParticleEmitterV70: {
                acceleration: FixedArray(FixedArray(Float32, 2), 4),
                accelerationDistRange: FixedArray(Float32, 2),
                accelerationDistSpeed: FixedArray(Float32, 2),
                affinity: Uint32,
                bone: Uint64,
                colorBegin: FixedArray(FixedArray(Float32, 4), 2),
                colorEnd: FixedArray(FixedArray(Float32, 4), 2),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                emitterFlags: Uint32,
                offset: Float32,
                opacityCurve: Pointer("ModelParticleCurveV66"),
                opacityCurvePreset: Uint32,
                flags: Uint32,
                lifetime: FixedArray(Float32, 2),
                scaleCurve: Pointer("ModelParticleCurveV66"),
                scaleCurvePreset: Uint32,
                drag: Float32,
                velocity: FixedArray(FixedArray(Float32, 2), 4),
                velocityDistRange: FixedArray(Float32, 2),
                velocityDistSpeed: FixedArray(Float32, 2),
                velocityInherit: FixedArray(Float32, 2),
                spawnGroupSize: FixedArray(Float32, 2),
                spawnPeriod: Float32,
                spawnProbability: Float32,
                spawnRadius: FixedArray(Float32, 2),
                spawnWindEmit: FixedArray(Float32, 2),
                spawnWindSpeed: FixedArray(Float32, 2),
                transform: Pointer("ModelMatrix43V66"),
                windInfluence: Uint8,
                spawnShape: Uint8,
                planeEmitterSettings: Pointer("PlaneEmitterSettingsV69"),
                meshEmitterSettings: Pointer("MeshEmitterSettingsV70")
            },
            ModelParticleCurveV66: {
                curveType: Uint8,
                keys: DynArray(FixedArray(Float32, 2))
            },
            ModelMatrix43V66: {
                x: FixedArray(Float32, 4),
                y: FixedArray(Float32, 4),
                z: FixedArray(Float32, 4)
            },
            PlaneEmitterSettingsV69: {
                alignmentDir: FixedArray(Float32, 3),
                alignmentType: Uint8,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                rotationChange: FixedArray(Float32, 2),
                rotationDrag: Float32,
                rotationInitial: FixedArray(Float32, 2),
                scaleChange: FixedArray(FixedArray(Float32, 2), 2),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 2),
                texCoordRect: FixedArray(Float32, 4)
            },
            ModelParticleFlipbookV66: {
                columns: Uint8,
                count: Uint8,
                fps: Float32,
                rows: Uint8,
                start: Uint8
            },
            MeshEmitterSettingsV70: {
                alignment: Uint32,
                bankThreshold: Float32,
                bankScale: Float32,
                filename: Filename(),
                obstacleRadius: Float32,
                rotation: FixedArray(FixedArray(Float32, 2), 3),
                rotationDrag: FixedArray(Float32, 3),
                scaleChange: FixedArray(FixedArray(Float32, 2), 3),
                scaleInitial: FixedArray(FixedArray(Float32, 2), 3),
                spin: FixedArray(FixedArray(Float32, 2), 3)
            },
            ModelObstacleDataV66: {
                affinity: Uint32,
                bone: Uint64,
                type: Uint8,
                response: Uint8,
                flags: Uint32,
                dragCoef: Float32,
                gravityCoef: Float32,
                length: Float32,
                width: Float32,
                height: Float32,
                radius: Float32,
                transform: Pointer("ModelMatrix43V66")
            },
            ModelStreakDataV66: {
                streaks: DynArray("ModelStreakV66"),
                anchors: DynArray("ModelStreakAnchorV66")
            },
            ModelStreakV66: {
                acceleration: FixedArray(Float32, 3),
                velocity: FixedArray(Float32, 3),
                anchorIndices: DynArray(Uint32),
                bone: Uint64,
                flags: Uint32,
                jitter: Float32,
                materialIndex: Uint32,
                noise: Float32,
                spawnDist: Float32,
                texScale: Float32,
                wind: Float32
            },
            ModelStreakAnchorV66: {
                bone: Uint64,
                colorStart: Uint32,
                colorEnd: Uint32,
                falloff: Float32,
                lifetime: Float32,
                flags: Uint32,
                texV: Float32
            },
            ModelLightDataV66: {
                effectLights: DynArray("ModelEffectLightV66")
            },
            ModelEffectLightV66: {
                bone: Uint64,
                color: FixedArray(Uint8, 3),
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelClothDataV66: {
                materialIndex: Uint32,
                drag: Float32,
                gravity: Float32,
                compressibility: Float32,
                slack: Float32,
                stretchiness: Float32,
                weight: Float32,
                wind: Float32,
                mesh: "PackVertexType",
                indices: DynArray(Uint16),
                groups: DynArray("ModelClothMeshGroupV66"),
                groupBindings: DynArray("ModelClothGroupBindingV66"),
                softLocks: DynArray("ModelClothSoftLockV66"),
                lod0Constraints: DynArray("ModelClothConstraintV66"),
                lod1Constraints: DynArray("ModelClothConstraintV66"),
                lod1Indices: DynArray(Uint16),
                barycentricCoords: DynArray(FixedArray(Float32, 3)),
                barycentricIndices: DynArray(Uint16),
                obstacleIndices: DynArray(Uint32),
                lockCount: Uint16,
                lockedNormals: DynArray(Uint32),
                lockedTanegents: DynArray(Uint32),
                lockedBitangents: DynArray(Uint32),
                lod1VertexCount: Uint16,
                flags: Uint8,
                rigidness: Uint8,
                translateWeight: Float32,
                visBone: Uint64
            },
            PackVertexType: {
                fvf: Uint32,
                vertices: DynArray(Uint8)
            },
            ModelClothMeshGroupV66: {
                weights: DynArray("ModelClothBoneWeightV66")
            },
            ModelClothBoneWeightV66: {
                token: Uint64,
                weight: Uint8
            },
            ModelClothGroupBindingV66: {
                strippedToken: Uint64,
                boneName: RefString(),
                OBBMin: FixedArray(Float32, 3),
                OBBMax: FixedArray(Float32, 3)
            },
            ModelClothSoftLockV66: {
                weight: Uint8,
                vertIndex: Uint16
            },
            ModelClothConstraintV66: {
                distance: Uint16,
                relationship: Uint16,
                vertIndexA: Uint16,
                vertIndexB: Uint16
            },
            ModelWindDataV66: {
                effectWind: DynArray("ModelEffectWindV66")
            },
            ModelEffectWindV66: {
                bone: Uint64,
                farDistance: Float32,
                intensity: Float32,
                nearDistance: Float32
            },
            ModelLightningDataV66: {
                systems: DynArray("ModelLightningSystemV66"),
                bolts: DynArray("ModelLightningBoltV66"),
                nodes: DynArray("ModelLightningNodeV66")
            },
            ModelLightningSystemV66: {
                bone: Uint64,
                boltIndices: DynArray(Uint16),
                flags: Uint32,
                fvf: Uint32,
                materialIndex: Uint32
            },
            ModelLightningBoltV66: {
                bone: Uint64,
                nodeIndices: DynArray(Uint16),
                colorBegin: FixedArray(Uint32, 3),
                colorEnd: FixedArray(Uint32, 3),
                colorPeriod: Float32,
                colorFalloff: FixedArray(Float32, 2),
                flags: Uint32,
                flipbook: Pointer("ModelParticleFlipbookV66"),
                fps: Float32,
                frequency: Float32,
                groupMax: Uint32,
                groupMin: Uint32,
                probability: Float32,
                lifetime: FixedArray(Float32, 2),
                numSegments: Uint16,
                opacity: FixedArray(Float32, 2),
                opacityPreset: Uint8,
                texOffset: Float32,
                texRange: FixedArray(Float32, 2),
                texScale: Float32,
                texSpeed: Float32,
                thicknessPreset: Uint8,
                thicknessRange: FixedArray(Float32, 2),
                type: Uint8,
                variance: Float32,
                variancePreset: Uint8,
                noise: Float32
            },
            ModelLightningNodeV66: {
                bone: Uint64,
                childrenIndices: DynArray(Uint16),
                flags: Uint32,
                probability: Float32,
                radius: FixedArray(Float32, 2),
                shape: Uint8,
                updatePos: Float32
            },
            ModelSoftBodyDataV66: {
                materialIndex: Uint32,
                flags: Uint32,
                vertexFvf: Uint32,
                vertBytes: DynArray(Uint8),
                indices: DynArray(Uint16),
                bones: DynArray(Uint64)
            },
            ModelBoneOffsetDataV66: {
                bone: Uint64,
                translation: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                boneInverseOffset: FixedArray(FixedArray(Float32, 4), 3)
            },
            ModelBoundingSphereV66: {
                center: FixedArray(Float32, 3),
                radius: Float32
            }
        },
        root: {
            permutations: DynArray("ModelPermutationDataV66"),
            cloudData: Pointer("ModelCloudDataV70"),
            obstacles: DynArray("ModelObstacleDataV66"),
            streakData: Pointer("ModelStreakDataV66"),
            lightData: Pointer("ModelLightDataV66"),
            clothData: DynArray("ModelClothDataV66"),
            windData: Pointer("ModelWindDataV66"),
            actionOffsetNames: DynArray(Uint64),
            actionOffsets: DynArray(FixedArray(Float32, 3)),
            lodOverride: FixedArray(Float32, 2),
            soundScript: Filename(),
            lightningData: Pointer("ModelLightningDataV66"),
            softBodyData: DynArray("ModelSoftBodyDataV66"),
            boneOffsetData: DynArray("ModelBoneOffsetDataV66"),
            boundingSphere: Pointer("ModelBoundingSphereV66")
        }
    };
    var latest$C = V70;
    var definitions$C = { V0: V0$v, V1: V1$l, V2: V2$g, V3: V3$d, V4: V4$5, V5: V5$5, V6: V6$4, V7: V7$4, V8: V8$4, V9: V9$3, V10: V10$4, V11: V11$4, V12: V12$4, V13: V13$4, V14: V14$4, V15: V15$4, V16: V16$3, V17: V17$2, V18: V18$2, V19: V19$2, V20: V20$2, V21: V21$2, V22: V22$1, V23: V23, V24: V24, V25: V25, V26: V26, V27: V27, V28: V28, V29: V29, V30: V30, V31: V31, V32: V32, V33: V33, V34: V34, V35: V35, V36: V36, V37: V37, V38: V38, V39: V39, V40: V40, V41: V41, V42: V42, V43: V43, V44: V44, V45: V45, V46: V46, V47: V47, V48: V48, V49: V49, V50: V50, V51: V51, V52: V52, V53: V53, V54: V54, V55: V55, V56: V56, V57: V57, V58: V58, V59: V59, V60: V60, V61: V61, V62: V62, V63: V63, V64: V64, V65: V65, V66: V66, V67: V67, V68: V68, V69: V69, V70: V70 };
    var definitionArray$C = Object.values(definitions$C);

    var MODL = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$C,
        definitions: definitions$C,
        latest: latest$C
    });

    var V1$k = {
        chunkName: "msn",
        name: "MapMission",
        version: 1,
        definitions: {
            PackMapInterestPoint: {
                position: FixedArray(Float32, 3),
                forward: FixedArray(Float32, 3)
            }
        },
        root: {
            interestPoint: DynArray("PackMapInterestPoint")
        }
    };
    var V2$f = {
        chunkName: "msn",
        name: "MapMission",
        version: 2,
        definitions: {
            PackMapInterestPoint: {
                position: FixedArray(Float32, 3),
                forward: FixedArray(Float32, 3),
                description: RefString16()
            }
        },
        root: {
            interestPoint: DynArray("PackMapInterestPoint")
        }
    };
    var latest$B = V2$f;
    var definitions$B = { V1: V1$k, V2: V2$f };
    var definitionArray$B = Object.values(definitions$B);

    var MSN = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$B,
        definitions: definitions$B,
        latest: latest$B
    });

    var V0$u = {
        chunkName: "nm15",
        name: "PackMapNavMeshV0",
        version: 0,
        definitions: {
            PackMapNavMeshChunkV0: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                queryMediatorMoppData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapNavMeshChunkV0")
        }
    };
    var V1$j = {
        chunkName: "nm15",
        name: "PackMapNavMeshV1",
        version: 1,
        definitions: {
            PackMapNavMeshChunkV1: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                queryMediatorMoppData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapNavMeshChunkV1")
        }
    };
    var V2$e = {
        chunkName: "nm15",
        name: "PackMapNavMeshV2",
        version: 2,
        definitions: {
            PackMapNavMeshChunkV2: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                queryMediatorMoppData: DynArray(Uint8)
            },
            PackMapNavMeshMoverV2: {
                mapPropId: Uint64,
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                mediatorData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapNavMeshChunkV2"),
            dynamicArray: DynArray("PackMapNavMeshMoverV2")
        }
    };
    var V3$c = {
        chunkName: "nm15",
        name: "PackMapNavMeshV3",
        version: 3,
        definitions: {
            PackMapNavMeshChunkV3: {
                chunkIndex: Uint32,
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                queryMediatorMoppData: DynArray(Uint8)
            },
            PackMapNavMeshMoverV3: {
                chunkIndex: Uint32,
                mapPropId: Uint64,
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                mediatorData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapNavMeshChunkV3"),
            dynamicArray: DynArray("PackMapNavMeshMoverV3")
        }
    };
    var latest$A = V3$c;
    var definitions$A = { V0: V0$u, V1: V1$j, V2: V2$e, V3: V3$c };
    var definitionArray$A = Object.values(definitions$A);

    var NM15 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$A,
        definitions: definitions$A,
        latest: latest$A
    });

    var V0$t = {
        chunkName: "nm15",
        name: "PackMapNavMeshChunkV0",
        version: 0,
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            navMeshData: DynArray(Uint8),
            coarseGraphData: DynArray(Uint8),
            queryMediatorMoppData: DynArray(Uint8)
        }
    };
    var V1$i = {
        chunkName: "nm15",
        name: "PackMapNavMeshChunkV1",
        version: 1,
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            navMeshData: DynArray(Uint8),
            coarseGraphData: DynArray(Uint8),
            queryMediatorMoppData: DynArray(Uint8)
        }
    };
    var V2$d = {
        chunkName: "nm15",
        name: "PackMapNavMeshChunkV2",
        version: 2,
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            navMeshData: DynArray(Uint8),
            coarseGraphData: DynArray(Uint8),
            queryMediatorMoppData: DynArray(Uint8)
        }
    };
    var V3$b = {
        chunkName: "nm15",
        name: "PackMapNavMeshChunkV3",
        version: 3,
        root: {
            chunkIndex: Uint32,
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            navMeshData: DynArray(Uint8),
            coarseGraphData: DynArray(Uint8),
            queryMediatorMoppData: DynArray(Uint8)
        }
    };
    var latest$z = V3$b;
    var definitions$z = { V0: V0$t, V1: V1$i, V2: V2$d, V3: V3$b };
    var definitionArray$z = Object.values(definitions$z);

    var NM15_2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$z,
        definitions: definitions$z,
        latest: latest$z
    });

    var V0$s = {
        chunkName: "nmex",
        name: "PackMapNavMeshExternalV0",
        version: 0,
        definitions: {
            PackMapNavMeshChunkExternalV0: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                filename: Filename()
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapNavMeshChunkExternalV0")
        }
    };
    var V1$h = {
        chunkName: "nmex",
        name: "PackMapNavMeshExternalV1",
        version: 1,
        definitions: {
            PackMapNavMeshChunkExternalV1: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                filename: Filename()
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapNavMeshChunkExternalV1")
        }
    };
    var V2$c = {
        chunkName: "nmex",
        name: "PackMapNavMeshExternalV2",
        version: 2,
        definitions: {
            PackMapNavMeshChunkExternalV2: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                filename: Filename()
            },
            PackMapNavMeshMoverV2: {
                mapPropId: Uint64,
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                mediatorData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapNavMeshChunkExternalV2"),
            dynamicArray: DynArray("PackMapNavMeshMoverV2")
        }
    };
    var V3$a = {
        chunkName: "nmex",
        name: "PackMapNavMeshExternalV3",
        version: 3,
        definitions: {
            PackMapNavMeshChunkExternalV3: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                filename: Filename()
            },
            PackMapNavMeshMoverV3: {
                chunkIndex: Uint32,
                mapPropId: Uint64,
                navMeshData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8),
                mediatorData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapNavMeshChunkExternalV3"),
            dynamicArray: DynArray("PackMapNavMeshMoverV3")
        }
    };
    var latest$y = V3$a;
    var definitions$y = { V0: V0$s, V1: V1$h, V2: V2$c, V3: V3$a };
    var definitionArray$y = Object.values(definitions$y);

    var NMEX = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$y,
        definitions: definitions$y,
        latest: latest$y
    });

    var V0$r = {
        chunkName: "obs",
        name: "MapObstacles",
        version: 0,
        definitions: {
            PackMapEditCollision: {
                token: Uint32,
                flags: Uint32,
                bottmVertices: DynArray(FixedArray(Float32, 3)),
                topVertices: DynArray(FixedArray(Float32, 3))
            }
        },
        root: {
            obstacles: DynArray("PackMapEditCollision")
        }
    };
    var V1$g = {
        chunkName: "obs",
        name: "MapObstacles",
        version: 1,
        definitions: {
            PackMapEditCollision: {
                token: Uint32,
                flags: Uint32,
                bottmVertices: DynArray(FixedArray(Float32, 3)),
                topVertices: DynArray(FixedArray(Float32, 3)),
                name: RefString16()
            }
        },
        root: {
            obstacles: DynArray("PackMapEditCollision")
        }
    };
    var V2$b = {
        chunkName: "obs",
        name: "MapObstacles",
        version: 2,
        definitions: {
            PackMapEditCollision: {
                token: Uint32,
                flags: Uint32,
                bottmVertices: DynArray(FixedArray(Float32, 3)),
                topVertices: DynArray(FixedArray(Float32, 3)),
                name: RefString16(),
                surface: Uint64
            }
        },
        root: {
            obstacles: DynArray("PackMapEditCollision")
        }
    };
    var latest$x = V2$b;
    var definitions$x = { V0: V0$r, V1: V1$g, V2: V2$b };
    var definitionArray$x = Object.values(definitions$x);

    var OBS = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$x,
        definitions: definitions$x,
        latest: latest$x
    });

    var V0$q = {
        chunkName: "occ",
        name: "MapOcclusions",
        version: 0,
        definitions: {
            MapOcclusion: {
                token: Uint32,
                flags: Uint32,
                vertices: DynArray(FixedArray(Float32, 3)),
                name: RefString16()
            }
        },
        root: {
            Occlusions: DynArray("MapOcclusion")
        }
    };
    var latest$w = V0$q;
    var definitions$w = { V0: V0$q };
    var definitionArray$w = Object.values(definitions$w);

    var OCC = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$w,
        definitions: definitions$w,
        latest: latest$w
    });

    var V0$p = {
        chunkName: "octm",
        name: "MapOcclusionTome",
        version: 0,
        root: {
            enableTomeQueries: Uint32,
            tome: DynArray(Uint8),
            propIDMap: DynArray(Uint8),
            reserved: DynArray(Uint8)
        }
    };
    var latest$v = V0$p;
    var definitions$v = { V0: V0$p };
    var definitionArray$v = Object.values(definitions$v);

    var OCTM = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$v,
        definitions: definitions$v,
        latest: latest$v
    });

    var V0$o = {
        chunkName: "pack",
        name: "MapPackage",
        version: 0,
        definitions: {
            MapVariant: {
                file: RefString16(),
                name: RefString16(),
                token: Uint64,
                flags: Uint32
            }
        },
        root: {
            baseFile: Filename(),
            variants: DynArray("MapVariant"),
            flags: Uint32
        }
    };
    var latest$u = V0$o;
    var definitions$u = { V0: V0$o };
    var definitionArray$u = Object.values(definitions$u);

    var PACK = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$u,
        definitions: definitions$u,
        latest: latest$u
    });

    var V0$n = {
        chunkName: "parm",
        name: "MapParam",
        version: 0,
        root: {
            rect: FixedArray(Float32, 4),
            flags: Uint32,
            guid: FixedArray(Uint8, 16)
        }
    };
    var latest$t = V0$n;
    var definitions$t = { V0: V0$n };
    var definitionArray$t = Object.values(definitions$t);

    var PARM = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$t,
        definitions: definitions$t,
        latest: latest$t
    });

    var V0$m = {
        chunkName: "PGTB",
        name: "PagedImageTableDataV0",
        version: 0,
        definitions: {
            PagedImageLayerDataV0: {
                dims: FixedArray(Uint32, 2),
                rawDims: FixedArray(Uint32, 2),
                diskFormat: Uint32,
                rawFormat: Uint32,
                strippedFormat: Uint32
            },
            PagedImagePageDataV0: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32
            }
        },
        root: {
            layers: DynArray("PagedImageLayerDataV0"),
            pages: DynArray("PagedImagePageDataV0")
        }
    };
    var V1$f = {
        chunkName: "PGTB",
        name: "PagedImageTableDataV1",
        version: 1,
        definitions: {
            PagedImageLayerDataV1: {
                dims: FixedArray(Uint32, 2),
                rawDims: FixedArray(Uint32, 2),
                diskFormat: Uint32,
                rawFormat: Uint32,
                strippedFormat: Uint32
            },
            PagedImagePageDataV1: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32,
                solidColor: FixedArray(Uint8, 4)
            }
        },
        root: {
            layers: DynArray("PagedImageLayerDataV1"),
            pages: DynArray("PagedImagePageDataV1")
        }
    };
    var V2$a = {
        chunkName: "PGTB",
        name: "PagedImageTableDataV2",
        version: 2,
        definitions: {
            PagedImageLayerDataV2: {
                dims: FixedArray(Uint32, 2),
                rawDims: FixedArray(Uint32, 2),
                diskFormat: Uint32,
                rawFormat: Uint32,
                strippedFormat: Uint32
            },
            PagedImagePageDataV2: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32,
                solidColor: FixedArray(Uint8, 4)
            }
        },
        root: {
            layers: DynArray("PagedImageLayerDataV2"),
            pages: DynArray("PagedImagePageDataV2"),
            flags: Uint32
        }
    };
    var V3$9 = {
        chunkName: "PGTB",
        name: "PagedImageTableDataV3",
        version: 3,
        definitions: {
            PagedImageLayerDataV3: {
                rawDims: FixedArray(Uint32, 2),
                strippedDims: FixedArray(Uint32, 2),
                rawFormat: Uint32,
                strippedFormat: Uint32,
                diskFormat: Uint32
            },
            PagedImagePageDataV3: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32,
                solidColor: FixedArray(Uint8, 4)
            }
        },
        root: {
            layers: DynArray("PagedImageLayerDataV3"),
            rawPages: DynArray("PagedImagePageDataV3"),
            strippedPages: DynArray("PagedImagePageDataV3"),
            flags: Uint32
        }
    };
    var latest$s = V3$9;
    var definitions$s = { V0: V0$m, V1: V1$f, V2: V2$a, V3: V3$9 };
    var definitionArray$s = Object.values(definitions$s);

    var PGTB = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$s,
        definitions: definitions$s,
        latest: latest$s
    });

    var V1$e = {
        chunkName: "phys",
        name: "PackMapPhysicsV1",
        version: 1,
        definitions: {
            PackMapPhysicsShapeDataV1: {
                scale: Float32,
                gameDataPtr: DynArray(Uint8)
            },
            PackMapPhysicsGeometryV1: {
                shapeDataIndexArray: DynArray(Uint32)
            },
            PackMapPhysicsModelPropV1: {
                token: FixedArray(Uint32, 2),
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            shapeArray: DynArray("PackMapPhysicsShapeDataV1"),
            geometryArray: DynArray("PackMapPhysicsGeometryV1"),
            propModelArray: DynArray("PackMapPhysicsModelPropV1")
        }
    };
    var V2$9 = {
        chunkName: "phys",
        name: "PackMapPhysicsV2",
        version: 2,
        definitions: {
            PackMapPhysicsShapeDataV2: {
                scale: Float32,
                gameDataPtr: DynArray(Uint8)
            },
            PackMapPhysicsGeometryV2: {
                shapeDataIndexArray: DynArray(Uint32)
            },
            PackMapPhysicsModelPropV2: {
                token: FixedArray(Uint32, 2),
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelZoneV0: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            shapeArray: DynArray("PackMapPhysicsShapeDataV2"),
            geometryArray: DynArray("PackMapPhysicsGeometryV2"),
            propModelArray: DynArray("PackMapPhysicsModelPropV2"),
            zoneModelArray: DynArray("PackMapPhysicsModelZoneV0")
        }
    };
    var V3$8 = {
        chunkName: "phys",
        name: "PackMapPhysicsV3",
        version: 3,
        definitions: {
            PackMapPhysicsMeshV3: {
                indexArray: DynArray(Uint16),
                vertexArray: DynArray(FixedArray(Float32, 3)),
                moppCodeData: DynArray(Uint8)
            },
            PackMapPhysicsShapeDataV3: {
                scale: Float32,
                gameDataPtr: DynArray(Uint8)
            },
            PackMapPhysicsGeometryV3: {
                shapeDataIndexArray: DynArray(Uint32)
            },
            PackMapPhysicsModelPropV3: {
                token: FixedArray(Uint32, 2),
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelZoneV1: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            meshArray: DynArray("PackMapPhysicsMeshV3"),
            shapeArray: DynArray("PackMapPhysicsShapeDataV3"),
            geometryArray: DynArray("PackMapPhysicsGeometryV3"),
            propModelArray: DynArray("PackMapPhysicsModelPropV3"),
            zoneModelArray: DynArray("PackMapPhysicsModelZoneV1")
        }
    };
    var V4$4 = {
        chunkName: "phys",
        name: "PackMapPhysicsV4",
        version: 4,
        definitions: {
            PackMapPhysicsObjectV4: {
                mesh: Pointer("PackMapPhysicsMeshV4"),
                physics: Pointer("SceneFilePhysicsV7"),
                game: Pointer("SceneFileGameV5")
            },
            PackMapPhysicsMeshV4: {
                indexArray: DynArray(Uint16),
                vertexArray: DynArray(FixedArray(Float32, 3)),
                moppCodeData: DynArray(Uint8)
            },
            SceneFilePhysicsV7: {
                boxes: DynArray("SceneBoxShapeV7"),
                spheres: DynArray("SceneSphereShapeV7"),
                capsules: DynArray("SceneCapsuleShapeV7"),
                meshes: DynArray("SceneMeshShapeV7")
            },
            SceneBoxShapeV7: {
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneSphereShapeV7: {
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneCapsuleShapeV7: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneMeshShapeV7: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneFileGameV5: {
                paths: DynArray("ScenePathV5"),
                meshes: DynArray("SceneGameMeshV5")
            },
            ScenePathV5: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV5"),
                closed: Uint8
            },
            ScenePathNodeV5: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32,
                singlesided: Uint8
            },
            SceneGameMeshV5: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV5"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaceFlags: DynArray(Uint32)
            },
            SceneEdgeV5: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            },
            PackMapPhysicsGeometryV4: {
                filePath: Fileref(),
                quantizedExtents: Uint8,
                objRefArray: DynArray("PackMapPhysicsObjectRefV4")
            },
            PackMapPhysicsObjectRefV4: {
                sequence: Uint64,
                objectIndex: Uint32
            },
            PackMapPhysicsModelPropV4: {
                token: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelZoneV2: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelObstacleV4: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            objectArray: DynArray("PackMapPhysicsObjectV4"),
            geometryArray: DynArray("PackMapPhysicsGeometryV4"),
            propModelArray: DynArray("PackMapPhysicsModelPropV4"),
            zoneModelArray: DynArray("PackMapPhysicsModelZoneV2"),
            obsModelArray: DynArray("PackMapPhysicsModelObstacleV4")
        }
    };
    var V5$4 = {
        chunkName: "phys",
        name: "PackMapPhysicsV5",
        version: 5,
        definitions: {
            PackMapPhysicsObjectV5: {
                mesh: Pointer("PackMapPhysicsMeshV5"),
                physics: Pointer("SceneFilePhysicsV7"),
                game: Pointer("SceneFileGameV5")
            },
            PackMapPhysicsMeshV5: {
                indexArray: DynArray(Uint16),
                vertexArray: DynArray(FixedArray(Float32, 3)),
                moppCodeData: DynArray(Uint8)
            },
            SceneFilePhysicsV7: {
                boxes: DynArray("SceneBoxShapeV7"),
                spheres: DynArray("SceneSphereShapeV7"),
                capsules: DynArray("SceneCapsuleShapeV7"),
                meshes: DynArray("SceneMeshShapeV7")
            },
            SceneBoxShapeV7: {
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneSphereShapeV7: {
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneCapsuleShapeV7: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneMeshShapeV7: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneFileGameV5: {
                paths: DynArray("ScenePathV5"),
                meshes: DynArray("SceneGameMeshV5")
            },
            ScenePathV5: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV5"),
                closed: Uint8
            },
            ScenePathNodeV5: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                radius: Float32,
                flags: Uint32,
                smoothing: Float32,
                singlesided: Uint8
            },
            SceneGameMeshV5: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV5"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaceFlags: DynArray(Uint32)
            },
            SceneEdgeV5: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            },
            PackMapPhysicsGeometryV5: {
                filePath: RefString16(),
                quantizedExtents: Uint8,
                objRefArray: DynArray("PackMapPhysicsObjectRefV5")
            },
            PackMapPhysicsObjectRefV5: {
                sequence: Uint64,
                objectIndex: Uint32
            },
            PackMapPhysicsModelPropV5: {
                token: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelZoneV3: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelObstacleV5: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            objectArray: DynArray("PackMapPhysicsObjectV5"),
            geometryArray: DynArray("PackMapPhysicsGeometryV5"),
            propModelArray: DynArray("PackMapPhysicsModelPropV5"),
            zoneModelArray: DynArray("PackMapPhysicsModelZoneV3"),
            obsModelArray: DynArray("PackMapPhysicsModelObstacleV5")
        }
    };
    var V6$3 = {
        chunkName: "phys",
        name: "PackMapPhysicsV6",
        version: 6,
        definitions: {
            PackMapPhysicsObjectV6: {
                mesh: Pointer("PackMapPhysicsMeshV6"),
                physics: Pointer("SceneFilePhysicsV7"),
                game: Pointer("SceneFileGameV6")
            },
            PackMapPhysicsMeshV6: {
                indexArray: DynArray(Uint16),
                vertexArray: DynArray(FixedArray(Float32, 3)),
                moppCodeData: DynArray(Uint8)
            },
            SceneFilePhysicsV7: {
                boxes: DynArray("SceneBoxShapeV7"),
                spheres: DynArray("SceneSphereShapeV7"),
                capsules: DynArray("SceneCapsuleShapeV7"),
                meshes: DynArray("SceneMeshShapeV7")
            },
            SceneBoxShapeV7: {
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneSphereShapeV7: {
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneCapsuleShapeV7: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneMeshShapeV7: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneFileGameV6: {
                paths: DynArray("ScenePathV6"),
                meshes: DynArray("SceneGameMeshV6"),
                surfaces: DynArray("SceneGameSurfaceV6")
            },
            ScenePathV6: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV6"),
                closed: Uint8
            },
            ScenePathNodeV6: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                flags: Uint32,
                smoothing: Float32,
                singlesided: Uint8
            },
            SceneGameMeshV6: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV6"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaces: DynArray(Uint8)
            },
            SceneEdgeV6: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            },
            SceneGameSurfaceV6: {
                tokens: DynArray(Uint64)
            },
            PackMapPhysicsGeometryV6: {
                filePath: RefString16(),
                quantizedExtents: Uint8,
                objRefArray: DynArray("PackMapPhysicsObjectRefV6")
            },
            PackMapPhysicsObjectRefV6: {
                sequence: Uint64,
                objectIndex: Uint32
            },
            PackMapPhysicsModelPropV6: {
                token: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelZoneV4: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelObstacleV6: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            objectArray: DynArray("PackMapPhysicsObjectV6"),
            geometryArray: DynArray("PackMapPhysicsGeometryV6"),
            propModelArray: DynArray("PackMapPhysicsModelPropV6"),
            zoneModelArray: DynArray("PackMapPhysicsModelZoneV4"),
            obsModelArray: DynArray("PackMapPhysicsModelObstacleV6")
        }
    };
    var V7$3 = {
        chunkName: "phys",
        name: "PackMapPhysicsV7",
        version: 7,
        definitions: {
            PackMapPhysicsBlockV7: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                objectArray: DynArray("PackMapPhysicsObjectV7"),
                geometryArray: DynArray("PackMapPhysicsGeometryV7"),
                propModelArray: DynArray("PackMapPhysicsModelPropV7"),
                zoneModelArray: DynArray("PackMapPhysicsModelZoneV5"),
                obsModelArray: DynArray("PackMapPhysicsModelObstacleV7")
            },
            PackMapPhysicsObjectV7: {
                mesh: Pointer("PackMapPhysicsMeshV7"),
                physics: Pointer("SceneFilePhysicsV7"),
                game: Pointer("SceneFileGameV6")
            },
            PackMapPhysicsMeshV7: {
                indexArray: DynArray(Uint16),
                vertexArray: DynArray(FixedArray(Float32, 3)),
                moppCodeData: DynArray(Uint8)
            },
            SceneFilePhysicsV7: {
                boxes: DynArray("SceneBoxShapeV7"),
                spheres: DynArray("SceneSphereShapeV7"),
                capsules: DynArray("SceneCapsuleShapeV7"),
                meshes: DynArray("SceneMeshShapeV7")
            },
            SceneBoxShapeV7: {
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneSphereShapeV7: {
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneCapsuleShapeV7: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneMeshShapeV7: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneFileGameV6: {
                paths: DynArray("ScenePathV6"),
                meshes: DynArray("SceneGameMeshV6"),
                surfaces: DynArray("SceneGameSurfaceV6")
            },
            ScenePathV6: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV6"),
                closed: Uint8
            },
            ScenePathNodeV6: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                flags: Uint32,
                smoothing: Float32,
                singlesided: Uint8
            },
            SceneGameMeshV6: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV6"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaces: DynArray(Uint8)
            },
            SceneEdgeV6: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            },
            SceneGameSurfaceV6: {
                tokens: DynArray(Uint64)
            },
            PackMapPhysicsGeometryV7: {
                filePath: RefString16(),
                quantizedExtents: Uint8,
                objRefArray: DynArray("PackMapPhysicsObjectRefV7")
            },
            PackMapPhysicsObjectRefV7: {
                sequence: Uint64,
                objectIndex: Uint32
            },
            PackMapPhysicsModelPropV7: {
                token: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelZoneV5: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelObstacleV7: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            blockArray: DynArray("PackMapPhysicsBlockV7")
        }
    };
    var V8$3 = {
        chunkName: "phys",
        name: "PackMapPhysicsV8",
        version: 8,
        definitions: {
            PackMapPhysicsBlockV8: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                objectArray: DynArray("PackMapPhysicsObjectV8"),
                geometryArray: DynArray("PackMapPhysicsGeometryV8"),
                propModelArray: DynArray("PackMapPhysicsModelPropV8"),
                debrisModelArray: DynArray("PackMapPhysicsModelPropV8"),
                zoneModelArray: DynArray("PackMapPhysicsModelZoneV6"),
                obsModelArray: DynArray("PackMapPhysicsModelObstacleV8")
            },
            PackMapPhysicsObjectV8: {
                mesh: Pointer("PackMapPhysicsMeshV8"),
                physics: Pointer("SceneFilePhysicsV7"),
                game: Pointer("SceneFileGameV6")
            },
            PackMapPhysicsMeshV8: {
                indexArray: DynArray(Uint16),
                vertexArray: DynArray(FixedArray(Float32, 3)),
                moppCodeData: DynArray(Uint8)
            },
            SceneFilePhysicsV7: {
                boxes: DynArray("SceneBoxShapeV7"),
                spheres: DynArray("SceneSphereShapeV7"),
                capsules: DynArray("SceneCapsuleShapeV7"),
                meshes: DynArray("SceneMeshShapeV7")
            },
            SceneBoxShapeV7: {
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneSphereShapeV7: {
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneCapsuleShapeV7: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneMeshShapeV7: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneFileGameV6: {
                paths: DynArray("ScenePathV6"),
                meshes: DynArray("SceneGameMeshV6"),
                surfaces: DynArray("SceneGameSurfaceV6")
            },
            ScenePathV6: {
                properties: DynArray(Uint64),
                points: DynArray("ScenePathNodeV6"),
                closed: Uint8
            },
            ScenePathNodeV6: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4),
                flags: Uint32,
                smoothing: Float32,
                singlesided: Uint8
            },
            SceneGameMeshV6: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                edges: DynArray("SceneEdgeV6"),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaces: DynArray(Uint8)
            },
            SceneEdgeV6: {
                indices: FixedArray(Uint32, 2),
                triangles: DynArray(Uint32)
            },
            SceneGameSurfaceV6: {
                tokens: DynArray(Uint64)
            },
            PackMapPhysicsGeometryV8: {
                filePath: RefString16(),
                quantizedExtents: Uint8,
                objRefArray: DynArray("PackMapPhysicsObjectRefV8")
            },
            PackMapPhysicsObjectRefV8: {
                sequence: Uint64,
                objectIndex: Uint32
            },
            PackMapPhysicsModelPropV8: {
                token: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelZoneV6: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelObstacleV8: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            blockArray: DynArray("PackMapPhysicsBlockV8")
        }
    };
    var V9$2 = {
        chunkName: "phys",
        name: "PackMapPhysicsV9",
        version: 9,
        definitions: {
            PackMapPhysicsBlockV9: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                objectArray: DynArray("PackMapPhysicsObjectV9"),
                geometryArray: DynArray("PackMapPhysicsGeometryV9"),
                propModelArray: DynArray("PackMapPhysicsModelPropV9"),
                debrisModelArray: DynArray("PackMapPhysicsModelPropV9"),
                zoneModelArray: DynArray("PackMapPhysicsModelZoneV7"),
                obsModelArray: DynArray("PackMapPhysicsModelObstacleV9")
            },
            PackMapPhysicsObjectV9: {
                mesh: Pointer("PackMapPhysicsMeshV9"),
                sceneFilePtr: DynArray(Uint8)
            },
            PackMapPhysicsMeshV9: {
                indexArray: DynArray(Uint16),
                vertexArray: DynArray(FixedArray(Float32, 3)),
                moppCodeData: DynArray(Uint8)
            },
            PackMapPhysicsGeometryV9: {
                filePath: RefString16(),
                quantizedExtents: Uint8,
                objRefArray: DynArray("PackMapPhysicsObjectRefV9")
            },
            PackMapPhysicsObjectRefV9: {
                sequence: Uint64,
                objectIndex: Uint32
            },
            PackMapPhysicsModelPropV9: {
                token: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelZoneV7: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelObstacleV9: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            blockArray: DynArray("PackMapPhysicsBlockV9")
        }
    };
    var V10$3 = {
        chunkName: "phys",
        name: "PackMapPhysicsV10",
        version: 10,
        definitions: {
            PackMapPhysicsBlockV10: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                objectArray: DynArray("PackMapPhysicsObjectV10"),
                geometryArray: DynArray("PackMapPhysicsGeometryV10"),
                propModelArray: DynArray("PackMapPhysicsModelPropV10"),
                debrisModelArray: DynArray("PackMapPhysicsModelPropV10"),
                zoneModelArray: DynArray("PackMapPhysicsModelZoneV8"),
                obsModelArray: DynArray("PackMapPhysicsModelObstacleV10")
            },
            PackMapPhysicsObjectV10: {
                mesh: Pointer("PackMapPhysicsMeshV10"),
                sceneFilePtr: DynArray(Uint8)
            },
            PackMapPhysicsMeshV10: {
                indexArray: DynArray(Uint16),
                vertexArray: DynArray(FixedArray(Float32, 3)),
                moppCodeData: DynArray(Uint8)
            },
            PackMapPhysicsGeometryV10: {
                filePath: RefString16(),
                quantizedExtents: Uint8,
                objRefArray: DynArray("PackMapPhysicsObjectRefV10"),
                surface: DynArray(Uint16)
            },
            PackMapPhysicsObjectRefV10: {
                sequence: Uint64,
                objectIndex: Uint32
            },
            PackMapPhysicsModelPropV10: {
                token: Uint64,
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelZoneV8: {
                scale: Float32,
                translate: FixedArray(Float32, 3),
                rotate: FixedArray(Float32, 4),
                geometryIndex: Uint32
            },
            PackMapPhysicsModelObstacleV10: {
                translate: FixedArray(Float32, 3),
                geometryIndex: Uint32
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            blockArray: DynArray("PackMapPhysicsBlockV10")
        }
    };
    var latest$r = V10$3;
    var definitions$r = { V1: V1$e, V2: V2$9, V3: V3$8, V4: V4$4, V5: V5$4, V6: V6$3, V7: V7$3, V8: V8$3, V9: V9$2, V10: V10$3 };
    var definitionArray$r = Object.values(definitions$r);

    var PHYS = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$r,
        definitions: definitions$r,
        latest: latest$r
    });

    var V0$l = {
        chunkName: "PHYS",
        name: "SceneFilePhysicsV0",
        version: 0,
        definitions: {
            SceneShapeV0: {
                shapeOffset: Uint32
            },
            SceneCollisionShapeV0: {
                shapeIndex: Uint32
            },
            SceneNamedShapeV0: {
                shapeIndex: Uint32
            }
        },
        root: {
            shapeData: DynArray(Uint8),
            shapes: DynArray("SceneShapeV0"),
            collisionShapes: DynArray("SceneCollisionShapeV0"),
            namedShapes: DynArray("SceneNamedShapeV0")
        }
    };
    var V1$d = {
        chunkName: "PHYS",
        name: "SceneFilePhysicsV1",
        version: 1,
        definitions: {
            SceneShapeV1: {
                shapeOffset: Uint32
            },
            SceneCollisionShapeV1: {
                shapeIndex: Uint32
            },
            SceneNamedShapeV1: {
                shapeIndex: Uint32
            },
            ScenePathPhysicsV1: {
                pathData: DynArray(FixedArray(Float32, 4))
            }
        },
        root: {
            shapeData: DynArray(Uint8),
            shapes: DynArray("SceneShapeV1"),
            collisionShapes: DynArray("SceneCollisionShapeV1"),
            namedShapes: DynArray("SceneNamedShapeV1"),
            paths: DynArray("ScenePathPhysicsV1")
        }
    };
    var V2$8 = {
        chunkName: "PHYS",
        name: "SceneFilePhysicsV2",
        version: 2,
        definitions: {
            SceneShapeV2: {
                shapeOffset: Uint32
            },
            SceneCollisionShapeV2: {
                shapeIndex: Uint32
            },
            SceneQueryShapeV2: {
                shapeIndex: Uint32
            },
            SceneNamedShapeV2: {
                shapeIndex: Uint32
            },
            ScenePathPhysicsV2: {
                pathData: DynArray(FixedArray(Float32, 4))
            }
        },
        root: {
            shapeData: DynArray(Uint8),
            shapes: DynArray("SceneShapeV2"),
            collisionShapes: DynArray("SceneCollisionShapeV2"),
            queryShapes: DynArray("SceneQueryShapeV2"),
            namedShapes: DynArray("SceneNamedShapeV2"),
            paths: DynArray("ScenePathPhysicsV2")
        }
    };
    var V3$7 = {
        chunkName: "PHYS",
        name: "SceneFilePhysicsV3",
        version: 3,
        definitions: {
            SceneShapeV3: {
                surfaces: DynArray(Uint8)
            },
            SceneShapeSurfaceV3: {
                tokens: DynArray(Uint64)
            },
            SceneCollisionShapeV3: {
                shapeIndex: Uint32
            },
            SceneTriggerShapeV3: {
                shapeIndex: Uint32,
                flags: Uint32
            },
            SceneNamedShapeV3: {
                shapeIndex: Uint32
            },
            ScenePathPhysicsV3: {
                pathData: DynArray(FixedArray(Float32, 4))
            }
        },
        root: {
            shapeData: DynArray(Uint8),
            shapes: DynArray("SceneShapeV3"),
            surfaces: DynArray("SceneShapeSurfaceV3"),
            collisionShapes: DynArray("SceneCollisionShapeV3"),
            triggerShapes: DynArray("SceneTriggerShapeV3"),
            namedShapes: DynArray("SceneNamedShapeV3"),
            paths: DynArray("ScenePathPhysicsV3")
        }
    };
    var V4$3 = {
        chunkName: "PHYS",
        name: "SceneFilePhysicsV4",
        version: 4,
        definitions: {
            SceneShapeV4: {
                surfaces: DynArray(Uint8)
            },
            SceneShapeSurfaceV4: {
                tokens: DynArray(Uint64)
            },
            SceneCollisionShapeV4: {
                shapeIndex: Uint32
            },
            SceneTriggerShapeV4: {
                shapeIndex: Uint32,
                flags: Uint32
            },
            SceneNamedShapeV4: {
                shapeIndex: Uint32
            }
        },
        root: {
            shapeData: DynArray(Uint8),
            shapes: DynArray("SceneShapeV4"),
            surfaces: DynArray("SceneShapeSurfaceV4"),
            collisionShapes: DynArray("SceneCollisionShapeV4"),
            triggerShapes: DynArray("SceneTriggerShapeV4"),
            namedShapes: DynArray("SceneNamedShapeV4")
        }
    };
    var V5$3 = {
        chunkName: "PHYS",
        name: "SceneFilePhysicsV5",
        version: 5,
        definitions: {
            SceneShapeSurfaceV5: {
                tokens: DynArray(Uint64)
            },
            SceneBoxShapeV5: {
                surface: Uint8,
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneSphereShapeV5: {
                surface: Uint8,
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneMeshShapeV5: {
                surfaces: DynArray(Uint8),
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneCollisionShapeV5: {
                shapeIndex: Uint32
            },
            SceneTriggerShapeV5: {
                shapeIndex: Uint32,
                flags: Uint32
            },
            SceneNamedShapeV5: {
                shapeIndex: Uint32
            }
        },
        root: {
            surfaces: DynArray("SceneShapeSurfaceV5"),
            boxes: DynArray("SceneBoxShapeV5"),
            spheres: DynArray("SceneSphereShapeV5"),
            meshes: DynArray("SceneMeshShapeV5"),
            collisionShapes: DynArray("SceneCollisionShapeV5"),
            triggerShapes: DynArray("SceneTriggerShapeV5"),
            namedShapes: DynArray("SceneNamedShapeV5")
        }
    };
    var V6$2 = {
        chunkName: "PHYS",
        name: "SceneFilePhysicsV6",
        version: 6,
        definitions: {
            SceneShapeSurfaceV6: {
                tokens: DynArray(Uint64)
            },
            SceneBoxShapeV6: {
                surface: Uint8,
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneSphereShapeV6: {
                surface: Uint8,
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneCapsuleShapeV6: {
                surface: Uint8,
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneMeshShapeV6: {
                surfaces: DynArray(Uint8),
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            },
            SceneCollisionShapeV6: {
                shapeIndex: Uint32
            },
            SceneTriggerShapeV6: {
                shapeIndex: Uint32,
                flags: Uint32
            },
            SceneNamedShapeV6: {
                shapeIndex: Uint32
            }
        },
        root: {
            surfaces: DynArray("SceneShapeSurfaceV6"),
            boxes: DynArray("SceneBoxShapeV6"),
            spheres: DynArray("SceneSphereShapeV6"),
            capsules: DynArray("SceneCapsuleShapeV6"),
            meshes: DynArray("SceneMeshShapeV6"),
            collisionShapes: DynArray("SceneCollisionShapeV6"),
            triggerShapes: DynArray("SceneTriggerShapeV6"),
            namedShapes: DynArray("SceneNamedShapeV6")
        }
    };
    var V7$2 = {
        chunkName: "PHYS",
        name: "SceneFilePhysicsV7",
        version: 7,
        definitions: {
            SceneBoxShapeV7: {
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneSphereShapeV7: {
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneCapsuleShapeV7: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneMeshShapeV7: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8)
            }
        },
        root: {
            boxes: DynArray("SceneBoxShapeV7"),
            spheres: DynArray("SceneSphereShapeV7"),
            capsules: DynArray("SceneCapsuleShapeV7"),
            meshes: DynArray("SceneMeshShapeV7")
        }
    };
    var V8$2 = {
        chunkName: "PHYS",
        name: "SceneFilePhysicsV8",
        version: 8,
        definitions: {
            SceneBoxShapeV8: {
                dimensions: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 4)
            },
            SceneSphereShapeV8: {
                center: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneCapsuleShapeV8: {
                p0: FixedArray(Float32, 3),
                p1: FixedArray(Float32, 3),
                radius: Float32
            },
            SceneMeshShapeV8: {
                indices: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 3)),
                moppInfo: FixedArray(Float32, 4),
                moppBytes: DynArray(Uint8),
                surfaces: DynArray(Uint8)
            },
            SceneSurfaceV8: {
                tokens: DynArray(Uint64)
            }
        },
        root: {
            boxes: DynArray("SceneBoxShapeV8"),
            spheres: DynArray("SceneSphereShapeV8"),
            capsules: DynArray("SceneCapsuleShapeV8"),
            meshes: DynArray("SceneMeshShapeV8"),
            surfaces: DynArray("SceneSurfaceV8")
        }
    };
    var latest$q = V8$2;
    var definitions$q = { V0: V0$l, V1: V1$d, V2: V2$8, V3: V3$7, V4: V4$3, V5: V5$3, V6: V6$2, V7: V7$2, V8: V8$2 };
    var definitionArray$q = Object.values(definitions$q);

    var PHYS_2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$q,
        definitions: definitions$q,
        latest: latest$q
    });

    var V0$k = {
        chunkName: "pnvm",
        name: "PackMapPhysicsNavMeshV0",
        version: 0,
        definitions: {
            PackMapPhysicsNavMeshChunkV0: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                navMeshData: DynArray(Uint8),
                mediatorMoppData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapPhysicsNavMeshChunkV0")
        }
    };
    var V1$c = {
        chunkName: "pnvm",
        name: "PackMapPhysicsNavMeshV1",
        version: 1,
        definitions: {
            PackMapPhysicsNavMeshChunkV1: {
                boundsMin: FixedArray(Float32, 3),
                boundsMax: FixedArray(Float32, 3),
                navMeshData: DynArray(Uint8),
                mediatorMoppData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            chunkArray: DynArray("PackMapPhysicsNavMeshChunkV1")
        }
    };
    var V2$7 = {
        chunkName: "pnvm",
        name: "PackMapPhysicsNavMeshV2",
        version: 2,
        definitions: {
            PackMapPhysicsNavMeshChunkV2: {
                navMeshData: DynArray(Uint8),
                mediatorMoppData: DynArray(Uint8),
                coarseGraphData: DynArray(Uint8)
            }
        },
        root: {
            boundsMin: FixedArray(Float32, 3),
            boundsMax: FixedArray(Float32, 3),
            chunkDims: FixedArray(Uint32, 2),
            erosionRadius: Float32,
            chunkArray: DynArray("PackMapPhysicsNavMeshChunkV2")
        }
    };
    var latest$p = V2$7;
    var definitions$p = { V0: V0$k, V1: V1$c, V2: V2$7 };
    var definitionArray$p = Object.values(definitions$p);

    var PNVM = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$p,
        definitions: definitions$p,
        latest: latest$p
    });

    var V3$6 = {
        chunkName: "prp2",
        name: "PackMapPropV3",
        version: 3,
        definitions: {
            PackMapPropObjV3: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32,
                lod1: Uint16,
                lod2: Uint16,
                flags: Uint32
            },
            PackMapPropObjAnimSeqV3: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32,
                lod1: Uint16,
                lod2: Uint16,
                flags: Uint32,
                animSequence: Uint64
            },
            PackMapPropObjToolV3: {
                guid: Uint64,
                layerMask: Uint32
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV3"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV3"),
            propToolArray: DynArray("PackMapPropObjToolV3")
        }
    };
    var V4$2 = {
        chunkName: "prp2",
        name: "PackMapPropV4",
        version: 4,
        definitions: {
            PackMapPropObjV4: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32,
                lod1: Uint16,
                lod2: Uint16,
                flags: Uint32,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV4: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32,
                lod1: Uint16,
                lod2: Uint16,
                flags: Uint32,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV4: {
                guid: Uint64,
                layerMask: Uint32
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV4"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV4"),
            propToolArray: DynArray("PackMapPropObjToolV4")
        }
    };
    var V5$2 = {
        chunkName: "prp2",
        name: "PackMapPropV5",
        version: 5,
        definitions: {
            PackMapPropObjV5: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32,
                lod1: Uint16,
                lod2: Uint16,
                flags: Uint32,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV5: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32,
                lod1: Uint16,
                lod2: Uint16,
                flags: Uint32,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV5: {
                guid: Uint64,
                layerMask: Uint32,
                glomOrigin: FixedArray(Float32, 3),
                glomClipScale: FixedArray(Float32, 3),
                glomTargetId: Uint64,
                glomType: Uint8
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV5"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV5"),
            propToolArray: DynArray("PackMapPropObjToolV5")
        }
    };
    var V6$1 = {
        chunkName: "prp2",
        name: "PackMapPropV6",
        version: 6,
        definitions: {
            PackMapPropObjV6: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV6: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV6: {
                guid: Uint64,
                layerMask: Uint32,
                glomOrigin: FixedArray(Float32, 3),
                glomClipScale: FixedArray(Float32, 3),
                glomTargetId: Uint64,
                glomType: Uint8
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV6"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV6"),
            propToolArray: DynArray("PackMapPropObjToolV6")
        }
    };
    var V7$1 = {
        chunkName: "prp2",
        name: "PackMapPropV7",
        version: 7,
        definitions: {
            PackMapPropObjV7: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV7: {
                filename: Filename(),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV7: {
                guid: Uint64,
                layerMask: Uint32,
                glomOrigin: FixedArray(Float32, 3),
                glomClipScale: FixedArray(Float32, 3),
                glomTargetId: Uint64,
                glomType: Uint8
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV7"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV7"),
            propToolArray: DynArray("PackMapPropObjToolV7")
        }
    };
    var V8$1 = {
        chunkName: "prp2",
        name: "PackMapPropV8",
        version: 8,
        definitions: {
            PackMapPropObjV8: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV8: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV8: {
                guid: Uint64,
                layerMask: Uint32,
                glomOrigin: FixedArray(Float32, 3),
                glomClipScale: FixedArray(Float32, 3),
                glomTargetId: Uint64,
                glomType: Uint8
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV8"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV8"),
            propToolArray: DynArray("PackMapPropObjToolV8")
        }
    };
    var V9$1 = {
        chunkName: "prp2",
        name: "PackMapPropV9",
        version: 9,
        definitions: {
            PackMapPropObjV9: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV9: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV9: {
                guid: Uint64,
                layerMask: Uint32,
                glomOrigin: FixedArray(Float32, 3),
                glomClipScale: FixedArray(Float32, 3),
                glomTargetId: Uint64,
                glomType: Uint8
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV9"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV9"),
            propToolArray: DynArray("PackMapPropObjToolV9")
        }
    };
    var V10$2 = {
        chunkName: "prp2",
        name: "PackMapPropV10",
        version: 10,
        definitions: {
            PackMapPropObjV10: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV10: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV10: {
                guid: Uint64,
                layerMask: Uint32,
                glomOrigin: FixedArray(Float32, 3),
                glomClipScale: FixedArray(Float32, 3),
                glomTargetId: Uint64,
                glomType: Uint8
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV10"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV10"),
            propToolArray: DynArray("PackMapPropObjToolV10")
        }
    };
    var V11$3 = {
        chunkName: "prp2",
        name: "PackMapPropV11",
        version: 11,
        definitions: {
            PackMapPropObjV11: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV11: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV11: {
                guid: Uint64,
                layerMask: Uint32,
                glomOrigin: FixedArray(Float32, 3),
                glomClipScale: FixedArray(Float32, 3),
                glomTargetId: Uint64,
                glomType: Uint8
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV11"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV11"),
            propToolArray: DynArray("PackMapPropObjToolV11"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V12$3 = {
        chunkName: "prp2",
        name: "PackMapPropV12",
        version: 12,
        definitions: {
            PackMapPropObjV12: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV12: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV12: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8
            },
            PackMapPropObjMetaV12: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                byte: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV12: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV12"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV12"),
            propToolArray: DynArray("PackMapPropObjToolV12"),
            propMetaArray: DynArray("PackMapPropObjMetaV12"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV12"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V13$3 = {
        chunkName: "prp2",
        name: "PackMapPropV13",
        version: 13,
        definitions: {
            PackMapPropObjV13: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV13: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV13: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64)
            },
            PackMapPropObjMetaV13: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                byte: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV13: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64),
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV13"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV13"),
            propToolArray: DynArray("PackMapPropObjToolV13"),
            propMetaArray: DynArray("PackMapPropObjMetaV13"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV13"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V14$3 = {
        chunkName: "prp2",
        name: "PackMapPropV14",
        version: 14,
        definitions: {
            PackMapPropObjV14: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV14: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjToolV14: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64)
            },
            PackMapPropObjMetaV14: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV14: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64),
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV14"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV14"),
            propToolArray: DynArray("PackMapPropObjToolV14"),
            propMetaArray: DynArray("PackMapPropObjMetaV14"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV14"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V15$3 = {
        chunkName: "prp2",
        name: "PackMapPropV15",
        version: 15,
        definitions: {
            PackMapPropObjV15: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV15: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjInstanceV15: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                transforms: DynArray("PackMapPropTransformV15"),
                origGuidArray: DynArray(Uint64)
            },
            PackMapPropTransformV15: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackMapPropObjToolV15: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64)
            },
            PackMapPropObjMetaV15: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV15: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64),
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV15"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV15"),
            propInstanceArray: DynArray("PackMapPropObjInstanceV15"),
            propToolArray: DynArray("PackMapPropObjToolV15"),
            propMetaArray: DynArray("PackMapPropObjMetaV15"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV15"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V16$2 = {
        chunkName: "prp2",
        name: "PackMapPropV16",
        version: 16,
        definitions: {
            PackMapPropObjV16: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV16: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjInstanceV16: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                transforms: DynArray("PackMapPropTransformV16"),
                origGuidArray: DynArray(Uint64)
            },
            PackMapPropTransformV16: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackMapPropObjToolV16: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64)
            },
            PackMapPropObjMetaV16: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV16: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64),
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV16"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV16"),
            propInstanceArray: DynArray("PackMapPropObjInstanceV16"),
            propToolArray: DynArray("PackMapPropObjToolV16"),
            propMetaArray: DynArray("PackMapPropObjMetaV16"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV16"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V17$1 = {
        chunkName: "prp2",
        name: "PackMapPropV17",
        version: 17,
        definitions: {
            PackMapPropObjV17: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8
            },
            PackMapPropObjAnimSeqV17: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjInstanceV17: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                transforms: DynArray("PackMapPropTransformV17"),
                origGuidArray: DynArray(Uint64)
            },
            PackMapPropTransformV17: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackMapPropObjToolV17: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64)
            },
            PackMapPropObjMetaV17: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV17: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64),
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV17"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV17"),
            propInstanceArray: DynArray("PackMapPropObjInstanceV17"),
            propToolArray: DynArray("PackMapPropObjToolV17"),
            propMetaArray: DynArray("PackMapPropObjMetaV17"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV17"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V18$1 = {
        chunkName: "prp2",
        name: "PackMapPropV18",
        version: 18,
        definitions: {
            PackMapPropObjV18: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8
            },
            PackMapPropObjAnimSeqV18: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjInstanceV18: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                transforms: DynArray("PackMapPropTransformV18"),
                origGuidArray: DynArray(Uint64)
            },
            PackMapPropTransformV18: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackMapPropObjToolV18: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64)
            },
            PackMapPropObjMetaV18: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV18: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64),
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV18"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV18"),
            propInstanceArray: DynArray("PackMapPropObjInstanceV18"),
            propToolArray: DynArray("PackMapPropObjToolV18"),
            propMetaArray: DynArray("PackMapPropObjMetaV18"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV18"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V19$1 = {
        chunkName: "prp2",
        name: "PackMapPropV19",
        version: 19,
        definitions: {
            PackMapPropObjV19: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constTokens: DynArray(Uint32),
                constValues: DynArray(FixedArray(Float32, 4)),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8
            },
            PackMapPropObjAnimSeqV19: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constTokens: DynArray(Uint32),
                constValues: DynArray(FixedArray(Float32, 4)),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjInstanceV19: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constTokens: DynArray(Uint32),
                constValues: DynArray(FixedArray(Float32, 4)),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                transforms: DynArray("PackMapPropTransformV19"),
                origGuidArray: DynArray(Uint64)
            },
            PackMapPropTransformV19: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackMapPropObjToolV19: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64)
            },
            PackMapPropObjMetaV19: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constTokens: DynArray(Uint32),
                constValues: DynArray(FixedArray(Float32, 4)),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV19: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64),
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV19"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV19"),
            propInstanceArray: DynArray("PackMapPropObjInstanceV19"),
            propToolArray: DynArray("PackMapPropObjToolV19"),
            propMetaArray: DynArray("PackMapPropObjMetaV19"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV19"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V20$1 = {
        chunkName: "prp2",
        name: "PackMapPropV20",
        version: 20,
        definitions: {
            PackMapPropObjV20: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constants: DynArray("PackMapPropConstantV17"),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8
            },
            PackMapPropConstantV17: {
                token: Uint32,
                constant: FixedArray(Float32, 4),
                submodel: Uint32
            },
            PackMapPropObjAnimSeqV20: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constants: DynArray("PackMapPropConstantV17"),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjInstanceV20: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constants: DynArray("PackMapPropConstantV17"),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                transforms: DynArray("PackMapPropTransformV20"),
                origGuidArray: DynArray(Uint64)
            },
            PackMapPropTransformV20: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackMapPropObjToolV20: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64)
            },
            PackMapPropObjMetaV20: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constants: DynArray("PackMapPropConstantV17"),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV20: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64),
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV20"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV20"),
            propInstanceArray: DynArray("PackMapPropObjInstanceV20"),
            propToolArray: DynArray("PackMapPropObjToolV20"),
            propMetaArray: DynArray("PackMapPropObjMetaV20"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV20"),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var V21$1 = {
        chunkName: "prp2",
        name: "PackMapPropV21",
        version: 21,
        definitions: {
            PackMapPropObjV21: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constants: DynArray("PackMapPropConstantV18"),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                reserved: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8
            },
            PackMapPropConstantV18: {
                token: Uint32,
                constant: FixedArray(Float32, 4),
                submodel: Uint32
            },
            PackMapPropObjAnimSeqV21: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constants: DynArray("PackMapPropConstantV18"),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                reserved: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                animSequence: Uint64
            },
            PackMapPropObjInstanceV21: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constants: DynArray("PackMapPropConstantV18"),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                reserved: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                transforms: DynArray("PackMapPropTransformV21"),
                origGuidArray: DynArray(Uint64)
            },
            PackMapPropTransformV21: {
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackMapPropObjToolV21: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64)
            },
            PackMapPropObjMetaV21: {
                filename: Filename(),
                blitTextures: DynArray(Filename()),
                constants: DynArray("PackMapPropConstantV18"),
                guid: Uint64,
                permutation: Uint64,
                bounds: FixedArray(Float32, 4),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                color: FixedArray(Uint8, 4),
                scale: Float32,
                lod1: Float32,
                lod2: Float32,
                flags: Uint32,
                reserved: Uint32,
                broadId: Uint16,
                bucketId: Uint16,
                byte: Uint8,
                sortLayer: Uint8,
                layerMask: Uint32,
                glomType: Uint8,
                parent: Uint64,
                glomOrigin: FixedArray(Float32, 3)
            },
            PackMapPropObjVolumeV21: {
                guid: Uint64,
                layerMask: Uint32,
                glomType: Uint8,
                children: DynArray(Uint64),
                glomClipScale: FixedArray(Float32, 3),
                position: FixedArray(Float32, 3),
                rotation: FixedArray(Float32, 3),
                scale: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            propArray: DynArray("PackMapPropObjV21"),
            propAnimArray: DynArray("PackMapPropObjAnimSeqV21"),
            propInstanceArray: DynArray("PackMapPropObjInstanceV21"),
            propToolArray: DynArray("PackMapPropObjToolV21"),
            propMetaArray: DynArray("PackMapPropObjMetaV21"),
            propVolumeArray: DynArray("PackMapPropObjVolumeV21"),
            reserved: RefString16(),
            broadPhase: "PackBroadphaseType",
            nextBroadId: Uint32
        }
    };
    var latest$o = V21$1;
    var definitions$o = { V3: V3$6, V4: V4$2, V5: V5$2, V6: V6$1, V7: V7$1, V8: V8$1, V9: V9$1, V10: V10$2, V11: V11$3, V12: V12$3, V13: V13$3, V14: V14$3, V15: V15$3, V16: V16$2, V17: V17$1, V18: V18$1, V19: V19$1, V20: V20$1, V21: V21$1 };
    var definitionArray$o = Object.values(definitions$o);

    var PRP2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$o,
        definitions: definitions$o,
        latest: latest$o
    });

    var V0$j = {
        chunkName: "PRPS",
        name: "ModelFileProperties",
        version: 0,
        definitions: {
            ModelFixedOffsetData: {
                name: Uint64,
                parentBone: Uint64,
                translation: FixedArray(Float32, 3)
            },
            ModelPropertyData: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            }
        },
        root: {
            fixedOffsetData: DynArray("ModelFixedOffsetData"),
            properties: DynArray("ModelPropertyData")
        }
    };
    var latest$n = V0$j;
    var definitions$n = { V0: V0$j };
    var definitionArray$n = Object.values(definitions$n);

    var PRPS = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$n,
        definitions: definitions$n,
        latest: latest$n
    });

    var V0$i = {
        chunkName: "reso",
        name: "PackMapResourceMapV0",
        version: 0,
        definitions: {
            PackMapResourceMapNodeV0: {
                position: FixedArray(Float32, 3),
                flags: Uint32,
                itemArray: DynArray("PackMapResourceMapNodeItemV0")
            },
            PackMapResourceMapNodeItemV0: {
                filename: Filename(),
                type: Uint32
            }
        },
        root: {
            nodeArray: DynArray("PackMapResourceMapNodeV0")
        }
    };
    var V1$b = {
        chunkName: "reso",
        name: "PackMapResourceMapV1",
        version: 1,
        definitions: {
            PackMapResourceMapNodeV1: {
                position: FixedArray(Float32, 3),
                flags: Uint32,
                itemArray: DynArray("PackMapResourceMapNodeItemV1")
            },
            PackMapResourceMapNodeItemV1: {
                filename: Filename(),
                type: Uint32,
                permutation: Uint64
            }
        },
        root: {
            nodeArray: DynArray("PackMapResourceMapNodeV1")
        }
    };
    var latest$m = V1$b;
    var definitions$m = { V0: V0$i, V1: V1$b };
    var definitionArray$m = Object.values(definitions$m);

    var RESO = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$m,
        definitions: definitions$m,
        latest: latest$m
    });

    var V0$h = {
        chunkName: "rive",
        name: "PackMapRivers",
        version: 0,
        definitions: {
            MapRiver: {
                guid: Uint64,
                xTiling: Float32,
                points: DynArray(FixedArray(Float32, 3)),
                reaches: DynArray("MapRiverReach")
            },
            MapRiverReach: {
                width: Float32,
                curveLength: Float32,
                curvePercent: Float32,
                xTessellation: Uint32,
                yTessellation: FixedArray(Uint32, 2),
                broadId: Uint32,
                materials: DynArray("MapRiverMaterial")
            },
            MapRiverMaterial: {
                materialFile: Filename(),
                textureFiles: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                textureMaps: DynArray("MapRiverTextureMap")
            },
            MapRiverTextureMap: {
                scale: Float32,
                speed: Float32,
                tiling: Float32,
                uvIndex: Uint8
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            flags: Uint32,
            nextBroadId: Uint32,
            rivers: DynArray("MapRiver"),
            broadPhase: "PackBroadphaseType"
        }
    };
    var V1$a = {
        chunkName: "rive",
        name: "PackMapRivers",
        version: 1,
        definitions: {
            MapRiver: {
                guid: Uint64,
                name: RefString16(),
                xTiling: Float32,
                points: DynArray(FixedArray(Float32, 3)),
                reaches: DynArray("MapRiverReach")
            },
            MapRiverReach: {
                width: Float32,
                curveLength: Float32,
                curvePercent: Float32,
                xTessellation: Uint32,
                yTessellation: FixedArray(Uint32, 2),
                broadId: Uint32,
                materials: DynArray("MapRiverMaterial")
            },
            MapRiverMaterial: {
                materialFile: Filename(),
                textureFiles: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                textureMaps: DynArray("MapRiverTextureMap")
            },
            MapRiverTextureMap: {
                scale: Float32,
                speedX: Float32,
                speedY: Float32,
                tiling: Float32,
                uvIndex: Uint8
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            flags: Uint32,
            nextBroadId: Uint32,
            rivers: DynArray("MapRiver"),
            broadPhase: "PackBroadphaseType"
        }
    };
    var V2$6 = {
        chunkName: "rive",
        name: "PackMapRivers",
        version: 2,
        definitions: {
            MapRiver: {
                guid: Uint64,
                name: RefString16(),
                xTiling: Float32,
                points: DynArray(FixedArray(Float32, 3)),
                reaches: DynArray("MapRiverReach")
            },
            MapRiverReach: {
                width: Float32,
                curveLength: Float32,
                curvePercent: Float32,
                xTessellation: Uint32,
                yTessellation: FixedArray(Uint32, 2),
                broadId: Uint32,
                fvf: Uint32,
                materials: DynArray("MapRiverMaterial")
            },
            MapRiverMaterial: {
                materialFile: Filename(),
                textureFiles: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                textureMaps: DynArray("MapRiverTextureMap")
            },
            MapRiverTextureMap: {
                scale: Float32,
                speedX: Float32,
                speedY: Float32,
                tiling: Float32,
                uvIndex: Uint8
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            flags: Uint32,
            nextBroadId: Uint32,
            rivers: DynArray("MapRiver"),
            broadPhase: "PackBroadphaseType"
        }
    };
    var V3$5 = {
        chunkName: "rive",
        name: "PackMapRivers",
        version: 3,
        definitions: {
            MapRiver: {
                guid: Uint64,
                name: RefString16(),
                xTiling: Float32,
                points: DynArray(FixedArray(Float32, 3)),
                reaches: DynArray("MapRiverReach"),
                flags: Uint32
            },
            MapRiverReach: {
                width: Float32,
                curveLength: Float32,
                curvePercent: Float32,
                xTessellation: Uint32,
                yTessellation: FixedArray(Uint32, 2),
                broadId: Uint32,
                fvf: Uint32,
                flags: Uint32,
                materials: DynArray("MapRiverMaterial")
            },
            MapRiverMaterial: {
                materialFile: Filename(),
                textureFiles: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                textureMaps: DynArray("MapRiverTextureMap")
            },
            MapRiverTextureMap: {
                scale: Float32,
                speedX: Float32,
                speedY: Float32,
                tiling: Float32,
                uvIndex: Uint8
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            flags: Uint32,
            nextBroadId: Uint32,
            rivers: DynArray("MapRiver"),
            broadPhase: "PackBroadphaseType"
        }
    };
    var V4$1 = {
        chunkName: "rive",
        name: "PackMapRivers",
        version: 4,
        definitions: {
            MapRiver: {
                guid: Uint64,
                name: RefString16(),
                xTiling: Float32,
                points: DynArray(FixedArray(Float32, 3)),
                reaches: DynArray("MapRiverReach"),
                flags: Uint32
            },
            MapRiverReach: {
                width: Float32,
                curveLength: Float32,
                curvePercent: Float32,
                xTessellation: Uint32,
                yTessellation: FixedArray(Uint32, 2),
                broadId: Uint32,
                fvf: Uint32,
                flags: Uint32,
                materials: DynArray("MapRiverMaterial"),
                reserved: RefString16()
            },
            MapRiverMaterial: {
                materialFile: Filename(),
                textureFiles: DynArray(Filename()),
                constantTokens: DynArray(Uint32),
                constantValues: DynArray(FixedArray(Float32, 4)),
                textureMaps: DynArray("MapRiverTextureMap"),
                flags: Uint32
            },
            MapRiverTextureMap: {
                scale: Float32,
                speedX: Float32,
                speedY: Float32,
                tiling: Float32,
                flags: Uint32,
                uvIndex: Uint8
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            flags: Uint32,
            nextBroadId: Uint32,
            rivers: DynArray("MapRiver"),
            broadPhase: "PackBroadphaseType"
        }
    };
    var V5$1 = {
        chunkName: "rive",
        name: "PackMapRivers",
        version: 5,
        definitions: {
            MapRiver: {
                guid: Uint64,
                name: RefString16(),
                properties: DynArray("PackMapRiverProperty"),
                points: DynArray(FixedArray(Float32, 3)),
                reaches: DynArray("MapRiverReach")
            },
            PackMapRiverProperty: {
                type: Uint32,
                val: Uint64,
                strVal: Filename()
            },
            MapRiverReach: {
                properties: DynArray("PackMapRiverProperty")
            }
        },
        root: {
            rivers: DynArray("MapRiver")
        }
    };
    var latest$l = V5$1;
    var definitions$l = { V0: V0$h, V1: V1$a, V2: V2$6, V3: V3$5, V4: V4$1, V5: V5$1 };
    var definitionArray$l = Object.values(definitions$l);

    var RIVE = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$l,
        definitions: definitions$l,
        latest: latest$l
    });

    var V0$g = {
        chunkName: "ROOT",
        name: "ModelFileRootMotionV0",
        version: 0,
        definitions: {
            ModelRootMotionV0: {
                sequence: Uint64,
                keys: DynArray(Float32),
                values: DynArray(FixedArray(Float32, 3))
            }
        },
        root: {
            rootMotions: DynArray("ModelRootMotionV0")
        }
    };
    var V1$9 = {
        chunkName: "ROOT",
        name: "ModelFileRootMotionV1",
        version: 1,
        definitions: {
            ModelRootMotionV1: {
                sequence: Uint64,
                keys: DynArray(Float32),
                posValues: DynArray(FixedArray(Float32, 3)),
                quatValues: DynArray(FixedArray(Float32, 4))
            }
        },
        root: {
            rootMotions: DynArray("ModelRootMotionV1")
        }
    };
    var latest$k = V1$9;
    var definitions$k = { V0: V0$g, V1: V1$9 };
    var definitionArray$k = Object.values(definitions$k);

    var ROOT = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$k,
        definitions: definitions$k,
        latest: latest$k
    });

    var V0$f = {
        chunkName: "seqn",
        name: "PackAnimSequencesV0",
        version: 0,
        definitions: {
            PackAnimSequenceV0: {
                sequence: Uint64,
                animationData: DynArray("PackAnimSequenceDataV0")
            },
            PackAnimSequenceDataV0: {
                token: Uint64,
                flags: Uint32,
                blendInTime: Float32,
                blendOutTime: Float32,
                chargeStages: DynArray("PackAnimSequenceChargeStageV0"),
                steps: DynArray("PackAnimSequenceStepV0"),
                triggers: DynArray("PackAnimSequenceTriggerV0")
            },
            PackAnimSequenceChargeStageV0: {
                duration: Uint16,
                endingChargeLevel: Uint8
            },
            PackAnimSequenceStepV0: {
                type: Uint8,
                animationSpeed: Float32,
                flags: Uint32,
                action: Pointer("PackAnimSequenceStepActionV0"),
                move: Pointer("PackAnimSequenceStepMoveV0")
            },
            PackAnimSequenceStepActionV0: {
                duration: Uint32
            },
            PackAnimSequenceStepMoveV0: {
                duration: Uint32,
                moveRotation: FixedArray(Float32, 4),
                facingRotation: FixedArray(Float32, 4),
                velocity: FixedArray(Float32, 2)
            },
            PackAnimSequenceTriggerV0: {
                trigger: Uint8,
                time: Uint32,
                flags: Uint32
            }
        },
        root: {
            sequences: DynArray("PackAnimSequenceV0")
        }
    };
    var latest$j = V0$f;
    var definitions$j = { V0: V0$f };
    var definitionArray$j = Object.values(definitions$j);

    var SEQN = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$j,
        definitions: definitions$j,
        latest: latest$j
    });

    var V0$e = {
        chunkName: "shad",
        name: "PackMapShadowV0",
        version: 0,
        definitions: {
            PackMapShadowTileV0: {
                compressionMode: Uint32,
                bytes: DynArray(Uint8)
            }
        },
        root: {
            shadowDims: FixedArray(Uint32, 2),
            tileDims: FixedArray(Uint32, 2),
            tiles: DynArray("PackMapShadowTileV0"),
            worldToShadow: FixedArray(Float32, 16),
            s: FixedArray(Float32, 2),
            t: FixedArray(Float32, 2),
            u: FixedArray(Float32, 2)
        }
    };
    var V1$8 = {
        chunkName: "shad",
        name: "PackMapShadowV1",
        version: 1,
        definitions: {
            PackMapShadowTileV1: {
                compressionMode: Uint32,
                bytes: DynArray(Uint8)
            }
        },
        root: {
            shadowDims: FixedArray(Uint32, 2),
            tileDims: FixedArray(Uint32, 2),
            tiles: DynArray("PackMapShadowTileV1"),
            worldToShadow: FixedArray(Float32, 16),
            s: FixedArray(Float32, 2),
            t: FixedArray(Float32, 2),
            u: FixedArray(Float32, 2),
            shadowEye: FixedArray(Float32, 3),
            shadowDir: FixedArray(Float32, 3),
            shadowUp: FixedArray(Float32, 3)
        }
    };
    var latest$i = V1$8;
    var definitions$i = { V0: V0$e, V1: V1$8 };
    var definitionArray$i = Object.values(definitions$i);

    var SHAD = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$i,
        definitions: definitions$i,
        latest: latest$i
    });

    var V1$7 = {
        chunkName: "shex",
        name: "PackMapShadowExtV1",
        version: 1,
        root: {
            filename: Filename(),
            shadowDims: FixedArray(Uint32, 2)
        }
    };
    var latest$h = V1$7;
    var definitions$h = { V1: V1$7 };
    var definitionArray$h = Object.values(definitions$h);

    var SHEX = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$h,
        definitions: definitions$h,
        latest: latest$h
    });

    var V2$5 = {
        chunkName: "shor",
        name: "MapShore",
        version: 2,
        definitions: {
            MapShoreChain: {
                offset: Float32,
                opacity: Float32,
                animationSpeed: Float32,
                edgeSize: FixedArray(Float32, 2),
                flags: Uint32,
                points: DynArray(FixedArray(Float32, 2)),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                restTime: Float32,
                fadeRanges: FixedArray(FixedArray(Float32, 2), 4)
            }
        },
        root: {
            chains: DynArray("MapShoreChain")
        }
    };
    var V3$4 = {
        chunkName: "shor",
        name: "MapShore",
        version: 3,
        definitions: {
            MapShoreChain: {
                offset: Float32,
                opacity: Float32,
                animationSpeed: Float32,
                edgeSize: FixedArray(Float32, 2),
                flags: Uint32,
                points: DynArray(FixedArray(Float32, 2)),
                materialFilename: Filename(),
                textureFilenames: DynArray(Filename()),
                restTime: Float32,
                fadeRanges: FixedArray(FixedArray(Float32, 2), 4),
                simplifyDistMin: Float32,
                simplifyDistMax: Float32,
                simplifyDot: Float32
            }
        },
        root: {
            chains: DynArray("MapShoreChain")
        }
    };
    var latest$g = V3$4;
    var definitions$g = { V2: V2$5, V3: V3$4 };
    var definitionArray$g = Object.values(definitions$g);

    var SHOR = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$g,
        definitions: definitions$g,
        latest: latest$g
    });

    var V0$d = {
        chunkName: "SKEL",
        name: "ModelFileSkeletonV0",
        version: 0,
        definitions: {
            ModelSkeletonDataV62: {
                grannyModel: Pointer("ModelGrannyModelV0"),
                boneConstraints: DynArray("ModelBoneConstraintV62"),
                boneFlags: DynArray(Uint32),
                boneSymmetries: DynArray("ModelBoneSymmetryV62"),
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV62")
            },
            ModelGrannyModelV0: {
                Name: RefString(),
                Skeleton: Pointer("ModelGrannySkeletonV0"),
                InitialPlacement: "ModelTransformData",
                MeshBindings: DynArray("ModelMeshBindingData"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelGrannySkeletonV0: {
                Name: RefString(),
                Bones: DynArray("ModelBoneData"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneData: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformData",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformData: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingData: {
                Mesh: Pointer(Uint8)
            },
            ModelBoneConstraintV62: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV62"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV62: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            ModelBoneSymmetryV62: {
                boneLeft: Uint64,
                boneRight: Uint64
            },
            ModelTrackMaskV62: {
                data: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            }
        },
        root: {
            skeletonData: Pointer("ModelSkeletonDataV62"),
            fileReference: Filename()
        }
    };
    var V1$6 = {
        chunkName: "SKEL",
        name: "ModelFileSkeletonV1",
        version: 1,
        definitions: {
            ModelSkeletonDataV63: {
                grannyModel: Pointer("ModelGrannyModelV1"),
                boneConstraints: DynArray("ModelBoneConstraintV63"),
                boneFlags: DynArray(Uint32),
                mirrorSpec: "PackGrannyMirrorSpecType",
                emitterBones: DynArray(Uint32),
                trackMasks: DynArray("ModelTrackMaskV63")
            },
            ModelGrannyModelV1: {
                Name: RefString(),
                Skeleton: Pointer("ModelGrannySkeletonV1"),
                InitialPlacement: "ModelTransformData",
                MeshBindings: DynArray("ModelMeshBindingData"),
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelGrannySkeletonV1: {
                Name: RefString(),
                Bones: DynArray("ModelBoneData"),
                LODType: Uint32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelBoneData: {
                Name: RefString(),
                ParentIndex: Uint32,
                LocalTransform: "ModelTransformData",
                InverseWorld4x4: FixedArray(FixedArray(Float32, 4), 4),
                LODError: Float32,
                ExtendedData: Pointer(Uint8),
                ExtendedData_: Pointer(Uint8)
            },
            ModelTransformData: {
                Flags: Uint32,
                Position: FixedArray(Float32, 3),
                Orientation: FixedArray(Float32, 4),
                ScaleShear: FixedArray(FixedArray(Float32, 3), 3)
            },
            ModelMeshBindingData: {
                Mesh: Pointer(Uint8)
            },
            ModelBoneConstraintV63: {
                token: Uint64,
                flags: Uint16,
                twistOffset: Float32,
                animBlend: Float32,
                drag: Float32,
                ellipseRatio: Float32,
                gravity: Float32,
                collisionRadius: Float32,
                wind: Float32,
                angle: FixedArray(Float32, 2),
                angleStrength: Float32,
                angleType: Uint8,
                distanceInner: FixedArray(Float32, 2),
                distanceInnerStrength: Float32,
                distanceInnerType: Uint8,
                links: DynArray("ModelBoneConstraintLinkV63"),
                distanceOuter: FixedArray(Float32, 2),
                distanceOuterStrength: Float32,
                distanceOuterType: Uint8,
                twist: FixedArray(Float32, 2),
                twistStrength: Float32,
                twistType: Uint8
            },
            ModelBoneConstraintLinkV63: {
                angle: Float32,
                azimuth: Float32,
                distance: FixedArray(Float32, 2),
                token: Uint64
            },
            PackGrannyMirrorSpecType: {
                mirrorSpec: DynArray(Uint8)
            },
            ModelTrackMaskV63: {
                data: "PackGrannyTrackMaskType",
                token: Uint64
            },
            PackGrannyTrackMaskType: {
                trackMask: DynArray(Uint8)
            },
            ModelSkeletonOverridesV1: {
                boneConstraints: DynArray("ModelBoneConstraintV63")
            }
        },
        root: {
            skeletonData: Pointer("ModelSkeletonDataV63"),
            fileReference: Filename(),
            overrides: Pointer("ModelSkeletonOverridesV1")
        }
    };
    var latest$f = V1$6;
    var definitions$f = { V0: V0$d, V1: V1$6 };
    var definitionArray$f = Object.values(definitions$f);

    var SKEL = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$f,
        definitions: definitions$f,
        latest: latest$f
    });

    var V0$c = {
        chunkName: "SKEL",
        name: "SceneFileSkeletonV0",
        version: 0,
        definitions: {
            SceneBoneV0: {
                vertexA: FixedArray(Float32, 3),
                vertexB: FixedArray(Float32, 3),
                radius: Float32,
                mass: Float32
            },
            SceneJointV0: {
                bones: FixedArray(Uint32, 2),
                pivots: FixedArray(FixedArray(Float32, 3), 2),
                twists: FixedArray(FixedArray(Float32, 3), 2),
                planes: FixedArray(FixedArray(Float32, 3), 2),
                coneLimit: Float32,
                planeMin: Float32,
                planeMax: Float32,
                twistMin: Float32,
                twistMax: Float32
            },
            SceneUnmappedBoneV0: {
                modelBoneIndex: Uint32,
                sceneBoneIndex: Uint32,
                localPose: FixedArray(FixedArray(Float32, 4), 3)
            }
        },
        root: {
            bones: DynArray("SceneBoneV0"),
            joints: DynArray("SceneJointV0"),
            unmappedBones: DynArray("SceneUnmappedBoneV0"),
            ragdollToModel: DynArray(Uint32),
            modelToRagdoll: DynArray(Uint32)
        }
    };
    var V1$5 = {
        chunkName: "SKEL",
        name: "SceneFileSkeletonV1",
        version: 1,
        definitions: {
            SceneBoneV1: {
                vertexA: FixedArray(Float32, 3),
                vertexB: FixedArray(Float32, 3),
                radius: Float32,
                mass: Float32
            },
            SceneJointV1: {
                bones: FixedArray(Uint32, 2),
                pivots: FixedArray(FixedArray(Float32, 3), 2),
                twists: FixedArray(FixedArray(Float32, 3), 2),
                planes: FixedArray(FixedArray(Float32, 3), 2),
                coneLimit: Float32,
                planeMin: Float32,
                planeMax: Float32,
                twistMin: Float32,
                twistMax: Float32
            },
            SceneHingeJointV1: {
                bones: FixedArray(Uint32, 2),
                pivots: FixedArray(FixedArray(Float32, 3), 2),
                hinges: FixedArray(FixedArray(Float32, 3), 2),
                normals: FixedArray(FixedArray(Float32, 3), 2),
                limitMin: Float32,
                limitMax: Float32
            },
            SceneUnmappedBoneV1: {
                modelBoneIndex: Uint32,
                sceneBoneIndex: Uint32,
                localPose: FixedArray(FixedArray(Float32, 4), 3)
            }
        },
        root: {
            bones: DynArray("SceneBoneV1"),
            joints: DynArray("SceneJointV1"),
            hingeJoints: DynArray("SceneHingeJointV1"),
            unmappedBones: DynArray("SceneUnmappedBoneV1"),
            ragdollToModel: DynArray(Uint32),
            modelToRagdoll: DynArray(Uint32)
        }
    };
    var V2$4 = {
        chunkName: "SKEL",
        name: "SceneFileSkeletonV2",
        version: 2,
        definitions: {
            SceneBoneV2: {
                vertexA: FixedArray(Float32, 3),
                vertexB: FixedArray(Float32, 3),
                radius: Float32,
                mass: Float32
            },
            SceneJointV2: {
                bones: FixedArray(Uint32, 2),
                pivots: FixedArray(FixedArray(Float32, 3), 2),
                twists: FixedArray(FixedArray(Float32, 3), 2),
                planes: FixedArray(FixedArray(Float32, 3), 2),
                coneLimit: Float32,
                planeMin: Float32,
                planeMax: Float32,
                twistMin: Float32,
                twistMax: Float32
            },
            SceneHingeJointV2: {
                bones: FixedArray(Uint32, 2),
                pivots: FixedArray(FixedArray(Float32, 3), 2),
                hinges: FixedArray(FixedArray(Float32, 3), 2),
                normals: FixedArray(FixedArray(Float32, 3), 2),
                limitMin: Float32,
                limitMax: Float32
            }
        },
        root: {
            bones: DynArray("SceneBoneV2"),
            joints: DynArray("SceneJointV2"),
            hingeJoints: DynArray("SceneHingeJointV2"),
            ragdollToModel: DynArray(Uint32)
        }
    };
    var V3$3 = {
        chunkName: "SKEL",
        name: "SceneFileSkeletonV3",
        version: 3,
        definitions: {
            SceneBoneV3: {
                vertexA: FixedArray(Float32, 3),
                vertexB: FixedArray(Float32, 3),
                radius: Float32,
                mass: Float32,
                name: Uint64
            },
            SceneJointV3: {
                bones: FixedArray(Uint32, 2),
                pivots: FixedArray(FixedArray(Float32, 3), 2),
                twists: FixedArray(FixedArray(Float32, 3), 2),
                planes: FixedArray(FixedArray(Float32, 3), 2),
                coneLimit: Float32,
                planeMin: Float32,
                planeMax: Float32,
                twistMin: Float32,
                twistMax: Float32
            },
            SceneHingeJointV3: {
                bones: FixedArray(Uint32, 2),
                pivots: FixedArray(FixedArray(Float32, 3), 2),
                hinges: FixedArray(FixedArray(Float32, 3), 2),
                normals: FixedArray(FixedArray(Float32, 3), 2),
                limitMin: Float32,
                limitMax: Float32
            }
        },
        root: {
            bones: DynArray("SceneBoneV3"),
            joints: DynArray("SceneJointV3"),
            hingeJoints: DynArray("SceneHingeJointV3"),
            ragdollToModel: DynArray(Uint32)
        }
    };
    var latest$e = V3$3;
    var definitions$e = { V0: V0$c, V1: V1$5, V2: V2$4, V3: V3$3 };
    var definitionArray$e = Object.values(definitions$e);

    var SKEL_2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$e,
        definitions: definitions$e,
        latest: latest$e
    });

    var V0$b = {
        chunkName: "snd",
        name: "MapLegacy",
        version: 0,
        root: {
            data: DynArray(Uint8),
            files: DynArray(Filename())
        }
    };
    var latest$d = V0$b;
    var definitions$d = { V0: V0$b };
    var definitionArray$d = Object.values(definitions$d);

    var SND = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$d,
        definitions: definitions$d,
        latest: latest$d
    });

    var V0$a = {
        chunkName: "surf",
        name: "MapSurfaces",
        version: 0,
        definitions: {
            MapSurfaceChunk: {
                coord: FixedArray(Uint32, 3),
                metadata: DynArray("MapSurfaceMeta"),
                typeData: DynArray(Uint8)
            },
            MapSurfaceMeta: {
                index: Uint16,
                descriptor: Uint8,
                data: Uint8
            }
        },
        root: {
            chunkData: DynArray("MapSurfaceChunk"),
            typeData: DynArray(Uint64)
        }
    };
    var V1$4 = {
        chunkName: "surf",
        name: "MapSurfaces",
        version: 1,
        definitions: {
            MapSurfaceAttribute: {
                Id: Uint64,
                Sound: Uint64,
                flags: Uint32
            },
            MapSurfaceAttributeTool: {
                name: RefString16(),
                category: RefString16(),
                color: FixedArray(Uint8, 4)
            }
        },
        root: {
            attributeData: DynArray("MapSurfaceAttribute"),
            toolData: DynArray("MapSurfaceAttributeTool")
        }
    };
    var V2$3 = {
        chunkName: "surf",
        name: "MapSurfaces",
        version: 2,
        definitions: {
            MapSurfaceAttribute: {
                Id: Uint64,
                Sound: Uint64,
                flags: Uint32
            },
            MapSurfaceAttributeTool: {
                name: RefString16(),
                category: RefString16(),
                color: FixedArray(Uint8, 4)
            },
            MapSurfaceTerrainOverride: {
                chunkCoord: FixedArray(Uint32, 2),
                overrideArray: DynArray("MapSurfaceOverride")
            },
            MapSurfaceOverride: {
                surfaceId: Uint64,
                bitArray: DynArray(Uint32)
            },
            MapSurfacePropOverride: {
                propId: Uint64,
                overrideArray: DynArray("MapSurfaceOverride")
            }
        },
        root: {
            attributeData: DynArray("MapSurfaceAttribute"),
            toolData: DynArray("MapSurfaceAttributeTool"),
            terrainArray: DynArray("MapSurfaceTerrainOverride"),
            propArray: DynArray("MapSurfacePropOverride")
        }
    };
    var latest$c = V2$3;
    var definitions$c = { V0: V0$a, V1: V1$4, V2: V2$3 };
    var definitionArray$c = Object.values(definitions$c);

    var SURF = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$c,
        definitions: definitions$c,
        latest: latest$c
    });

    var V0$9 = {
        chunkName: "TKAC",
        name: "KeyTableData",
        version: 0,
        definitions: {
            KeyEntry: {
                assetType: Uint32,
                assetId: Uint32,
                key: Uint64
            }
        },
        root: {
            keyEntryArr: DynArray("KeyEntry")
        }
    };
    var latest$b = V0$9;
    var definitions$b = { V0: V0$9 };
    var definitionArray$b = Object.values(definitions$b);

    var TKAC = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$b,
        definitions: definitions$b,
        latest: latest$b
    });

    var V0$8 = {
        chunkName: "tlfs",
        name: "PackMapToolFsV0",
        version: 0,
        definitions: {
            PackMapToolFsFileV0: {
                filename: Fileref(),
                time: Uint64,
                dataPtr: DynArray(Uint8)
            }
        },
        root: {
            filePtr: DynArray("PackMapToolFsFileV0")
        }
    };
    var latest$a = V0$8;
    var definitions$a = { V0: V0$8 };
    var definitionArray$a = Object.values(definitions$a);

    var TLFS = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$a,
        definitions: definitions$a,
        latest: latest$a
    });

    var V0$7 = {
        chunkName: "TOOL",
        name: "AmatToolParamsV0",
        version: 0,
        definitions: {
            AmatToolConstantV0: {
                token: Uint32,
                displayName: RefString16(),
                defaultValue: FixedArray(Float32, 4),
                flags: Uint32,
                minValue: FixedArray(Float32, 4),
                maxValue: FixedArray(Float32, 4)
            },
            AmatToolTextureV0: {
                texName: RefString16(),
                texDefaultFile: RefString16(),
                flags: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32)
            }
        },
        root: {
            description: RefString16(),
            flags: Uint32,
            text: RefString(),
            texCoordCount: Uint8,
            texTransformCount: Uint8,
            constants: DynArray("AmatToolConstantV0"),
            textures: DynArray("AmatToolTextureV0")
        }
    };
    var V1$3 = {
        chunkName: "TOOL",
        name: "AmatToolParamsV1",
        version: 1,
        definitions: {
            AmatToolConstantV1: {
                token: Uint32,
                displayName: RefString16(),
                defaultValue: FixedArray(Float32, 4),
                flags: Uint32,
                minValue: FixedArray(Float32, 4),
                maxValue: FixedArray(Float32, 4)
            },
            AmatToolTextureV1: {
                texName: RefString16(),
                texDefaultFile: RefString16(),
                flags: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32)
            }
        },
        root: {
            description: RefString16(),
            flags: Uint32,
            text: RefString(),
            texCoordCount: Uint8,
            texTransformCount: Uint8,
            constants: DynArray("AmatToolConstantV1"),
            textures: DynArray("AmatToolTextureV1")
        }
    };
    var V2$2 = {
        chunkName: "TOOL",
        name: "AmatToolParams",
        version: 2,
        definitions: {
            AmatToolConstant: {
                token: Uint32,
                displayName: RefString16(),
                defaultValue: FixedArray(Float32, 4),
                flags: Uint32,
                minValue: FixedArray(Float32, 4),
                maxValue: FixedArray(Float32, 4)
            },
            AmatToolTexture: {
                texName: RefString16(),
                texDefaultFile: RefString16(),
                flags: Uint32,
                texGen: DynArray(Uint32),
                texTransform: DynArray(Uint32)
            }
        },
        root: {
            description: RefString16(),
            flags: Uint32,
            text: RefString(),
            texCoordCount: Uint8,
            texTransformCount: Uint8,
            constants: DynArray("AmatToolConstant"),
            textures: DynArray("AmatToolTexture")
        }
    };
    var V3$2 = {
        chunkName: "TOOL",
        name: "AmatToolParams",
        version: 3,
        definitions: {
            AmatToolConstant: {
                token: Uint32,
                displayName: RefString16(),
                defaultValue: FixedArray(Float32, 4),
                flags: Uint32,
                minValue: FixedArray(Float32, 4),
                maxValue: FixedArray(Float32, 4)
            },
            AmatToolTexture: {
                texName: RefString16(),
                texDefaultFile: RefString16(),
                flags: Uint32,
                texGen: DynArray(Uint32)
            }
        },
        root: {
            description: RefString16(),
            flags: Uint32,
            texCoordCount: Uint8,
            texTransformCount: Uint8,
            decompressedTextCount: Uint32,
            compressedText: DynArray(Uint8),
            constants: DynArray("AmatToolConstant"),
            textures: DynArray("AmatToolTexture")
        }
    };
    var latest$9 = V3$2;
    var definitions$9 = { V0: V0$7, V1: V1$3, V2: V2$2, V3: V3$2 };
    var definitionArray$9 = Object.values(definitions$9);

    var TOOL = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$9,
        definitions: definitions$9,
        latest: latest$9
    });

    var V0$6 = {
        chunkName: "TOOL",
        name: "ModelFileToolV0",
        version: 0,
        definitions: {
            ModelToolCloudV0: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString()),
                obstacleNames: DynArray(RefString())
            }
        },
        root: {
            materialNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV0")
        }
    };
    var V1$2 = {
        chunkName: "TOOL",
        name: "ModelFileToolV1",
        version: 1,
        definitions: {
            ModelToolCloudV1: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString()),
                obstacleNames: DynArray(RefString())
            },
            ModelToolMotionV1: {
                sequence: Uint64,
                keys: DynArray(Float32),
                values: DynArray(FixedArray(Float32, 3))
            }
        },
        root: {
            materialNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV1"),
            motions: DynArray("ModelToolMotionV1")
        }
    };
    var V2$1 = {
        chunkName: "TOOL",
        name: "ModelFileToolV2",
        version: 2,
        definitions: {
            ModelToolCloudV2: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString()),
                obstacleNames: DynArray(RefString())
            },
            ModelToolMotionV2: {
                sequence: Uint64,
                keys: DynArray(Float32),
                values: DynArray(FixedArray(Float32, 3))
            },
            ModelToolBlitTextureV2: {
                blitId: Uint64,
                filename: Filename()
            }
        },
        root: {
            materialNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV2"),
            motions: DynArray("ModelToolMotionV2"),
            blitTextures: DynArray("ModelToolBlitTextureV2")
        }
    };
    var V3$1 = {
        chunkName: "TOOL",
        name: "ModelFileToolV3",
        version: 3,
        definitions: {
            ModelToolCloudV3: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString()),
                obstacleNames: DynArray(RefString())
            },
            ModelToolMotionV3: {
                sequence: Uint64,
                keys: DynArray(Float32),
                values: DynArray(FixedArray(Float32, 3))
            },
            ModelToolBlitTextureV3: {
                blitId: Uint64,
                filename: Filename()
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV3"),
            motions: DynArray("ModelToolMotionV3"),
            blitTextures: DynArray("ModelToolBlitTextureV3")
        }
    };
    var V4 = {
        chunkName: "TOOL",
        name: "ModelFileToolV4",
        version: 4,
        definitions: {
            ModelToolCloudV4: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString()),
                obstacleNames: DynArray(RefString())
            },
            ModelToolMotionV4: {
                sequence: Uint64,
                keys: DynArray(Float32),
                values: DynArray(FixedArray(Float32, 3))
            },
            ModelToolBlitTextureV4: {
                blitId: Uint64,
                filename: Filename()
            },
            ModelToolStreakV4: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV4"),
            motions: DynArray("ModelToolMotionV4"),
            blitTextures: DynArray("ModelToolBlitTextureV4"),
            streakData: Pointer("ModelToolStreakV4")
        }
    };
    var V5 = {
        chunkName: "TOOL",
        name: "ModelFileToolV5",
        version: 5,
        definitions: {
            ModelToolCloudV5: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolMotionV5: {
                sequence: Uint64,
                keys: DynArray(Float32),
                values: DynArray(FixedArray(Float32, 3))
            },
            ModelToolBlitTextureV5: {
                blitId: Uint64,
                filename: Filename()
            },
            ModelToolStreakV5: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV5"),
            motions: DynArray("ModelToolMotionV5"),
            blitTextures: DynArray("ModelToolBlitTextureV5"),
            streakData: Pointer("ModelToolStreakV5")
        }
    };
    var V6 = {
        chunkName: "TOOL",
        name: "ModelFileToolV6",
        version: 6,
        definitions: {
            ModelToolCloudV6: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV6: {
                blitId: Uint64,
                filename: Filename()
            },
            ModelToolStreakV6: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV6"),
            blitTextures: DynArray("ModelToolBlitTextureV6"),
            streakData: Pointer("ModelToolStreakV6")
        }
    };
    var V7 = {
        chunkName: "TOOL",
        name: "ModelFileToolV7",
        version: 7,
        definitions: {
            ModelToolCloudV7: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV7: {
                blitId: Uint64,
                filename: Filename()
            },
            ModelToolStreakV7: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV7: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV7"),
            blitTextures: DynArray("ModelToolBlitTextureV7"),
            streakData: Pointer("ModelToolStreakV7"),
            lightningData: Pointer("ModelToolLightningV7")
        }
    };
    var V8 = {
        chunkName: "TOOL",
        name: "ModelFileToolV8",
        version: 8,
        definitions: {
            ModelToolCloudV8: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV8: {
                blitId: Uint64,
                filename: Filename()
            },
            ModelToolStreakV8: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV8: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV8"),
            blitTextures: DynArray("ModelToolBlitTextureV8"),
            streakData: Pointer("ModelToolStreakV8"),
            lightningData: Pointer("ModelToolLightningV8"),
            permutationTokens: DynArray(Uint64)
        }
    };
    var V9 = {
        chunkName: "TOOL",
        name: "ModelFileToolV9",
        version: 9,
        definitions: {
            ModelToolCloudV9: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV9: {
                blitId: Uint64,
                filename: Filename()
            },
            ModelToolStreakV9: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV9: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            },
            ModelToolPropertyDataV9: {
                id: Uint64,
                type: Uint32,
                mergeIndex: Uint32,
                time: Float32,
                val: Uint64,
                strVal: Filename()
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV9"),
            blitTextures: DynArray("ModelToolBlitTextureV9"),
            streakData: Pointer("ModelToolStreakV9"),
            lightningData: Pointer("ModelToolLightningV9"),
            permutationTokens: DynArray(Uint64),
            properties: DynArray("ModelToolPropertyDataV9")
        }
    };
    var V10$1 = {
        chunkName: "TOOL",
        name: "ModelFileToolV10",
        version: 10,
        definitions: {
            ModelToolCloudV10: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV10: {
                blitId: Uint64,
                filename: Filename()
            },
            ModelToolStreakV10: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV10: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV10"),
            blitTextures: DynArray("ModelToolBlitTextureV10"),
            streakData: Pointer("ModelToolStreakV10"),
            lightningData: Pointer("ModelToolLightningV10"),
            permutationTokens: DynArray(Uint64)
        }
    };
    var V11$2 = {
        chunkName: "TOOL",
        name: "ModelFileToolV11",
        version: 11,
        definitions: {
            ModelToolCloudV11: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV11: {
                blitId: Uint64,
                filename: Fileref()
            },
            ModelToolStreakV11: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV11: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV11"),
            blitTextures: DynArray("ModelToolBlitTextureV11"),
            streakData: Pointer("ModelToolStreakV11"),
            lightningData: Pointer("ModelToolLightningV11"),
            permutationTokens: DynArray(Uint64)
        }
    };
    var V12$2 = {
        chunkName: "TOOL",
        name: "ModelFileToolV12",
        version: 12,
        definitions: {
            ModelToolCloudV12: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV12: {
                blitId: Uint64,
                filename: Fileref()
            },
            ModelToolStreakV12: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV12: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            },
            ModelToolAnimationV12: {
                name: Uint64,
                filename: RefString16(),
                data: "PackGrannyAnimationTypeV0"
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV12"),
            blitTextures: DynArray("ModelToolBlitTextureV12"),
            streakData: Pointer("ModelToolStreakV12"),
            lightningData: Pointer("ModelToolLightningV12"),
            permutationTokens: DynArray(Uint64),
            highLodAnimations: DynArray("ModelToolAnimationV12")
        }
    };
    var V13$2 = {
        chunkName: "TOOL",
        name: "ModelFileToolV13",
        version: 13,
        definitions: {
            ModelToolCloudV13: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV13: {
                blitId: Uint64,
                filename: Fileref()
            },
            ModelToolStreakV13: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV13: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            },
            ModelToolAnimationV13: {
                name: Uint64,
                filename: RefString16(),
                data: "PackGrannyAnimationTypeV0"
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV13"),
            blitTextures: DynArray("ModelToolBlitTextureV13"),
            streakData: Pointer("ModelToolStreakV13"),
            lightningData: Pointer("ModelToolLightningV13"),
            permutationTokens: DynArray(Uint64),
            highLodAnimations: DynArray("ModelToolAnimationV13")
        }
    };
    var V14$2 = {
        chunkName: "TOOL",
        name: "ModelFileToolV14",
        version: 14,
        definitions: {
            ModelToolCloudV14: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV14: {
                blitId: Uint64,
                filename: Fileref()
            },
            ModelToolStreakV14: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV14: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            },
            ModelToolAnimationV14: {
                name: Uint64,
                filename: RefString16(),
                data: "PackGrannyAnimationTypeV0"
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelSequenceCompressionInfoV14: {
                animToken: Uint64,
                cmpGroup: RefString16(),
                cmpType: RefString16()
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV14"),
            blitTextures: DynArray("ModelToolBlitTextureV14"),
            streakData: Pointer("ModelToolStreakV14"),
            lightningData: Pointer("ModelToolLightningV14"),
            permutationTokens: DynArray(Uint64),
            highLodAnimations: DynArray("ModelToolAnimationV14"),
            compressionInfos: DynArray("ModelSequenceCompressionInfoV14")
        }
    };
    var V15$2 = {
        chunkName: "TOOL",
        name: "ModelFileToolV15",
        version: 15,
        definitions: {
            ModelToolCloudV15: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV15: {
                blitId: Uint64,
                filename: Fileref()
            },
            ModelToolStreakV15: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV15: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            },
            ModelToolAnimationV15: {
                name: Uint64,
                filename: RefString16(),
                data: "PackGrannyAnimationTypeV0"
            },
            PackGrannyAnimationTypeV0: {
                animation: DynArray(Uint8)
            },
            ModelSequenceCompressionInfoV15: {
                animToken: Uint64,
                cmpGroup: RefString16(),
                cmpType: RefString16()
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV15"),
            blitTextures: DynArray("ModelToolBlitTextureV15"),
            streakData: Pointer("ModelToolStreakV15"),
            lightningData: Pointer("ModelToolLightningV15"),
            permutationTokens: DynArray(Uint64),
            highLodAnimations: DynArray("ModelToolAnimationV15"),
            compressionInfos: DynArray("ModelSequenceCompressionInfoV15"),
            region: RefString()
        }
    };
    var V16$1 = {
        chunkName: "TOOL",
        name: "ModelFileToolV16",
        version: 16,
        definitions: {
            ModelToolCloudV16: {
                cloudNames: DynArray(RefString()),
                emitterNames: DynArray(RefString())
            },
            ModelToolBlitTextureV16: {
                blitId: Uint64,
                filename: Fileref()
            },
            ModelToolStreakV16: {
                streakNames: DynArray(RefString()),
                anchorNames: DynArray(RefString())
            },
            ModelToolLightningV16: {
                systemNames: DynArray(RefString()),
                boltNames: DynArray(RefString()),
                nodeNames: DynArray(RefString())
            },
            ModelToolAnimationV16: {
                name: Uint64,
                filename: RefString16(),
                data: "PackGrannyAnimationTypeV1"
            },
            PackGrannyAnimationTypeV1: {
                animation: DynArray(Uint8),
                pointers: DynArray(Uint32)
            },
            ModelSequenceCompressionInfoV16: {
                animToken: Uint64,
                cmpGroup: RefString16(),
                cmpType: RefString16()
            }
        },
        root: {
            modelType: Uint64,
            materialNames: DynArray(RefString()),
            obstacleNames: DynArray(RefString()),
            cloudData: Pointer("ModelToolCloudV16"),
            blitTextures: DynArray("ModelToolBlitTextureV16"),
            streakData: Pointer("ModelToolStreakV16"),
            lightningData: Pointer("ModelToolLightningV16"),
            permutationTokens: DynArray(Uint64),
            highLodAnimations: DynArray("ModelToolAnimationV16"),
            compressionInfos: DynArray("ModelSequenceCompressionInfoV16"),
            region: RefString()
        }
    };
    var latest$8 = V16$1;
    var definitions$8 = { V0: V0$6, V1: V1$2, V2: V2$1, V3: V3$1, V4: V4, V5: V5, V6: V6, V7: V7, V8: V8, V9: V9, V10: V10$1, V11: V11$2, V12: V12$2, V13: V13$2, V14: V14$2, V15: V15$2, V16: V16$1 };
    var definitionArray$8 = Object.values(definitions$8);

    var TOOL_2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$8,
        definitions: definitions$8,
        latest: latest$8
    });

    var V10 = {
        chunkName: "trn",
        name: "PackMapTerrainV10",
        version: 10,
        definitions: {
            PackMapTerrainChunkV10: {
                chunkFlags: Uint32,
                tileTableArray: DynArray(Uint8)
            },
            PackMapTerrainMaterialsV10: {
                pagedImage: Filename(),
                constArray: DynArray("PackMapTerrainConstV10"),
                texFileArray: DynArray("PackMapTerrainTexV10"),
                materials: DynArray("PackMapTerrrainChunkMaterialV10")
            },
            PackMapTerrainConstV10: {
                tokenName: Uint32,
                value: FixedArray(Float32, 4)
            },
            PackMapTerrainTexV10: {
                tokenName: Uint32,
                flags: Uint32,
                filename: Filename(),
                flags_: FixedArray(Uint32, 2),
                layer: Uint32
            },
            PackMapTerrrainChunkMaterialV10: {
                tiling: Uint8,
                hiResMaterial: "PackMapTerrainMaterialV10",
                loResMaterial: "PackMapTerrainMaterialV10",
                uvData: Pointer("PackMapTerrainChunkUVDataV10")
            },
            PackMapTerrainMaterialV10: {
                materialFile: Filename(),
                fvf: Uint32,
                constIndexArray: DynArray(Uint32),
                texIndexArray: DynArray(Uint32)
            },
            PackMapTerrainChunkUVDataV10: {
                translation: FixedArray(Float32, 2),
                xScaleRange: FixedArray(Float32, 2),
                yScaleRange: FixedArray(Float32, 2),
                scaleSpeed: FixedArray(Float32, 2),
                rotation: Float32
            }
        },
        root: {
            dims: FixedArray(Uint32, 2),
            swapDistance: Float32,
            heightMapArray: DynArray(Float32),
            tileFlagArray: DynArray(Uint32),
            chunkArray: DynArray("PackMapTerrainChunkV10"),
            materials: Pointer("PackMapTerrainMaterialsV10"),
            typeArray: DynArray(Uint64)
        }
    };
    var V11$1 = {
        chunkName: "trn",
        name: "PackMapTerrainV11",
        version: 11,
        definitions: {
            PackMapTerrainChunkV11: {
                chunkFlags: Uint32,
                tileTableArray: DynArray(Uint8)
            },
            PackMapTerrainMaterialsV11: {
                pagedImage: Filename(),
                constArray: DynArray("PackMapTerrainConstV11"),
                texFileArray: DynArray("PackMapTerrainTexV11"),
                materials: DynArray("PackMapTerrrainChunkMaterialV11")
            },
            PackMapTerrainConstV11: {
                tokenName: Uint32,
                value: FixedArray(Float32, 4)
            },
            PackMapTerrainTexV11: {
                tokenName: Uint32,
                flags: Uint32,
                filename: Filename(),
                flags_: FixedArray(Uint32, 2),
                layer: Uint32
            },
            PackMapTerrrainChunkMaterialV11: {
                tiling: FixedArray(Uint8, 3),
                hiResMaterial: "PackMapTerrainMaterialV11",
                loResMaterial: "PackMapTerrainMaterialV11",
                uvData: Pointer("PackMapTerrainChunkUVDataV11")
            },
            PackMapTerrainMaterialV11: {
                materialFile: Filename(),
                fvf: Uint32,
                constIndexArray: DynArray(Uint32),
                texIndexArray: DynArray(Uint32)
            },
            PackMapTerrainChunkUVDataV11: {
                translation: FixedArray(Float32, 2),
                xScaleRange: FixedArray(Float32, 2),
                yScaleRange: FixedArray(Float32, 2),
                scaleSpeed: FixedArray(Float32, 2),
                rotation: Float32
            }
        },
        root: {
            dims: FixedArray(Uint32, 2),
            swapDistance: Float32,
            heightMapArray: DynArray(Float32),
            tileFlagArray: DynArray(Uint32),
            chunkArray: DynArray("PackMapTerrainChunkV11"),
            materials: Pointer("PackMapTerrainMaterialsV11"),
            typeArray: DynArray(Uint64)
        }
    };
    var V12$1 = {
        chunkName: "trn",
        name: "PackMapTerrainV12",
        version: 12,
        definitions: {
            PackMapTerrainChunkV12: {
                chunkFlags: Uint32,
                tileTableArray: DynArray(Uint8)
            },
            PackMapTerrainMaterialsV12: {
                pagedImage: Filename(),
                constArray: DynArray("PackMapTerrainConstV12"),
                texFileArray: DynArray("PackMapTerrainTexV12"),
                materials: DynArray("PackMapTerrrainChunkMaterialV12")
            },
            PackMapTerrainConstV12: {
                tokenName: Uint32,
                value: FixedArray(Float32, 4)
            },
            PackMapTerrainTexV12: {
                tokenName: Uint32,
                flags: Uint32,
                filename: Filename(),
                flags_: FixedArray(Uint32, 2),
                layer: Uint32
            },
            PackMapTerrrainChunkMaterialV12: {
                tiling: FixedArray(Uint8, 3),
                hiResMaterial: "PackMapTerrainMaterialV12",
                loResMaterial: "PackMapTerrainMaterialV12",
                uvData: Pointer("PackMapTerrainChunkUVDataV12")
            },
            PackMapTerrainMaterialV12: {
                materialFile: Filename(),
                fvf: Uint32,
                constIndexArray: DynArray(Uint32),
                texIndexArray: DynArray(Uint32)
            },
            PackMapTerrainChunkUVDataV12: {
                translation: FixedArray(Float32, 2),
                xScaleRange: FixedArray(Float32, 2),
                yScaleRange: FixedArray(Float32, 2),
                scaleSpeed: FixedArray(Float32, 2),
                rotation: Float32
            }
        },
        root: {
            dims: FixedArray(Uint32, 2),
            swapDistance: Float32,
            heightMapArray: DynArray(Float32),
            tileFlagArray: DynArray(Uint32),
            chunkArray: DynArray("PackMapTerrainChunkV12"),
            materials: Pointer("PackMapTerrainMaterialsV12"),
            typeArray: DynArray(Uint64)
        }
    };
    var V13$1 = {
        chunkName: "trn",
        name: "PackMapTerrainV13",
        version: 13,
        definitions: {
            PackMapTerrainChunkV13: {
                chunkFlags: Uint32,
                tileTableArray: DynArray(Uint8)
            },
            PackMapTerrainMaterialsV13: {
                pagedImage: Filename(),
                constArray: DynArray("PackMapTerrainConstV13"),
                texFileArray: DynArray("PackMapTerrainTexV13"),
                materials: DynArray("PackMapTerrrainChunkMaterialV13"),
                midFade: FixedArray(Float32, 2),
                farFade: FixedArray(Float32, 2)
            },
            PackMapTerrainConstV13: {
                tokenName: Uint32,
                value: FixedArray(Float32, 4)
            },
            PackMapTerrainTexV13: {
                tokenName: Uint32,
                flags: Uint32,
                filename: Filename(),
                flags_: FixedArray(Uint32, 2),
                layer: Uint32
            },
            PackMapTerrrainChunkMaterialV13: {
                tiling: FixedArray(Uint8, 3),
                hiResMaterial: "PackMapTerrainMaterialV13",
                loResMaterial: "PackMapTerrainMaterialV13",
                faderMaterial: "PackMapTerrainMaterialV13",
                uvData: Pointer("PackMapTerrainChunkUVDataV13")
            },
            PackMapTerrainMaterialV13: {
                materialFile: Filename(),
                fvf: Uint32,
                constIndexArray: DynArray(Uint32),
                texIndexArray: DynArray(Uint32)
            },
            PackMapTerrainChunkUVDataV13: {
                translation: FixedArray(Float32, 2),
                xScaleRange: FixedArray(Float32, 2),
                yScaleRange: FixedArray(Float32, 2),
                scaleSpeed: FixedArray(Float32, 2),
                rotation: Float32
            }
        },
        root: {
            dims: FixedArray(Uint32, 2),
            swapDistance: Float32,
            heightMapArray: DynArray(Float32),
            tileFlagArray: DynArray(Uint32),
            chunkArray: DynArray("PackMapTerrainChunkV13"),
            materials: Pointer("PackMapTerrainMaterialsV13"),
            typeArray: DynArray(Uint64)
        }
    };
    var V14$1 = {
        chunkName: "trn",
        name: "PackMapTerrainV14",
        version: 14,
        definitions: {
            PackMapTerrainChunkV14: {
                chunkFlags: Uint32,
                surfaceIndexArray: DynArray(Uint16),
                surfaceTokenArray: DynArray(Uint64)
            },
            PackMapTerrainMaterialsV14: {
                pagedImage: Filename(),
                constArray: DynArray("PackMapTerrainConstV14"),
                texFileArray: DynArray("PackMapTerrainTexV14"),
                materials: DynArray("PackMapTerrrainChunkMaterialV14"),
                midFade: FixedArray(Float32, 2),
                farFade: FixedArray(Float32, 2)
            },
            PackMapTerrainConstV14: {
                tokenName: Uint32,
                value: FixedArray(Float32, 4)
            },
            PackMapTerrainTexV14: {
                tokenName: Uint32,
                flags: Uint32,
                filename: Filename(),
                flags_: FixedArray(Uint32, 2),
                layer: Uint32
            },
            PackMapTerrrainChunkMaterialV14: {
                tiling: FixedArray(Uint8, 3),
                hiResMaterial: "PackMapTerrainMaterialV14",
                loResMaterial: "PackMapTerrainMaterialV14",
                faderMaterial: "PackMapTerrainMaterialV14",
                uvData: Pointer("PackMapTerrainChunkUVDataV14")
            },
            PackMapTerrainMaterialV14: {
                materialFile: Filename(),
                fvf: Uint32,
                constIndexArray: DynArray(Uint32),
                texIndexArray: DynArray(Uint32)
            },
            PackMapTerrainChunkUVDataV14: {
                translation: FixedArray(Float32, 2),
                xScaleRange: FixedArray(Float32, 2),
                yScaleRange: FixedArray(Float32, 2),
                scaleSpeed: FixedArray(Float32, 2),
                rotation: Float32
            }
        },
        root: {
            dims: FixedArray(Uint32, 2),
            swapDistance: Float32,
            heightMapArray: DynArray(Float32),
            tileFlagArray: DynArray(Uint32),
            chunkArray: DynArray("PackMapTerrainChunkV14"),
            materials: Pointer("PackMapTerrainMaterialsV14")
        }
    };
    var V15$1 = {
        chunkName: "trn",
        name: "PackMapTerrainV15",
        version: 15,
        definitions: {
            PackMapTerrainChunkV14: {
                chunkFlags: Uint32,
                surfaceIndexArray: DynArray(Uint16),
                surfaceTokenArray: DynArray(Uint64)
            },
            PackMapTerrainMaterialsV14: {
                pagedImage: Filename(),
                constArray: DynArray("PackMapTerrainConstV14"),
                texFileArray: DynArray("PackMapTerrainTexV14"),
                materials: DynArray("PackMapTerrrainChunkMaterialV14"),
                midFade: FixedArray(Float32, 2),
                farFade: FixedArray(Float32, 2)
            },
            PackMapTerrainConstV14: {
                tokenName: Uint32,
                value: FixedArray(Float32, 4)
            },
            PackMapTerrainTexV14: {
                tokenName: Uint32,
                flags: Uint32,
                filename: Filename(),
                flags_: FixedArray(Uint32, 2),
                layer: Uint32
            },
            PackMapTerrrainChunkMaterialV14: {
                tiling: FixedArray(Uint8, 3),
                hiResMaterial: "PackMapTerrainMaterialV14",
                loResMaterial: "PackMapTerrainMaterialV14",
                faderMaterial: "PackMapTerrainMaterialV14",
                uvData: Pointer("PackMapTerrainChunkUVDataV14")
            },
            PackMapTerrainMaterialV14: {
                materialFile: Filename(),
                fvf: Uint32,
                constIndexArray: DynArray(Uint32),
                texIndexArray: DynArray(Uint32)
            },
            PackMapTerrainChunkUVDataV14: {
                translation: FixedArray(Float32, 2),
                xScaleRange: FixedArray(Float32, 2),
                yScaleRange: FixedArray(Float32, 2),
                scaleSpeed: FixedArray(Float32, 2),
                rotation: Float32
            }
        },
        root: {
            dims: FixedArray(Uint32, 2),
            swapDistance: Float32,
            heightMapArray: DynArray(Float32),
            tileFlagArray: DynArray(Uint32),
            chunkArray: DynArray("PackMapTerrainChunkV14"),
            materials: Pointer("PackMapTerrainMaterialsV14"),
            verticesPerChunkSide: Uint32
        }
    };
    var latest$7 = V15$1;
    var definitions$7 = { V10: V10, V11: V11$1, V12: V12$1, V13: V13$1, V14: V14$1, V15: V15$1 };
    var definitionArray$7 = Object.values(definitions$7);

    var TRN = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$7,
        definitions: definitions$7,
        latest: latest$7
    });

    var V0$5 = {
        chunkName: "trni",
        name: "MapTerrainImg",
        version: 0,
        definitions: {
            PagedImageTableDataV0: {
                layers: DynArray("PagedImageLayerDataV0"),
                pages: DynArray("PagedImagePageDataV0")
            },
            PagedImageLayerDataV0: {
                dims: FixedArray(Uint32, 2),
                rawDims: FixedArray(Uint32, 2),
                diskFormat: Uint32,
                rawFormat: Uint32,
                strippedFormat: Uint32
            },
            PagedImagePageDataV0: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32
            },
            PagedImageEmbeddedPagesDataV0: {
                pages: DynArray("PagedImageEmbeddedPageDataV0")
            },
            PagedImageEmbeddedPageDataV0: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                rawData: DynArray(Uint8),
                compressedData: DynArray(Uint8)
            }
        },
        root: {
            tableData: Pointer("PagedImageTableDataV0"),
            pageData: Pointer("PagedImageEmbeddedPagesDataV0")
        }
    };
    var V1$1 = {
        chunkName: "trni",
        name: "MapTerrainImg",
        version: 1,
        definitions: {
            PagedImageTableDataV1: {
                layers: DynArray("PagedImageLayerDataV1"),
                pages: DynArray("PagedImagePageDataV1")
            },
            PagedImageLayerDataV1: {
                dims: FixedArray(Uint32, 2),
                rawDims: FixedArray(Uint32, 2),
                diskFormat: Uint32,
                rawFormat: Uint32,
                strippedFormat: Uint32
            },
            PagedImagePageDataV1: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32,
                solidColor: FixedArray(Uint8, 4)
            },
            PagedImageEmbeddedPagesDataV1: {
                pages: DynArray("PagedImageEmbeddedPageDataV1")
            },
            PagedImageEmbeddedPageDataV1: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                rawData: DynArray(Uint8),
                compressedData: DynArray(Uint8)
            }
        },
        root: {
            tableData: Pointer("PagedImageTableDataV1"),
            pageData: Pointer("PagedImageEmbeddedPagesDataV1")
        }
    };
    var V2 = {
        chunkName: "trni",
        name: "MapTerrainImg",
        version: 2,
        definitions: {
            PagedImageTableDataV2: {
                layers: DynArray("PagedImageLayerDataV2"),
                pages: DynArray("PagedImagePageDataV2"),
                flags: Uint32
            },
            PagedImageLayerDataV2: {
                dims: FixedArray(Uint32, 2),
                rawDims: FixedArray(Uint32, 2),
                diskFormat: Uint32,
                rawFormat: Uint32,
                strippedFormat: Uint32
            },
            PagedImagePageDataV2: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32,
                solidColor: FixedArray(Uint8, 4)
            },
            PagedImageEmbeddedPagesDataV2: {
                pages: DynArray("PagedImageEmbeddedPageDataV2")
            },
            PagedImageEmbeddedPageDataV2: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                rawData: DynArray(Uint8),
                compressedData: DynArray(Uint8)
            }
        },
        root: {
            tableData: Pointer("PagedImageTableDataV2"),
            pageData: Pointer("PagedImageEmbeddedPagesDataV2")
        }
    };
    var V3 = {
        chunkName: "trni",
        name: "MapTerrainImg",
        version: 3,
        definitions: {
            PagedImageTableDataV3: {
                layers: DynArray("PagedImageLayerDataV3"),
                rawPages: DynArray("PagedImagePageDataV3"),
                strippedPages: DynArray("PagedImagePageDataV3"),
                flags: Uint32
            },
            PagedImageLayerDataV3: {
                rawDims: FixedArray(Uint32, 2),
                strippedDims: FixedArray(Uint32, 2),
                rawFormat: Uint32,
                strippedFormat: Uint32,
                diskFormat: Uint32
            },
            PagedImagePageDataV3: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                filename: Filename(),
                flags: Uint32,
                solidColor: FixedArray(Uint8, 4)
            },
            PagedImageEmbeddedPagesDataV3: {
                rawPages: DynArray("PagedImageEmbeddedPageDataV3"),
                strippedPages: DynArray("PagedImageEmbeddedPageDataV3")
            },
            PagedImageEmbeddedPageDataV3: {
                layer: Uint32,
                coord: FixedArray(Uint32, 2),
                data: DynArray(Uint8)
            }
        },
        root: {
            tableData: Pointer("PagedImageTableDataV3"),
            pageData: Pointer("PagedImageEmbeddedPagesDataV3")
        }
    };
    var latest$6 = V3;
    var definitions$6 = { V0: V0$5, V1: V1$1, V2: V2, V3: V3 };
    var definitionArray$6 = Object.values(definitions$6);

    var TRNI = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$6,
        definitions: definitions$6,
        latest: latest$6
    });

    var V0$4 = {
        chunkName: "txtm",
        name: "TextPackManifest",
        version: 0,
        definitions: {
            TextPackLanguage: {
                filenames: DynArray(Filename())
            }
        },
        root: {
            stringsPerFile: Uint32,
            languages: DynArray("TextPackLanguage")
        }
    };
    var latest$5 = V0$4;
    var definitions$5 = { V0: V0$4 };
    var definitionArray$5 = Object.values(definitions$5);

    var TXTM = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$5,
        definitions: definitions$5,
        latest: latest$5
    });

    var V0$3 = {
        chunkName: "txtp",
        name: "TextPackPasswords",
        version: 0,
        definitions: {
            TextPackPassword: {
                textId: Uint32,
                password: Uint64
            }
        },
        root: {
            stringCount: Uint32,
            passwords: DynArray("TextPackPassword")
        }
    };
    var latest$4 = V0$3;
    var definitions$4 = { V0: V0$3 };
    var definitionArray$4 = Object.values(definitions$4);

    var TXTP = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$4,
        definitions: definitions$4,
        latest: latest$4
    });

    var V0$2 = {
        chunkName: "txtv",
        name: "TextPackVoices",
        version: 0,
        definitions: {
            TextPackVoice: {
                textId: Uint32,
                voiceId: Uint32
            }
        },
        root: {
            voices: DynArray("TextPackVoice")
        }
    };
    var latest$3 = V0$2;
    var definitions$3 = { V0: V0$2 };
    var definitionArray$3 = Object.values(definitions$3);

    var TXTV = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$3,
        definitions: definitions$3,
        latest: latest$3
    });

    var V0$1 = {
        chunkName: "vari",
        name: "TextPackVariants",
        version: 0,
        definitions: {
            TextPackVariant: {
                textId: Uint32,
                variantTextIds: DynArray(Uint32)
            }
        },
        root: {
            variants: DynArray("TextPackVariant")
        }
    };
    var latest$2 = V0$1;
    var definitions$2 = { V0: V0$1 };
    var definitionArray$2 = Object.values(definitions$2);

    var VARI = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$2,
        definitions: definitions$2,
        latest: latest$2
    });

    var V0 = {
        chunkName: "watr",
        name: "PackMapWaterV0",
        version: 0,
        root: {
            waterFoamData: DynArray(Uint8),
            waterChunks: DynArray(Uint32)
        }
    };
    var V1 = {
        chunkName: "watr",
        name: "PackMapWaterV1",
        version: 1,
        definitions: {
            PackMapWaterSurfaceV1: {
                guid: Uint64,
                waterSurfaceFlags: Uint32,
                waterSurfaceZ: Float32,
                vertices: DynArray(FixedArray(Float32, 2))
            }
        },
        root: {
            waterFlags: Uint32,
            waterPlaneZ: Float32,
            waterSurfaces: DynArray("PackMapWaterSurfaceV1")
        }
    };
    var latest$1 = V1;
    var definitions$1 = { V0: V0, V1: V1 };
    var definitionArray$1 = Object.values(definitions$1);

    var WATR = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray$1,
        definitions: definitions$1,
        latest: latest$1
    });

    var V11 = {
        chunkName: "zon2",
        name: "PackMapZonesV12",
        version: 11,
        definitions: {
            PackMapZoneDefV12: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV12"),
                timeStamp: Uint64
            },
            PackMapZoneLayerDefV12: {
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                noise: Uint8,
                layerFlags: Uint32,
                modelArray: DynArray("PackMapZoneModelV12"),
                subModel: Pointer("PackMapZoneModelV12")
            },
            PackMapZoneModelV12: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32
            },
            PackMapZoneV12: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV12"),
                collideData: DynArray("PackMapZoneCollideDataV12"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2))
            },
            PackMapZoneEncodingDataV12: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV12: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV12"),
            zoneArray: DynArray("PackMapZoneV12")
        }
    };
    var V12 = {
        chunkName: "zon2",
        name: "PackMapZonesV13",
        version: 12,
        definitions: {
            PackMapZoneDefV13: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV13"),
                timeStamp: Uint64
            },
            PackMapZoneLayerDefV13: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                noise: Uint8,
                layerFlags: Uint32,
                modelArray: DynArray("PackMapZoneModelV13"),
                subModel: Pointer("PackMapZoneModelV13")
            },
            PackMapZoneModelV13: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32
            },
            PackMapZoneV13: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV13"),
                collideData: DynArray("PackMapZoneCollideDataV13"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2))
            },
            PackMapZoneEncodingDataV13: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV13: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV13"),
            zoneArray: DynArray("PackMapZoneV13")
        }
    };
    var V13 = {
        chunkName: "zon2",
        name: "PackMapZonesV14",
        version: 13,
        definitions: {
            PackMapZoneDefV14: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV14"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV2")
            },
            PackMapZoneLayerDefV14: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                noise: Uint8,
                layerFlags: Uint32,
                modelArray: DynArray("PackMapZoneModelV14"),
                subModel: Pointer("PackMapZoneModelV14")
            },
            PackMapZoneModelV14: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32
            },
            PackMapZonePageTableV2: {
                pageArray: DynArray("PackMapZonePageV2"),
                flags: Uint32
            },
            PackMapZonePageV2: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32)
            },
            PackMapZoneV14: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV14"),
                collideData: DynArray("PackMapZoneCollideDataV14"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2))
            },
            PackMapZoneEncodingDataV14: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV14: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV14"),
            zoneArray: DynArray("PackMapZoneV14")
        }
    };
    var V14 = {
        chunkName: "zon2",
        name: "PackMapZonesV15",
        version: 14,
        definitions: {
            PackMapZoneDefV15: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV15"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV3")
            },
            PackMapZoneLayerDefV15: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                noise: Uint8,
                layerFlags: Uint32,
                modelArray: DynArray("PackMapZoneModelV15"),
                subModel: Pointer("PackMapZoneModelV15")
            },
            PackMapZoneModelV15: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32,
                hslOffset: FixedArray(Float32, 3)
            },
            PackMapZonePageTableV3: {
                pageArray: DynArray("PackMapZonePageV3"),
                flags: Uint32
            },
            PackMapZonePageV3: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32)
            },
            PackMapZoneV15: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV15"),
                collideData: DynArray("PackMapZoneCollideDataV15"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2))
            },
            PackMapZoneEncodingDataV15: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV15: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV15"),
            zoneArray: DynArray("PackMapZoneV15")
        }
    };
    var V15 = {
        chunkName: "zon2",
        name: "PackMapZonesV16",
        version: 15,
        definitions: {
            PackMapZoneDefV16: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV16"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV4")
            },
            PackMapZoneLayerDefV16: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                noise: Uint8,
                layerFlags: Uint32,
                modelArray: DynArray("PackMapZoneModelV16"),
                subModel: Pointer("PackMapZoneModelV16")
            },
            PackMapZoneModelV16: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32,
                hslOffset: FixedArray(Float32, 3)
            },
            PackMapZonePageTableV4: {
                pageArray: DynArray("PackMapZonePageV4"),
                flags: Uint32
            },
            PackMapZonePageV4: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32)
            },
            PackMapZoneV16: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV16"),
                collideData: DynArray("PackMapZoneCollideDataV16"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2)),
                broadId: Uint16
            },
            PackMapZoneEncodingDataV16: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV16: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV16"),
            zoneArray: DynArray("PackMapZoneV16"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V16 = {
        chunkName: "zon2",
        name: "PackMapZonesV17",
        version: 16,
        definitions: {
            PackMapZoneDefV17: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV17"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV5")
            },
            PackMapZoneLayerDefV17: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                noise: Uint8,
                layerFlags: Uint32,
                modelArray: DynArray("PackMapZoneModelV17"),
                subModel: Pointer("PackMapZoneModelV17")
            },
            PackMapZoneModelV17: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32,
                hslOffset: FixedArray(Float32, 3)
            },
            PackMapZonePageTableV5: {
                pageArray: DynArray("PackMapZonePageV5"),
                flags: Uint32
            },
            PackMapZonePageV5: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32)
            },
            PackMapZoneV17: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV17"),
                collideData: DynArray("PackMapZoneCollideDataV17"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2)),
                broadId: Uint16
            },
            PackMapZoneEncodingDataV17: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV17: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV17"),
            zoneArray: DynArray("PackMapZoneV17"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V17 = {
        chunkName: "zon2",
        name: "PackMapZonesV18",
        version: 17,
        definitions: {
            PackMapZoneDefV18: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV18"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV6")
            },
            PackMapZoneLayerDefV18: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                hslRanges: FixedArray(FixedArray(Float32, 2), 3),
                noise: Uint8,
                layerFlags: Uint32,
                materialname: Filename(),
                modelArray: DynArray("PackMapZoneModelV18"),
                subModel: Pointer("PackMapZoneModelV18")
            },
            PackMapZoneModelV18: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32,
                hslOffset: FixedArray(Float32, 3),
                zOffsets: FixedArray(Uint8, 2)
            },
            PackMapZonePageTableV6: {
                pageArray: DynArray("PackMapZonePageV6"),
                flags: Uint32
            },
            PackMapZonePageV6: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32)
            },
            PackMapZoneV18: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV18"),
                collideData: DynArray("PackMapZoneCollideDataV18"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2)),
                broadId: Uint16
            },
            PackMapZoneEncodingDataV18: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV18: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV18"),
            zoneArray: DynArray("PackMapZoneV18"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V18 = {
        chunkName: "zon2",
        name: "PackMapZonesV19",
        version: 18,
        definitions: {
            PackMapZoneDefV19: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV19"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV7")
            },
            PackMapZoneLayerDefV19: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                hslRanges: FixedArray(FixedArray(Float32, 2), 4),
                noise: Uint8,
                layerFlags: Uint32,
                materialname: Filename(),
                modelArray: DynArray("PackMapZoneModelV19"),
                subModel: Pointer("PackMapZoneModelV19")
            },
            PackMapZoneModelV19: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32,
                hslOffset: FixedArray(Float32, 3),
                zOffsets: FixedArray(Uint8, 2)
            },
            PackMapZonePageTableV7: {
                pageArray: DynArray("PackMapZonePageV7"),
                flags: Uint32
            },
            PackMapZonePageV7: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32)
            },
            PackMapZoneV19: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV19"),
                collideData: DynArray("PackMapZoneCollideDataV19"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2)),
                broadId: Uint16
            },
            PackMapZoneEncodingDataV19: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV19: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV19"),
            zoneArray: DynArray("PackMapZoneV19"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V19 = {
        chunkName: "zon2",
        name: "PackMapZonesV20",
        version: 19,
        definitions: {
            PackMapZoneDefV20: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV20"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV8")
            },
            PackMapZoneLayerDefV20: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                hslRanges: FixedArray(FixedArray(Float32, 2), 3),
                instanceScaleJitter: Float32,
                noise: Uint8,
                layerFlags: Uint32,
                materialname: Filename(),
                modelArray: DynArray("PackMapZoneModelV20"),
                subModel: Pointer("PackMapZoneModelV20")
            },
            PackMapZoneModelV20: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32,
                hslOffset: FixedArray(Float32, 3),
                zOffsets: FixedArray(Uint8, 2)
            },
            PackMapZonePageTableV8: {
                pageArray: DynArray("PackMapZonePageV8"),
                flags: Uint32
            },
            PackMapZonePageV8: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32)
            },
            PackMapZoneV20: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV20"),
                collideData: DynArray("PackMapZoneCollideDataV20"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2)),
                broadId: Uint16
            },
            PackMapZoneEncodingDataV20: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV20: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV20"),
            zoneArray: DynArray("PackMapZoneV20"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V20 = {
        chunkName: "zon2",
        name: "PackMapZonesV21",
        version: 20,
        definitions: {
            PackMapZoneDefV21: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV21"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV9")
            },
            PackMapZoneLayerDefV21: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                hslRanges: FixedArray(FixedArray(Float32, 2), 4),
                instanceScaleJitter: Float32,
                noise: Uint8,
                layerFlags: Uint32,
                materialname: Filename(),
                modelArray: DynArray("PackMapZoneModelV21"),
                subModel: Pointer("PackMapZoneModelV21")
            },
            PackMapZoneModelV21: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32,
                hslOffset: FixedArray(Float32, 3),
                zOffsets: FixedArray(Uint8, 2)
            },
            PackMapZonePageTableV9: {
                pageArray: DynArray("PackMapZonePageV9"),
                flags: Uint32
            },
            PackMapZonePageV9: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32)
            },
            PackMapZoneV21: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV21"),
                collideData: DynArray("PackMapZoneCollideDataV21"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2)),
                broadId: Uint16
            },
            PackMapZoneEncodingDataV21: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV21: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV21"),
            zoneArray: DynArray("PackMapZoneV21"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16
        }
    };
    var V21 = {
        chunkName: "zon2",
        name: "PackMapZonesV22",
        version: 21,
        definitions: {
            PackMapZoneDefV22: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV22"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV10"),
                reserved: RefString16()
            },
            PackMapZoneLayerDefV22: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                hslRanges: FixedArray(FixedArray(Float32, 2), 4),
                instanceScaleJitter: Float32,
                noise: Uint8,
                layerFlags: Uint32,
                materialname: Filename(),
                modelArray: DynArray("PackMapZoneModelV22"),
                subModel: Pointer("PackMapZoneModelV22"),
                reserved: RefString16()
            },
            PackMapZoneModelV22: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32,
                hslOffset: FixedArray(Float32, 3),
                zOffsets: FixedArray(Uint8, 2)
            },
            PackMapZonePageTableV10: {
                pageArray: DynArray("PackMapZonePageV10"),
                flags: Uint32
            },
            PackMapZonePageV10: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32),
                string: RefString16()
            },
            PackMapZoneV22: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV22"),
                collideData: DynArray("PackMapZoneCollideDataV22"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2)),
                broadId: Uint16,
                reserved: RefString16()
            },
            PackMapZoneEncodingDataV22: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV22: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV22"),
            zoneArray: DynArray("PackMapZoneV22"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16,
            string: RefString16()
        }
    };
    var V22 = {
        chunkName: "zon2",
        name: "PackMapZonesV23",
        version: 22,
        definitions: {
            PackMapZoneDefV23: {
                defFilename: Filename(),
                token: Uint32,
                layerDefArray: DynArray("PackMapZoneLayerDefV23"),
                timeStamp: Uint64,
                pageTable: Pointer("PackMapZonePageTableV11"),
                reserved: RefString16()
            },
            PackMapZoneLayerDefV23: {
                type: Uint8,
                height: Uint8,
                width: Uint8,
                radiusGround: Uint8,
                sortGroup: Uint8,
                tiling: Uint8,
                scaleRange: FixedArray(Float32, 2),
                probability: Float32,
                fadeRange: FixedArray(Float32, 2),
                rotRange: FixedArray(FixedArray(Float32, 2), 3),
                hslRanges: FixedArray(FixedArray(Float32, 2), 4),
                instanceScaleJitter: Float32,
                noise: Uint8,
                layerFlags: Uint32,
                materialname: Filename(),
                modelArray: DynArray("PackMapZoneModelV23"),
                subModel: Pointer("PackMapZoneModelV23"),
                reserved: RefString16()
            },
            PackMapZoneModelV23: {
                filename: Filename(),
                probability: Float32,
                flags: Uint32,
                hslOffset: FixedArray(Float32, 3),
                zOffsets: FixedArray(Uint8, 2),
                permutation: Uint64
            },
            PackMapZonePageTableV11: {
                pageArray: DynArray("PackMapZonePageV11"),
                flags: Uint32
            },
            PackMapZonePageV11: {
                flags: DynArray(Uint8),
                chunkCoord: FixedArray(Uint32, 2),
                seed: Uint8,
                paintFlags: DynArray(Uint32),
                string: RefString16()
            },
            PackMapZoneV23: {
                zoneFlags: Uint32,
                vertRect: FixedArray(Uint32, 4),
                waterHeight: Float32,
                seed: Uint8,
                defToken: Uint32,
                range: FixedArray(Float32, 2),
                zPos: Float32,
                flags: DynArray(Uint8),
                encodeData: DynArray("PackMapZoneEncodingDataV23"),
                collideData: DynArray("PackMapZoneCollideDataV23"),
                offsetData: DynArray(Uint16),
                vertices: DynArray(FixedArray(Float32, 2)),
                broadId: Uint16,
                reserved: RefString16()
            },
            PackMapZoneEncodingDataV23: {
                index: Uint16,
                offset: Uint8
            },
            PackMapZoneCollideDataV23: {
                normalX: Float32,
                normalY: Float32,
                zPos: Float32
            },
            PackBroadphaseType: {
                broadphaseData: DynArray(Uint8)
            }
        },
        root: {
            zoneDefArray: DynArray("PackMapZoneDefV23"),
            zoneArray: DynArray("PackMapZoneV23"),
            broadPhase: "PackBroadphaseType",
            maxBroadId: Uint16,
            string: RefString16()
        }
    };
    var latest = V22;
    var definitions = { V11: V11, V12: V12, V13: V13, V14: V14, V15: V15, V16: V16, V17: V17, V18: V18, V19: V19, V20: V20, V21: V21, V22: V22 };
    var definitionArray = Object.values(definitions);

    var ZON2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        definitionArray: definitionArray,
        definitions: definitions,
        latest: latest
    });

    var allDefs = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AMSP: AMSP,
        ANIM: ANIM,
        ANIM_2: ANIM_2,
        ANIM_3: ANIM_3,
        AREA: AREA,
        ARMF: ARMF,
        ASND: ASND,
        AUDI: AUDI,
        BGFX: BGFX,
        BIDX: BIDX,
        BKCK: BKCK,
        BLOC: BLOC,
        CG15: CG15,
        CNFG: CNFG,
        COLL: COLL,
        COMP: COMP,
        CSCN: CSCN,
        CUBE: CUBE,
        DATA: DATA,
        DCAL: DCAL,
        DX9S: DX9S,
        EDIT: EDIT,
        ENV: ENV,
        EULA: EULA,
        EXP: EXP,
        EXPA: EXPA,
        FALL: FALL,
        GAME: GAME,
        GAME_2: GAME_2,
        GEOM: GEOM,
        GR2S: GR2S,
        GRMT: GRMT,
        HAVK: HAVK,
        ICON: ICON,
        LAYE: LAYE,
        LGHT: LGHT,
        MACH: MACH,
        MAIN: MAIN,
        MAIN_2: MAIN_2,
        MAIN_3: MAIN_3,
        MAIN_4: MAIN_4,
        MAIN_5: MAIN_5,
        MFST: MFST,
        MFST_2: MFST_2,
        MODL: MODL,
        MSN: MSN,
        NM15: NM15,
        NM15_2: NM15_2,
        NMEX: NMEX,
        OBS: OBS,
        OCC: OCC,
        OCTM: OCTM,
        PACK: PACK,
        PARM: PARM,
        PGTB: PGTB,
        PHYS: PHYS,
        PHYS_2: PHYS_2,
        PNVM: PNVM,
        PRP2: PRP2,
        PRPS: PRPS,
        RESO: RESO,
        RIVE: RIVE,
        ROOT: ROOT,
        SEQN: SEQN,
        SHAD: SHAD,
        SHEX: SHEX,
        SHOR: SHOR,
        SKEL: SKEL,
        SKEL_2: SKEL_2,
        SND: SND,
        SURF: SURF,
        TKAC: TKAC,
        TLFS: TLFS,
        TOOL: TOOL,
        TOOL_2: TOOL_2,
        TRN: TRN,
        TRNI: TRNI,
        TXTM: TXTM,
        TXTP: TXTP,
        TXTV: TXTV,
        VARI: VARI,
        WATR: WATR,
        ZON2: ZON2
    });

    var PTR_SIZE_32 = 4;
    var PTR_SIZE_64 = 8;
    var DataParser = /** @class */ (function () {
        function DataParser(definition, is64Bit, DEBUG) {
            if (is64Bit === void 0) { is64Bit = false; }
            if (DEBUG === void 0) { DEBUG = false; }
            this.is64Bit = is64Bit;
            this.DEBUG = DEBUG;
            Object.assign(this, definition);
            this.PTR_SIZE = is64Bit ? PTR_SIZE_64 : PTR_SIZE_32;
        }
        DataParser.prototype.safeParse = function (dv, position) {
            if (position === void 0) { position = 0; }
            try {
                return { data: this.parse(dv, position).data, error: null };
            }
            catch (e) {
                return {
                    data: null,
                    error: e,
                };
            }
        };
        DataParser.prototype.parse = function (dv, pos) {
            if (pos === void 0) { pos = 0; }
            this._debugLog(".", this.name, pos);
            var position = pos;
            var parsedObject = {};
            for (var key in this.root) {
                var value = this.root[key];
                var parsedResult = void 0;
                if (typeof value === "string") {
                    parsedResult = this.parseType(key, dv, position, value);
                }
                else {
                    var baseType = value.baseType, subType = value.subType, length_1 = value.length;
                    parsedResult = this[baseType](key, dv, position, subType, length_1);
                }
                parsedObject[key] = parsedResult.data;
                position = parsedResult.newPosition;
            }
            return {
                newPosition: position,
                data: parsedObject,
            };
        };
        DataParser.prototype.parseType = function (key, dv, pos, typeDefinitionName) {
            this._debugLog(key, typeDefinitionName, pos);
            var parsedObject = {};
            var position = pos;
            var definition = this.definitions[typeDefinitionName];
            for (var key_1 in definition) {
                var value = definition[key_1];
                var parsedResult = void 0;
                if (typeof value === "string") {
                    parsedResult = this.parseType(key_1, dv, position, value);
                }
                else {
                    var baseType = value.baseType, subType = value.subType, length_2 = value.length;
                    parsedResult = this[baseType](key_1, dv, position, subType, length_2);
                }
                parsedObject[key_1] = parsedResult.data;
                position = parsedResult.newPosition;
            }
            return {
                newPosition: position,
                data: parsedObject,
            };
        };
        /**
         *      Parsers
         **/
        DataParser.prototype.Float32 = function (key, dv, pos) {
            this._debugLog(key, BaseType.Float32, pos);
            var data = dv.getFloat32(pos, true);
            return { newPosition: pos + 4, data: data };
        };
        DataParser.prototype.Float64 = function (key, dv, pos) {
            this._debugLog(key, BaseType.Float64, pos);
            return { newPosition: pos + 8, data: dv.getFloat64(pos, true) };
        };
        DataParser.prototype.Uint8 = function (key, dv, pos) {
            this._debugLog(key, BaseType.Uint8, pos);
            return { newPosition: pos + 1, data: dv.getUint8(pos) };
        };
        DataParser.prototype.Uint16 = function (key, dv, pos) {
            this._debugLog(key, BaseType.Uint16, pos);
            return { newPosition: pos + 2, data: dv.getUint16(pos, true) };
        };
        DataParser.prototype.Uint32 = function (key, dv, pos) {
            this._debugLog(key, BaseType.Uint32, pos);
            return { newPosition: pos + 4, data: dv.getUint32(pos, true) };
        };
        DataParser.prototype.Uint64 = function (key, dv, pos) {
            this._debugLog(key, BaseType.Uint64, pos);
            return {
                newPosition: pos + 8,
                data: dv.getBigUint64(pos, true),
            };
        };
        DataParser.prototype.CString = function (key, dv, pos, _subType, length) {
            this._debugLog(key, BaseType.CString, pos, length);
            var u8array = new Uint8Array(dv.buffer, pos);
            var end = length || u8array.findIndex(function (v) { return v === 0; });
            return {
                newPosition: pos + end,
                data: String.fromCharCode.apply(null, new Uint8Array(u8array.slice(0, end))),
            };
        };
        DataParser.prototype.RefString = function (key, dv, pos) {
            this._debugLog(key, BaseType.RefString, pos);
            var pointer = this.is64Bit ? pos + Number(dv.getBigUint64(pos, true)) : pos + dv.getUint32(pos, true);
            var data = "";
            var charcode;
            while (pointer + 1 < dv.byteLength && (charcode = dv.getUint8(pointer)) !== 0) {
                pointer += 1;
                data += String.fromCharCode(charcode);
            }
            return {
                newPosition: pos + this.PTR_SIZE,
                data: data,
            };
        };
        DataParser.prototype.FixedArray = function (key, dv, pos, type, length) {
            this._debugLog(key, BaseType.FixedArray, pos, length, type);
            // Some types can be mapped directly from their buffer into the return type
            if (typeof type != "string") {
                var arrayConstructor = getOptimisedArrayConstructor(type.baseType);
                if (arrayConstructor) {
                    return this.optimisedArray(key, dv, pos, length, arrayConstructor);
                }
            }
            var data = [];
            var newPosition = pos;
            for (var itemIndex = 0; itemIndex < length; itemIndex++) {
                var parsedItem = typeof type === "string"
                    ? this.parseType(key, dv, newPosition, type)
                    : this[type.baseType](key, dv, newPosition, type.subType, type.length);
                data.push(parsedItem.data);
                newPosition = parsedItem.newPosition;
            }
            return {
                newPosition: newPosition,
                data: data,
            };
        };
        DataParser.prototype.DynArray = function (key, dv, pos, type) {
            this._debugLog(key, BaseType.DynArray, pos, undefined, type);
            var arrayLength = dv.getUint32(pos, true);
            var arrayOffset = this.is64Bit ? Number(dv.getBigUint64(pos + 4, true)) : dv.getUint32(pos + 4, true);
            if (arrayOffset === 0) {
                return {
                    newPosition: pos + (this.is64Bit ? 12 : 8),
                    data: [],
                };
            }
            var arrayPtr = pos + 4 + arrayOffset;
            return {
                newPosition: pos + this.PTR_SIZE + 4,
                data: this.FixedArray(key, dv, arrayPtr, type, arrayLength).data,
            };
        };
        DataParser.prototype.RefArray = function (key, dv, pos, type) {
            this._debugLog(key, BaseType.RefArray, pos, undefined, type);
            var cursor = pos;
            var finalArray = [];
            var arrayLength = dv.getUint32(cursor, true);
            cursor += 4;
            var arrayOffset = this.offset(dv, cursor);
            var arrayPointer = cursor + arrayOffset;
            cursor += this.PTR_SIZE;
            if (arrayLength === 0) {
                return { newPosition: cursor, data: finalArray };
            }
            var savedPosition = cursor;
            var currentPosition = arrayPointer;
            var offsets = [];
            for (var i = 0; i < arrayLength; i++) {
                var offset = this.offset(dv, currentPosition + i * this.PTR_SIZE);
                offsets.push(offset);
            }
            // Set pointer to read structures
            var pointer = savedPosition - this.PTR_SIZE;
            var baseOffset = this.offset(dv, pointer);
            pointer += baseOffset;
            for (var i = 0; i < offsets.length; i++) {
                if (offsets[i] !== 0) {
                    var structPosition = pointer + i * this.PTR_SIZE + offsets[i];
                    if (typeof type === "string") {
                        finalArray.push(this.parseType(key, dv, structPosition, type).data);
                    }
                    else {
                        finalArray.push(this[type.baseType](key, dv, structPosition, type.subType, type.length).data);
                    }
                }
            }
            return { newPosition: savedPosition, data: finalArray };
        };
        DataParser.prototype.Pointer = function (key, dv, pos, type) {
            this._debugLog(key, BaseType.Pointer, pos, undefined, type);
            var offset = this.offset(dv, pos);
            if (offset === 0) {
                return {
                    newPosition: pos + this.PTR_SIZE,
                    data: {},
                };
            }
            var parsedItem = typeof type === "string"
                ? this.parseType(key, dv, pos + offset, type)
                : this[type.baseType](key, dv, pos + offset, type.subType, type.length);
            return {
                newPosition: pos + this.PTR_SIZE,
                data: parsedItem.data,
            };
        };
        DataParser.prototype.RefString16 = function (key, dv, pos) {
            this._debugLog(key, BaseType.RefString16, pos);
            var offset = this.offset(dv, pos);
            var pointer = pos + offset;
            var data = "";
            var charcode;
            while (pointer + 2 < dv.byteLength && (charcode = dv.getUint16(pointer, true)) !== 0) {
                pointer += 2;
                data += String.fromCharCode(charcode);
            }
            return {
                newPosition: pos + this.PTR_SIZE,
                data: data,
            };
        };
        DataParser.prototype.Fileref = function (key, dv, pos) {
            this._debugLog(key, BaseType.Fileref, pos);
            return this.Filename(key, dv, pos);
        };
        DataParser.prototype.Filename = function (key, dv, pos) {
            this._debugLog(key, BaseType.Filename, pos);
            var position = pos;
            var offset = this.offset(dv, pos);
            var pointer = position + offset;
            var m_lowPart = dv.getUint16(pointer, true);
            var m_highPart = dv.getUint16(pointer + 2, true);
            /// Getting the file name...
            /// Both need to be >= than 256 (terminator (third byte) is 0)
            var filename = 0xff00 * (m_highPart - 0x100) + (m_lowPart - 0x100) + 1;
            return {
                newPosition: pos + this.PTR_SIZE,
                data: filename > 0 ? filename : 0,
            };
        };
        DataParser.prototype.Unknown = function (key, dv, pos) {
            this._debugLog(key, BaseType.Unknown, pos);
            throw new Error("Could not parse unknown data");
        };
        /**
         *      Parser utils & helpers
         **/
        DataParser.prototype.offset = function (dv, pos) {
            if (this.is64Bit) {
                var offset = dv.getBigUint64(pos, true);
                if (offset === BigInt(0)) {
                    return 0;
                }
                else if (offset > BigInt(dv.byteLength)) {
                    // Parse negative offset
                    return -(Number(BigInt("0xFFFFFFFFFFFFFFFF") - offset) + 1);
                }
                else {
                    return Number(offset);
                }
            }
            else {
                var offset = dv.getUint32(pos, true);
                if (offset > dv.byteLength) {
                    // Parse negative offset
                    return -(0xffffffff - offset + 1);
                }
                else {
                    return offset;
                }
            }
        };
        DataParser.prototype.optimisedArray = function (key, dv, pos, length, OptimisedArray) {
            this._debugLog(key, "OptimisedArray", pos);
            var byteLength = length * OptimisedArray.BYTES_PER_ELEMENT;
            var byteArray = new Uint8Array(dv.buffer.slice(pos, pos + byteLength));
            var data = new OptimisedArray(byteArray.buffer);
            return {
                newPosition: pos + length * OptimisedArray.BYTES_PER_ELEMENT,
                data: data,
            };
        };
        DataParser.prototype._debugLog = function (key, type, position, length, subType, value) {
            if (this.DEBUG) {
                var log = "> ".concat(key, ": (").concat(type, ") pos: ").concat(position.toString(16));
                if (length)
                    log += ", length: ".concat(length);
                if (subType) {
                    if (typeof subType === "string")
                        log += ", subType: ".concat(subType);
                    else {
                        if (subType.subType)
                            log += ", subType: ".concat(subType.baseType, "<").concat(subType.subType, ">");
                        else
                            log += ", subType: ".concat(subType.baseType);
                    }
                }
                if (value)
                    log += ", value: ".concat(value);
                console.log(log);
            }
        };
        return DataParser;
    }());
    function getOptimisedArrayConstructor(baseType) {
        if (baseType === BaseType.Float32) {
            return Float32Array;
        }
        if (baseType === BaseType.Float64) {
            return Float64Array;
        }
        if (baseType === BaseType.Uint8) {
            return Uint8Array;
        }
        if (baseType === BaseType.Uint16) {
            return Uint16Array;
        }
        if (baseType === BaseType.Uint32) {
            return Uint32Array;
        }
        if (baseType === BaseType.Uint64) {
            return BigUint64Array;
        }
    }

    var ChunkDefinitions = {
        FILE_HEAD: {
            identifier: CString(2),
            flags: Uint16,
            unknownField2: Uint16,
            pkFileVersion: Uint16,
            type: CString(4),
        },
        CHUNK_HEAD: {
            type: CString(4),
            chunkDataSize: Uint32,
            chunkVersion: Uint16,
            chunkHeaderSize: Uint16,
            offsetTableOffset: Uint32,
        },
    };
    var ArchiveDefinitions = {
        ARCHIVE_HEADER_FORMAT: {
            version: Uint8,
            magic: CString(3),
            headerSize: Uint32,
            unknownField1: Uint32,
            chunkSize: Uint32,
            crc: Uint32,
            unknwonField2: Uint32,
            mftOffset: Uint64,
            mftSize: Uint32,
            flags: Uint32,
        },
        MFT_TABLE_HEADER: {
            magic: CString(4),
            unknownField1: Uint64,
            nbOfEntries: Uint32,
            unknownField2: Uint32,
            unknownField3: Uint32,
        },
        MFT_TABLE_ENTRY: {
            offset: Uint64,
            size: Uint32,
            compressed: Uint16,
            unknownField1: Uint16,
            unknownField2: Uint32,
            crc: Uint32,
        },
    };

    var __IS_NODE_RUNTIME = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
    function sliceFile(file, offset, length) {
        if (__IS_NODE_RUNTIME) {
            // @ts-expect-error - Node specific code
            return import('node:fs').then(function (fs) {
                var fd = fs.openSync(file);
                var buffer = Buffer.alloc(length);
                fs.readSync(fd, buffer, 0, length, offset);
                fs.closeSync(fd);
                return buffer.buffer;
            });
        }
        else {
            return new Promise(function (resolve, reject) {
                var reader = new FileReader();
                reader.onload = function () {
                    resolve(reader.result);
                };
                reader.onerror = reject;
                reader.readAsArrayBuffer(file.slice(Number(offset), Number(offset) + Number(length)));
            });
        }
    }
    function parseFile(dataView) {
        var fileHeaderParser = new DataParser({ root: ChunkDefinitions.FILE_HEAD });
        var result = fileHeaderParser.parse(dataView, 0);
        result.data.type = result.data.type.replace("\u0000", "");
        return result;
    }
    function parseChunkHead(dataView, pos) {
        var chunkHeadParser = new DataParser({ root: ChunkDefinitions.CHUNK_HEAD });
        var result = chunkHeadParser.parse(dataView, pos);
        result.data.type = result.data.type.replace("\u0000", "");
        return result;
    }
    function parseAllChunks(dataView, firstChunkPosition) {
        var chunks = [];
        var pos = firstChunkPosition;
        while (pos < dataView.byteLength) {
            var chunk = parseChunkHead(dataView, pos);
            chunks.push({ chunkPosition: pos, chunkHeader: chunk.data });
            pos = chunk.newPosition - 8 + chunk.data.chunkDataSize;
        }
        return chunks;
    }

    var utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        parseAllChunks: parseAllChunks,
        parseChunkHead: parseChunkHead,
        parseFile: parseFile,
        sliceFile: sliceFile
    });

    var fileChunkMap = {
        cntc: { Main: "MAIN_4" },
        cmpc: { comp: "COMP" },
        hvkC: { havk: "HAVK" },
        ASND: { ASND: "ASND" },
        AMAT: { GRMT: "GRMT", DX9S: "DX9S", BGFX: "BGFX" },
        AMSP: { AMSP: "AMSP" },
        MODL: {
            MODL: "MODL",
            SKEL: "SKEL",
            COLL: "COLL",
            ANIM: "ANIM",
            ROOT: "ROOT",
            GAME: "GAME",
            GEOM: "GEOM",
            PRPS: "PRPS",
        },
        //AFNT: {"AFNT"},
        CINP: { CSCN: "CSCN" },
        prlt: { mfst: "MFST_2" },
        txtm: { txtm: "TXTM" },
        eula: { eula: "EULA" },
        PIMG: { PGTB: "PGTB" },
        mapc: {
            parm: "PARM",
            trn: "TRN",
            trni: "TRNI",
            surf: "SURF",
            area: "AREA",
            laye: "LAYE",
            msn: "MSN",
            cube: "CUBE",
            havk: "HAVK",
            zon2: "ZON2",
            shex: "SHEX",
            octm: "OCTM",
            prp2: "PRP2",
            rive: "RIVE",
            dcal: "DCAL",
            env: "ENV",
            audi: "AUDI",
            lght: "LGHT",
            exp: "EXP",
            watr: "WATR",
        },
        emoc: { anim: "ANIM_3" },
        // STAR: { STAR: "" },
        ABIX: { BIDX: "BIDX" },
        mpsd: { shad: "SHAD" },
        txtV: { vari: "VARI" },
        mMet: { Main: "MAIN_5" },
        txtv: { txtv: "TXTV" },
        anic: { seqn: "SEQN", mach: "MACH", fall: "FALL", cnfg: "CNFG" },
        cmaC: { main: "MAIN_3" },
        // cmpc: {"error",},
        // CDHS: { CDHS: "CDHS" }, // not in definitions
        ABNK: { BKCK: "BKCK" },
        // bone: { scal: "" },
    };

    var FileParser = /** @class */ (function () {
        function FileParser(buffer, parseOnlyHead) {
            if (parseOnlyHead === void 0) { parseOnlyHead = false; }
            this.chunks = [];
            this.dataView = new DataView(buffer);
            var _a = parseFile(this.dataView), newPosition = _a.newPosition, data = _a.data;
            this.header = data;
            this.chunkOffset = newPosition;
            if (!parseOnlyHead) {
                this.readChunks();
            }
        }
        FileParser.prototype.readChunks = function () {
            // This method is appending chunks, so we clear the array to prevent bugs if the method is called multiple times
            this.chunks = [];
            var chunksMetadata = parseAllChunks(this.dataView, this.chunkOffset);
            var fileType = this.header.type;
            for (var _i = 0, chunksMetadata_1 = chunksMetadata; _i < chunksMetadata_1.length; _i++) {
                var metadata = chunksMetadata_1[_i];
                var chunkType = metadata.chunkHeader.type;
                // If the chunk is not defined in the fileChunkMap, we skip it
                if (!fileChunkMap[fileType] || !fileChunkMap[fileType][chunkType]) {
                    console.error("Chunk ".concat(chunkType, " is not defined in the fileChunkMap for file type ").concat(fileType, ". The chunk will not be parsed."));
                    continue;
                }
                var definitionName = fileChunkMap[fileType][chunkType];
                var definitions = allDefs[definitionName].definitions;
                var def = definitions["V".concat(metadata.chunkHeader.chunkVersion)];
                // TODO - Add version compatibility checks
                console.log("Parsing chunk ".concat(metadata.chunkHeader.type, " with version ").concat(metadata.chunkHeader.chunkVersion, ", flags ").concat(this.header.flags));
                var parserResult = new DataParser(def, this.header.flags === 5).safeParse(this.dataView, metadata.chunkPosition + metadata.chunkHeader.chunkHeaderSize);
                if (parserResult.error) {
                    console.error("Error parsing chunk ".concat(metadata.chunkHeader.type, " with version ").concat(metadata.chunkHeader.chunkVersion, ": ").concat(parserResult.error));
                }
                this.chunks.push({
                    header: metadata.chunkHeader,
                    data: parserResult.data,
                });
            }
        };
        FileParser.prototype.getChunk = function (chunkName /*, versionCompatibility: */) {
            for (var i = 0; i < this.chunks.length; i++) {
                if (this.chunks[i].header.type.toLowerCase() === chunkName.toLowerCase()) {
                    return this.chunks[i];
                }
            }
            return null;
        };
        return FileParser;
    }());

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol, Iterator */


    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
        return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    // Public functions
    function readArchive(file) {
        return __awaiter(this, void 0, void 0, function () {
            var archiveHeader, _a, mftData, _b, indexTable, _c, error_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 4, , 5]);
                        _a = parseANDatHeader;
                        return [4 /*yield*/, sliceFile(file, 0, 40)];
                    case 1:
                        archiveHeader = _a.apply(void 0, [_d.sent()]);
                        if (!archiveHeader) {
                            throw new Error("Invalid ANDat header");
                        }
                        _b = parseMFTTable;
                        return [4 /*yield*/, sliceFile(file, Number(archiveHeader.mftOffset), archiveHeader.mftSize)];
                    case 2:
                        mftData = _b.apply(void 0, [_d.sent()]);
                        if (!mftData) {
                            throw new Error("Invalid MFT table");
                        }
                        _c = parseMFTIndex;
                        return [4 /*yield*/, sliceFile(file, mftData.mftIndexOffset, mftData.mftIndexSize)];
                    case 3:
                        indexTable = _c.apply(void 0, [_d.sent(), mftData.mftIndexSize]);
                        return [2 /*return*/, {
                                archiveHeader: archiveHeader,
                                metaTable: mftData.table,
                                indexTable: indexTable,
                            }];
                    case 4:
                        error_1 = _d.sent();
                        console.error("Couldn't parse archive", error_1);
                        throw error_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    // Private functions
    function parseANDatHeader(buffer) {
        var ds = new DataView(buffer);
        var header = new DataParser({ root: ArchiveDefinitions.ARCHIVE_HEADER_FORMAT }, false).parse(ds).data;
        if (header.magic !== "AN\u001A") {
            console.error("ANDat header is not valid", header.magic);
            return undefined;
        }
        return header;
    }
    function parseMFTTable(buffer) {
        var dataView = new DataView(buffer);
        var headerParse = new DataParser({ root: ArchiveDefinitions.MFT_TABLE_HEADER }, false).parse(dataView);
        var header = headerParse.data;
        if (header.magic !== "Mft\u001A") {
            console.error("MFTTable header is not valid", header.magic);
            return undefined;
        }
        var fullTable = [];
        var cursor = headerParse.newPosition;
        for (var i = 1; i < header.nbOfEntries; i++) {
            var item = new DataParser({ root: ArchiveDefinitions.MFT_TABLE_ENTRY }, false).parse(dataView, cursor);
            cursor = item.newPosition;
            fullTable[i] = item.data;
        }
        return {
            header: header,
            table: fullTable,
            mftIndexOffset: Number(fullTable[2].offset),
            mftIndexSize: fullTable[2].size,
        };
    }
    function parseMFTIndex(buffer, size) {
        var length = size / 8;
        var indexTable = [];
        var dataView = new DataView(buffer);
        for (var i = 0; i < length; i++) {
            var id = dataView.getUint32(i * 8, true);
            var mftIndex = dataView.getUint32(i * 8 + 4, true);
            indexTable[id] = mftIndex;
        }
        return indexTable;
    }

    var archiveParser = /*#__PURE__*/Object.freeze({
        __proto__: null,
        readArchive: readArchive
    });

    exports.ArchiveParser = archiveParser;
    exports.Definitions = allDefs;
    exports.FileParser = FileParser;
    exports.ParsingUtils = utils;

    return exports;

})({});
//# sourceMappingURL=t3d-parser.js.map
