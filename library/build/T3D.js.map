{"version":3,"sources":["node_modules/browser-pack/_prelude.js","package.json","src/LocalReader/ArchiveParser.js","src/LocalReader/DataReader.js","src/LocalReader/FileTypes.js","src/LocalReader/LocalReader.js","src/LocalReader/PersistantStore.js","src/Logger.js","src/MapFileList.js","src/T3DLib.js","src/dataRenderer/DataRenderer.js","src/dataRenderer/EnvironmentRenderer.js","src/dataRenderer/HavokRenderer.js","src/dataRenderer/PropertiesRenderer.js","src/dataRenderer/SingleModelRenderer.js","src/dataRenderer/StringRenderer.js","src/dataRenderer/TerrainRenderer.js","src/dataRenderer/ZoneRenderer.js","src/format/chunks/AllFormats.js","src/format/chunks/amsp.js","src/format/chunks/anim-0.js","src/format/chunks/anim-1.js","src/format/chunks/area.js","src/format/chunks/armf.js","src/format/chunks/asnd.js","src/format/chunks/audi.js","src/format/chunks/bidx.js","src/format/chunks/bkck.js","src/format/chunks/bloc.js","src/format/chunks/cdhs.js","src/format/chunks/cg15.js","src/format/chunks/cnfg.js","src/format/chunks/coll.js","src/format/chunks/comp.js","src/format/chunks/cscn.js","src/format/chunks/cube.js","src/format/chunks/data.js","src/format/chunks/dcal.js","src/format/chunks/dx9s.js","src/format/chunks/edit.js","src/format/chunks/env.js","src/format/chunks/eula.js","src/format/chunks/exp.js","src/format/chunks/expa.js","src/format/chunks/fall.js","src/format/chunks/game.js","src/format/chunks/geom.js","src/format/chunks/gr2s.js","src/format/chunks/grmt.js","src/format/chunks/havk.js","src/format/chunks/icon.js","src/format/chunks/laye.js","src/format/chunks/lght.js","src/format/chunks/mach.js","src/format/chunks/main-0.js","src/format/chunks/main-1.js","src/format/chunks/mfst-0.js","src/format/chunks/mfst-1.js","src/format/chunks/modl.js","src/format/chunks/mras.js","src/format/chunks/msn.js","src/format/chunks/nm15.js","src/format/chunks/nmex.js","src/format/chunks/obs.js","src/format/chunks/occ.js","src/format/chunks/octm.js","src/format/chunks/pack.js","src/format/chunks/parm.js","src/format/chunks/pgtb.js","src/format/chunks/phys-0.js","src/format/chunks/phys-1.js","src/format/chunks/pnvm.js","src/format/chunks/ppsh.js","src/format/chunks/prp2.js","src/format/chunks/prps.js","src/format/chunks/ps3s.js","src/format/chunks/pvsh.js","src/format/chunks/reso.js","src/format/chunks/rive.js","src/format/chunks/root.js","src/format/chunks/seqn.js","src/format/chunks/shad.js","src/format/chunks/shex.js","src/format/chunks/shor.js","src/format/chunks/skel.js","src/format/chunks/snd.js","src/format/chunks/sppa.js","src/format/chunks/surf.js","src/format/chunks/tkac.js","src/format/chunks/tlfs.js","src/format/chunks/tool.js","src/format/chunks/trn.js","src/format/chunks/trni.js","src/format/chunks/txtm.js","src/format/chunks/txtp.js","src/format/chunks/txtv.js","src/format/chunks/upda.js","src/format/chunks/updb.js","src/format/chunks/vari.js","src/format/chunks/watr.js","src/format/chunks/xbxs.js","src/format/chunks/xshd.js","src/format/chunks/zon2.js","src/format/file/GW2Chunk.js","src/format/file/GW2File.js","src/util/MaterialUtils.js","src/util/MathUtils.js","src/util/ParserUtils.js","src/util/RenderUtils.js","src/util/TerrainShader.js"],"names":["f","exports","module","define","amd","window","global","self","this","T3D","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","name","version","scripts","build","lint","format","format:check","dependencies","DataStream.js","devDependencies","browserify","eslint","gulp","gulp-sourcemaps","gulp-uglify","gulplog","prettier","uglify-es","vinyl-buffer","vinyl-source-stream","main","useTabs","trailingComma","tabWidth","printWidth","MathUtils","parseANDatHeader","ds","header","readUint8","magic","readString","headerSize","readUint32","seek","position","chunkSize","crc","mftOffset","arr32To64","mftSize","flags","Logger","log","TYPE_DEBUG","TYPE_ERROR","parseMFTTable","nbOfEntries","fullTable","item","readUint16","table","mftIndexOffset","offset","mftIndexSize","size","parseMFTIndex","indexTable","id","mftIndex","getFilePart","file","Promise","resolve","reject","reader","FileReader","onerror","onload","fileEvent","buffer","target","result","DataStream","endianness","LITTLE_ENDIAN","len","readAsArrayBuffer","slice","readArchive","async","archiveHeader","mftData","metaTable","[object Object]","settings","_settings","_workerPool","_workerLoad","_inflateCallbacks","workersNb","_startWorker","workerPath","mftId","isImage","capLength","arrayBuffer","byteLength","TYPE_WARNING","push","workerId","_getBestWorkerIndex","postMessage","path","worker","Worker","selfWorkerId","onmessage","message_event","data","split","callback","dxtType","imageWidth","imageHeight","indexOf","Math","min","GW2File","FileTypes","getFileType","first4","readCString","type","ArchiveParser","PersistantStore","DataReader","MapFileList","_dataReader","_persistantStore","_file","undefined","_indexTable","_fileMetaTable","noIndexedDB","baseId","raw","fileLength","extractLength","meta","getFileMeta","compressed","inflate","then","catch","oldFileList","persistantId","persistantList","lastListing","getLastListing","array","complete","key","iterateList","Object","keys","map","Number","index","taskArray","task","persistantNeedsUpdate","_needsScan","scan","taskId","race","_readFileType","scanResult","fileType","change","floor","TYPE_PROGRESS","putListing","res","all","_persistantData","getFileList","mapArray","reversedIndex","getReverseIndex","maps","filter","getFileIndex","found","category","fileMap","find","fileName","toString","mapEntry","typeList","reverseBaseIdList","fileList","baseIds","baseIdList","reduce","reversed","readFile","persistantData","metaData","_fileTypeCache","fileBuffer","DB_VERSION","_dbConnection","_getConnection","request","indexedDB","open","onblocked","onupgradeneeded","event","db","currentVersion","oldVersion","createObjectStore","autoIncrement","currentTarget","transaction","objectStore","createIndex","unique","onsuccess","isReady","listing","isComplete","store","put","filename","openCursor","IDBKeyRange","only","cursor","value","primaryKey","TYPE_MESSAGE","logFunctions","Array","arguments","argArr","argsToArr","unshift","severity","max","shift","apply","args","console","error","warn","debug","LocalReader","_version","t3dtoolsWorker","concurrentTasks","navigator","hardwareConcurrency","GW2Chunk","DataRenderer","EnvironmentRenderer","HavokRenderer","PropertiesRenderer","SingleModelRenderer","TerrainRenderer","ZoneRenderer","StringRenderer","MaterialUtils","ParserUtils","RenderUtils","getLocalReader","lrInstance","openArchive","getFileListAsync","localReader","readFileList","returnObj","fileEntry","getMapListAsync","searchAll","restoreOuput","returnArray","elt","findIndex","sort","j","getMapList","renderMapContentsAsync","renderers","logger","runAllRenderers","context","parseInt","loadFile","mapFile","runRenderer","renderClass","assign","bind","cb","rendererName","renderAsync","getContextValue","clazz","propName","defaultValue","output","hasWebGL","return_context","WebGLRenderingContext","canvas","document","createElement","names","getContext","getParameter","gl","formats","numErrors","THREE","checkRequirements","otherClass","inflatedData","getOutput","fileId","rawData","uarr","Uint8Array","rawStrings","String","fromCharCode","subarray","rawString","join","imageHeigth","image","width","height","super","tex","MeshBasicMaterial","side","BackSide","fog","depthWrite","targetMatIndices","materialArray","fallbackFilename","hazeColorAsInt","writeMat","mat","forEach","loadFallback","getMat","TextureLoader","load","loadLocalTexture","setTimeout","environmentChunkData","hazes","dataGlobal","haze","farColor","lights","ambientLight","hasLight","lighting","backlightIntensity","backlightColor","light","sumDirLightIntensity","dirLightData","color","Color","directionalLight","DirectionalLight","getHex","intensity","set","direction","normalize","lightDir","AmbientLight","ambientTotal","g","b","parameterChunkData","skyElements","skyModeTex","texPathNE","texPathSW","texPathT","bounds","rect","mapW","abs","x1","x2","mapD","y1","y2","loadTextureWithFallback","visible","skyGeometry","BoxGeometry","boxSize","faceVertexUvs","vecs","idx","face","vec2","x","y","uvsNeedUpdate","skyBox","Mesh","translateY","getChunk","hazeColor","getHazeColor","parseLights","parseSkybox","lastP","seed","meshes","models","title","MeshNormalMaterial","DoubleSide","parseAllModels","animation","collisions","ret","collisionIndices","collision","round","animationFromGeomIndex","geometryIndex","geometries","animations","getCollisionsForAnimation","havokChunkData","renderMesh","propGeomIndex","l","model","pos","translate","rot","rotate","scale","mesh","parseHavokMesh","rotation","order","sin","clone","geom","Geometry","vertices","v","Vector3","indices","f1","f2","f3","faces","Face3","computeFaceNormals","boundingBox","boundsMax","propModels","zoneModels","obsModels","mdl","renderZoneModelsCB","renderModels","showUnmaterialized","propertiesChunkData","props","propArray","animProps","propAnimArray","instanceProps","propInstanceArray","metaProps","propMetaArray","concat","meshCache","textureCache","lastPct","renderIndex","pct","pctStr","prop","addMeshToLOD","groups","lod","needsClone","lodDist","lod2","lodOverride","geometry","material","updateMatrix","matrixAutoUpdate","add","group","Group","addLevel","getMeshesForFilename","isCached","boundingSphere","meshArray","LOD","maxDist","boundingSphereRadius","radius","update","transforms","transform","addMeshesToScene","fileIds","getIdsForProp","getFilesUsedByModel","propFileIds","strings","end","entryHeaderDef","entryIndex","entry","readStruct","decryptionOffset","bitsPerSymbol","readUCS2String","recid","language","TerrainShader","wireframe","opacity","transparent","renderRect","terrainData","numChunksD_1","sqrt","dims","chunkArray","numChunksD_2","infaltedBuffer","terrainTiles","pimgDS","pimgTableDataChunk","pimgData","mapRect","parameterData","maxAnisotropy","anisotropy","parseNumChunks","xChunks","yChunks","allMaterials","materials","allTextures","texFileArray","dx","dy","cdx","cdy","allMats","customMaterial","MeshLambertMaterial","flatShading","chunkTextures","strippedPages","page","layer","coord","matName","chunkTex","wrapS","RepeatWrapping","wrapT","stepChunk","cx","cy","water","drawWater","chunkIndex","pageX","pageY","chunkTextureIndices","loResMaterial","texIndexArray","pageOffetX","pageOffetY","fileNames","gi","textureFileName","pageTexName","pageTexName2","near","far","envOutput","uniforms","UniformsUtils","merge","UniformsLib","uvScale","Vector2","texturePicker","texturePicker2","texture1","texture2","texture3","texture4","ShaderMaterial","fragmentShader","getFragmentShader","vertexShader","getVertexShader","chunkGeo","PlaneBufferGeometry","chunkW","cn","getAttribute","heightMapArray","chunk","mS","Matrix4","identity","elements","applyMatrix","SceneUtils","createMultiMaterialObject","PI","globalOffsetX","chunkOffsetX","globalOffsetY","chunkOffsetY","z","px","py","updateMatrixWorld","renderChunk","pagedImageId","pagedImage","loadPagedImageCallback","terrainChunk","texture","zone","zoneDefs","renderZoneCallback","zoneDef","zd","token","defToken","modelGroups","getModelGroups","groupKeys","stepModels","meshGroups","instanceIdx","meshIdx","materialFlags","move","mg","readVerts","verts","Float32Array","readIndices","getIndex","Uint32Array","readUVs","uvs","readNormals","normals","writeVerts","stride","writeIndices","strideIndices","writeUvs","uvStride","writeNormals","normalStride","meshGroup","mergedGeom","BufferGeometry","addAttribute","BufferAttribute","setIndex","buffersNeedUpdate","mapX","mapY","zoneRect","vertRect","encodeData","zdx","linearPos","flag","zoneDefLayer","layerDefArray","modelX","modelY","modelZ","startZ","raycaster","Raycaster","intersections","intersectObject","distance","modelIdx","modelFilename","modelArray","rotRangeX","rotRangeY","rotRangeZ","scaleRange","fadeRange","zoneChunkData","zones","zoneArray","zoneDefArray","stepZone","renderZone","definitionArray","GRMT","DX9S","TOOL","XBXS","UPDB","PS3S","UPDA","MRAS","XSHD","PPSH","PVSH","SPPA","CDHS","PGTB","DATA","txtm","txtp","txtv","vari","AMSP","BKCK","BIDX","ASND","CSCN","havk","shad","area","audi","bloc","cg15","cube","env","laye","lght","msn","nm15","nmex","obs","occ","octm","parm","phys","pnvm","prp2","reso","rive","tlfs","shex","shor","snd","surf","zon2","trn","trni","watr","edit","dcal","exp","pack","MODL","ANIM","COLL","GR2S","ROOT","GAME","ICON","SKEL","PRPS","GEOM","EXPA","PHYS","MFST","ARMF","TKAC","comp","Main","anim","eula","mach","fall","seqn","cnfg","mfst","Utils","versions","29","DspDataV29","getArrayReader","BussDynamicDataV29","getQWordReader","BussDataV29","getPointerReader","EnvelopePointDataV29","EnvelopeDataV29","RangeDataV29","RandomParamDataV29","DynamicParamDataV29","AttenuationDataV29","CategoryDynamicDataV29","CategoryDataV29","MaterialDataV29","MusicConditionDataV29","FileNameDataV29","getFileNameReader","MusicPlaylistDataV29","PropertyDataV29","ReverbDataV29","ScriptRefDataV29","SnapshotDataV29","MusicExternalDataV29","getString16Reader","AudioSettingsDataV29","HandlerDataV29","MetaSoundDataV29","TriggerMarkerDataV29","TriggerKeyDataV29","__root","ScriptFileDataV29","28","DspDataV28","BussDynamicDataV28","BussDataV28","EnvelopePointDataV28","EnvelopeDataV28","RangeDataV28","RandomParamDataV28","DynamicParamDataV28","AttenuationDataV28","CategoryDynamicDataV28","CategoryDataV28","MaterialDataV28","MusicConditionDataV28","FileNameDataV28","MusicPlaylistDataV28","PropertyDataV28","ReverbDataV28","ScriptRefDataV28","SnapshotDataV28","AudioSettingsDataV28","HandlerDataV28","MetaSoundDataV28","TriggerMarkerDataV28","TriggerKeyDataV28","ScriptFileDataV28","27","DspDataV27","BussDynamicDataV27","BussDataV27","EnvelopePointDataV27","EnvelopeDataV27","RangeDataV27","RandomParamDataV27","DynamicParamDataV27","AttenuationDataV27","CategoryDynamicDataV27","CategoryDataV27","MaterialDataV27","MusicConditionDataV27","FileNameDataV27","MusicPlaylistDataV27","PropertyDataV27","ReverbDataV27","ScriptRefDataV27","SnapshotDataV27","AudioSettingsDataV27","HandlerDataV27","MetaSoundDataV27","TriggerMarkerDataV27","TriggerKeyDataV27","ScriptFileDataV27","26","DspDataV26","BussDynamicDataV26","BussDataV26","EnvelopePointDataV26","EnvelopeDataV26","RangeDataV26","RandomParamDataV26","DynamicParamDataV26","AttenuationDataV26","CategoryDynamicDataV26","CategoryDataV26","MaterialDataV26","MusicConditionDataV26","FileNameDataV26","MusicPlaylistDataV26","ReverbDataV26","SnapshotDataV26","AudioSettingsDataV26","HandlerDataV26","MetaSoundDataV26","ScriptRefDataV26","TriggerMarkerDataV26","TriggerKeyDataV26","ScriptFileDataV26","25","DspDataV25","BussDynamicDataV25","BussDataV25","EnvelopePointDataV25","EnvelopeDataV25","RangeDataV25","RandomParamDataV25","DynamicParamDataV25","AttenuationDataV25","CategoryDynamicDataV25","CategoryDataV25","MaterialDataV25","MusicConditionDataV25","FileNameDataV25","MusicPlaylistDataV25","ReverbDataV25","SnapshotDataV25","AudioSettingsDataV25","HandlerDataV25","MetaSoundDataV25","ScriptRefDataV25","TriggerMarkerDataV25","TriggerKeyDataV25","ScriptFileDataV25","24","DspDataV24","BussDynamicDataV24","BussDataV24","EnvelopePointDataV24","EnvelopeDataV24","RangeDataV24","RandomParamDataV24","DynamicParamDataV24","AttenuationDataV24","CategoryDynamicDataV24","CategoryDataV24","MusicConditionDataV24","FileNameDataV24","MusicPlaylistDataV24","ReverbDataV24","SnapshotDataV24","AudioSettingsDataV24","HandlerDataV24","MetaSoundDataV24","ScriptRefDataV24","TriggerMarkerDataV24","TriggerKeyDataV24","ScriptFileDataV24","23","DspDataV23","BussDynamicDataV23","BussDataV23","EnvelopePointDataV23","EnvelopeDataV23","RangeDataV23","RandomParamDataV23","DynamicParamDataV23","AttenuationDataV23","CategoryDynamicDataV23","CategoryDataV23","MusicConditionDataV23","FileNameDataV23","MusicPlaylistDataV23","ReverbDataV23","SnapshotDataV23","AudioSettingsDataV23","HandlerDataV23","MetaSoundDataV23","ScriptRefDataV23","TriggerMarkerDataV23","TriggerKeyDataV23","ScriptFileDataV23","22","DspDataV22","BussDynamicDataV22","BussDataV22","EnvelopePointDataV22","EnvelopeDataV22","RangeDataV22","RandomParamDataV22","DynamicParamDataV22","AttenuationDataV22","CategoryDynamicDataV22","CategoryDataV22","MusicConditionDataV22","FileNameDataV22","MusicPlaylistDataV22","ReverbDataV22","SnapshotDataV22","AudioSettingsDataV22","HandlerDataV22","MetaSoundDataV22","ScriptRefDataV22","TriggerMarkerDataV22","TriggerKeyDataV22","ScriptFileDataV22","21","DspDataV21","BussDynamicDataV21","BussDataV21","EnvelopePointDataV21","EnvelopeDataV21","RangeDataV21","RandomParamDataV21","DynamicParamDataV21","AttenuationDataV21","CategoryDynamicDataV21","CategoryDataV21","MusicConditionDataV21","FileNameDataV21","MusicPlaylistDataV21","ReverbDataV21","SnapshotDataV21","AudioSettingsDataV21","HandlerDataV21","MetaSoundDataV21","ScriptRefDataV21","TriggerMarkerDataV21","TriggerKeyDataV21","ScriptFileDataV21","20","DspDataV20","BussDynamicDataV20","BussDataV20","EnvelopePointDataV20","EnvelopeDataV20","RangeDataV20","RandomParamDataV20","DynamicParamDataV20","AttenuationDataV20","CategoryDynamicDataV20","CategoryDataV20","ReverbDataV20","SnapshotDataV20","AudioSettingsDataV20","HandlerDataV20","FileNameDataV20","MetaSoundDataV20","ScriptRefDataV20","TriggerMarkerDataV20","TriggerKeyDataV20","ScriptFileDataV20","19","DspDataV19","BussDynamicDataV19","BussDataV19","EnvelopePointDataV19","EnvelopeDataV19","RangeDataV19","RandomParamDataV19","DynamicParamDataV19","AttenuationDataV19","CategoryDynamicDataV19","CategoryDataV19","ReverbDataV19","SnapshotDataV19","AudioSettingsDataV19","HandlerDataV19","FileNameDataV19","MetaSoundDataV19","ScriptRefDataV19","TriggerMarkerDataV19","TriggerKeyDataV19","ScriptFileDataV19","18","DspDataV18","BussDynamicDataV18","BussDataV18","EnvelopePointDataV18","EnvelopeDataV18","RangeDataV18","RandomParamDataV18","DynamicParamDataV18","AttenuationDataV18","CategoryDynamicDataV18","CategoryDataV18","ReverbDataV18","SnapshotDataV18","AudioSettingsDataV18","HandlerDataV18","FileNameDataV18","MetaSoundDataV18","ScriptRefDataV18","TriggerMarkerDataV18","TriggerKeyDataV18","ScriptFileDataV18","17","DspDataV17","BussDynamicDataV17","BussDataV17","EnvelopePointDataV17","EnvelopeDataV17","RangeDataV17","RandomParamDataV17","DynamicParamDataV17","AttenuationDataV17","CategoryDynamicDataV17","CategoryDataV17","ReverbDataV17","SnapshotDataV17","AudioSettingsDataV17","HandlerDataV17","FileNameDataV17","MetaSoundDataV17","ScriptRefDataV17","TriggerMarkerDataV17","TriggerKeyDataV17","ScriptFileDataV17","16","DspDataV16","BussDynamicDataV16","BussDataV16","EnvelopePointDataV16","EnvelopeDataV16","RangeDataV16","RandomParamDataV16","DynamicParamDataV16","AttenuationDataV16","CategoryDynamicDataV16","CategoryDataV16","ReverbDataV16","SnapshotDataV16","AudioSettingsDataV16","HandlerDataV16","FileNameDataV16","MetaSoundDataV16","ScriptRefDataV16","TriggerMarkerDataV16","TriggerKeyDataV16","ScriptFileDataV16","15","DspDataV15","BussDynamicDataV15","BussDataV15","EnvelopePointDataV15","EnvelopeDataV15","RangeDataV15","RandomParamDataV15","DynamicParamDataV15","AttenuationDataV15","CategoryDynamicDataV15","CategoryDataV15","ReverbDataV15","SnapshotDataV15","AudioSettingsDataV15","HandlerDataV15","FileNameDataV15","MetaSoundDataV15","ScriptRefDataV15","TriggerMarkerDataV15","TriggerKeyDataV15","ScriptFileDataV15","14","DspDataV14","BussDynamicDataV14","BussDataV14","EnvelopePointDataV14","EnvelopeDataV14","RangeDataV14","RandomParamDataV14","DynamicParamDataV14","AttenuationDataV14","CategoryDynamicDataV14","CategoryDataV14","ReverbDataV14","SnapshotDataV14","AudioSettingsDataV14","HandlerDataV14","FileNameDataV14","MetaSoundDataV14","ScriptRefDataV14","TriggerMarkerDataV14","TriggerKeyDataV14","ScriptFileDataV14","13","DspDataV13","BussDynamicDataV13","BussDataV13","EnvelopePointDataV13","EnvelopeDataV13","RangeDataV13","RandomParamDataV13","DynamicParamDataV13","AttenuationDataV13","CategoryDynamicDataV13","CategoryDataV13","ReverbDataV13","SnapshotDataV13","AudioSettingsDataV13","HandlerDataV13","FileNameDataV13","MetaSoundDataV13","ScriptRefDataV13","TriggerMarkerDataV13","TriggerKeyDataV13","ScriptFileDataV13","12","DspDataV12","BussDynamicDataV12","BussDataV12","EnvelopePointDataV12","EnvelopeDataV12","RangeDataV12","RandomParamDataV12","DynamicParamDataV12","AttenuationDataV12","CategoryDynamicDataV12","CategoryDataV12","ReverbDataV12","SnapshotDataV12","AudioSettingsDataV12","HandlerDataV12","FileNameDataV12","MetaSoundDataV12","ScriptRefDataV12","TriggerMarkerDataV12","TriggerKeyDataV12","ScriptFileDataV12","11","DspDataV11","BussDynamicDataV11","BussDataV11","EnvelopePointDataV11","EnvelopeDataV11","RangeDataV11","RandomParamDataV11","DynamicParamDataV11","AttenuationDataV11","CategoryDynamicDataV11","CategoryDataV11","ReverbDataV11","SnapshotDataV11","AudioSettingsDataV11","HandlerDataV11","FileNameDataV11","MetaSoundDataV11","ScriptRefDataV11","TriggerMarkerDataV11","TriggerKeyDataV11","ScriptFileDataV11","10","DspDataV10","BussDynamicDataV10","BussDataV10","EnvelopePointDataV10","EnvelopeDataV10","RangeDataV10","RandomParamDataV10","DynamicParamDataV10","AttenuationDataV10","CategoryDynamicDataV10","CategoryDataV10","ReverbDataV10","SnapshotDataV10","AudioSettingsDataV10","HandlerDataV10","FileNameDataV10","MetaSoundDataV10","ScriptRefDataV10","TriggerMarkerDataV10","TriggerKeyDataV10","ScriptFileDataV10","9","DspDataV9","BussDynamicDataV9","BussDataV9","EnvelopePointDataV9","EnvelopeDataV9","RangeDataV9","RandomParamDataV9","DynamicParamDataV9","AttenuationDataV9","CategoryDynamicDataV9","CategoryDataV9","ReverbDataV9","SnapshotDataV9","AudioSettingsDataV9","HandlerDataV9","FileNameDataV9","MetaSoundDataV9","ScriptRefDataV9","TriggerMarkerDataV9","TriggerKeyDataV9","ScriptFileDataV9","8","DspDataV8","BussDynamicDataV8","BussDataV8","EnvelopePointDataV8","EnvelopeDataV8","RangeDataV8","RandomParamDataV8","DynamicParamDataV8","AttenuationDataV8","CategoryDynamicDataV8","CategoryDataV8","ReverbDataV8","SnapshotDataV8","AudioSettingsDataV8","HandlerDataV8","FileNameDataV8","MetaSoundDataV8","ScriptRefDataV8","TriggerMarkerDataV8","TriggerKeyDataV8","ScriptFileDataV8","7","DspDataV7","BussDynamicDataV7","BussDataV7","EnvelopePointDataV7","EnvelopeDataV7","RangeDataV7","RandomParamDataV7","DynamicParamDataV7","AttenuationDataV7","CategoryDynamicDataV7","CategoryDataV7","SnapshotDataV7","AudioSettingsDataV7","HandlerDataV7","FileNameDataV7","MetaSoundDataV7","ScriptRefDataV7","TriggerMarkerDataV7","TriggerKeyDataV7","ScriptFileDataV7","6","DspDataV6","BussDynamicDataV6","BussDataV6","EnvelopePointDataV6","EnvelopeDataV6","RangeDataV6","RandomParamDataV6","DynamicParamDataV6","AttenuationDataV6","CategoryDataV6","SnapshotDataV6","AudioSettingsDataV6","HandlerDataV6","FileNameDataV6","MetaSoundDataV6","ScriptRefDataV6","TriggerMarkerDataV6","TriggerKeyDataV6","ScriptFileDataV6","5","EnvelopePointDataV5","EnvelopeDataV5","RangeDataV5","RandomParamDataV5","DynamicParamDataV5","AttenuationDataV5","CategoryDataV5","DspDataV5","BussDataV5","SnapshotDataV5","AudioSettingsDataV5","HandlerDataV5","FileNameDataV5","MetaSoundDataV5","ScriptRefDataV5","TriggerMarkerDataV5","TriggerKeyDataV5","ScriptFileDataV5","4","VolumeGroupDataV4","EnvelopePointDataV4","EnvelopeDataV4","RangeDataV4","RandomParamDataV4","DynamicParamDataV4","AttenuationDataV4","CategoryDataV4","AudioSettingsDataV4","HandlerDataV4","DspDataV4","FileNameDataV4","MetaSoundDataV4","ScriptRefDataV4","TriggerMarkerDataV4","TriggerKeyDataV4","ScriptFileDataV4","3","VolumeGroupDataV3","EnvelopePointDataV3","EnvelopeDataV3","RangeDataV3","RandomParamDataV3","DynamicParamDataV3","AttenuationDataV3","CategoryDataV3","AudioSettingsDataV3","HandlerDataV3","DspDataV3","FileNameDataV3","MetaSoundDataV3","ScriptRefDataV3","TriggerMarkerDataV3","TriggerKeyDataV3","ScriptFileDataV3","2","VolumeGroupDataV2","EnvelopePointDataV2","EnvelopeDataV2","RangeDataV2","RandomParamDataV2","DynamicParamDataV2","AttenuationDataV2","CategoryDataV2","AudioSettingsDataV2","HandlerDataV2","DspDataV2","FileNameDataV2","MetaSoundDataV2","ScriptRefDataV2","TriggerMarkerDataV2","TriggerKeyDataV2","ScriptFileDataV2","EnvelopePointDataV1","EnvelopeDataV1","RangeDataV1","RandomParamDataV1","DynamicParamDataV1","AttenuationDataV1","CategoryDataV1","VolumeGroupDataV1","AudioSettingsDataV1","HandlerDataV1","DspDataV1","FileNameDataV1","MetaSoundDataV1","ScriptRefDataV1","TriggerMarkerDataV1","TriggerKeyDataV1","ScriptFileDataV1","0","HandlerDataV0","EnvelopePointDataV0","EnvelopeDataV0","RangeDataV0","RandomParamDataV0","DynamicParamDataV0","AttenuationDataV0","DspDataV0","FileNameDataV0","MetaSoundDataV0","ScriptRefDataV0","TriggerMarkerDataV0","TriggerKeyDataV0","ScriptFileDataV0","PackGrannyAnimationTypeV1","ModelAnimationLodV25","ModelVisTrackDataV33","ModelTrackTypeDataV25","ModelUVAnimationV25","ModelCloudAnimV25","ModelMatConstAnimV25","ModelLightAnimationV25","ModelAnimPropertyDataV25","ModelTokenMapAnimV25","ModelBoneConstraintAnimV25","ModelAnchorAnimV25","ModelStreakAnimV25","ModelLightningAnimV25","ModelWindAnimationV25","ModelAnimationDataV33","ModelCompoundAnimationDataV25","ModelAnimationImportSequenceV25","ModelAnimationImportDataV33","ModelFileAnimationBankV25","getRefArrayReader","ModelFileAnimationV25","PackGrannyAnimationTypeV0","ModelAnimationLodV24","ModelVisTrackDataV32","ModelTrackTypeDataV24","ModelUVAnimationV24","ModelCloudAnimV24","ModelMatConstAnimV24","ModelLightAnimationV24","ModelAnimPropertyDataV24","ModelTokenMapAnimV24","ModelBoneConstraintAnimV24","ModelAnchorAnimV24","ModelStreakAnimV24","ModelLightningAnimV24","ModelWindAnimationV24","ModelAnimationDataV32","ModelCompoundAnimationDataV24","ModelAnimationImportSequenceV24","ModelAnimationImportDataV32","ModelFileAnimationBankV24","ModelFileAnimationV24","ModelVisTrackDataV31","ModelTrackTypeDataV23","ModelUVAnimationV23","ModelCloudAnimV23","ModelMatConstAnimV23","ModelLightAnimationV23","ModelAnimPropertyDataV23","ModelTokenMapAnimV23","ModelBoneConstraintAnimV23","ModelAnchorAnimV23","ModelStreakAnimV23","ModelLightningAnimV23","ModelWindAnimationV23","ModelAnimationDataV31","ModelCompoundAnimationDataV23","ModelAnimationImportSequenceV23","ModelAnimationImportDataV31","ModelFileAnimationBankV23","ModelVisTrackDataV30","ModelTrackTypeDataV22","ModelUVAnimationV22","ModelCloudAnimV22","ModelMatConstAnimV22","ModelLightAnimationV22","ModelAnimPropertyDataV22","ModelTokenMapAnimV22","ModelBoneConstraintAnimV22","ModelAnchorAnimV22","ModelStreakAnimV22","ModelLightningAnimV22","ModelWindAnimationV22","ModelAnimationDataV30","ModelCompoundAnimationDataV22","ModelAnimationImportSequenceV22","ModelAnimationImportDataV30","ModelFileAnimationBankV22","ModelVisTrackDataV29","ModelTrackTypeDataV21","ModelUVAnimationV21","ModelCloudAnimV21","ModelMatConstAnimV21","ModelLightAnimationV21","ModelAnimPropertyDataV21","ModelTokenMapAnimV21","ModelBoneConstraintAnimV21","ModelAnchorAnimV21","ModelStreakAnimV21","ModelLightningAnimV21","ModelWindAnimationV21","ModelAnimationDataV29","ModelCompoundAnimationDataV21","ModelAnimationImportSequenceV21","ModelAnimationImportDataV29","ModelFileAnimationBankV21","ModelVisTrackDataV28","ModelTrackTypeDataV20","ModelUVAnimationV20","ModelCloudAnimV20","ModelMatConstAnimV20","ModelLightAnimationV20","ModelAnimPropertyDataV20","ModelTokenMapAnimV20","ModelBoneConstraintAnimV20","ModelAnchorAnimV20","ModelStreakAnimV20","ModelLightningAnimV20","ModelAnimationDataV28","ModelCompoundAnimationDataV20","ModelAnimationImportSequenceV20","ModelAnimationImportDataV28","ModelFileAnimationBankV20","ModelVisTrackDataV27","ModelTrackTypeDataV19","ModelUVAnimationV19","ModelCloudAnimV19","ModelMatConstAnimV19","ModelLightAnimationV19","ModelAnimPropertyDataV19","ModelTokenMapAnimV19","ModelBoneConstraintAnimV19","ModelAnchorAnimV19","ModelStreakAnimV19","ModelAnimationDataV27","ModelCompoundAnimationDataV19","ModelAnimationImportSequenceV19","ModelAnimationImportDataV27","ModelFileAnimationBankV19","ModelVisTrackDataV26","ModelTrackTypeDataV18","ModelUVAnimationV18","ModelCloudAnimV18","ModelMatConstAnimV18","ModelLightAnimationV18","ModelAnimPropertyDataV18","ModelTokenMapAnimV18","ModelBoneConstraintAnimV18","ModelAnchorAnimV18","ModelStreakAnimV18","ModelAnimationDataV26","ModelCompoundAnimationDataV18","ModelAnimationImportSequenceV18","ModelAnimationImportDataV26","ModelFileAnimationBankV18","ModelVisTrackDataV25","ModelTrackTypeDataV17","ModelUVAnimationV17","ModelCloudAnimV17","ModelMatConstAnimV17","ModelLightAnimationV17","ModelAnimPropertyDataV17","ModelTokenMapAnimV17","ModelBoneConstraintAnimV17","ModelAnchorAnimV17","ModelStreakAnimV17","ModelAnimationDataV25","ModelCompoundAnimationDataV17","ModelAnimationImportSequenceV17","ModelAnimationImportDataV25","ModelFileAnimationBankV17","ModelVisTrackDataV24","ModelTrackTypeDataV16","ModelUVAnimationV16","ModelCloudAnimV16","ModelMatConstAnimV16","ModelLightAnimationV16","ModelAnimPropertyDataV16","ModelTokenMapAnimV16","ModelBoneConstraintAnimV16","ModelAnchorAnimV16","ModelStreakAnimV16","ModelAnimationDataV24","ModelCompoundAnimationDataV16","ModelAnimationImportDataV24","ModelFileAnimationBankV16","ModelVisTrackDataV23","ModelTrackTypeDataV15","ModelUVAnimationV15","ModelCloudAnimV15","ModelMatConstAnimV15","ModelLightAnimationV15","ModelAnimPropertyDataV15","ModelTokenMapAnimV15","ModelBoneConstraintAnimV15","ModelAnimationDataV23","ModelCompoundAnimationDataV15","ModelAnimationImportDataV23","ModelFileAnimationBankV15","ModelVisTrackDataV22","ModelTrackTypeDataV14","ModelUVAnimationV14","ModelCloudAnimV14","ModelMatConstAnimV14","ModelLightAnimationV14","ModelAnimPropertyDataV14","ModelTokenMapAnimV14","ModelAnimationDataV22","ModelCompoundAnimationDataV14","ModelAnimationImportDataV22","ModelFileAnimationBankV14","ModelVisTrackDataV21","ModelTrackTypeDataV13","ModelUVAnimationV13","ModelCloudAnimV13","ModelMatConstAnimV13","ModelLightAnimationV13","ModelAnimPropertyDataV13","ModelTokenMapAnimV13","ModelAnimationDataV21","ModelCompoundAnimationDataV13","ModelAnimationImportDataV21","ModelFileAnimationBankV13","ModelVisTrackDataV20","ModelTrackTypeDataV12","ModelUVAnimationV12","ModelCloudAnimV12","ModelMatConstAnimV12","ModelLightAnimationV12","ModelAnimPropertyDataV12","ModelTokenMapAnimV12","ModelAnimationDataV20","ModelCompoundAnimationDataV12","ModelAnimationImportDataV20","ModelFileAnimationBankV12","ModelVisTrackDataV19","ModelTrackTypeDataV11","ModelUVAnimationV11","ModelCloudAnimV11","ModelMatConstAnimV11","ModelLightAnimationV11","ModelAnimPropertyDataV11","ModelAnimationDataV19","ModelCompoundAnimationDataV11","ModelAnimationImportDataV19","ModelFileAnimationBankV11","ModelVisTrackDataV18","ModelTrackTypeDataV10","ModelUVAnimationV10","ModelCloudAnimV10","ModelMatConstAnimV10","ModelLightAnimationV10","ModelAnimPropertyDataV10","ModelAnimationDataV18","ModelCompoundAnimationDataV10","ModelAnimationImportDataV18","ModelFileAnimationBankV10","ModelVisTrackDataV17","ModelTrackTypeDataV9","ModelUVAnimationV9","ModelCloudAnimV9","ModelMatConstAnimV9","ModelLightAnimationV9","ModelAnimationDataV17","ModelCompoundAnimationDataV9","ModelAnimationImportDataV17","ModelFileAnimationBankV9","ModelVisTrackDataV16","ModelTrackTypeDataV8","ModelUVAnimationV8","ModelCloudAnimV8","ModelMatConstAnimV8","ModelLightAnimationV8","ModelAnimationDataV16","ModelCompoundAnimationDataV8","ModelAnimationImportDataV16","ModelFileAnimationBankV8","ModelVisTrackDataV15","ModelTrackTypeDataV7","ModelUVAnimationV7","ModelCloudAnimV7","ModelMatConstAnimV7","ModelLightAnimationV7","ModelAnimationDataV15","ModelCompoundAnimationDataV7","ModelAnimationImportDataV15","ModelFileAnimationBankV7","ModelVisTrackDataV14","ModelTrackTypeDataV6","ModelUVAnimationV6","ModelCloudAnimV6","ModelMatConstAnimV6","ModelLightAnimationV6","ModelAnimationDataV14","ModelCompoundAnimationDataV6","ModelAnimationImportDataV14","ModelFileAnimationBankV6","ModelVisTrackDataV13","ModelTrackTypeDataV5","ModelUVAnimationV5","ModelLightAnimationV5","ModelAnimationDataV13","ModelCompoundAnimationDataV5","ModelAnimationImportDataV13","ModelFileAnimationBankV5","ModelVisTrackDataV12","ModelTrackTypeDataV4","ModelUVAnimationV4","ModelLightAnimationV4","ModelAnimationDataV12","ModelCompoundAnimationDataV4","ModelAnimationImportDataV12","ModelFileAnimationBankV4","ModelVisTrackDataV11","ModelTrackTypeDataV3","ModelUVAnimationV3","ModelLightAnimationV3","ModelAnimationDataV11","ModelCompoundAnimationDataV3","ModelAnimationImportDataV11","ModelFileAnimationBankV3","ModelVisTrackDataV10","ModelUVTransformV2","ModelUVAnimationV2","ModelAnimationDataV10","ModelCompoundAnimationDataV2","ModelAnimationImportDataV10","ModelFileAnimationBankV2","ModelVisTrackDataV9","ModelUVTransformV1","ModelUVAnimationV1","ModelAnimationDataV9","ModelCompoundAnimationDataV1","ModelAnimationImportDataV9","ModelFileAnimationV1","ModelVisTrackDataV8","ModelUVTransformV0","ModelUVAnimationV0","ModelAnimationDataV8","ModelCompoundAnimationDataV0","ModelAnimationImportDataV8","ModelFileAnimationV0","SceneKeyframeV2","SceneMotionV2","SceneActionPointV2","SceneAnimationEventV2","SceneAnimationV2","SceneTransformV2","ScenePoseV2","SceneImportSequenceV2","SceneAnimationImportV2","SceneFileAnimationV2","SceneKeyframeV1","SceneMotionV1","SceneActionPointV1","SceneAnimationEventV1","SceneAnimationV1","SceneAnimationImportV1","SceneFileAnimationV1","SceneKeyframeV0","SceneMotionV0","SceneActionPointV0","SceneAnimationV0","SceneAnimationImportV0","SceneFileAnimationV0","PackEmoteTimingV3","PackEmoteAnimationV3","PackEmoteAnimationsV3","PackEmoteTimingV2","PackEmoteAnimationV2","PackEmoteAnimationsV2","PackEmoteTimingV1","PackEmoteAnimationV1","PackEmoteAnimationsV1","PackEmoteTimingV0","PackEmoteAnimationV0","PackEmoteAnimationsV0","PackMapAreaPolygonV4","PackMapAreaPortalV4","PackMapAreaVolumeV4","PackMapAreaV4","PackMapAreaToolV4","PackMapAreasV4","PackMapAreaPolygonV3","PackMapAreaPortalV3","PackMapAreaVolumeV3","PackMapAreaV3","PackMapAreaToolV3","PackMapAreasV3","PackMapAreaPolygonV2","PackMapAreaPortalV2","PackMapAreaVolumeV2","PackMapAreaV2","PackMapAreaToolV2","PackMapAreasV2","PackMapAreaPolygonV1","PackMapAreaPortalV1","PackMapAreaVolumeV1","PackMapAreaV1","PackMapAreasV1","PackMapAreaV0","PackMapPortalV0","PackMapAreasV0","PackAssetManifestFile","PackAssetExtraFile","PackAssetRootManifest","PackAssetRootManifestV0","ReservedWaveformDataV2","WaveformDataV2","WaveformDataV1","WaveformDataV0","PackMapAudioRegion","PackMapAudioRegionTool","PackMapAudioDep","MapAudio","BankFileNameDataV0","BankLanguageDataV0","BankIndexDataV0","AsndFileDataV2","ReservedBankDataV2","BankFileDataV2","AsndFileDataV1","BankFileDataV1","AsndFileDataV0","BankFileDataV0","PackMapBlockRecord","PackMapBlock","PackVsGenParams","PackVertexShaderKey","PackShaderCache","PackVertexShaderKeyV0","PackShaderCacheV0","PackMapCoarseNavGraphNodeV0","PackMapCoarseNavGraphConnectionEdgeV0","PackMapCoarseNavGraphConnectionV0","PackMapCoarseNavGraphNodeConnectionsV0","PackMapCoarseNavGraphSectionV0","PackMapCoarseNavGraphV0","PackAnimAimIKBoneV0","PackAnimAimIKConfigV0","PackAnimIKRaycastTargetV0","PackAnimIKChainV0","PackAnimIKChainGroupV0","PackAnimConfigV0","ModelCollisionKeyFrameV10","ModelCollisionAnimatedObjectV10","ModelCollisionAnimationV10","ModelCollisionMeshV10","ModelCollisionBoxV10","ModelCollisionSphereV10","ModelCollisionCapsuleV10","ModelCollisionSurfaceV10","ModelFileCollisionV10","ModelCollisionKeyFrameV9","ModelCollisionAnimatedObjectV9","ModelCollisionAnimationV9","ModelCollisionMeshV9","ModelCollisionBoxV9","ModelCollisionSphereV9","ModelCollisionCapsuleV9","ModelCollisionSurfaceV9","ModelFileCollisionV9","ModelCollisionMeshV8","ModelCollisionCloudV8","ModelCollisionCubeV8","ModelCollisionSphereV8","ModelCollisionCapsuleV8","ModelCollisionSurfaceV8","ModelFileCollisionV8","ModelCollisionMeshV1","ModelCollisionCloudV1","ModelCollisionCubeV1","ModelCollisionSphereV1","ModelCollisionSurfaceV1","ModelFileCollisionV1","ModelCollisionMeshV0","ModelCollisionCloudV0","ModelCollisionCubeV0","ModelCollisionSphereV0","ModelCollisionSurfaceV0","ModelFileCollisionV0","PackCompositeBlitRectSetV19","PackCompositeBoneScaleParamV19","PackCompositeBoneScaleRegionV19","PackCompositeMorphWeightV19","PackCompositeBoneScaleV19","PackCompositeBoneScaleFileV19","PackCompositeFileDataV19","PackCompositeSkinPatternV19","PackCompositeSkinStyleV19","PackCompositeColorV19","PackCompositeVariantComponentV19","PackCompositeVariantV19","PackCompositeAnimOverrideV19","PackCompositeRaceDataV19","PackCompositeV19","PackCompositeBlitRectSetV18","PackCompositeBoneScaleParamV18","PackCompositeBoneScaleRegionV18","PackCompositeMorphWeightV18","PackCompositeBoneScaleV18","PackCompositeBoneScaleFileV18","PackCompositeFileDataV18","PackCompositeSkinPatternV18","PackCompositeSkinStyleV18","PackCompositeColorV18","PackCompositeVariantComponentV18","PackCompositeVariantV18","PackCompositeAnimOverrideV18","PackCompositeRaceDataV18","PackCompositeV18","PackCompositeBlitRectSetV17","PackCompositeBoneScaleParamV17","PackCompositeBoneScaleRegionV17","PackCompositeMorphWeightV17","PackCompositeBoneScaleV17","PackCompositeBoneScaleFileV17","PackCompositeFileDataV17","PackCompositeSkinPatternV17","PackCompositeSkinStyleV17","PackCompositeColorV17","PackCompositeVariantComponentV17","PackCompositeVariantV17","PackCompositeAnimOverrideV17","PackCompositeRaceDataV17","PackCompositeV17","PackCompositeBlitRectSetV16","PackCompositeBoneScaleParamV16","PackCompositeBoneScaleRegionV16","PackCompositeMorphWeightV16","PackCompositeBoneScaleV16","PackCompositeBoneScaleFileV16","PackCompositeFileDataV16","PackCompositeSkinPatternV16","PackCompositeColorV16","PackCompositeVariantComponentV16","PackCompositeVariantV16","PackCompositeAnimOverrideV16","PackCompositeRaceDataV16","PackCompositeV16","PackCompositeBlitRectSetV15","PackCompositeBoneScaleParamV15","PackCompositeBoneScaleRegionV15","PackCompositeMorphWeightV15","PackCompositeBoneScaleV15","PackCompositeBoneScaleFileV15","PackCompositeFileDataV15","PackCompositeSkinPatternV15","PackCompositeColorV15","PackCompositeVariantComponentV15","PackCompositeVariantV15","PackCompositeAnimOverrideV15","PackCompositeRaceDataV15","PackCompositeV15","PackCompositeBlitRectSetV14","PackCompositeBoneScaleParamV14","PackCompositeBoneScaleRegionV14","PackCompositeMorphWeightV14","PackCompositeBoneScaleV14","PackCompositeBoneScaleFileV14","PackCompositeFileDataV14","PackCompositeSkinPatternV14","PackCompositeColorV14","PackCompositeVariantComponentV14","PackCompositeVariantV14","PackCompositeRaceDataV14","PackCompositeV14","PackCompositeBlitRectSetV13","PackCompositeBoneScaleParamV13","PackCompositeBoneScaleRegionV13","PackCompositeMorphWeightV13","PackCompositeBoneScaleV13","PackCompositeBoneScaleFileV13","PackCompositeFileDataV13","PackCompositeSkinPatternV13","PackCompositeColorV13","PackCompositeVariantComponentV13","PackCompositeVariantV13","PackCompositeRaceDataV13","PackCompositeV13","PackCompositeBlitRectSetV12","PackCompositeBoneScaleParamV12","PackCompositeBoneScaleRegionV12","PackCompositeMorphWeightV12","PackCompositeBoneScaleV12","PackCompositeBoneScaleFileV12","PackCompositeFileDataV12","PackCompositeSkinPatternV12","PackCompositeColorV12","PackCompositeVariantComponentV12","PackCompositeVariantV12","PackCompositeRaceDataV12","PackCompositeV12","PackCompositeBlitRectSetV11","PackCompositeBoneScaleParamV11","PackCompositeBoneScaleRegionV11","PackCompositeBoneScaleV11","PackCompositeFileDataV11","PackCompositeSkinPatternV11","PackCompositeColorV11","PackCompositeVariantComponentV11","PackCompositeVariantV11","PackCompositeRaceDataV11","PackCompositeV11","PackCompositeBlitRectSetV10","PackCompositeFileDataV10","PackCompositeSkinPatternV10","PackCompositeColorV10","PackCompositeVariantComponentV10","PackCompositeVariantV10","PackCompositeRaceDataV10","PackCompositeV10","PackCompositeBlitRectSetV9","PackCompositeFileDataV9","PackCompositeSkinPatternV9","PackCompositeColorV9","PackCompositeVariantComponentV9","PackCompositeVariantV9","PackCompositeRaceDataV9","PackCompositeV9","PackCompositeBlitRectSetV8","PackCompositeFileDataV8","PackCompositeSkinPatternV8","PackCompositeColorV8","PackCompositeVariantComponentV8","PackCompositeVariantV8","PackCompositeRaceDataV8","PackCompositeV8","PackCompositeBlitRectSetV7","PackCompositeFileDataV7","PackCompositeSkinPatternV7","PackCompositeColorV7","PackCompositeVariantComponentV7","PackCompositeVariantV7","PackCompositeRaceDataV7","PackCompositeV7","PackCompositeBlitRectSetV6","PackCompositeFileDataV6","PackCompositeSkinPatternV6","PackCompositeColorV6","PackCompositeVariantComponentV6","PackCompositeVariantV6","PackCompositeRaceDataV6","PackCompositeV6","PackCompositeBlitRectSetV5","PackCompositeFileDataV5","PackCompositeSkinPatternV5","PackCompositeColorV5","PackCompositeVariantComponentV5","PackCompositeVariantV5","PackCompositeRaceDataV5","PackCompositeV5","PackCompositeBlitRectSetV4","PackCompositeFileDataV4","PackCompositeSkinPatternV4","PackCompositeColorV4","PackCompositeVariantComponentV4","PackCompositeVariantV4","PackCompositeRaceDataV4","PackCompositeV4","PackCompositeBlitRectSetV3","PackCompositeFileDataV3","PackCompositeSkinPatternV3","PackCompositeColorV3","PackCompositeVariantComponentV3","PackCompositeVariantV3","PackCompositeRaceDataV3","PackCompositeV3","PackCompositeBlitRectSetV2","PackCompositeFileDataV2","PackCompositeSkinPatternV2","PackCompositeColorV2","PackCompositeVariantComponentV2","PackCompositeVariantV2","PackCompositeRaceDataV2","PackCompositeV2","PackCompositeBlitRectSetV1","PackCompositeFileDataV1","PackCompositeSkinPatternV1","PackCompositeColorV1","PackCompositeVariantComponentV1","PackCompositeVariantV1","PackCompositeRaceDataV1","PackCompositeV1","PackCompositeBlitRectSetV0","PackCompositeFileDataV0","PackCompositeSkinPatternV0","PackCompositeColorV0","PackCompositeVariantComponentV0","PackCompositeVariantV0","PackCompositeRaceDataV0","PackCompositeV0","36","PropertyDataV36","CurveKeyDataV36","FlagKeyDataV36","TriggerKeyDataV36","TrackDataV36","TrackGroupDataV36","SequenceDataV36","ColorDefDataV36","AmbientLightDataV36","FileNameRefDataV36","ScriptDataV36","TextEntryDataV36","TextResourceDataV36","SpeciesResourceDataV36","ResourceDataV36","SceneDataV36","35","PropertyDataV35","CurveKeyDataV35","FlagKeyDataV35","TriggerKeyDataV35","TrackDataV35","TrackGroupDataV35","SequenceDataV35","ColorDefDataV35","AmbientLightDataV35","FileNameRefDataV35","ScriptDataV35","TextEntryDataV35","TextResourceDataV35","SpeciesResourceDataV35","ResourceDataV35","SceneDataV35","34","PropertyDataV34","CurveKeyDataV34","FlagKeyDataV34","TriggerKeyDataV34","TrackDataV34","TrackGroupDataV34","SequenceDataV34","ColorDefDataV34","AmbientLightDataV34","FileNameRefDataV34","ScriptDataV34","TextEntryDataV34","TextResourceDataV34","SpeciesResourceDataV34","ResourceDataV34","SceneDataV34","33","PropertyDataV33","CurveKeyDataV33","FlagKeyDataV33","TriggerKeyDataV33","TrackDataV33","TrackGroupDataV33","SequenceDataV33","ColorDefDataV33","AmbientLightDataV33","FileNameRefDataV33","ScriptDataV33","TextEntryDataV33","TextResourceDataV33","ResourceDataV33","SceneDataV33","32","PropertyDataV32","CurveKeyDataV32","FlagKeyDataV32","TriggerKeyDataV32","TrackDataV32","TrackGroupDataV32","SequenceDataV32","ColorDefDataV32","AmbientLightDataV32","FileNameRefDataV32","ScriptDataV32","TextEntryDataV32","TextResourceDataV32","ResourceDataV32","SceneDataV32","31","PropertyDataV31","CurveKeyDataV31","FlagKeyDataV31","TriggerKeyDataV31","TrackDataV31","TrackGroupDataV31","SequenceDataV31","ColorDefDataV31","AmbientLightDataV31","FileNameRefDataV31","ScriptDataV31","TextEntryDataV31","TextResourceDataV31","ResourceDataV31","SceneDataV31","30","PropertyDataV30","CurveKeyDataV30","FlagKeyDataV30","TriggerKeyDataV30","TrackDataV30","TrackGroupDataV30","SequenceDataV30","ColorDefDataV30","AmbientLightDataV30","FileNameRefDataV30","ScriptDataV30","TextEntryDataV30","TextResourceDataV30","ResourceDataV30","SceneDataV30","CurveKeyDataV29","FlagKeyDataV29","TrackDataV29","TrackGroupDataV29","SequenceDataV29","ColorDefDataV29","AmbientLightDataV29","FileNameRefDataV29","ScriptDataV29","TextEntryDataV29","TextResourceDataV29","ResourceDataV29","SceneDataV29","CurveKeyDataV28","FlagKeyDataV28","TrackDataV28","TrackGroupDataV28","SequenceDataV28","ColorDefDataV28","AmbientLightDataV28","FileNameRefDataV28","ScriptDataV28","TextEntryDataV28","TextResourceDataV28","ResourceDataV28","SceneDataV28","CurveKeyDataV27","FlagKeyDataV27","TrackDataV27","TrackGroupDataV27","SequenceDataV27","ColorDefDataV27","AmbientLightDataV27","FileNameRefDataV27","ScriptDataV27","TextEntryDataV27","TextResourceDataV27","ResourceDataV27","SceneDataV27","PropertyDataV26","CurveKeyDataV26","FlagKeyDataV26","TrackDataV26","TrackGroupDataV26","SequenceDataV26","ColorDefDataV26","AmbientLightDataV26","FileNameRefDataV26","ScriptDataV26","TextEntryDataV26","TextResourceDataV26","ResourceDataV26","SceneDataV26","PropertyDataV25","CurveKeyDataV25","FlagKeyDataV25","TrackDataV25","TrackGroupDataV25","SequenceDataV25","ColorDefDataV25","AmbientLightDataV25","FileNameRefDataV25","ScriptDataV25","TextEntryDataV25","TextResourceDataV25","ResourceDataV25","SceneDataV25","PropertyDataV24","CurveKeyDataV24","FlagKeyDataV24","TrackDataV24","TrackGroupDataV24","SequenceDataV24","ColorDefDataV24","AmbientLightDataV24","FileNameRefDataV24","ScriptDataV24","TextEntryDataV24","TextResourceDataV24","ResourceDataV24","SceneDataV24","PropertyDataV23","CurveKeyDataV23","FlagKeyDataV23","TrackDataV23","TrackGroupDataV23","SequenceDataV23","ColorDefDataV23","AmbientLightDataV23","FileNameRefDataV23","ScriptDataV23","TextEntryDataV23","TextResourceDataV23","ResourceDataV23","SceneDataV23","PropertyDataV22","CurveKeyDataV22","FlagKeyDataV22","TrackDataV22","TrackGroupDataV22","SequenceDataV22","ColorDefDataV22","AmbientLightDataV22","FileNameRefDataV22","ScriptDataV22","TextEntryDataV22","TextResourceDataV22","ResourceDataV22","SceneDataV22","PropertyDataV21","CurveKeyDataV21","FlagKeyDataV21","TrackDataV21","TrackGroupDataV21","SequenceDataV21","ColorDefDataV21","AmbientLightDataV21","FileNameRefDataV21","ScriptDataV21","TextEntryDataV21","TextResourceDataV21","ResourceDataV21","SceneDataV21","PropertyDataV20","CurveKeyDataV20","FlagKeyDataV20","TrackDataV20","TrackGroupDataV20","SequenceDataV20","ColorDefDataV20","AmbientLightDataV20","FileNameRefDataV20","ScriptDataV20","TextEntryDataV20","TextResourceDataV20","ResourceDataV20","SceneDataV20","PropertyDataV19","CurveKeyDataV19","FlagKeyDataV19","TrackDataV19","TrackGroupDataV19","SequenceDataV19","ColorDefDataV19","AmbientLightDataV19","FileNameRefDataV19","ScriptDataV19","TextEntryDataV19","TextResourceDataV19","ResourceDataV19","SceneDataV19","PropertyDataV18","CurveKeyDataV18","FlagKeyDataV18","TrackDataV18","TrackGroupDataV18","SequenceDataV18","ColorDefDataV18","AmbientLightDataV18","FileNameRefDataV18","ScriptDataV18","TextEntryDataV18","TextResourceDataV18","ResourceDataV18","SceneDataV18","PropertyDataV17","CurveKeyDataV17","FlagKeyDataV17","TrackDataV17","TrackGroupDataV17","SequenceDataV17","ColorDefDataV17","AmbientLightDataV17","FileNameRefDataV17","ScriptDataV17","TextEntryDataV17","TextResourceDataV17","ResourceDataV17","SceneDataV17","PropertyDataV16","CurveKeyDataV16","FlagKeyDataV16","TrackDataV16","TrackGroupDataV16","SequenceDataV16","ColorDefDataV16","AmbientLightDataV16","FileNameRefDataV16","ScriptDataV16","TextEntryDataV16","TextResourceDataV16","ResourceDataV16","SceneDataV16","PropertyDataV15","CurveKeyDataV15","FlagKeyDataV15","TrackDataV15","TrackGroupDataV15","SequenceDataV15","ColorDefDataV15","AmbientLightDataV15","FileNameRefDataV15","ScriptDataV15","TextEntryDataV15","TextResourceDataV15","ResourceDataV15","SceneDataV15","PropertyDataV14","CurveKeyDataV14","FlagKeyDataV14","TrackDataV14","TrackGroupDataV14","SequenceDataV14","ColorDefDataV14","AmbientLightDataV14","FileNameRefDataV14","ScriptDataV14","TextEntryDataV14","TextResourceDataV14","ResourceDataV14","SceneDataV14","PropertyDataV13","CurveKeyDataV13","FlagKeyDataV13","TrackDataV13","TrackGroupDataV13","SequenceDataV13","ColorDefDataV13","AmbientLightDataV13","FileNameRefDataV13","ScriptDataV13","TextEntryDataV13","TextResourceDataV13","ResourceDataV13","SceneDataV13","PropertyDataV12","CurveKeyDataV12","FlagKeyDataV12","TrackDataV12","TrackGroupDataV12","SequenceDataV12","ColorDefDataV12","AmbientLightDataV12","FileNameRefDataV12","ScriptDataV12","TextEntryDataV12","TextResourceDataV12","ResourceDataV12","SceneDataV12","PropertyDataV11","CurveKeyDataV11","FlagKeyDataV11","TrackDataV11","TrackGroupDataV11","SequenceDataV11","ColorDefDataV11","AmbientLightDataV11","FileNameRefDataV11","ScriptDataV11","TextEntryDataV11","TextResourceDataV11","ResourceDataV11","SceneDataV11","PropertyDataV10","CurveKeyDataV10","FlagKeyDataV10","TrackDataV10","TrackGroupDataV10","SequenceDataV10","ColorDefDataV10","AmbientLightDataV10","FileNameRefDataV10","ScriptDataV10","TextEntryDataV10","TextResourceDataV10","ResourceDataV10","SceneDataV10","PropertyDataV9","CurveKeyDataV9","FlagKeyDataV9","TrackDataV9","TrackGroupDataV9","SequenceDataV9","ColorDefDataV9","AmbientLightDataV9","FileNameRefDataV9","ScriptDataV9","TextEntryDataV9","TextResourceDataV9","ResourceDataV9","SceneDataV9","PropertyDataV8","CurveKeyDataV8","FlagKeyDataV8","TrackDataV8","TrackGroupDataV8","SequenceDataV8","ColorDefDataV8","AmbientLightDataV8","FileNameRefDataV8","ScriptDataV8","TextEntryDataV8","TextResourceDataV8","ResourceDataV8","SceneDataV8","PropertyDataV7","CurveKeyDataV7","FlagKeyDataV7","TrackDataV7","TrackGroupDataV7","SequenceDataV7","ColorDefDataV7","AmbientLightDataV7","ScriptDataV7","TextEntryDataV7","TextResourceDataV7","ResourceDataV7","SceneDataV7","PropertyDataV6","CurveKeyDataV6","FlagKeyDataV6","TrackDataV6","TrackGroupDataV6","SequenceDataV6","ColorDefDataV6","AmbientLightDataV6","ScriptDataV6","TextEntryDataV6","TextResourceDataV6","ResourceDataV6","SceneDataV6","PropertyDataV5","CurveKeyDataV5","FlagKeyDataV5","TrackDataV5","TrackGroupDataV5","SequenceDataV5","ColorDefDataV5","AmbientLightDataV5","ScriptDataV5","TextEntryDataV5","TextResourceDataV5","ResourceDataV5","SceneDataV5","PropertyDataV4","CurveKeyDataV4","FlagKeyDataV4","TrackDataV4","TrackGroupDataV4","SequenceDataV4","ColorDefDataV4","AmbientLightDataV4","ScriptDataV4","TextEntryDataV4","TextResourceDataV4","ResourceDataV4","SceneDataV4","PropertyDataV3","CurveKeyDataV3","FlagKeyDataV3","TrackDataV3","TrackGroupDataV3","SequenceDataV3","ColorDefDataV3","AmbientLightDataV3","ScriptDataV3","TextEntryDataV3","TextResourceDataV3","ResourceDataV3","SceneDataV3","PropertyDataV2","CurveKeyDataV2","FlagKeyDataV2","TrackDataV2","TrackGroupDataV2","SequenceDataV2","ColorDefDataV2","AmbientLightDataV2","ScriptDataV2","TextEntryDataV2","TextResourceDataV2","ResourceDataV2","SceneDataV2","PropertyDataV1","CurveKeyDataV1","FlagKeyDataV1","TrackDataV1","TrackGroupDataV1","SequenceDataV1","ColorDefDataV1","AmbientLightDataV1","ScriptDataV1","TextEntryDataV1","TextResourceDataV1","ResourceDataV1","SceneDataV1","PropertyDataV0","CurveKeyDataV0","FlagKeyDataV0","TrackDataV0","TrackGroupDataV0","SequenceDataV0","ColorDefDataV0","AmbientLightDataV0","TextEntryDataV0","TextResourceDataV0","ResourceDataV0","SceneDataV0","PackMapCubeMapSampleV3","PackMapCubeMapParamsV3","PackMapCubeMapV3","PackMapCubeMapSampleV2","PackMapCubeMapParamsV2","PackMapCubeMapV2","PackMapCubeMapSampleV1","PackMapCubeMapParamsV1","PackMapCubeMapV1","PackMapCubeMapSampleV0","PackMapCubeMapParamsV0","PackMapCubeMapV0","PagedImageLayerDataV3","PagedImagePageDataV3","PagedImageTableDataV3","PagedImageLayerDataV2","PagedImagePageDataV2","PagedImageTableDataV2","PagedImageLayerDataV1","PagedImagePageDataV1","PagedImageTableDataV1","PagedImageEmbeddedPageDataV0","PagedImageEmbeddedPagesDataV0","PackMapDecalVertexV8","PackMapDecalV9","PackMapDecalsV9","PackMapDecalVertexV7","PackMapDecalV8","PackMapDecalsV8","PackMapDecalVertexV6","PackMapDecalV7","PackMapDecalsV7","PackMapDecalVertexV5","PackMapDecalV6","PackMapDecalsV6","PackMapDecalVertexV4","PackMapDecalV5","PackMapDecalsV5","PackMapDecalV4","PackMapDecalsV4","PackMapDecalV3","PackMapDecalsV3","PackMapDecalV2","PackMapDecalsV2","PackMapDecalV1","PackMapDecalsV1","AmatDx9SamplerV11","AmatDx9ShaderV11","AmatDx9EffectV11","AmatDx9PassV11","AmatDx9TechniqueV11","getStringReader","AmatDx9MaterialV11","AmatDx9SamplerV10","AmatDx9ShaderV10","AmatDx9EffectV10","AmatDx9PassV10","AmatDx9TechniqueV10","AmatDx9MaterialV10","AmatDx9SamplerV9","AmatDx9ShaderV9","AmatDx9EffectV9","AmatDx9PassV9","AmatDx9TechniqueV9","AmatDx9MaterialV9","AmatDx9SamplerV8","AmatDx9ShaderV8","AmatDx9EffectV8","AmatDx9PassV8","AmatDx9TechniqueV8","AmatDx9MaterialV8","AmatDx9SamplerV7","AmatDx9ShaderV7","AmatDx9EffectV7","AmatDx9PassV7","AmatDx9TechniqueV7","AmatDx9MaterialV7","AmatDx9SamplerV6","AmatDx9ShaderV6","AmatDx9EffectV6","AmatDx9PassV6","AmatDx9TechniqueV6","AmatDx9MaterialV6","AmatDx9SamplerV5","AmatDx9ShaderV5","AmatDx9EffectV5","AmatDx9PassV5","AmatDx9TechniqueV5","AmatDx9MaterialV5","AmatDx9SamplerV4","AmatDx9ShaderV4","AmatDx9EffectV4","AmatDx9PassV4","AmatDx9TechniqueV4","AmatDx9MaterialV4","AmatDx9SamplerV3","AmatDx9ShaderV3","AmatDx9EffectV3","AmatDx9PassV3","AmatDx9TechniqueV3","AmatDx9MaterialV3","AmatDx9SamplerV2","AmatDx9ShaderV2","AmatDx9EffectV2","AmatDx9PassV2","AmatDx9TechniqueV2","AmatDx9MaterialV2","AmatDx9SamplerV1","AmatDx9ShaderV1","AmatDx9RenderStatesV1","AmatDx9PassV1","AmatDx9TechniqueV1","AmatDx9MaterialV1","AmatDx9SamplerV0","AmatDx9ShaderV0","AmatDx9PassV0","AmatDx9TechniqueV0","AmatDx9MaterialV0","MapEditLayerItem","MapEditLayers","PackMapEditAnnotation","PackMapEditAnnotations","PackMapEditDirtyChunks","MapEditCamLocations","PackMapEditSurfacePoly","PackMapEditSurfaceRoadNode","PackMapEditSurfaceRoad","PackMapEditNavmeshGenPropMode","PackMapEditNavMeshData","MapEditSnapPoint","MapEditMeasureSpan","MapEditData","MapEditRegion","75","PackMapEnvDataLightV75","PackMapEnvDataLightingV75","PackMapEnvDataLightingCharV46","PackMapEnvDataLightingCharGroupV46","PackMapEnvDataLayerAttributesV75","PackMapEnvDataLayerV75","PackMapEnvDataCloudsV75","PackMapEnvDataColoredLightRingsV46","PackMapEnvDataEffectExV46","PackMapEnvDataEffectV75","PackMapEnvDataHazeV75","PackMapEnvDataPFieldV75","PackMapEnvDataPFieldCutoutV46","PackMapEnvDataSkyV75","PackMapEnvLensFlareAtomV46","PackMapEnvLensFlareTextureV46","PackMapEnvDataShaderConstantV46","PackMapEnvLensFlareV46","PackMapEnvDataSkyCardAttributesExV46","PackMapEnvDataSkyCardAttributesV75","PackMapEnvDataShaderTextureV46","PackEnvDataSkyCardAnimationV46","PackMapEnvDataSkycardFlipbookV46","PackMapEnvDataSkyCardMaterialV46","PackMapEnvDataSkyCardExV46","PackMapEnvDataSkyCardV75","PackMapEnvDataSkyCardsV75","PackMapEnvDataSpawnModelDataV46","PackMapEnvDataSpawnListV46","PackMapEnvDataSpawnGroupsV46","PackMapEnvDataWaterV75","PackMapEnvDataWindV75","PackMapEnvDataAudioV46","PackMapEnvDataBaseEx2V46","PackMapEnvDataBaseExV46","PackMapEnvDataShapeV46","PackMapEnvDataLocalV75","PackMapEnvDataSkyModeTexV75","PackMapEnvDataGlobalV75","PackMapEnvironmentV75","74","PackMapEnvDataLightV74","PackMapEnvDataLightingV74","PackMapEnvDataLightingCharV45","PackMapEnvDataLightingCharGroupV45","PackMapEnvDataLayerAttributesV74","PackMapEnvDataLayerV74","PackMapEnvDataCloudsV74","PackMapEnvDataColoredLightRingsV45","PackMapEnvDataEffectV74","PackMapEnvDataHazeV74","PackMapEnvDataPFieldV74","PackMapEnvDataPFieldCutoutV45","PackMapEnvDataSkyV74","PackMapEnvDataSkyCardAttributesV74","PackMapEnvDataSkyCardV74","PackMapEnvDataSkyCardsV74","PackMapEnvDataSpawnModelDataV45","PackMapEnvDataSpawnListV45","PackMapEnvDataSpawnGroupsV45","PackMapEnvDataWaterV74","PackMapEnvDataWindV74","PackMapEnvDataAudioV45","PackMapEnvDataShapeV45","PackMapEnvDataLocalV74","PackMapEnvDataSkyModeTexV74","PackMapEnvDataGlobalV74","PackMapEnvironmentV74","73","PackMapEnvDataLightV73","PackMapEnvDataLightingV73","PackMapEnvDataLightingCharV44","PackMapEnvDataLightingCharGroupV44","PackMapEnvDataLayerAttributesV73","PackMapEnvDataLayerV73","PackMapEnvDataCloudsV73","PackMapEnvDataColoredLightRingsV44","PackMapEnvDataEffectV73","PackMapEnvDataHazeV73","PackMapEnvDataPFieldV73","PackMapEnvDataPFieldCutoutV44","PackMapEnvDataSkyV73","PackMapEnvDataSkyCardAttributesV73","PackMapEnvDataSkyCardV73","PackMapEnvDataSkyCardsV73","PackMapEnvDataSpawnModelDataV44","PackMapEnvDataSpawnListV44","PackMapEnvDataSpawnGroupsV44","PackMapEnvDataWaterV73","PackMapEnvDataWindV73","PackMapEnvDataAudioV44","PackMapEnvDataShapeV44","PackMapEnvDataLocalV73","PackMapEnvDataSkyModeTexV73","PackMapEnvDataGlobalV73","PackMapEnvironmentV73","72","PackMapEnvDataLightV72","PackMapEnvDataLightingV72","PackMapEnvDataLightingCharV43","PackMapEnvDataLightingCharGroupV43","PackMapEnvDataLayerAttributesV72","PackMapEnvDataLayerV72","PackMapEnvDataCloudsV72","PackMapEnvDataColoredLightRingsV43","PackMapEnvDataEffectV72","PackMapEnvDataHazeV72","PackMapEnvDataPFieldV72","PackMapEnvDataPFieldCutoutV43","PackMapEnvDataSkyV72","PackMapEnvDataSkyCardAttributesV72","PackMapEnvDataSkyCardV72","PackMapEnvDataSkyCardsV72","PackMapEnvDataSpawnModelDataV43","PackMapEnvDataSpawnListV43","PackMapEnvDataSpawnGroupsV43","PackMapEnvDataWaterV72","PackMapEnvDataWindV72","PackMapEnvDataShapeV43","PackMapEnvDataLocalV72","PackMapEnvDataSkyModeTexV72","PackMapEnvDataGlobalV72","PackMapEnvironmentV72","71","PackMapEnvDataLightV71","PackMapEnvDataLightingV71","PackMapEnvDataLightingCharV42","PackMapEnvDataLightingCharGroupV42","PackMapEnvDataLayerAttributesV71","PackMapEnvDataLayerV71","PackMapEnvDataCloudsV71","PackMapEnvDataColoredLightRingsV42","PackMapEnvDataEffectV71","PackMapEnvDataHazeV71","PackMapEnvDataPFieldV71","PackMapEnvDataPFieldCutoutV42","PackMapEnvDataSkyV71","PackMapEnvDataSkyCardAttributesV71","PackMapEnvDataSkyCardV71","PackMapEnvDataSkyCardsV71","PackMapEnvDataSpawnModelDataV42","PackMapEnvDataSpawnListV42","PackMapEnvDataSpawnGroupsV42","PackMapEnvDataWaterV71","PackMapEnvDataWindV71","PackMapEnvDataShapeV42","PackMapEnvDataLocalV71","PackMapEnvDataSkyModeTexV71","PackMapEnvDataGlobalV71","PackMapEnvironmentV71","70","PackMapEnvDataLightV70","PackMapEnvDataLightingV70","PackMapEnvDataLightingCharV41","PackMapEnvDataLightingCharGroupV41","PackMapEnvDataLayerAttributesV70","PackMapEnvDataLayerV70","PackMapEnvDataCloudsV70","PackMapEnvDataColoredLightRingsV41","PackMapEnvDataEffectV70","PackMapEnvDataHazeV70","PackMapEnvDataPFieldV70","PackMapEnvDataPFieldCutoutV41","PackMapEnvDataSkyV70","PackMapEnvDataSkyCardAttributesV70","PackMapEnvDataSkyCardV70","PackMapEnvDataSkyCardsV70","PackMapEnvDataSpawnModelDataV41","PackMapEnvDataSpawnListV41","PackMapEnvDataSpawnGroupsV41","PackMapEnvDataWaterV70","PackMapEnvDataWindV70","PackMapEnvDataShapeV41","PackMapEnvDataLocalV70","PackMapEnvDataSkyModeTexV70","PackMapEnvDataGlobalV70","PackMapEnvironmentV70","69","PackMapEnvDataLightV69","PackMapEnvDataLightingV69","PackMapEnvDataLightingCharV40","PackMapEnvDataLightingCharGroupV40","PackMapEnvDataLayerAttributesV69","PackMapEnvDataLayerV69","PackMapEnvDataCloudsV69","PackMapEnvDataColoredLightRingsV40","PackMapEnvDataEffectV69","PackMapEnvDataHazeV69","PackMapEnvDataPFieldV69","PackMapEnvDataPFieldCutoutV40","PackMapEnvDataSkyV69","PackMapEnvDataSkyCardAttributesV69","PackMapEnvDataSkyCardV69","PackMapEnvDataSkyCardsV69","PackMapEnvDataSpawnModelDataV40","PackMapEnvDataSpawnListV40","PackMapEnvDataSpawnGroupsV40","PackMapEnvDataWaterV69","PackMapEnvDataWindV69","PackMapEnvDataShapeV40","PackMapEnvDataLocalV69","PackMapEnvDataSkyModeTexV69","PackMapEnvDataGlobalV69","PackMapEnvironmentV69","68","PackMapEnvDataLightV68","PackMapEnvDataLightingV68","PackMapEnvDataLightingCharV39","PackMapEnvDataLightingCharGroupV39","PackMapEnvDataLayerAttributesV68","PackMapEnvDataLayerV68","PackMapEnvDataCloudsV68","PackMapEnvDataColoredLightRingsV39","PackMapEnvDataEffectV68","PackMapEnvDataHazeV68","PackMapEnvDataPFieldV68","PackMapEnvDataPFieldCutoutV39","PackMapEnvDataSkyV68","PackMapEnvDataSkyCardAttributesV68","PackMapEnvDataSkyCardV68","PackMapEnvDataSkyCardsV68","PackMapEnvDataSpawnModelDataV39","PackMapEnvDataSpawnListV39","PackMapEnvDataSpawnGroupsV39","PackMapEnvDataWaterV68","PackMapEnvDataWindV68","PackMapEnvDataShapeV39","PackMapEnvDataLocalV68","PackMapEnvDataSkyModeTexV68","PackMapEnvDataGlobalV68","PackMapEnvironmentV68","67","PackMapEnvDataLightV67","PackMapEnvDataLightingV67","PackMapEnvDataLightingCharV38","PackMapEnvDataLightingCharGroupV38","PackMapEnvDataLayerAttributesV67","PackMapEnvDataLayerV67","PackMapEnvDataCloudsV67","PackMapEnvDataColoredLightRingsV38","PackMapEnvDataEffectV67","PackMapEnvDataHazeV67","PackMapEnvDataPFieldV67","PackMapEnvDataPFieldCutoutV38","PackMapEnvDataSkyV67","PackMapEnvDataSkyCardAttributesV67","PackMapEnvDataSkyCardV67","PackMapEnvDataSkyCardsV67","PackMapEnvDataSpawnModelDataV38","PackMapEnvDataSpawnListV38","PackMapEnvDataSpawnGroupsV38","PackMapEnvDataWaterV67","PackMapEnvDataWindV67","PackMapEnvDataShapeV38","PackMapEnvDataLocalV67","PackMapEnvDataSkyModeTexV67","PackMapEnvDataGlobalV67","PackMapEnvironmentV67","66","PackMapEnvDataLightV66","PackMapEnvDataLightingV66","PackMapEnvDataLightingCharV37","PackMapEnvDataLightingCharGroupV37","PackMapEnvDataLayerAttributesV66","PackMapEnvDataLayerV66","PackMapEnvDataCloudsV66","PackMapEnvDataColoredLightRingsV37","PackMapEnvDataEffectV66","PackMapEnvDataHazeV66","PackMapEnvDataPFieldV66","PackMapEnvDataPFieldCutoutV37","PackMapEnvDataSkyV66","PackMapEnvDataSkyCardAttributesV66","PackMapEnvDataSkyCardV66","PackMapEnvDataSkyCardsV66","PackMapEnvDataSpawnModelDataV37","PackMapEnvDataSpawnListV37","PackMapEnvDataSpawnGroupsV37","PackMapEnvDataWaterV66","PackMapEnvDataWindV66","PackMapEnvDataShapeV37","PackMapEnvDataLocalV66","PackMapEnvDataSkyModeTexV66","PackMapEnvDataGlobalV66","PackMapEnvironmentV66","65","PackMapEnvDataLightV65","PackMapEnvDataLightingV65","PackMapEnvDataLightingCharV36","PackMapEnvDataLightingCharGroupV36","PackMapEnvDataLayerAttributesV65","PackMapEnvDataLayerV65","PackMapEnvDataCloudsV65","PackMapEnvDataColoredLightRingsV36","PackMapEnvDataEffectV65","PackMapEnvDataHazeV65","PackMapEnvDataPFieldV65","PackMapEnvDataPFieldCutoutV36","PackMapEnvDataSkyV65","PackMapEnvDataSkyCardAttributesV65","PackMapEnvDataSkyCardV65","PackMapEnvDataSkyCardsV65","PackMapEnvDataSpawnModelDataV36","PackMapEnvDataSpawnListV36","PackMapEnvDataSpawnGroupsV36","PackMapEnvDataWaterV65","PackMapEnvDataWindV65","PackMapEnvDataLocalV65","PackMapEnvDataSkyModeTexV65","PackMapEnvDataGlobalV65","PackMapEnvironmentV65","64","PackMapEnvDataLightV64","PackMapEnvDataLightingV64","PackMapEnvDataLightingCharV35","PackMapEnvDataLightingCharGroupV35","PackMapEnvDataLayerAttributesV64","PackMapEnvDataLayerV64","PackMapEnvDataCloudsV64","PackMapEnvDataColoredLightRingsV35","PackMapEnvDataEffectV64","PackMapEnvDataHazeV64","PackMapEnvDataPFieldV64","PackMapEnvDataPFieldCutoutV35","PackMapEnvDataSkyV64","PackMapEnvDataSkyCardAttributesV64","PackMapEnvDataSkyCardV64","PackMapEnvDataSkyCardsV64","PackMapEnvDataSpawnModelDataV35","PackMapEnvDataSpawnListV35","PackMapEnvDataSpawnGroupsV35","PackMapEnvDataWaterV64","PackMapEnvDataWindV64","PackMapEnvDataLocalV64","PackMapEnvDataSkyModeTexV64","PackMapEnvDataGlobalV64","PackMapEnvironmentV64","63","PackMapEnvDataLightV63","PackMapEnvDataLightingV63","PackMapEnvDataLightingCharV34","PackMapEnvDataLightingCharGroupV34","PackMapEnvDataLayerAttributesV63","PackMapEnvDataLayerV63","PackMapEnvDataCloudsV63","PackMapEnvDataColoredLightRingsV34","PackMapEnvDataEffectV63","PackMapEnvDataHazeV63","PackMapEnvDataPFieldV63","PackMapEnvDataPFieldCutoutV34","PackMapEnvDataSkyV63","PackMapEnvDataSkyCardAttributesV63","PackMapEnvDataSkyCardV63","PackMapEnvDataSkyCardsV63","PackMapEnvDataSpawnModelDataV34","PackMapEnvDataSpawnListV34","PackMapEnvDataSpawnGroupsV34","PackMapEnvDataWaterV63","PackMapEnvDataWindV63","PackMapEnvDataLocalV63","PackMapEnvDataSkyModeTexV63","PackMapEnvDataGlobalV63","PackMapEnvironmentV63","62","PackMapEnvDataLightV62","PackMapEnvDataLightingV62","PackMapEnvDataLightingCharV33","PackMapEnvDataLightingCharGroupV33","PackMapEnvDataLayerAttributesV62","PackMapEnvDataLayerV62","PackMapEnvDataCloudsV62","PackMapEnvDataColoredLightRingsV33","PackMapEnvDataEffectV62","PackMapEnvDataHazeV62","PackMapEnvDataPFieldV62","PackMapEnvDataPFieldCutoutV33","PackMapEnvDataSkyV62","PackMapEnvDataSkyCardAttributesV62","PackMapEnvDataSkyCardV62","PackMapEnvDataSkyCardsV62","PackMapEnvDataSpawnModelDataV33","PackMapEnvDataSpawnListV33","PackMapEnvDataSpawnGroupsV33","PackMapEnvDataWaterV62","PackMapEnvDataWindV62","PackMapEnvDataLocalV62","PackMapEnvDataSkyModeTexV62","PackMapEnvDataGlobalV62","PackMapEnvironmentV62","61","PackMapEnvDataLightV61","PackMapEnvDataLightingV61","PackMapEnvDataLightingCharV32","PackMapEnvDataLightingCharGroupV32","PackMapEnvDataLayerAttributesV61","PackMapEnvDataLayerV61","PackMapEnvDataCloudsV61","PackMapEnvDataColoredLightRingsV32","PackMapEnvDataEffectV61","PackMapEnvDataHazeV61","PackMapEnvDataPFieldV61","PackMapEnvDataPFieldCutoutV32","PackMapEnvDataSkyV61","PackMapEnvDataSkyCardAttributesV61","PackMapEnvDataSkyCardV61","PackMapEnvDataSkyCardsV61","PackMapEnvDataSpawnModelDataV32","PackMapEnvDataSpawnListV32","PackMapEnvDataSpawnGroupsV32","PackMapEnvDataWaterV61","PackMapEnvDataWindV61","PackMapEnvDataLocalV61","PackMapEnvDataSkyModeTexV61","PackMapEnvDataGlobalV61","PackMapEnvironmentV61","60","PackMapEnvDataLightV60","PackMapEnvDataLightingV60","PackMapEnvDataLightingCharV31","PackMapEnvDataLightingCharGroupV31","PackMapEnvDataLayerAttributesV60","PackMapEnvDataLayerV60","PackMapEnvDataCloudsV60","PackMapEnvDataColoredLightRingsV31","PackMapEnvDataEffectV60","PackMapEnvDataHazeV60","PackMapEnvDataPFieldV60","PackMapEnvDataPFieldCutoutV31","PackMapEnvDataSkyV60","PackMapEnvDataSkyCardAttributesV60","PackMapEnvDataSkyCardV60","PackMapEnvDataSkyCardsV60","PackMapEnvDataSpawnModelDataV31","PackMapEnvDataSpawnListV31","PackMapEnvDataSpawnGroupsV31","PackMapEnvDataWaterV60","PackMapEnvDataWindV60","PackMapEnvDataLocalV60","PackMapEnvDataSkyModeTexV60","PackMapEnvDataGlobalV60","PackMapEnvironmentV60","59","PackMapEnvDataLightV59","PackMapEnvDataLightingV59","PackMapEnvDataLightingCharV30","PackMapEnvDataLightingCharGroupV30","PackMapEnvDataLayerAttributesV59","PackMapEnvDataLayerV59","PackMapEnvDataCloudsV59","PackMapEnvDataColoredLightRingsV30","PackMapEnvDataEffectV59","PackMapEnvDataHazeV59","PackMapEnvDataPFieldV59","PackMapEnvDataPFieldCutoutV30","PackMapEnvDataSkyV59","PackMapEnvDataSkyCardAttributesV59","PackMapEnvDataSkyCardV59","PackMapEnvDataSkyCardsV59","PackMapEnvDataSpawnModelDataV30","PackMapEnvDataSpawnListV30","PackMapEnvDataSpawnGroupsV30","PackMapEnvDataWaterV59","PackMapEnvDataWindV59","PackMapEnvDataLocalV59","PackMapEnvDataSkyModeTexV59","PackMapEnvDataGlobalV59","PackMapEnvironmentV59","58","PackMapEnvDataLightV58","PackMapEnvDataLightingV58","PackMapEnvDataLightingCharV29","PackMapEnvDataLightingCharGroupV29","PackMapEnvDataLayerAttributesV58","PackMapEnvDataLayerV58","PackMapEnvDataCloudsV58","PackMapEnvDataColoredLightRingsV29","PackMapEnvDataEffectV58","PackMapEnvDataHazeV58","PackMapEnvDataPFieldV58","PackMapEnvDataPFieldCutoutV29","PackMapEnvDataSkyV58","PackMapEnvDataSkyCardAttributesV58","PackMapEnvDataSkyCardV58","PackMapEnvDataSkyCardsV58","PackMapEnvDataSpawnModelDataV29","PackMapEnvDataSpawnListV29","PackMapEnvDataSpawnGroupsV29","PackMapEnvDataWaterV58","PackMapEnvDataWindV58","PackMapEnvDataLocalV58","PackMapEnvDataSkyModeTexV58","PackMapEnvDataGlobalV58","PackMapEnvironmentV58","57","PackMapEnvDataLightV57","PackMapEnvDataLightingV57","PackMapEnvDataLightingCharV28","PackMapEnvDataLightingCharGroupV28","PackMapEnvDataLayerAttributesV57","PackMapEnvDataLayerV57","PackMapEnvDataCloudsV57","PackMapEnvDataColoredLightRingsV28","PackMapEnvDataEffectV57","PackMapEnvDataHazeV57","PackMapEnvDataPFieldV57","PackMapEnvDataPFieldCutoutV28","PackMapEnvDataSkyV57","PackMapEnvDataSkyCardAttributesV57","PackMapEnvDataSkyCardV57","PackMapEnvDataSkyCardsV57","PackMapEnvDataSpawnModelDataV28","PackMapEnvDataSpawnListV28","PackMapEnvDataSpawnGroupsV28","PackMapEnvDataWaterV57","PackMapEnvDataWindV57","PackMapEnvDataLocalV57","PackMapEnvDataSkyModeTexV57","PackMapEnvDataGlobalV57","PackMapEnvironmentV57","56","PackMapEnvDataLightV56","PackMapEnvDataLightingV56","PackMapEnvDataLightingCharV27","PackMapEnvDataLightingCharGroupV27","PackMapEnvDataLayerAttributesV56","PackMapEnvDataLayerV56","PackMapEnvDataCloudsV56","PackMapEnvDataColoredLightRingsV27","PackMapEnvDataEffectV56","PackMapEnvDataHazeV56","PackMapEnvDataPFieldV56","PackMapEnvDataPFieldCutoutV27","PackMapEnvDataSkyV56","PackMapEnvDataSkyCardAttributesV56","PackMapEnvDataSkyCardV56","PackMapEnvDataSkyCardsV56","PackMapEnvDataSpawnModelDataV27","PackMapEnvDataSpawnListV27","PackMapEnvDataSpawnGroupsV27","PackMapEnvDataWaterV56","PackMapEnvDataWindV56","PackMapEnvDataLocalV56","PackMapEnvDataSkyModeTexV56","PackMapEnvDataGlobalV56","PackMapEnvironmentV56","55","PackMapEnvDataLightV55","PackMapEnvDataLightingV55","PackMapEnvDataLightingCharV26","PackMapEnvDataLightingCharGroupV26","PackMapEnvDataLayerAttributesV55","PackMapEnvDataLayerV55","PackMapEnvDataCloudsV55","PackMapEnvDataColoredLightRingsV26","PackMapEnvDataEffectV55","PackMapEnvDataHazeV55","PackMapEnvDataPFieldV55","PackMapEnvDataPFieldCutoutV26","PackMapEnvDataSkyV55","PackMapEnvDataSkyCardAttributesV55","PackMapEnvDataSkyCardV55","PackMapEnvDataSkyCardsV55","PackMapEnvDataSpawnModelDataV26","PackMapEnvDataSpawnListV26","PackMapEnvDataSpawnGroupsV26","PackMapEnvDataWaterV55","PackMapEnvDataWindV55","PackMapEnvDataLocalV55","PackMapEnvDataSkyModeTexV55","PackMapEnvDataGlobalV55","PackMapEnvironmentV55","54","PackMapEnvDataLightV54","PackMapEnvDataLightingV54","PackMapEnvDataLightingCharV25","PackMapEnvDataLightingCharGroupV25","PackMapEnvDataLayerAttributesV54","PackMapEnvDataLayerV54","PackMapEnvDataCloudsV54","PackMapEnvDataColoredLightRingsV25","PackMapEnvDataEffectV54","PackMapEnvDataHazeV54","PackMapEnvDataPFieldV54","PackMapEnvDataPFieldCutoutV25","PackMapEnvDataSkyV54","PackMapEnvDataSkyCardAttributesV54","PackMapEnvDataSkyCardV54","PackMapEnvDataSkyCardsV54","PackMapEnvDataWaterV54","PackMapEnvDataWindV54","PackMapEnvDataLocalV54","PackMapEnvDataSkyModeTexV54","PackMapEnvDataGlobalV54","PackMapEnvironmentV54","53","PackMapEnvDataLightV53","PackMapEnvDataLightingV53","PackMapEnvDataLightingCharV24","PackMapEnvDataLightingCharGroupV24","PackMapEnvDataLayerAttributesV53","PackMapEnvDataLayerV53","PackMapEnvDataCloudsV53","PackMapEnvDataColoredLightRingsV24","PackMapEnvDataEffectV53","PackMapEnvDataHazeV53","PackMapEnvDataPFieldV53","PackMapEnvDataPFieldCutoutV24","PackMapEnvDataSkyV53","PackMapEnvDataSkyCardAttributesV53","PackMapEnvDataSkyCardV53","PackMapEnvDataSkyCardsV53","PackMapEnvDataWaterV53","PackMapEnvDataWindV53","PackMapEnvDataLocalV53","PackMapEnvDataSkyModeTexV53","PackMapEnvDataGlobalV53","PackMapEnvironmentV53","52","PackMapEnvDataLightV52","PackMapEnvDataLightingV52","PackMapEnvDataLightingCharV23","PackMapEnvDataLightingCharGroupV23","PackMapEnvDataLayerAttributesV52","PackMapEnvDataLayerV52","PackMapEnvDataCloudsV52","PackMapEnvDataColoredLightRingsV23","PackMapEnvDataEffectV52","PackMapEnvDataHazeV52","PackMapEnvDataPFieldV52","PackMapEnvDataPFieldCutoutV23","PackMapEnvDataSkyV52","PackMapEnvDataSkyCardAttributesV52","PackMapEnvDataSkyCardV52","PackMapEnvDataSkyCardsV52","PackMapEnvDataWaterV52","PackMapEnvDataWindV52","PackMapEnvDataLocalV52","PackMapEnvDataSkyModeTexV52","PackMapEnvDataGlobalV52","PackMapEnvironmentV52","51","PackMapEnvDataLightV51","PackMapEnvDataLightingV51","PackMapEnvDataLightingCharV22","PackMapEnvDataLightingCharGroupV22","PackMapEnvDataLayerAttributesV51","PackMapEnvDataLayerV51","PackMapEnvDataCloudsV51","PackMapEnvDataColoredLightRingsV22","PackMapEnvDataEffectV51","PackMapEnvDataHazeV51","PackMapEnvDataPFieldV51","PackMapEnvDataPFieldCutoutV22","PackMapEnvDataSkyV51","PackMapEnvDataSkyCardAttributesV51","PackMapEnvDataSkyCardV51","PackMapEnvDataSkyCardsV51","PackMapEnvDataWaterV51","PackMapEnvDataWindV51","PackMapEnvDataLocalV51","PackMapEnvDataSkyModeTexV51","PackMapEnvDataGlobalV51","PackMapEnvironmentV51","50","PackMapEnvDataLightV50","PackMapEnvDataLightingV50","PackMapEnvDataLightingCharV21","PackMapEnvDataLightingCharGroupV21","PackMapEnvDataLayerAttributesV50","PackMapEnvDataLayerV50","PackMapEnvDataCloudsV50","PackMapEnvDataColoredLightRingsV21","PackMapEnvDataEffectV50","PackMapEnvDataHazeV50","PackMapEnvDataPFieldV50","PackMapEnvDataPFieldCutoutV21","PackMapEnvDataSkyV50","PackMapEnvDataSkyCardAttributesV50","PackMapEnvDataSkyCardV50","PackMapEnvDataSkyCardsV50","PackMapEnvDataWaterV50","PackMapEnvDataWindV50","PackMapEnvDataLocalV50","PackMapEnvDataSkyModeTexV50","PackMapEnvDataGlobalV50","PackMapEnvironmentV50","49","PackMapEnvDataLightV49","PackMapEnvDataLightingV49","PackMapEnvDataLightingCharV20","PackMapEnvDataLightingCharGroupV20","PackMapEnvDataLayerAttributesV49","PackMapEnvDataLayerV49","PackMapEnvDataCloudsV49","PackMapEnvDataColoredLightRingsV20","PackMapEnvDataEffectV49","PackMapEnvDataHazeV49","PackMapEnvDataPFieldV49","PackMapEnvDataPFieldCutoutV20","PackMapEnvDataSkyV49","PackMapEnvDataSkyCardAttributesV49","PackMapEnvDataSkyCardV49","PackMapEnvDataSkyCardsV49","PackMapEnvDataWaterV49","PackMapEnvDataWindV49","PackMapEnvDataLocalV49","PackMapEnvDataSkyModeTexV49","PackMapEnvDataGlobalV49","PackMapEnvironmentV49","48","PackMapEnvDataLightV48","PackMapEnvDataLightingV48","PackMapEnvDataLightingCharV19","PackMapEnvDataLayerAttributesV48","PackMapEnvDataLayerV48","PackMapEnvDataCloudsV48","PackMapEnvDataColoredLightRingsV19","PackMapEnvDataEffectV48","PackMapEnvDataHazeV48","PackMapEnvDataPFieldV48","PackMapEnvDataPFieldCutoutV19","PackMapEnvDataSkyV48","PackMapEnvDataSkyCardAttributesV48","PackMapEnvDataSkyCardV48","PackMapEnvDataSkyCardsV48","PackMapEnvDataWaterV48","PackMapEnvDataWindV48","PackMapEnvDataLocalV48","PackMapEnvDataSkyModeTexV48","PackMapEnvDataGlobalV48","PackMapEnvironmentV48","47","PackMapEnvDataLightV47","PackMapEnvDataLightingV47","PackMapEnvDataLightingCharV18","PackMapEnvDataLayerAttributesV47","PackMapEnvDataLayerV47","PackMapEnvDataCloudsV47","PackMapEnvDataColoredLightRingsV18","PackMapEnvDataEffectV47","PackMapEnvDataHazeV47","PackMapEnvDataPFieldV47","PackMapEnvDataPFieldCutoutV18","PackMapEnvDataSkyV47","PackMapEnvDataSkyCardAttributesV47","PackMapEnvDataSkyCardV47","PackMapEnvDataSkyCardsV47","PackMapEnvDataWaterV47","PackMapEnvDataWindV47","PackMapEnvDataLocalV47","PackMapEnvDataSkyModeTexV47","PackMapEnvDataGlobalV47","PackMapEnvironmentV47","46","PackMapEnvDataLightV46","PackMapEnvDataLightingV46","PackMapEnvDataLightingCharV17","PackMapEnvDataLayerAttributesV46","PackMapEnvDataLayerV46","PackMapEnvDataCloudsV46","PackMapEnvDataColoredLightRingsV17","PackMapEnvDataEffectV46","PackMapEnvDataHazeV46","PackMapEnvDataPFieldV46","PackMapEnvDataPFieldCutoutV17","PackMapEnvDataSkyV46","PackMapEnvDataSkyCardAttributesV46","PackMapEnvDataSkyCardV46","PackMapEnvDataSkyCardsV46","PackMapEnvDataWaterV46","PackMapEnvDataWindV46","PackMapEnvDataLocalV46","PackMapEnvDataSkyModeTexV46","PackMapEnvDataGlobalV46","PackMapEnvironmentV46","45","PackMapEnvDataLightV45","PackMapEnvDataLightingV45","PackMapEnvDataLightingCharV16","PackMapEnvDataLayerAttributesV45","PackMapEnvDataLayerV45","PackMapEnvDataCloudsV45","PackMapEnvDataColoredLightRingsV16","PackMapEnvDataEffectV45","PackMapEnvDataHazeV45","PackMapEnvDataPFieldV45","PackMapEnvDataPFieldCutoutV16","PackMapEnvDataSkyV45","PackMapEnvDataSkyCardAttributesV45","PackMapEnvDataSkyCardV45","PackMapEnvDataSkyCardsV45","PackMapEnvDataWaterV45","PackMapEnvDataWindV45","PackMapEnvDataLocalV45","PackMapEnvDataSkyModeTexV45","PackMapEnvDataGlobalV45","PackMapEnvironmentV45","44","PackMapEnvDataLightV44","PackMapEnvDataLightingV44","PackMapEnvDataLightingCharV15","PackMapEnvDataLayerAttributesV44","PackMapEnvDataLayerV44","PackMapEnvDataCloudsV44","PackMapEnvDataColoredLightRingsV15","PackMapEnvDataEffectV44","PackMapEnvDataHazeV44","PackMapEnvDataPFieldV44","PackMapEnvDataPFieldCutoutV15","PackMapEnvDataSkyV44","PackMapEnvDataSkyCardAttributesV44","PackMapEnvDataSkyCardV44","PackMapEnvDataSkyCardsV44","PackMapEnvDataWaterV44","PackMapEnvDataWindV44","PackMapEnvDataLocalV44","PackMapEnvDataSkyModeTexV44","PackMapEnvDataGlobalV44","PackMapEnvironmentV44","43","PackMapEnvDataLightV43","PackMapEnvDataLightingV43","PackMapEnvDataLightingCharV14","PackMapEnvDataLayerAttributesV43","PackMapEnvDataLayerV43","PackMapEnvDataCloudsV43","PackMapEnvDataEffectV43","PackMapEnvDataHazeV43","PackMapEnvDataPFieldV43","PackMapEnvDataPFieldCutoutV14","PackMapEnvDataSkyV43","PackMapEnvDataSkyCardAttributesV43","PackMapEnvDataSkyCardV43","PackMapEnvDataSkyCardsV43","PackMapEnvDataWaterV43","PackMapEnvDataWindV43","PackMapEnvDataLocalV43","PackMapEnvDataSkyModeTexV43","PackMapEnvDataGlobalV43","PackMapEnvironmentV43","42","PackMapEnvDataLightV42","PackMapEnvDataLightingV42","PackMapEnvDataLightingCharV13","PackMapEnvDataLayerAttributesV42","PackMapEnvDataLayerV42","PackMapEnvDataCloudsV42","PackMapEnvDataEffectV42","PackMapEnvDataHazeV42","PackMapEnvDataPFieldV42","PackMapEnvDataPFieldCutoutV13","PackMapEnvDataSkyV42","PackMapEnvDataSkyCardAttributesV42","PackMapEnvDataSkyCardV42","PackMapEnvDataSkyCardsV42","PackMapEnvDataWaterV42","PackMapEnvDataWindV42","PackMapEnvDataLocalV42","PackMapEnvDataSkyModeTexV42","PackMapEnvDataGlobalV42","PackMapEnvironmentV42","41","PackMapEnvDataLightV41","PackMapEnvDataLightingV41","PackMapEnvDataLightingCharV12","PackMapEnvDataLayerAttributesV41","PackMapEnvDataLayerV41","PackMapEnvDataCloudsV41","PackMapEnvDataEffectV41","PackMapEnvDataHazeV41","PackMapEnvDataPFieldV41","PackMapEnvDataPFieldCutoutV12","PackMapEnvDataSkyV41","PackMapEnvDataSkyCardAttributesV41","PackMapEnvDataSkyCardV41","PackMapEnvDataSkyCardsV41","PackMapEnvDataWaterV41","PackMapEnvDataWindV41","PackMapEnvDataLocalV41","PackMapEnvDataSkyModeTexV41","PackMapEnvDataGlobalV41","PackMapEnvironmentV41","40","PackMapEnvDataLightV40","PackMapEnvDataLightingV40","PackMapEnvDataLightingCharV11","PackMapEnvDataLayerAttributesV40","PackMapEnvDataLayerV40","PackMapEnvDataCloudsV40","PackMapEnvDataEffectV40","PackMapEnvDataHazeV40","PackMapEnvDataPFieldV40","PackMapEnvDataPFieldCutoutV11","PackMapEnvDataSkyV40","PackMapEnvDataSkyCardAttributesV40","PackMapEnvDataSkyCardV40","PackMapEnvDataSkyCardsV40","PackMapEnvDataWaterV40","PackMapEnvDataWindV40","PackMapEnvDataLocalV40","PackMapEnvDataSkyModeTexV40","PackMapEnvDataGlobalV40","PackMapEnvironmentV40","39","PackMapEnvDataLightV39","PackMapEnvDataLightingV39","PackMapEnvDataLightingCharV10","PackMapEnvDataLayerAttributesV39","PackMapEnvDataLayerV39","PackMapEnvDataCloudsV39","PackMapEnvDataEffectV39","PackMapEnvDataHazeV39","PackMapEnvDataPFieldV39","PackMapEnvDataPFieldCutoutV10","PackMapEnvDataSkyV39","PackMapEnvDataSkyCardAttributesV39","PackMapEnvDataSkyCardV39","PackMapEnvDataSkyCardsV39","PackMapEnvDataWaterV39","PackMapEnvDataWindV39","PackMapEnvDataLocalV39","PackMapEnvDataSkyModeTexV39","PackMapEnvDataGlobalV39","PackMapEnvironmentV39","38","PackMapEnvDataLightV38","PackMapEnvDataLightingV38","PackMapEnvDataLayerAttributesV38","PackMapEnvDataLayerV38","PackMapEnvDataCloudsV38","PackMapEnvDataEffectV38","PackMapEnvDataHazeV38","PackMapEnvDataPFieldV38","PackMapEnvDataPFieldCutoutV9","PackMapEnvDataSkyV38","PackMapEnvDataSkyCardAttributesV38","PackMapEnvDataSkyCardV38","PackMapEnvDataSkyCardsV38","PackMapEnvDataWaterV38","PackMapEnvDataWindV38","PackMapEnvDataLocalV38","PackMapEnvDataSkyModeTexV38","PackMapEnvDataGlobalV38","PackMapEnvironmentV38","37","PackMapEnvDataLightV37","PackMapEnvDataLightingV37","PackMapEnvDataLayerAttributesV37","PackMapEnvDataLayerV37","PackMapEnvDataCloudsV37","PackMapEnvDataEffectV37","PackMapEnvDataHazeV37","PackMapEnvDataPFieldV37","PackMapEnvDataPFieldCutoutV8","PackMapEnvDataSkyV37","PackMapEnvDataSkyCardAttributesV37","PackMapEnvDataSkyCardV37","PackMapEnvDataSkyCardsV37","PackMapEnvDataWaterV37","PackMapEnvDataWindV37","PackMapEnvDataLocalV37","PackMapEnvDataSkyModeTexV37","PackMapEnvDataGlobalV37","PackMapEnvironmentV37","PackMapEnvDataLightV36","PackMapEnvDataLightingV36","PackMapEnvDataLayerAttributesV36","PackMapEnvDataLayerV36","PackMapEnvDataCloudsV36","PackMapEnvDataEffectV36","PackMapEnvDataHazeV36","PackMapEnvDataPFieldV36","PackMapEnvDataPFieldCutoutV7","PackMapEnvDataSkyV36","PackMapEnvDataSkyCardAttributesV36","PackMapEnvDataSkyCardV36","PackMapEnvDataSkyCardsV36","PackMapEnvDataWaterV36","PackMapEnvDataWindV36","PackMapEnvDataLocalV36","PackMapEnvDataSkyModeTexV36","PackMapEnvDataGlobalV36","PackMapEnvironmentV36","PackMapEnvDataLightV35","PackMapEnvDataLightingV35","PackMapEnvDataLayerAttributesV35","PackMapEnvDataLayerV35","PackMapEnvDataCloudsV35","PackMapEnvDataEffectV35","PackMapEnvDataHazeV35","PackMapEnvDataPFieldV35","PackMapEnvDataPFieldCutoutV6","PackMapEnvDataSkyV35","PackMapEnvDataSkyCardAttributesV35","PackMapEnvDataSkyCardV35","PackMapEnvDataSkyCardsV35","PackMapEnvDataWaterV35","PackMapEnvDataWindV35","PackMapEnvDataLocalV35","PackMapEnvDataSkyModeTexV35","PackMapEnvDataGlobalV35","PackMapEnvironmentV35","PackMapEnvDataLightV34","PackMapEnvDataLightingV34","PackMapEnvDataLayerAttributesV34","PackMapEnvDataLayerV34","PackMapEnvDataCloudsV34","PackMapEnvDataEffectV34","PackMapEnvDataHazeV34","PackMapEnvDataPFieldV34","PackMapEnvDataSkyV34","PackMapEnvDataSkyCardAttributesV34","PackMapEnvDataSkyCardV34","PackMapEnvDataSkyCardsV34","PackMapEnvDataWaterV34","PackMapEnvDataWindV34","PackMapEnvDataLocalV34","PackMapEnvDataSkyModeTexV34","PackMapEnvDataGlobalV34","PackMapEnvironmentV34","PackMapEnvDataLightV33","PackMapEnvDataLightingV33","PackMapEnvDataLayerAttributesV33","PackMapEnvDataLayerV33","PackMapEnvDataCloudsV33","PackMapEnvDataEffectV33","PackMapEnvDataHazeV33","PackMapEnvDataPFieldV33","PackMapEnvDataSkyV33","PackMapEnvDataSkyCardAttributesV33","PackMapEnvDataSkyCardV33","PackMapEnvDataSkyCardsV33","PackMapEnvDataWaterV33","PackMapEnvDataWindV33","PackMapEnvDataLocalV33","PackMapEnvDataSkyModeTexV33","PackMapEnvDataGlobalV33","PackMapEnvironmentV33","PackMapEnvDataLightV32","PackMapEnvDataLightingV32","PackMapEnvDataLayerAttributesV32","PackMapEnvDataLayerV32","PackMapEnvDataCloudsV32","PackMapEnvDataEffectV32","PackMapEnvDataHazeV32","PackMapEnvDataPFieldV32","PackMapEnvDataSkyV32","PackMapEnvDataSkyCardAttributesV32","PackMapEnvDataSkyCardV32","PackMapEnvDataSkyCardsV32","PackMapEnvDataWaterV32","PackMapEnvDataWindV32","PackMapEnvDataLocalV32","PackMapEnvDataSkyModeTexV32","PackMapEnvDataGlobalV32","PackMapEnvironmentV32","PackMapEnvDataLightV31","PackMapEnvDataLightingV31","PackMapEnvDataLayerAttributesV31","PackMapEnvDataLayerV31","PackMapEnvDataCloudsV31","PackMapEnvDataEffectV31","PackMapEnvDataHazeV31","PackMapEnvDataPFieldV31","PackMapEnvDataSkyV31","PackMapEnvDataSkyCardAttributesV31","PackMapEnvDataSkyCardV31","PackMapEnvDataSkyCardsV31","PackMapEnvDataWaterV31","PackMapEnvDataWindV31","PackMapEnvDataLocalV31","PackMapEnvDataSkyModeTexV31","PackMapEnvDataGlobalV31","PackMapEnvironmentV31","PackMapEnvDataLightV30","PackMapEnvDataLightingV30","PackMapEnvDataLayerAttributesV30","PackMapEnvDataLayerV30","PackMapEnvDataCloudsV30","PackMapEnvDataEffectV30","PackMapEnvDataHazeV30","PackMapEnvDataPFieldV30","PackMapEnvDataSkyV30","PackMapEnvDataSkyCardAttributesV30","PackMapEnvDataSkyCardV30","PackMapEnvDataSkyCardsV30","PackMapEnvDataWaterV30","PackMapEnvDataWindV30","PackMapEnvDataLocalV30","PackMapEnvDataSkyModeTexV30","PackMapEnvDataGlobalV30","PackMapEnvironmentV30","PackMapEnvDataLightV29","PackMapEnvDataLightingV29","PackMapEnvDataLayerAttributesV29","PackMapEnvDataLayerV29","PackMapEnvDataCloudsV29","PackMapEnvDataEffectV29","PackMapEnvDataHazeV29","PackMapEnvDataPFieldV29","PackMapEnvDataSkyV29","PackMapEnvDataSkyCardAttributesV29","PackMapEnvDataSkyCardV29","PackMapEnvDataSkyCardsV29","PackMapEnvDataWaterV29","PackMapEnvDataWindV29","PackMapEnvDataLocalV29","PackMapEnvDataSkyModeTexV29","PackMapEnvDataGlobalV29","PackMapEnvironmentV29","PackEulaLanguageV0","PackEulaV0","MapExpansionProperty","MapExpansionProperties","ModelFileSnapPointV3","ModelExpansionEmitterV3","ModelFileExpansionV3","ModelFileSnapPointV2","ModelExpansionEmitterV2","ModelFileExpansionV2","ModelFileSnapPointV1","ModelExpansionEmitterV1","ModelFileExpansionV1","ModelFileSnapPointV0","ModelExpansionEmitterV0","ModelFileExpansionV0","PackAnimFallbackV0","PackAnimFallbacksV0","ModelFileGame","ScenePathNodeV6","ScenePathV6","SceneEdgeV6","SceneGameMeshV6","SceneGameSurfaceV6","SceneFileGameV6","ScenePathNodeV5","ScenePathV5","SceneEdgeV5","SceneGameMeshV5","SceneFileGameV5","ScenePathNodeV4","ScenePathV4","SceneEdgeV4","SceneGameMeshV4","SceneGrabNodeV4","SceneFileGameV4","ScenePathNodeV3","ScenePathV3","SceneEdgeV3","SceneGameMeshV3","SceneGrabNodeV3","SceneFileGameV3","ScenePathNodeV2","ScenePathV2","SceneEdgeV2","SceneGameMeshV2","SceneGrabNodeV2","SceneFileGameV2","ScenePathNodeV1","ScenePathV1","SceneEdgeV1","SceneGameMeshV1","SceneFileGameV1","ScenePathNodeV0","ScenePathV0","SceneEdgeV0","SceneGameMeshV0","SceneFileGameV0","ModelMeshMorphVertV66","ModelMeshMorphTargetV66","GrBoundData","PackVertexType","ModelMeshVertexDataV1","ModelMeshIndexDataV1","ModelMeshGeometryV1","ModelMeshDataV66","ModelFileGeometryV1","ModelMeshMorphVertV65","ModelMeshMorphTargetV65","ModelMeshVertexDataV0","ModelMeshIndexDataV0","ModelMeshGeometryV0","ModelMeshDataV65","ModelFileGeometryV0","ModelGr2DataV4","ModelFileGr2sV4","ModelGr2DataV3","ModelFileGr2sV3","ModelGr2DataV2","ModelFileGr2sV2","ModelGr2DataV1","ModelFileGr2sV1","ModelGr2DataV0","ModelFileGr2sV0","AmatGr","AmatGrV3","AmatGrV2","AmatGrV1","AmatGrV0","PackMoppType","PackMapCollideCollisionV14","PackMapCollideBlockerV14","PackMapCollideNavMeshV14","PackMapCollideAnimationV14","PackMapCollideGeometryV14","PackMapCollideModelObsV14","PackMapCollideModelPropV14","PackMapCollideModelZoneV14","PackMapCollideV14","PackMapCollideCollisionV13","PackMapCollideBlockerV13","PackMapCollideAnimationV13","PackMapCollideGeometryV13","PackMapCollideModelObsV13","PackMapCollideModelPropV13","PackMapCollideModelZoneV13","PackMapCollideV13","PackMapCollideMeshV12","PackMapCollideMeshRefV12","PackMapCollideGeometryV12","PackMapCollideModelObsV12","PackMapCollideModelPropV12","PackMapCollideModelZoneV12","PackMapCollideAiChunkV12","PackMapCollideV12","PackMapCollideMeshV11","PackMapCollideMeshRefV11","PackMapCollideGeometryV11","PackMapCollideModelObsV11","PackMapCollideModelPropV11","PackMapCollideModelZoneV11","PackMapCollideAiChunkV11","PackMapCollideV11","PackMapCollideMeshV10","PackMapCollideMeshRefV10","PackMapCollideGeometryV10","PackMapCollideModelObsV10","PackMapCollideModelPropV10","PackMapCollideModelZoneV10","PackMapCollideAiChunkV10","PackMapCollideV10","PackMapCollideMeshV9","PackMapCollideMeshRefV9","PackMapCollideGeometryV9","PackMapCollideModelObsV9","PackMapCollideModelPropV9","PackMapCollideModelZoneV9","PackMapCollideAiChunkV9","PackMapCollideV9","PackMapCollideMeshV8","PackMapCollideMeshRefV8","PackMapCollideGeometryV8","PackMapCollideModelPropV8","PackMapCollideModelZoneV8","PackMapCollideAiChunkV8","PackMapCollideV8","PackMapCollideMoppCodeV7","PackMapCollideMeshSizeV7","PackMapCollideMeshV7","PackMapCollideMeshRefV7","PackMapCollideGeometryV7","PackMapCollideModelPropV7","PackMapCollideModelZoneV7","PackMapCollideAiChunkV7","PackMapCollideV7","PackMapCollideMoppCodeV6","PackMapCollideMeshSizeV6","PackMapCollideMeshV6","PackMapCollideMeshRefV6","PackMapCollideGeometryV6","PackMapCollideModelPropV6","PackMapCollideModelZoneV6","PackMapCollideV6","ModelFileIcon","PackMapLayerProp","PackMapLayer","PackMapLayers","PackMapLight","PackMapCurve","PackMapPointLightgroups","PackMapPortalData","PackMapPortalLight","PackMapSpotShadow","PackMapSpotLight","PackMapSpotLightgroups","PackMapVolumeImage","PackMapVolumeLight","PackBroadphaseType","PackMapLights","PackMapPointLight","PackMapLightsV15","PackMapProtalLight","PackMapLightsV14","PackMapLightgroups","PackAnimMachineActionV1","PackAnimMachineActionBlockV1","PackAnimMachineActionVariantV1","PackAnimMachineActionVariantBlockV1","PackAnimMachineTransitionVariantV1","PackAnimMachineTransitionV1","PackAnimMachineStateVariantV1","PackAnimMachineStateV1","PackAnimMachineV1","PackAnimModelV1","PackAnimMachinesV1","PackAnimMachineActionV0","PackAnimMachineActionBlockV0","PackAnimMachineActionVariantV0","PackAnimMachineActionVariantBlockV0","PackAnimMachineTransitionVariantV0","PackAnimMachineTransitionV0","PackAnimMachineStateVariantV0","PackAnimMachineStateV0","PackAnimMachineV0","PackAnimModelV0","PackAnimMachinesV0","CollideNavMeshChunkRef","CollideNavMesh","CollideNavMeshChunk","CollideModelManifestFile","CollideModelManifest","PackContentTypeInfo","PackContentNamespace","PackContentIndexEntry","PackContentLocalOffsetFixup","PackContentExternalOffsetFixup","PackContentFileIndexFixup","PackContentStringIndexFixup","PackContentTrackedReference","PackContent","PackMapMetadataMap","PackMapMetadata","PackAssetManifestRecord","PackAssetManifestStream","PackAssetManifestProperty","PackAssetManifestPropertyIndex","PackAssetManifest","PackAssetManifestRecordV5","PackAssetManifestStreamV5","PackAssetManifestPropertyV5","PackAssetManifestPropertyIndexV5","PackAssetManifestV5","PackAssetManifestRecordV4","PackAssetManifestStreamV4","PackAssetManifestOptionsV4","PackAssetManifestPropertyV4","PackAssetManifestPropertyIndexV4","PackAssetManifestV4","PackAssetManifestRecordV3","PackAssetManifestStreamV3","PackAssetManifestOptionsV3","PackAssetManifestV3","PackAssetManifestRecordV2","PackAssetManifestStreamV2","PackAssetManifestV2","PackAssetManifestRecordV1","PackAssetManifestStreamV1","PackAssetManifestV1","PackAssetManifestRecordV0","PackAssetManifestV0","ContentMapRedirector","ContentMapModel","ContentMapStart","ContentMap","ContentPortalManifest","ContentMapRedirectorV1","ContentMapModelV1","ContentMapStartV1","ContentMapV1","ContentPortalManifestV1","ContentMapRedirectorV0","ContentMapModelV0","ContentMapStartV0","ContentMapV0","ContentPortalManifestV0","ModelTextureDataV65","ModelConstantDataV65","ModelMatConstLinkV65","ModelUVTransLinkV65","ModelMaterialTexTransformV65","ModelMaterialDataV65","ModelPermutationDataV65","ModelParticleCloudV65","ModelParticleCurveV65","ModelParticleFlipbookV65","ModelMatrix43V65","ModelParticleEmitterV65","ModelCloudDataV65","ModelObstacleDataV65","ModelStreakV65","ModelStreakAnchorV65","ModelStreakDataV65","ModelEffectLightV65","ModelLightDataV65","ModelClothBoneWeightV65","ModelClothMeshGroupV65","ModelClothGroupBindingV65","ModelClothSoftLockV65","ModelClothConstraintV65","ModelClothDataV65","ModelEffectWindV65","ModelWindDataV65","ModelLightningSystemV65","ModelLightningBoltV65","ModelLightningNodeV65","ModelLightningDataV65","ModelSoftBodyDataV65","ModelBoneOffsetDataV65","ModelBoundingSphereV65","ModelFileDataV65","ModelTextureDataV64","ModelConstantDataV64","ModelMatConstLinkV64","ModelUVTransLinkV64","ModelMaterialTexTransformV64","ModelMaterialDataV64","ModelPermutationDataV64","ModelMeshLodDataV64","ModelMeshMorphVertV64","ModelMeshMorphTargetV64","PackGrannyMeshType","ModelMeshDataV64","ModelParticleCloudV64","ModelParticleCurveV64","ModelParticleFlipbookV64","ModelMatrix43V64","ModelParticleEmitterV64","ModelCloudDataV64","ModelObstacleDataV64","ModelStreakV64","ModelStreakAnchorV64","ModelStreakDataV64","ModelEffectLightV64","ModelLightDataV64","ModelClothBoneWeightV64","ModelClothMeshGroupV64","ModelClothGroupBindingV64","ModelClothSoftLockV64","ModelClothConstraintV64","ModelClothDataV64","ModelEffectWindV64","ModelWindDataV64","ModelLightningSystemV64","ModelLightningBoltV64","ModelLightningNodeV64","ModelLightningDataV64","ModelSoftBodyDataV64","ModelBoneOffsetDataV64","ModelBoundingSphereV64","ModelFileDataV64","ModelTextureDataV63","ModelConstantDataV63","ModelMatConstLinkV63","ModelUVTransLinkV63","ModelMaterialTexTransformV63","ModelMaterialDataV63","ModelPermutationDataV63","ModelMeshLodDataV63","ModelMeshMorphVertV63","ModelMeshMorphTargetV63","ModelMeshDataV63","ModelParticleCloudV63","ModelParticleCurveV63","ModelParticleFlipbookV63","ModelMatrix43V63","ModelParticleEmitterV63","ModelCloudDataV63","ModelObstacleDataV63","ModelStreakV63","ModelStreakAnchorV63","ModelStreakDataV63","ModelEffectLightV63","ModelLightDataV63","ModelClothBoneWeightV63","ModelClothMeshGroupV63","ModelClothGroupBindingV63","ModelClothSoftLockV63","ModelClothConstraintV63","ModelClothDataV63","ModelEffectWindV63","ModelWindDataV63","ModelLightningSystemV63","ModelLightningBoltV63","ModelLightningNodeV63","ModelLightningDataV63","ModelSoftBodyDataV63","ModelBoneOffsetDataV63","ModelBoundingSphereV63","ModelFileDataV63","ModelTextureDataV62","ModelConstantDataV62","ModelMatConstLinkV62","ModelUVTransLinkV62","ModelMaterialTexTransformV62","ModelMaterialDataV62","ModelPermutationDataV62","ModelMeshLodDataV62","ModelMeshMorphVertV62","ModelMeshMorphTargetV62","ModelMeshDataV62","ModelParticleCloudV62","ModelParticleCurveV62","ModelParticleFlipbookV62","ModelMatrix43V62","ModelParticleEmitterV62","ModelCloudDataV62","ModelObstacleDataV62","ModelStreakV62","ModelStreakAnchorV62","ModelStreakDataV62","ModelEffectLightV62","ModelLightDataV62","ModelClothBoneWeightV62","ModelClothMeshGroupV62","ModelClothGroupBindingV62","ModelClothSoftLockV62","ModelClothConstraintV62","ModelClothDataV62","ModelEffectWindV62","ModelWindDataV62","ModelLightningSystemV62","ModelLightningBoltV62","ModelLightningNodeV62","ModelLightningDataV62","ModelSoftBodyDataV62","ModelBoneOffsetDataV62","ModelBoundingSphereV62","ModelFileDataV62","ModelTextureDataV61","ModelConstantDataV61","ModelMatConstLinkV61","ModelUVTransLinkV61","ModelMaterialTexTransformV61","ModelMaterialDataV61","ModelPermutationDataV61","ModelMeshLodDataV61","ModelMeshMorphVertV61","ModelMeshMorphTargetV61","ModelMeshDataV61","ModelTransformDataV61","ModelBoneDataV61","ModelBoneSymmetryV61","ModelSkeletonDataV61","ModelMeshBindingDataV61","PackGrannyTrackMaskType","ModelTrackMaskV61","ModelModelDataV61","ModelPropertyDataV61","ModelParticleCloudV61","ModelParticleCurveV61","ModelParticleFlipbookV61","ModelMatrix43V61","ModelParticleEmitterV61","ModelCloudDataV61","ModelObstacleDataV61","ModelStreakV61","ModelStreakAnchorV61","ModelStreakDataV61","ModelEffectLightV61","ModelLightDataV61","ModelClothBoneWeightV61","ModelClothMeshGroupV61","ModelClothGroupBindingV61","ModelClothSoftLockV61","ModelClothConstraintV61","ModelClothDataV61","ModelEffectWindV61","ModelWindDataV61","ModelLightningSystemV61","ModelLightningBoltV61","ModelLightningNodeV61","ModelLightningDataV61","ModelBoneConstraintLinkV61","ModelBoneConstraintV61","ModelSoftBodyDataV61","ModelBoneOffsetDataV61","ModelFixedOffsetDataV61","ModelFileDataV61","ModelTextureDataV60","ModelConstantDataV60","ModelMatConstLinkV60","ModelUVTransLinkV60","ModelMaterialTexTransformV60","ModelMaterialDataV60","ModelPermutationDataV60","ModelMeshLodDataV60","ModelMeshMorphVertV60","ModelMeshMorphTargetV60","ModelMeshDataV60","ModelTransformDataV60","ModelBoneDataV60","ModelBoneSymmetryV60","ModelSkeletonDataV60","ModelMeshBindingDataV60","ModelTrackMaskV60","ModelModelDataV60","ModelPropertyDataV60","ModelParticleCloudV60","ModelParticleCurveV60","ModelParticleFlipbookV60","ModelMatrix43V60","ModelParticleEmitterV60","ModelCloudDataV60","ModelObstacleDataV60","ModelStreakV60","ModelStreakAnchorV60","ModelStreakDataV60","ModelEffectLightV60","ModelLightDataV60","ModelClothBoneWeightV60","ModelClothMeshGroupV60","ModelClothGroupBindingV60","ModelClothSoftLockV60","ModelClothConstraintV60","ModelClothDataV60","ModelLightningSystemV60","ModelLightningBoltV60","ModelLightningNodeV60","ModelLightningDataV60","ModelBoneConstraintLinkV60","ModelBoneConstraintV60","ModelSoftBodyDataV60","ModelBoneOffsetDataV60","ModelFixedOffsetDataV60","ModelFileDataV60","ModelTextureDataV59","ModelConstantDataV59","ModelMatConstLinkV59","ModelUVTransLinkV59","ModelMaterialTexTransformV59","ModelMaterialDataV59","ModelPermutationDataV59","ModelMeshLodDataV59","ModelMeshMorphVertV59","ModelMeshMorphTargetV59","ModelMeshDataV59","ModelTransformDataV59","ModelBoneDataV59","ModelBoneSymmetryV59","ModelSkeletonDataV59","ModelMeshBindingDataV59","ModelTrackMaskV59","ModelModelDataV59","ModelPropertyDataV59","ModelParticleCloudV59","ModelParticleCurveV59","ModelParticleFlipbookV59","ModelMatrix43V59","ModelParticleEmitterV59","ModelCloudDataV59","ModelObstacleDataV59","ModelStreakV59","ModelStreakAnchorV59","ModelStreakDataV59","ModelEffectLightV59","ModelLightDataV59","ModelClothBoneWeightV59","ModelClothMeshGroupV59","ModelClothSoftLockV59","ModelClothConstraintV59","ModelClothDataV59","ModelLightningSystemV59","ModelLightningBoltV59","ModelLightningNodeV59","ModelLightningDataV59","ModelBoneConstraintLinkV59","ModelBoneConstraintV59","ModelSoftBodyDataV59","ModelBoneOffsetDataV59","ModelFixedOffsetDataV59","ModelFileDataV59","ModelTextureDataV58","ModelConstantDataV58","ModelMatConstLinkV58","ModelUVTransLinkV58","ModelMaterialTexTransformV58","ModelMaterialDataV58","ModelPermutationDataV58","ModelMeshLodDataV58","ModelMeshMorphVertV58","ModelMeshMorphTargetV58","ModelMeshDataV58","ModelTransformDataV58","ModelBoneDataV58","ModelBoneSymmetryV58","ModelSkeletonDataV58","ModelMeshBindingDataV58","ModelTrackMaskV58","ModelModelDataV58","ModelPropertyDataV58","ModelParticleCloudV58","ModelParticleCurveV58","ModelParticleFlipbookV58","ModelMatrix43V58","ModelParticleEmitterV58","ModelCloudDataV58","ModelObstacleDataV58","ModelStreakV58","ModelStreakAnchorV58","ModelStreakDataV58","ModelEffectLightV58","ModelLightDataV58","ModelClothBoneWeightV58","ModelClothMeshGroupV58","ModelClothSoftLockV58","ModelClothConstraintV58","ModelClothDataV58","ModelLightningSystemV58","ModelLightningBoltV58","ModelLightningNodeV58","ModelLightningDataV58","ModelBoneConstraintLinkV58","ModelBoneConstraintV58","ModelSoftBodyDataV58","ModelBoneOffsetDataV58","ModelFixedOffsetDataV58","ModelFileDataV58","ModelTextureDataV57","ModelConstantDataV57","ModelMatConstLinkV57","ModelUVTransLinkV57","ModelMaterialTexTransformV57","ModelMaterialDataV57","ModelPermutationDataV57","ModelMeshLodDataV57","ModelMeshMorphVertV57","ModelMeshMorphTargetV57","ModelMeshDataV57","ModelTransformDataV57","ModelBoneDataV57","ModelBoneSymmetryV57","ModelSkeletonDataV57","ModelMeshBindingDataV57","ModelTrackMaskV57","ModelModelDataV57","ModelPropertyDataV57","ModelParticleCloudV57","ModelParticleCurveV57","ModelParticleFlipbookV57","ModelMatrix43V57","ModelParticleEmitterV57","ModelCloudDataV57","ModelObstacleDataV57","ModelStreakV57","ModelStreakAnchorV57","ModelStreakDataV57","ModelEffectLightV57","ModelLightDataV57","ModelClothBoneWeightV57","ModelClothMeshGroupV57","ModelClothSoftLockV57","ModelClothConstraintV57","ModelClothDataV57","ModelLightningSystemV57","ModelLightningBoltV57","ModelLightningNodeV57","ModelLightningDataV57","ModelBoneConstraintLinkV57","ModelBoneConstraintV57","ModelSoftBodyDataV57","ModelBoneOffsetDataV57","ModelFixedOffsetDataV57","ModelFileDataV57","ModelTextureDataV56","ModelConstantDataV56","ModelMatConstLinkV56","ModelUVTransLinkV56","ModelMaterialTexTransformV56","ModelMaterialDataV56","ModelPermutationDataV56","ModelMeshLodDataV56","ModelMeshMorphVertV56","ModelMeshMorphTargetV56","ModelMeshDataV56","ModelTransformDataV56","ModelBoneDataV56","ModelBoneSymmetryV56","ModelSkeletonDataV56","ModelMeshBindingDataV56","ModelTrackMaskV56","ModelModelDataV56","ModelPropertyDataV56","ModelParticleCloudV56","ModelParticleCurveV56","ModelParticleFlipbookV56","ModelMatrix43V56","ModelParticleEmitterV56","ModelCloudDataV56","ModelObstacleDataV56","ModelStreakV56","ModelStreakAnchorV56","ModelStreakDataV56","ModelEffectLightV56","ModelLightDataV56","ModelClothBoneWeightV56","ModelClothMeshGroupV56","ModelClothSoftLockV56","ModelClothConstraintV56","ModelClothDataV56","ModelLightningSystemV56","ModelLightningBoltV56","ModelLightningNodeV56","ModelLightningDataV56","ModelBoneConstraintLinkV56","ModelBoneConstraintV56","ModelSoftBodyDataV56","ModelBoneOffsetDataV56","ModelFileDataV56","ModelTextureDataV55","ModelConstantDataV55","ModelMatConstLinkV55","ModelUVTransLinkV55","ModelMaterialTexTransformV55","ModelMaterialDataV55","ModelPermutationDataV55","ModelMeshLodDataV55","ModelMeshMorphVertV55","ModelMeshMorphTargetV55","ModelMeshDataV55","ModelTransformDataV55","ModelBoneDataV55","ModelBoneSymmetryV55","ModelSkeletonDataV55","ModelMeshBindingDataV55","ModelTrackMaskV55","ModelModelDataV55","ModelPropertyDataV55","ModelParticleCloudV55","ModelParticleCurveV55","ModelParticleFlipbookV55","ModelMatrix43V55","ModelParticleEmitterV55","ModelCloudDataV55","ModelObstacleDataV55","ModelStreakV55","ModelStreakAnchorV55","ModelStreakDataV55","ModelEffectLightV55","ModelLightDataV55","ModelClothBoneWeightV55","ModelClothMeshGroupV55","ModelClothSoftLockV55","ModelClothConstraintV55","ModelClothDataV55","ModelLightningSystemV55","ModelLightningBoltV55","ModelLightningNodeV55","ModelLightningDataV55","ModelBoneConstraintLinkV55","ModelBoneConstraintV55","ModelSoftBodyDataV55","ModelBoneOffsetDataV55","ModelFileDataV55","ModelTextureDataV54","ModelConstantDataV54","ModelMatConstLinkV54","ModelUVTransLinkV54","ModelMaterialTexTransformV54","ModelMaterialDataV54","ModelPermutationDataV54","ModelMeshLodDataV54","ModelMeshMorphVertV54","ModelMeshMorphTargetV54","ModelMeshDataV54","ModelTransformDataV54","ModelBoneDataV54","ModelBoneSymmetryV54","ModelSkeletonDataV54","ModelMeshBindingDataV54","ModelTrackMaskV54","ModelModelDataV54","ModelPropertyDataV54","ModelParticleCloudV54","ModelParticleCurveV54","ModelParticleFlipbookV54","ModelMatrix43V54","ModelParticleEmitterV54","ModelCloudDataV54","ModelObstacleDataV54","ModelStreakV54","ModelStreakAnchorV54","ModelStreakDataV54","ModelEffectLightV54","ModelLightDataV54","ModelClothBoneWeightV54","ModelClothMeshGroupV54","ModelClothSoftLockV54","ModelClothConstraintV54","ModelClothDataV54","ModelLightningSystemV54","ModelLightningBoltV54","ModelLightningNodeV54","ModelLightningDataV54","ModelBoneConstraintLinkV54","ModelBoneConstraintV54","ModelSoftBodyDataV54","ModelBoneOffsetDataV54","ModelFileDataV54","ModelTextureDataV53","ModelConstantDataV53","ModelMatConstLinkV53","ModelUVTransLinkV53","ModelMaterialTexTransformV53","ModelMaterialDataV53","ModelPermutationDataV53","ModelMeshLodDataV53","ModelMeshMorphVertV53","ModelMeshMorphTargetV53","ModelMeshDataV53","ModelTransformDataV53","ModelBoneDataV53","ModelSkeletonDataV53","ModelMeshBindingDataV53","ModelTrackMaskV53","ModelModelDataV53","ModelPropertyDataV53","ModelParticleCloudV53","ModelParticleCurveV53","ModelParticleFlipbookV53","ModelParticleEmitterV53","ModelCloudDataV53","ModelMatrix43V53","ModelObstacleDataV53","ModelStreakV53","ModelStreakAnchorV53","ModelStreakDataV53","ModelEffectLightV53","ModelLightDataV53","ModelClothBoneWeightV53","ModelClothMeshGroupV53","ModelClothSoftLockV53","ModelClothConstraintV53","ModelClothDataV53","ModelLightningSystemV53","ModelLightningBoltV53","ModelLightningNodeV53","ModelLightningDataV53","ModelBoneConstraintLinkV53","ModelBoneConstraintV53","ModelSoftBodyDataV53","ModelBoneOffsetDataV53","ModelFileDataV53","ModelTextureDataV52","ModelConstantDataV52","ModelMatConstLinkV52","ModelUVTransLinkV52","ModelMaterialTexTransformV52","ModelMaterialDataV52","ModelPermutationDataV52","ModelMeshLodDataV52","ModelMeshMorphVertV52","ModelMeshMorphTargetV52","ModelMeshDataV52","ModelTransformDataV52","ModelBoneDataV52","ModelSkeletonDataV52","ModelMeshBindingDataV52","ModelTrackMaskV52","ModelModelDataV52","ModelPropertyDataV52","ModelParticleCloudV52","ModelParticleCurveV52","ModelParticleFlipbookV52","ModelParticleEmitterV52","ModelCloudDataV52","ModelObstacleDataV52","ModelStreakV52","ModelStreakAnchorV52","ModelStreakDataV52","ModelEffectLightV52","ModelLightDataV52","ModelClothBoneWeightV52","ModelClothMeshGroupV52","ModelClothSoftLockV52","ModelClothConstraintV52","ModelClothObstacleV52","ModelClothDataV52","ModelLightningSystemV52","ModelLightningBoltV52","ModelLightningNodeV52","ModelLightningDataV52","ModelBoneConstraintLinkV52","ModelBoneConstraintV52","ModelSoftBodyDataV52","ModelBoneOffsetDataV52","ModelFileDataV52","ModelTextureDataV51","ModelConstantDataV51","ModelMatConstLinkV51","ModelUVTransLinkV51","ModelMaterialTexTransformV51","ModelMaterialDataV51","ModelPermutationDataV51","ModelMeshLodDataV51","ModelMeshMorphVertV51","ModelMeshMorphTargetV51","ModelMeshDataV51","ModelTransformDataV51","ModelBoneDataV51","ModelSkeletonDataV51","ModelMeshBindingDataV51","ModelTrackMaskV51","ModelModelDataV51","ModelPropertyDataV51","ModelParticleCloudV51","ModelParticleCurveV51","ModelParticleFlipbookV51","ModelParticleEmitterV51","ModelCloudDataV51","ModelObstacleDataV51","ModelStreakV51","ModelStreakAnchorV51","ModelStreakDataV51","ModelEffectLightV51","ModelLightDataV51","ModelClothBoneWeightV51","ModelClothMeshGroupV51","ModelClothConstraintV51","ModelClothObstacleV51","ModelClothDataV51","ModelLightningSystemV51","ModelLightningBoltV51","ModelLightningNodeV51","ModelLightningDataV51","ModelBoneConstraintLinkV51","ModelBoneConstraintV51","ModelSoftBodyDataV51","ModelBoneOffsetDataV51","ModelFileDataV51","ModelTextureDataV50","ModelConstantDataV50","ModelMatConstLinkV50","ModelUVTransLinkV50","ModelMaterialTexTransformV50","ModelMaterialDataV50","ModelMeshLodDataV50","ModelMeshMorphVertV50","ModelMeshMorphTargetV50","ModelMeshDataV50","ModelTransformDataV50","ModelBoneDataV50","ModelSkeletonDataV50","ModelMeshBindingDataV50","ModelTrackMaskV50","ModelModelDataV50","ModelPropertyDataV50","ModelParticleCloudV50","ModelParticleCurveV50","ModelParticleFlipbookV50","ModelParticleEmitterV50","ModelCloudDataV50","ModelObstacleDataV50","ModelStreakV50","ModelStreakAnchorV50","ModelStreakDataV50","ModelEffectLightV50","ModelLightDataV50","ModelClothBoneWeightV50","ModelClothMeshGroupV50","ModelClothConstraintV50","ModelClothObstacleV50","ModelClothDataV50","ModelLightningSystemV50","ModelLightningBoltV50","ModelLightningNodeV50","ModelLightningDataV50","ModelBoneConstraintLinkV50","ModelBoneConstraintV50","ModelSoftBodyDataV50","ModelBoneOffsetDataV50","ModelFileDataV50","ModelTextureDataV49","ModelConstantDataV49","ModelMatConstLinkV49","ModelUVTransLinkV49","ModelMaterialTexTransformV49","ModelMaterialDataV49","ModelMeshLodDataV49","ModelMeshMorphVertV49","ModelMeshMorphTargetV49","ModelMeshDataV49","ModelTransformDataV49","ModelBoneDataV49","ModelSkeletonDataV49","ModelMeshBindingDataV49","ModelTrackMaskV49","ModelModelDataV49","ModelPropertyDataV49","ModelParticleCloudV49","ModelParticleCurveV49","ModelParticleFlipbookV49","ModelParticleEmitterV49","ModelCloudDataV49","ModelObstacleDataV49","ModelStreakV49","ModelStreakAnchorV49","ModelStreakDataV49","ModelEffectLightV49","ModelLightDataV49","ModelClothBoneWeightV49","ModelClothMeshGroupV49","ModelClothConstraintV49","ModelClothObstacleV49","ModelClothDataV49","ModelLightningSystemV49","ModelLightningBoltV49","ModelLightningNodeV49","ModelLightningDataV49","ModelBoneConstraintLinkV49","ModelBoneConstraintV49","ModelSoftBodyDataV49","ModelBoneOffsetDataV49","ModelFileDataV49","ModelTextureDataV48","ModelConstantDataV48","ModelMatConstLinkV48","ModelUVTransLinkV48","ModelMaterialTexTransformV48","ModelMaterialDataV48","ModelMeshLodDataV48","ModelMeshMorphVertV48","ModelMeshMorphTargetV48","ModelMeshDataV48","ModelTransformDataV48","ModelBoneDataV48","ModelSkeletonDataV48","ModelMeshBindingDataV48","ModelTrackMaskV48","ModelModelDataV48","ModelPropertyDataV48","ModelParticleCloudV48","ModelParticleCurveV48","ModelParticleFlipbookV48","ModelParticleEmitterV48","ModelCloudDataV48","ModelObstacleDataV48","ModelStreakV48","ModelStreakAnchorV48","ModelStreakDataV48","ModelEffectLightV48","ModelLightDataV48","ModelClothBoneWeightV48","ModelClothMeshGroupV48","ModelClothConstraintV48","ModelClothObstacleV48","ModelClothDataV48","ModelLightningSystemV48","ModelLightningBoltV48","ModelLightningNodeV48","ModelLightningDataV48","ModelBoneConstraintLinkV48","ModelBoneConstraintV48","ModelSoftBodyDataV48","ModelFileDataV48","ModelTextureDataV47","ModelConstantDataV47","ModelMatConstLinkV47","ModelUVTransLinkV47","ModelMaterialTexTransformV47","ModelMaterialDataV47","ModelMeshLodDataV47","ModelMeshMorphVertV47","ModelMeshMorphTargetV47","ModelMeshDataV47","ModelTransformDataV47","ModelBoneDataV47","ModelSkeletonDataV47","ModelMeshBindingDataV47","ModelTrackMaskV47","ModelModelDataV47","ModelPropertyDataV47","ModelParticleCloudV47","ModelParticleCurveV47","ModelParticleFlipbookV47","ModelParticleEmitterV47","ModelCloudDataV47","ModelObstacleDataV47","ModelStreakV47","ModelStreakAnchorV47","ModelStreakDataV47","ModelEffectLightV47","ModelLightDataV47","ModelClothBoneWeightV47","ModelClothMeshGroupV47","ModelClothConstraintV47","ModelClothObstacleV47","ModelClothDataV47","ModelLightningSystemV47","ModelLightningBoltV47","ModelLightningNodeV47","ModelLightningDataV47","ModelBoneConstraintLinkV47","ModelBoneConstraintV47","ModelSoftBodyDataV47","ModelFileDataV47","ModelTextureDataV46","ModelConstantDataV46","ModelMatConstLinkV46","ModelUVTransLinkV46","ModelMaterialTexTransformV46","ModelMaterialDataV46","ModelMeshLodDataV46","ModelMeshMorphTargetV46","ModelMeshDataV46","ModelTransformDataV46","ModelBoneDataV46","ModelSkeletonDataV46","ModelMeshBindingDataV46","ModelTrackMaskV46","ModelModelDataV46","ModelPropertyDataV46","ModelParticleCloudV46","ModelParticleCurveV46","ModelParticleFlipbookV46","ModelParticleEmitterV46","ModelCloudDataV46","ModelObstacleDataV46","ModelStreakV46","ModelStreakAnchorV46","ModelStreakDataV46","ModelEffectLightV46","ModelLightDataV46","ModelClothBoneWeightV46","ModelClothMeshGroupV46","ModelClothConstraintV46","ModelClothObstacleV46","ModelClothDataV46","ModelLightningSystemV46","ModelLightningBoltV46","ModelLightningNodeV46","ModelLightningDataV46","ModelBoneConstraintLinkV46","ModelBoneConstraintV46","ModelSoftBodyDataV46","ModelFileDataV46","ModelTextureDataV45","ModelConstantDataV45","ModelMatConstLinkV45","ModelUVTransLinkV45","ModelMaterialTexTransformV45","ModelMaterialDataV45","ModelMeshLodDataV45","ModelMeshMorphTargetV45","ModelMeshDataV45","ModelTransformDataV45","ModelBoneDataV45","ModelSkeletonDataV45","ModelMeshBindingDataV45","ModelTrackMaskV45","ModelModelDataV45","ModelPropertyDataV45","ModelParticleCloudV45","ModelParticleCurveV45","ModelParticleFlipbookV45","ModelParticleEmitterV45","ModelCloudDataV45","ModelObstacleDataV45","ModelStreakV45","ModelStreakAnchorV45","ModelStreakDataV45","ModelEffectLightV45","ModelLightDataV45","ModelClothBoneWeightV45","ModelClothMeshGroupV45","ModelClothConstraintV45","ModelClothObstacleV45","ModelClothDataV45","ModelLightningSystemV45","ModelLightningBoltV45","ModelLightningNodeV45","ModelLightningDataV45","ModelBoneConstraintLinkV45","ModelBoneConstraintV45","ModelSoftBodyDataV45","ModelFileDataV45","ModelTextureDataV44","ModelConstantDataV44","ModelMatConstLinkV44","ModelUVTransLinkV44","ModelMaterialDataV44","ModelMeshLodDataV44","ModelMeshMorphTargetV44","ModelMeshDataV44","ModelTransformDataV44","ModelBoneDataV44","ModelSkeletonDataV44","ModelMeshBindingDataV44","ModelTrackMaskV44","ModelModelDataV44","ModelPropertyDataV44","ModelParticleCloudV44","ModelParticleCurveV44","ModelParticleFlipbookV44","ModelParticleEmitterV44","ModelCloudDataV44","ModelObstacleDataV44","ModelStreakV44","ModelStreakAnchorV44","ModelStreakDataV44","ModelEffectLightV44","ModelLightDataV44","ModelClothBoneWeightV44","ModelClothMeshGroupV44","ModelClothConstraintV44","ModelClothObstacleV44","ModelClothDataV44","ModelLightningSystemV44","ModelLightningBoltV44","ModelLightningNodeV44","ModelLightningDataV44","ModelBoneConstraintLinkV44","ModelBoneConstraintV44","ModelSoftBodyDataV44","ModelFileDataV44","ModelTextureDataV43","ModelConstantDataV43","ModelMatConstLinkV43","ModelUVTransLinkV43","ModelMaterialDataV43","ModelMeshLodDataV43","ModelMeshMorphTargetV43","ModelMeshDataV43","ModelTransformDataV43","ModelBoneDataV43","ModelSkeletonDataV43","ModelMeshBindingDataV43","ModelTrackMaskV43","ModelModelDataV43","ModelPropertyDataV43","ModelParticleCloudV43","ModelParticleCurveV43","ModelParticleFlipbookV43","ModelParticleEmitterV43","ModelCloudDataV43","ModelObstacleDataV43","ModelStreakV43","ModelStreakAnchorV43","ModelStreakDataV43","ModelEffectLightV43","ModelLightDataV43","ModelClothBoneWeightV43","ModelClothMeshGroupV43","ModelClothConstraintV43","ModelClothObstacleV43","ModelClothDataV43","ModelLightningSystemV43","ModelLightningBoltV43","ModelLightningNodeV43","ModelLightningDataV43","ModelBoneConstraintLinkV43","ModelBoneConstraintV43","ModelSoftBodyDataV43","ModelFileDataV43","ModelTextureDataV42","ModelConstantDataV42","ModelMatConstLinkV42","ModelUVTransLinkV42","ModelMaterialDataV42","ModelMeshLodDataV42","ModelMeshMorphTargetV42","ModelMeshDataV42","ModelTransformDataV42","ModelBoneDataV42","ModelSkeletonDataV42","ModelMeshBindingDataV42","ModelTrackMaskV42","ModelModelDataV42","ModelPropertyDataV42","ModelParticleCloudV42","ModelParticleCurveV42","ModelParticleFlipbookV42","ModelParticleEmitterV42","ModelCloudDataV42","ModelObstacleDataV42","ModelStreakV42","ModelStreakAnchorV42","ModelStreakDataV42","ModelEffectLightV42","ModelLightDataV42","ModelClothBoneWeightV42","ModelClothMeshGroupV42","ModelClothConstraintV42","ModelClothObstacleV42","ModelClothDataV42","ModelLightningSystemV42","ModelLightningBoltV42","ModelLightningNodeV42","ModelLightningDataV42","ModelBoneConstraintLinkV42","ModelBoneConstraintV42","ModelSoftBodyDataV42","ModelFileDataV42","ModelTextureDataV41","ModelConstantDataV41","ModelMatConstLinkV41","ModelUVTransLinkV41","ModelMaterialDataV41","ModelMeshLodDataV41","ModelMeshMorphTargetV41","ModelMeshDataV41","ModelTransformDataV41","ModelBoneDataV41","ModelSkeletonDataV41","ModelMeshBindingDataV41","ModelTrackMaskV41","ModelModelDataV41","ModelPropertyDataV41","ModelParticleCloudV41","ModelParticleCurveV41","ModelParticleFlipbookV41","ModelParticleEmitterV41","ModelCloudDataV41","ModelObstacleDataV41","ModelStreakV41","ModelStreakAnchorV41","ModelStreakDataV41","ModelEffectLightV41","ModelLightDataV41","ModelClothBoneWeightV41","ModelClothMeshGroupV41","ModelClothConstraintV41","ModelClothObstacleV41","ModelClothDataV41","ModelLightningSystemV41","ModelLightningBoltV41","ModelLightningNodeV41","ModelLightningDataV41","ModelBoneConstraintLinkV41","ModelBoneConstraintV41","ModelSoftBodyDataV41","ModelFileDataV41","ModelTextureDataV40","ModelConstantDataV40","ModelMatConstLinkV40","ModelUVTransLinkV40","ModelMaterialDataV40","ModelMeshLodDataV40","ModelMeshMorphTargetV40","ModelMeshDataV40","ModelTransformDataV40","ModelBoneDataV40","ModelSkeletonDataV40","ModelMeshBindingDataV40","ModelTrackMaskV40","ModelModelDataV40","ModelPropertyDataV40","ModelParticleCloudV40","ModelParticleCurveV40","ModelParticleFlipbookV40","ModelParticleEmitterV40","ModelCloudDataV40","ModelObstacleDataV40","ModelStreakV40","ModelStreakAnchorV40","ModelStreakDataV40","ModelEffectLightV40","ModelLightDataV40","ModelClothBoneWeightV40","ModelClothMeshGroupV40","ModelClothConstraintV40","ModelClothObstacleV40","ModelClothDataV40","ModelLightningSystemV40","ModelLightningBoltV40","ModelLightningNodeV40","ModelLightningDataV40","ModelBoneConstraintLinkV40","ModelBoneConstraintV40","ModelFileDataV40","ModelTextureDataV39","ModelConstantDataV39","ModelMatConstLinkV39","ModelUVTransLinkV39","ModelMaterialDataV39","ModelMeshLodDataV39","ModelMeshMorphTargetV39","ModelMeshDataV39","ModelTransformDataV39","ModelBoneDataV39","ModelSkeletonDataV39","ModelMeshBindingDataV39","ModelTrackMaskV39","ModelModelDataV39","ModelPropertyDataV39","ModelParticleCloudV39","ModelParticleCurveV39","ModelParticleFlipbookV39","ModelParticleEmitterV39","ModelCloudDataV39","ModelObstacleDataV39","ModelStreakV39","ModelStreakAnchorV39","ModelStreakDataV39","ModelEffectLightV39","ModelLightDataV39","ModelClothBoneWeightV39","ModelClothMeshGroupV39","ModelClothConstraintV39","ModelClothObstacleV39","ModelClothDataV39","ModelLightningSystemV39","ModelLightningBoltV39","ModelLightningNodeV39","ModelLightningDataV39","ModelBoneConstraintLinkV39","ModelBoneConstraintV39","ModelFileDataV39","ModelTextureDataV38","ModelConstantDataV38","ModelMatConstLinkV38","ModelUVTransLinkV38","ModelMaterialDataV38","ModelMeshLodDataV38","ModelMeshMorphTargetV38","ModelMeshDataV38","ModelTransformDataV38","ModelBoneDataV38","ModelSkeletonDataV38","ModelMeshBindingDataV38","ModelTrackMaskV38","ModelModelDataV38","ModelPropertyDataV38","ModelParticleCloudV38","ModelParticleCurveV38","ModelParticleFlipbookV38","ModelParticleEmitterV38","ModelCloudDataV38","ModelObstacleDataV38","ModelStreakV38","ModelStreakAnchorV38","ModelStreakDataV38","ModelEffectLightV38","ModelLightDataV38","ModelClothBoneWeightV38","ModelClothMeshGroupV38","ModelClothConstraintV38","ModelClothObstacleV38","ModelClothDataV38","ModelLightningSystemV38","ModelLightningBoltV38","ModelLightningNodeV38","ModelLightningDataV38","ModelBoneConstraintLinkV38","ModelBoneConstraintV38","ModelFileDataV38","ModelTextureDataV37","ModelConstantDataV37","ModelMatConstLinkV37","ModelUVTransLinkV37","ModelMaterialDataV37","ModelMeshLodDataV37","ModelMeshMorphTargetV37","ModelMeshDataV37","ModelTransformDataV37","ModelBoneDataV37","ModelSkeletonDataV37","ModelMeshBindingDataV37","ModelTrackMaskV37","ModelModelDataV37","ModelPropertyDataV37","ModelParticleCloudV37","ModelParticleCurveV37","ModelParticleFlipbookV37","ModelParticleEmitterV37","ModelCloudDataV37","ModelObstacleDataV37","ModelStreakV37","ModelStreakAnchorV37","ModelStreakDataV37","ModelEffectLightV37","ModelLightDataV37","ModelClothBoneWeightV37","ModelClothMeshGroupV37","ModelClothConstraintV37","ModelClothObstacleV37","ModelClothDataV37","ModelLightningSystemV37","ModelLightningBoltV37","ModelLightningNodeV37","ModelLightningDataV37","ModelBoneConstraintLinkV37","ModelBoneConstraintV37","ModelFileDataV37","ModelTextureDataV36","ModelConstantDataV36","ModelMatConstLinkV36","ModelUVTransLinkV36","ModelMaterialDataV36","ModelMeshLodDataV36","ModelMeshMorphTargetV36","ModelMeshDataV36","ModelTransformDataV36","ModelBoneDataV36","ModelSkeletonDataV36","ModelMeshBindingDataV36","ModelTrackMaskV36","ModelModelDataV36","ModelPropertyDataV36","ModelParticleCloudV36","ModelParticleCurveV36","ModelParticleFlipbookV36","ModelParticleEmitterV36","ModelCloudDataV36","ModelObstacleDataV36","ModelStreakV36","ModelStreakAnchorV36","ModelStreakDataV36","ModelEffectLightV36","ModelLightDataV36","ModelClothBoneWeightV36","ModelClothMeshGroupV36","ModelClothConstraintV36","ModelClothObstacleV36","ModelClothDataV36","ModelLightningSystemV36","ModelLightningBoltV36","ModelLightningNodeV36","ModelLightningDataV36","ModelBoneConstraintLinkV36","ModelBoneConstraintV36","ModelFileDataV36","ModelTextureDataV35","ModelConstantDataV35","ModelMatConstLinkV35","ModelUVTransLinkV35","ModelMaterialDataV35","ModelMeshLodDataV35","ModelMeshMorphTargetV35","ModelMeshDataV35","ModelTransformDataV35","ModelBoneDataV35","ModelSkeletonDataV35","ModelMeshBindingDataV35","ModelTrackMaskV35","ModelModelDataV35","ModelPropertyDataV35","ModelParticleCloudV35","ModelParticleCurveV35","ModelParticleFlipbookV35","ModelParticleEmitterV35","ModelCloudDataV35","ModelObstacleDataV35","ModelStreakV35","ModelStreakAnchorV35","ModelStreakDataV35","ModelEffectLightV35","ModelLightDataV35","ModelClothBoneWeightV35","ModelClothMeshGroupV35","ModelClothConstraintV35","ModelClothObstacleV35","ModelClothDataV35","ModelLightningSystemV35","ModelLightningBoltV35","ModelLightningNodeV35","ModelLightningDataV35","ModelBoneConstraintV35","ModelFileDataV35","ModelTextureDataV34","ModelConstantDataV34","ModelMatConstLinkV34","ModelUVTransLinkV34","ModelMaterialDataV34","ModelMeshLodDataV34","ModelMeshMorphTargetV34","ModelMeshDataV34","ModelTransformDataV34","ModelBoneDataV34","ModelSkeletonDataV34","ModelMeshBindingDataV34","ModelTrackMaskV34","ModelModelDataV34","ModelPropertyDataV34","ModelParticleCloudV34","ModelParticleCurveV34","ModelParticleFlipbookV34","ModelParticleEmitterV34","ModelCloudDataV34","ModelObstacleDataV34","ModelStreakV34","ModelStreakAnchorV34","ModelStreakDataV34","ModelEffectLightV34","ModelLightDataV34","ModelClothBoneWeightV34","ModelClothMeshGroupV34","ModelClothConstraintV34","ModelClothObstacleV34","ModelClothDataV34","ModelLightningSystemV34","ModelLightningBoltV34","ModelLightningNodeV34","ModelLightningDataV34","ModelBoneConstraintV34","ModelFileDataV34","ModelTextureDataV33","ModelConstantDataV33","ModelMatConstLinkV33","ModelUVTransLinkV33","ModelMaterialDataV33","ModelMeshLodDataV33","ModelMeshMorphTargetV33","ModelMeshDataV33","ModelTransformDataV33","ModelBoneDataV33","ModelSkeletonDataV33","ModelMeshBindingDataV33","ModelTrackMaskV33","ModelModelDataV33","ModelPropertyDataV33","ModelParticleCloudV33","ModelParticleCurveV33","ModelParticleFlipbookV33","ModelParticleEmitterV33","ModelCloudDataV33","ModelObstacleDataV33","ModelStreakV33","ModelStreakAnchorV33","ModelStreakDataV33","ModelEffectLightV33","ModelLightDataV33","ModelClothBoneWeightV33","ModelClothMeshGroupV33","ModelClothConstraintV33","ModelClothObstacleV33","ModelClothDataV33","ModelLightningSystemV33","ModelLightningBoltV33","ModelLightningNodeV33","ModelLightningDataV33","ModelBoneConstraintV33","ModelFileDataV33","ModelTextureDataV32","ModelConstantDataV32","ModelMatConstLinkV32","ModelUVTransLinkV32","ModelMaterialDataV32","ModelMeshLodDataV32","ModelMeshMorphTargetV32","ModelMeshDataV32","ModelTransformDataV32","ModelBoneDataV32","ModelSkeletonDataV32","ModelMeshBindingDataV32","ModelTrackMaskV32","ModelModelDataV32","ModelPropertyDataV32","ModelParticleCloudV32","ModelParticleCurveV32","ModelParticleFlipbookV32","ModelParticleEmitterV32","ModelCloudDataV32","ModelObstacleDataV32","ModelStreakV32","ModelStreakAnchorV32","ModelStreakDataV32","ModelEffectLightV32","ModelLightDataV32","ModelClothBoneWeightV32","ModelClothMeshGroupV32","ModelClothConstraintV32","ModelClothObstacleV32","ModelClothDataV32","ModelLightningSystemV32","ModelLightningBoltV32","ModelLightningNodeV32","ModelLightningDataV32","ModelFileDataV32","ModelTextureDataV31","ModelConstantDataV31","ModelMatConstLinkV31","ModelUVTransLinkV31","ModelMaterialDataV31","ModelMeshLodDataV31","ModelMeshMorphTargetV31","ModelMeshDataV31","ModelTransformDataV31","ModelBoneDataV31","ModelSkeletonDataV31","ModelMeshBindingDataV31","ModelTrackMaskV31","ModelModelDataV31","ModelPropertyDataV31","ModelParticleCloudV31","ModelParticleCurveV31","ModelParticleFlipbookV31","ModelParticleEmitterV31","ModelCloudDataV31","ModelObstacleDataV31","ModelStreakV31","ModelStreakAnchorV31","ModelStreakDataV31","ModelEffectLightV31","ModelLightDataV31","ModelClothBoneWeightV31","ModelClothMeshGroupV31","ModelClothConstraintV31","ModelClothObstacleV31","ModelClothDataV31","ModelFileDataV31","ModelTextureDataV30","ModelConstantDataV30","ModelMatConstLinkV30","ModelUVTransLinkV30","ModelMaterialDataV30","ModelMeshLodDataV30","ModelMeshMorphTargetV30","ModelMeshDataV30","ModelTransformDataV30","ModelBoneDataV30","ModelSkeletonDataV30","ModelMeshBindingDataV30","ModelTrackMaskV30","ModelModelDataV30","ModelPropertyDataV30","ModelParticleCloudV30","ModelParticleCurveV30","ModelParticleFlipbookV30","ModelParticleEmitterV30","ModelCloudDataV30","ModelObstacleDataV30","ModelStreakV30","ModelStreakAnchorV30","ModelStreakDataV30","ModelEffectLightV30","ModelLightDataV30","ModelClothBoneWeightV30","ModelClothMeshGroupV30","ModelClothConstraintV30","ModelClothObstacleV30","ModelClothDataV30","ModelFileDataV30","ModelTextureDataV29","ModelConstantDataV29","ModelMatConstLinkV29","ModelUVTransLinkV29","ModelMaterialDataV29","ModelMeshLodDataV29","ModelMeshMorphTargetV29","ModelMeshDataV29","ModelTransformDataV29","ModelBoneDataV29","ModelSkeletonDataV29","ModelMeshBindingDataV29","ModelTrackMaskV29","ModelModelDataV29","ModelPropertyDataV29","ModelParticleCloudV29","ModelParticleCurveV29","ModelParticleFlipbookV29","ModelParticleEmitterV29","ModelCloudDataV29","ModelObstacleDataV29","ModelStreakV29","ModelStreakAnchorV29","ModelStreakDataV29","ModelEffectLightV29","ModelLightDataV29","ModelClothBoneWeightV29","ModelClothMeshGroupV29","ModelClothConstraintV29","ModelClothObstacleV29","ModelClothDataV29","ModelFileDataV29","ModelTextureDataV28","ModelConstantDataV28","ModelMaterialDataV28","ModelMeshLodDataV28","ModelMeshMorphTargetV28","ModelMeshDataV28","ModelTransformDataV28","ModelBoneDataV28","ModelSkeletonDataV28","ModelMeshBindingDataV28","ModelTrackMaskV28","ModelModelDataV28","ModelPropertyDataV28","ModelParticleCloudV28","ModelParticleCurveV28","ModelParticleFlipbookV28","ModelParticleEmitterV28","ModelCloudDataV28","ModelObstacleDataV28","ModelStreakV28","ModelStreakAnchorV28","ModelStreakDataV28","ModelEffectLightV28","ModelLightDataV28","ModelClothBoneWeightV28","ModelClothMeshGroupV28","ModelClothConstraintV28","ModelClothDataV28","ModelFileDataV28","ModelTextureDataV27","ModelConstantDataV27","ModelMaterialDataV27","ModelMeshLodDataV27","ModelMeshMorphTargetV27","ModelMeshDataV27","ModelTransformDataV27","ModelBoneDataV27","ModelSkeletonDataV27","ModelMeshBindingDataV27","ModelTrackMaskV27","ModelModelDataV27","ModelPropertyDataV27","ModelParticleCloudV27","ModelParticleCurveV27","ModelParticleFlipbookV27","ModelParticleEmitterV27","ModelCloudDataV27","ModelObstacleDataV27","ModelStreakV27","ModelStreakAnchorV27","ModelStreakDataV27","ModelEffectLightV27","ModelLightDataV27","ModelClothBoneWeightV27","ModelClothMeshGroupV27","ModelClothConstraintV27","ModelClothDataV27","ModelFileDataV27","ModelTextureDataV26","ModelConstantDataV26","ModelMaterialDataV26","ModelMeshLodDataV26","ModelMeshMorphTargetV26","ModelMeshDataV26","ModelTransformDataV26","ModelBoneDataV26","ModelSkeletonDataV26","ModelMeshBindingDataV26","ModelTrackMaskV26","ModelModelDataV26","ModelPropertyDataV26","ModelParticleCloudV26","ModelParticleCurveV26","ModelParticleFlipbookV26","ModelParticleEmitterV26","ModelCloudDataV26","ModelObstacleDataV26","ModelStreakV26","ModelStreakAnchorV26","ModelStreakDataV26","ModelEffectLightV26","ModelLightDataV26","ModelClothBoneWeightV26","ModelClothMeshGroupV26","ModelClothConstraintV26","ModelClothDataV26","ModelFileDataV26","ModelTextureDataV25","ModelConstantDataV25","ModelMaterialDataV25","ModelMeshLodDataV25","ModelMeshMorphTargetV25","ModelMeshDataV25","ModelTransformDataV25","ModelBoneDataV25","ModelSkeletonDataV25","ModelMeshBindingDataV25","ModelTrackMaskV25","ModelModelDataV25","ModelFloatPropertyDataV25","ModelPropertyDataV25","ModelParticleCloudV25","ModelParticleCurveV25","ModelParticleFlipbookV25","ModelParticleEmitterV25","ModelCloudDataV25","ModelObstacleDataV25","ModelStreakV25","ModelStreakAnchorV25","ModelStreakDataV25","ModelEffectLightV25","ModelLightDataV25","ModelClothBoneWeightV25","ModelClothMeshGroupV25","ModelClothConstraintV25","ModelClothDataV25","ModelFileDataV25","ModelTextureDataV24","ModelConstantDataV24","ModelMaterialDataV24","ModelMeshLodDataV24","ModelMeshMorphTargetV24","ModelMeshDataV24","ModelTransformDataV24","ModelBoneDataV24","ModelSkeletonDataV24","ModelMeshBindingDataV24","ModelTrackMaskV24","ModelModelDataV24","ModelFloatPropertyDataV24","ModelPropertyDataV24","ModelParticleCloudV24","ModelParticleCurveV24","ModelParticleFlipbookV24","ModelParticleEmitterV24","ModelCloudDataV24","ModelObstacleDataV24","ModelStreakV24","ModelStreakAnchorV24","ModelStreakDataV24","ModelEffectLightV24","ModelLightDataV24","ModelClothBoneWeightV24","ModelClothMeshGroupV24","ModelClothConstraintV24","ModelClothDataV24","ModelFileDataV24","ModelTextureDataV23","ModelConstantDataV23","ModelMaterialDataV23","ModelMeshLodDataV23","ModelMeshMorphTargetV23","ModelMeshDataV23","ModelTransformDataV23","ModelBoneDataV23","ModelSkeletonDataV23","ModelMeshBindingDataV23","ModelTrackMaskV23","ModelModelDataV23","ModelFloatPropertyDataV23","ModelPropertyDataV23","ModelParticleCloudV23","ModelParticleCurveV23","ModelParticleFlipbookV23","ModelParticleEmitterV23","ModelCloudDataV23","ModelObstacleDataV23","ModelStreakV23","ModelStreakAnchorV23","ModelStreakDataV23","ModelEffectLightV23","ModelLightDataV23","ModelClothBoneWeightV23","ModelClothMeshGroupV23","ModelClothConstraintV23","ModelClothDataV23","ModelFileDataV23","ModelTextureDataV22","ModelConstantDataV22","ModelMaterialDataV22","ModelMeshLodDataV22","ModelMeshMorphTargetV22","ModelMeshDataV22","ModelTransformDataV22","ModelBoneDataV22","ModelSkeletonDataV22","ModelMeshBindingDataV22","ModelTrackMaskV22","ModelModelDataV22","ModelFloatPropertyDataV22","ModelPropertyDataV22","ModelParticleCloudV22","ModelParticleCurveV22","ModelParticleFlipbookV22","ModelParticleEmitterV22","ModelParticleObstacleV22","ModelCloudDataV22","ModelStreakV22","ModelStreakAnchorV22","ModelStreakDataV22","ModelEffectLightV22","ModelLightDataV22","ModelClothBoneWeightV22","ModelClothMeshGroupV22","ModelClothConstraintV22","ModelClothDataV22","ModelFileDataV22","ModelTextureDataV21","ModelConstantDataV21","ModelMaterialDataV21","ModelMeshLodDataV21","ModelMeshMorphTargetV21","ModelMeshDataV21","ModelTransformDataV21","ModelBoneDataV21","ModelSkeletonDataV21","ModelMeshBindingDataV21","ModelTrackMaskV21","ModelModelDataV21","ModelFloatPropertyDataV21","ModelPropertyDataV21","ModelParticleCloudV21","ModelParticleCurveV21","ModelParticleFlipbookV21","ModelParticleEmitterV21","ModelParticleObstacleV21","ModelCloudDataV21","ModelStreakV21","ModelStreakAnchorV21","ModelStreakDataV21","ModelEffectLightV21","ModelLightDataV21","ModelClothBoneWeightV21","ModelClothMeshGroupV21","ModelClothConstraintV21","ModelClothDataV21","ModelFileDataV21","ModelTextureDataV20","ModelConstantDataV20","ModelMaterialDataV20","ModelMeshLodDataV20","ModelMeshMorphTargetV20","ModelMeshDataV20","ModelTransformDataV20","ModelBoneDataV20","ModelSkeletonDataV20","ModelMeshBindingDataV20","ModelTrackMaskV20","ModelModelDataV20","ModelFloatPropertyDataV20","ModelPropertyDataV20","ModelParticleCloudV20","ModelParticleCurveV20","ModelParticleFlipbookV20","ModelParticleEmitterV20","ModelParticleObstacleV20","ModelCloudDataV20","ModelStreakV20","ModelStreakAnchorV20","ModelStreakDataV20","ModelEffectLightV20","ModelLightDataV20","ModelClothBoneWeightV20","ModelClothMeshGroupV20","ModelClothConstraintV20","ModelClothDataV20","ModelFileDataV20","ModelTextureDataV19","ModelConstantDataV19","ModelMaterialDataV19","ModelMeshLodDataV19","ModelMeshMorphTargetV19","ModelMeshDataV19","ModelTransformDataV19","ModelBoneDataV19","ModelSkeletonDataV19","ModelMeshBindingDataV19","ModelTrackMaskV19","ModelModelDataV19","ModelFloatPropertyDataV19","ModelPropertyDataV19","ModelParticleCloudV19","ModelParticleCurveV19","ModelParticleFlipbookV19","ModelParticleEmitterV19","ModelParticleObstacleV19","ModelCloudDataV19","ModelStreakV19","ModelStreakAnchorV19","ModelStreakDataV19","ModelEffectLightV19","ModelLightDataV19","ModelClothBoneWeightV19","ModelClothMeshGroupV19","ModelClothConstraintV19","ModelClothDataV19","ModelFileDataV19","ModelTextureDataV18","ModelConstantDataV18","ModelMaterialDataV18","ModelMeshLodDataV18","ModelMeshMorphTargetV18","ModelMeshDataV18","ModelTransformDataV18","ModelBoneDataV18","ModelSkeletonDataV18","ModelMeshBindingDataV18","ModelTrackMaskV18","ModelModelDataV18","ModelFloatPropertyDataV18","ModelPropertyDataV18","ModelParticleCloudV18","ModelParticleCurveV18","ModelParticleFlipbookV18","ModelParticleEmitterV18","ModelParticleObstacleV18","ModelCloudDataV18","ModelStreakV18","ModelStreakAnchorV18","ModelStreakDataV18","ModelEffectLightV18","ModelLightDataV18","ModelFileDataV18","ModelTextureDataV17","ModelConstantDataV17","ModelMaterialDataV17","ModelMeshLodDataV17","ModelMeshMorphTargetV17","ModelMeshDataV17","ModelTransformDataV17","ModelBoneDataV17","ModelSkeletonDataV17","ModelMeshBindingDataV17","ModelModelDataV17","ModelFloatPropertyDataV17","ModelPropertyDataV17","ModelParticleCloudV17","ModelParticleCurveV17","ModelParticleFlipbookV17","ModelParticleEmitterV17","ModelParticleObstacleV17","ModelCloudDataV17","ModelStreakV17","ModelStreakAnchorV17","ModelStreakDataV17","ModelEffectLightV17","ModelLightDataV17","ModelFileDataV17","ModelTextureDataV16","ModelConstantDataV16","ModelMaterialDataV16","ModelMeshLodDataV16","ModelMeshDataV16","ModelTransformDataV16","ModelBoneDataV16","ModelSkeletonDataV16","ModelMeshBindingDataV16","ModelModelDataV16","ModelFloatPropertyDataV16","ModelPropertyDataV16","ModelParticleCloudV16","ModelParticleCurveV16","ModelParticleFlipbookV16","ModelParticleEmitterV16","ModelParticleObstacleV16","ModelCloudDataV16","ModelStreakV16","ModelStreakAnchorV16","ModelStreakDataV16","ModelEffectLightV16","ModelLightDataV16","ModelFileDataV16","ModelTextureDataV15","ModelConstantDataV15","ModelMaterialDataV15","ModelMeshLodDataV15","ModelMeshDataV15","ModelTransformDataV15","ModelBoneDataV15","ModelSkeletonDataV15","ModelMeshBindingDataV15","ModelModelDataV15","ModelFloatPropertyDataV15","ModelPropertyDataV15","ModelParticleCloudV15","ModelParticleCurveV15","ModelParticleFlipbookV15","ModelParticleEmitterV15","ModelParticleObstacleV15","ModelCloudDataV15","ModelStreakV15","ModelStreakAnchorV15","ModelStreakDataV15","ModelEffectLightV15","ModelLightDataV15","ModelFileDataV15","ModelTextureDataV14","ModelConstantDataV14","ModelMaterialDataV14","ModelMeshDataV14","ModelTransformDataV14","ModelBoneDataV14","ModelSkeletonDataV14","ModelMeshBindingDataV14","ModelModelDataV14","ModelFloatPropertyDataV14","ModelPropertyDataV14","ModelParticleCloudV14","ModelParticleCurveV14","ModelParticleFlipbookV14","ModelParticleEmitterV14","ModelParticleObstacleV14","ModelCloudDataV14","ModelStreakV14","ModelStreakAnchorV14","ModelStreakDataV14","ModelFileDataV14","ModelTextureDataV13","ModelConstantDataV13","ModelMaterialDataV13","ModelMeshDataV13","ModelTransformDataV13","ModelBoneDataV13","ModelSkeletonDataV13","ModelMeshBindingDataV13","ModelModelDataV13","ModelFloatPropertyDataV13","ModelPropertyDataV13","ModelParticleCloudV13","ModelParticleCurveV13","ModelParticleFlipbookV13","ModelParticleEmitterV13","ModelParticleObstacleV13","ModelCloudDataV13","ModelStreakV13","ModelStreakAnchorV13","ModelStreakDataV13","ModelFileDataV13","ModelTextureDataV12","ModelConstantDataV12","ModelMaterialDataV12","ModelMeshDataV12","ModelTransformDataV12","ModelBoneDataV12","ModelSkeletonDataV12","ModelMeshBindingDataV12","ModelModelDataV12","ModelFloatPropertyDataV12","ModelPropertyDataV12","ModelParticleCloudV12","ModelParticleCurveV12","ModelParticleFlipbookV12","ModelParticleEmitterV12","ModelParticleObstacleV12","ModelCloudDataV12","ModelStreakV12","ModelStreakAnchorV12","ModelStreakDataV12","ModelFileDataV12","ModelTextureDataV11","ModelConstantDataV11","ModelMaterialDataV11","ModelMeshDataV11","ModelTransformDataV11","ModelBoneDataV11","ModelSkeletonDataV11","ModelMeshBindingDataV11","ModelModelDataV11","ModelFloatPropertyDataV11","ModelPropertyDataV11","ModelParticleCloudV11","ModelParticleCurveV11","ModelParticleFlipbookV11","ModelParticleEmitterV11","ModelParticleObstacleV11","ModelCloudDataV11","ModelStreakV11","ModelStreakAnchorV11","ModelStreakDataV11","ModelFileDataV11","ModelTextureDataV10","ModelConstantDataV10","ModelMaterialDataV10","ModelMeshDataV10","ModelTransformDataV10","ModelBoneDataV10","ModelSkeletonDataV10","ModelMeshBindingDataV10","ModelModelDataV10","ModelFloatPropertyDataV10","ModelPropertyDataV10","ModelParticleFlipbookV10","ModelParticleCloudV10","ModelParticleEmitterV10","ModelParticleObstacleV10","ModelCloudDataV10","ModelStreakV10","ModelStreakAnchorV10","ModelStreakDataV10","ModelFileDataV10","ModelTextureDataV9","ModelConstantDataV9","ModelMaterialDataV9","ModelMeshDataV9","ModelTransformDataV9","ModelBoneDataV9","ModelSkeletonDataV9","ModelMeshBindingDataV9","ModelModelDataV9","ModelFloatPropertyDataV9","ModelPropertyDataV9","ModelParticleFlipbookV9","ModelParticleCloudV9","ModelParticleEmitterV9","ModelParticleObstacleV9","ModelCloudDataV9","ModelFileDataV9","ModelTextureDataV8","ModelConstantDataV8","ModelMaterialDataV8","ModelMeshDataV8","ModelTransformDataV8","ModelBoneDataV8","ModelSkeletonDataV8","ModelMeshBindingDataV8","ModelModelDataV8","ModelFloatPropertyDataV8","ModelPropertyDataV8","ModelParticleFlipbookV8","ModelParticleCloudV8","ModelParticleEmitterV8","ModelParticleObstacleV8","ModelCloudDataV8","ModelFileDataV8","ModelTextureDataV7","ModelConstantDataV7","ModelMaterialDataV7","ModelMeshDataV7","ModelVisTrackDataV7","ModelAnimationDataV7","ModelAnimationImportDataV7","ModelTransformDataV7","ModelBoneDataV7","ModelSkeletonDataV7","ModelMeshBindingDataV7","ModelModelDataV7","ModelFloatPropertyDataV7","ModelPropertyDataV7","ModelCollisionMeshV7","ModelCollisionCloudV7","ModelCollisionCubeV7","ModelCollisionSphereV7","ModelCollisionSurfaceV7","ModelCollisionDataV7","ModelParticleFlipbookV7","ModelParticleCloudV7","ModelParticleEmitterV7","ModelParticleObstacleV7","ModelCloudDataV7","ModelFileDataV7","ModelTextureDataV6","ModelConstantDataV6","ModelMaterialDataV6","ModelMeshDataV6","ModelVisTrackDataV6","ModelAnimationDataV6","ModelAnimationImportDataV6","ModelTransformDataV6","ModelBoneDataV6","ModelSkeletonDataV6","ModelMeshBindingDataV6","ModelModelDataV6","ModelFloatPropertyDataV6","ModelPropertyDataV6","ModelCollisionMeshV6","ModelCollisionCloudV6","ModelCollisionCubeV6","ModelCollisionSphereV6","ModelCollisionSurfaceV6","ModelCollisionDataV6","ModelParticleFlipbookV6","ModelParticleCloudV6","ModelParticleEmitterV6","ModelParticleObstacleV6","ModelCloudDataV6","ModelFileDataV6","ModelTextureDataV5","ModelConstantDataV5","ModelMaterialDataV5","ModelMeshDataV5","ModelVisTrackDataV5","ModelAnimationDataV5","ModelTransformDataV5","ModelBoneDataV5","ModelSkeletonDataV5","ModelMeshBindingDataV5","ModelModelDataV5","ModelFloatPropertyDataV5","ModelPropertyDataV5","ModelCollisionMeshV5","ModelCollisionCloudV5","ModelCollisionCubeV5","ModelCollisionSphereV5","ModelCollisionSurfaceV5","ModelCollisionDataV5","ModelParticleFlipbookV5","ModelParticleCloudV5","ModelParticleEmitterV5","ModelParticleObstacleV5","ModelCloudDataV5","ModelFileDataV5","ModelTextureDataV4","ModelConstantDataV4","ModelMaterialDataV4","ModelMeshDataV4","ModelVisTrackDataV4","ModelAnimationDataV4","ModelTransformDataV4","ModelBoneDataV4","ModelSkeletonDataV4","ModelMeshBindingDataV4","ModelModelDataV4","ModelFloatPropertyDataV4","ModelPropertyDataV4","ModelCollisionMeshV4","ModelCollisionCloudV4","ModelCollisionCubeV4","ModelCollisionSphereV4","ModelCollisionSurfaceV4","ModelCollisionDataV4","ModelParticleFlipbookV4","ModelParticleCloudV4","ModelParticleEmitterV4","ModelParticleObstacleV4","ModelCloudDataV4","ModelFileDataV4","ModelTextureDataV3","ModelConstantDataV3","ModelMaterialDataV3","ModelMeshDataV3","ModelAnimationDataV3","ModelTransformDataV3","ModelBoneDataV3","ModelSkeletonDataV3","ModelMeshBindingDataV3","ModelModelDataV3","ModelFloatPropertyDataV3","ModelPropertyDataV3","ModelCollisionMeshV3","ModelCollisionCloudV3","ModelCollisionCubeV3","ModelCollisionSphereV3","ModelCollisionSurfaceV3","ModelCollisionDataV3","ModelParticleFlipbookV3","ModelParticleCloudV3","ModelParticleEmitterV3","ModelParticleObstacleV3","ModelCloudDataV3","ModelFileDataV3","ModelTextureDataV2","ModelConstantDataV2","ModelMaterialDataV2","ModelMeshDataV2","ModelAnimationDataV2","ModelTransformDataV2","ModelBoneDataV2","ModelSkeletonDataV2","ModelMeshBindingDataV2","ModelModelDataV2","ModelFloatPropertyDataV2","ModelPropertyDataV2","ModelCollisionMeshV2","ModelCollisionCloudV2","ModelCollisionSurfaceV2","ModelCollisionDataV2","ModelParticleFlipbookV2","ModelParticleCloudV2","ModelParticleEmitterV2","ModelParticleObstacleV2","ModelCloudDataV2","ModelFileDataV2","ModelTextureDataV1","ModelConstantDataV1","ModelMaterialDataV1","ModelMeshDataV1","ModelAnimationDataV1","ModelTransformDataV1","ModelBoneDataV1","ModelSkeletonDataV1","ModelMeshBindingDataV1","ModelModelDataV1","ModelFloatPropertyDataV1","ModelPropertyDataV1","ModelChunkCollisionMeshV1","ModelChunkCollisionCloudV1","ModelChunkCollisionSurfaceV1","ModelChunkCollisionDataV1","ModelFileDataV1","ModelTextureDataV0","ModelConstantDataV0","ModelMaterialDataV0","ModelMeshDataV0","ModelAnimationDataV0","ModelTransformDataV0","ModelBoneDataV0","ModelSkeletonDataV0","ModelMeshBindingDataV0","ModelModelDataV0","ModelFloatPropertyDataV0","ModelPropertyDataV0","ModelFileDataV0","AmatAppleShaderConstant","AmatAppleShader","AmatAppleRenderState","AmatApplePass","AmatAppleEffect","AmatAppleSamplerState","AmatAppleMaterial","PackMapInterestPoint","MapMission","PackMapNavMeshChunkV3","PackMapNavMeshMoverV3","PackMapNavMeshV3","PackMapNavMeshChunkV2","PackMapNavMeshMoverV2","PackMapNavMeshV2","PackMapNavMeshChunkV1","PackMapNavMeshV1","PackMapNavMeshChunkV0","PackMapNavMeshV0","PackMapNavMeshChunkExternalV3","PackMapNavMeshExternalV3","PackMapNavMeshChunkExternalV2","PackMapNavMeshExternalV2","PackMapNavMeshChunkExternalV1","PackMapNavMeshExternalV1","PackMapNavMeshChunkExternalV0","PackMapNavMeshExternalV0","PackMapEditCollision","MapObstacles","MapOcclusion","MapOcclusions","MapOcclusionTome","MapVariant","MapPackage","MapParam","PagedImageLayerDataV0","PagedImagePageDataV0","PagedImageTableDataV0","PackMapPhysicsMeshV10","PackMapPhysicsObjectV10","PackMapPhysicsObjectRefV10","PackMapPhysicsGeometryV10","PackMapPhysicsModelPropV10","PackMapPhysicsModelZoneV8","PackMapPhysicsModelObstacleV10","PackMapPhysicsBlockV10","PackMapPhysicsV10","PackMapPhysicsMeshV9","PackMapPhysicsObjectV9","PackMapPhysicsObjectRefV9","PackMapPhysicsGeometryV9","PackMapPhysicsModelPropV9","PackMapPhysicsModelZoneV7","PackMapPhysicsModelObstacleV9","PackMapPhysicsBlockV9","PackMapPhysicsV9","PackMapPhysicsMeshV8","SceneBoxShapeV7","SceneSphereShapeV7","SceneCapsuleShapeV7","SceneMeshShapeV7","SceneFilePhysicsV7","PackMapPhysicsObjectV8","PackMapPhysicsObjectRefV8","PackMapPhysicsGeometryV8","PackMapPhysicsModelPropV8","PackMapPhysicsModelZoneV6","PackMapPhysicsModelObstacleV8","PackMapPhysicsBlockV8","PackMapPhysicsV8","PackMapPhysicsMeshV7","PackMapPhysicsObjectV7","PackMapPhysicsObjectRefV7","PackMapPhysicsGeometryV7","PackMapPhysicsModelPropV7","PackMapPhysicsModelZoneV5","PackMapPhysicsModelObstacleV7","PackMapPhysicsBlockV7","PackMapPhysicsV7","PackMapPhysicsMeshV6","PackMapPhysicsObjectV6","PackMapPhysicsObjectRefV6","PackMapPhysicsGeometryV6","PackMapPhysicsModelPropV6","PackMapPhysicsModelZoneV4","PackMapPhysicsModelObstacleV6","PackMapPhysicsV6","PackMapPhysicsMeshV5","PackMapPhysicsObjectV5","PackMapPhysicsObjectRefV5","PackMapPhysicsGeometryV5","PackMapPhysicsModelPropV5","PackMapPhysicsModelZoneV3","PackMapPhysicsModelObstacleV5","PackMapPhysicsV5","PackMapPhysicsMeshV4","PackMapPhysicsObjectV4","PackMapPhysicsObjectRefV4","PackMapPhysicsGeometryV4","PackMapPhysicsModelPropV4","PackMapPhysicsModelZoneV2","PackMapPhysicsModelObstacleV4","PackMapPhysicsV4","PackMapPhysicsMeshV3","PackMapPhysicsShapeDataV3","PackMapPhysicsGeometryV3","PackMapPhysicsModelPropV3","PackMapPhysicsModelZoneV1","PackMapPhysicsV3","PackMapPhysicsShapeDataV2","PackMapPhysicsGeometryV2","PackMapPhysicsModelPropV2","PackMapPhysicsModelZoneV0","PackMapPhysicsV2","PackMapPhysicsShapeDataV1","PackMapPhysicsGeometryV1","PackMapPhysicsModelPropV1","PackMapPhysicsV1","SceneBoxShapeV8","SceneSphereShapeV8","SceneCapsuleShapeV8","SceneMeshShapeV8","SceneSurfaceV8","SceneFilePhysicsV8","SceneShapeSurfaceV6","SceneBoxShapeV6","SceneSphereShapeV6","SceneCapsuleShapeV6","SceneMeshShapeV6","SceneCollisionShapeV6","SceneTriggerShapeV6","SceneNamedShapeV6","SceneFilePhysicsV6","SceneShapeSurfaceV5","SceneBoxShapeV5","SceneSphereShapeV5","SceneMeshShapeV5","SceneCollisionShapeV5","SceneTriggerShapeV5","SceneNamedShapeV5","SceneFilePhysicsV5","SceneShapeV4","SceneShapeSurfaceV4","SceneCollisionShapeV4","SceneTriggerShapeV4","SceneNamedShapeV4","SceneFilePhysicsV4","SceneShapeV3","SceneShapeSurfaceV3","SceneCollisionShapeV3","SceneTriggerShapeV3","SceneNamedShapeV3","ScenePathPhysicsV3","SceneFilePhysicsV3","SceneShapeV2","SceneCollisionShapeV2","SceneQueryShapeV2","SceneNamedShapeV2","ScenePathPhysicsV2","SceneFilePhysicsV2","SceneShapeV1","SceneCollisionShapeV1","SceneNamedShapeV1","ScenePathPhysicsV1","SceneFilePhysicsV1","SceneShapeV0","SceneCollisionShapeV0","SceneNamedShapeV0","SceneFilePhysicsV0","PackMapPhysicsNavMeshChunkV2","PackMapPhysicsNavMeshV2","PackMapPhysicsNavMeshChunkV1","PackMapPhysicsNavMeshV1","PackMapPhysicsNavMeshChunkV0","PackMapPhysicsNavMeshV0","AmatPs3ShaderConstant","AmatPs3SamplerConstant","AmatPs3FragmentShaderConfig","PackMapPropConstantV18","PackMapPropObjV21","PackMapPropObjAnimSeqV21","PackMapPropTransformV21","PackMapPropObjInstanceV21","PackMapPropObjToolV21","PackMapPropObjMetaV21","PackMapPropObjVolumeV21","PackMapPropV21","PackMapPropConstantV17","PackMapPropObjV20","PackMapPropObjAnimSeqV20","PackMapPropTransformV20","PackMapPropObjInstanceV20","PackMapPropObjToolV20","PackMapPropObjMetaV20","PackMapPropObjVolumeV20","PackMapPropV20","PackMapPropObjV19","PackMapPropObjAnimSeqV19","PackMapPropTransformV19","PackMapPropObjInstanceV19","PackMapPropObjToolV19","PackMapPropObjMetaV19","PackMapPropObjVolumeV19","PackMapPropV19","PackMapPropObjV18","PackMapPropObjAnimSeqV18","PackMapPropTransformV18","PackMapPropObjInstanceV18","PackMapPropObjToolV18","PackMapPropObjMetaV18","PackMapPropObjVolumeV18","PackMapPropV18","PackMapPropObjV17","PackMapPropObjAnimSeqV17","PackMapPropTransformV17","PackMapPropObjInstanceV17","PackMapPropObjToolV17","PackMapPropObjMetaV17","PackMapPropObjVolumeV17","PackMapPropV17","PackMapPropObjV16","PackMapPropObjAnimSeqV16","PackMapPropTransformV16","PackMapPropObjInstanceV16","PackMapPropObjToolV16","PackMapPropObjMetaV16","PackMapPropObjVolumeV16","PackMapPropV16","PackMapPropObjV15","PackMapPropObjAnimSeqV15","PackMapPropTransformV15","PackMapPropObjInstanceV15","PackMapPropObjToolV15","PackMapPropObjMetaV15","PackMapPropObjVolumeV15","PackMapPropV15","PackMapPropObjV14","PackMapPropObjAnimSeqV14","PackMapPropObjToolV14","PackMapPropObjMetaV14","PackMapPropObjVolumeV14","PackMapPropV14","PackMapPropObjV13","PackMapPropObjAnimSeqV13","PackMapPropObjToolV13","PackMapPropObjMetaV13","PackMapPropObjVolumeV13","PackMapPropV13","PackMapPropObjV12","PackMapPropObjAnimSeqV12","PackMapPropObjToolV12","PackMapPropObjMetaV12","PackMapPropObjVolumeV12","PackMapPropV12","PackMapPropObjV11","PackMapPropObjAnimSeqV11","PackMapPropObjToolV11","PackMapPropV11","PackMapPropObjV10","PackMapPropObjAnimSeqV10","PackMapPropObjToolV10","PackMapPropV10","PackMapPropObjV9","PackMapPropObjAnimSeqV9","PackMapPropObjToolV9","PackMapPropV9","PackMapPropObjV8","PackMapPropObjAnimSeqV8","PackMapPropObjToolV8","PackMapPropV8","PackMapPropObjV7","PackMapPropObjAnimSeqV7","PackMapPropObjToolV7","PackMapPropV7","PackMapPropObjV6","PackMapPropObjAnimSeqV6","PackMapPropObjToolV6","PackMapPropV6","PackMapPropObjV5","PackMapPropObjAnimSeqV5","PackMapPropObjToolV5","PackMapPropV5","PackMapPropObjV4","PackMapPropObjAnimSeqV4","PackMapPropObjToolV4","PackMapPropV4","PackMapPropObjV3","PackMapPropObjAnimSeqV3","PackMapPropObjToolV3","PackMapPropV3","ModelFixedOffsetData","ModelPropertyData","ModelFileProperties","AmatPs3VertexShaderConfig","AmatPs3RenderState","AmatPs3Pass","AmatPs3Effect","AmatPs3Sampler","AmatPs3Material","PackMapResourceMapNodeItemV1","PackMapResourceMapNodeV1","PackMapResourceMapV1","PackMapResourceMapNodeItemV0","PackMapResourceMapNodeV0","PackMapResourceMapV0","PackMapRiverProperty","MapRiverReach","MapRiver","PackMapRivers","MapRiverTextureMap","MapRiverMaterial","ModelRootMotionV1","ModelFileRootMotionV1","ModelRootMotionV0","ModelFileRootMotionV0","PackAnimSequenceChargeStageV0","PackAnimSequenceStepActionV0","PackAnimSequenceStepMoveV0","PackAnimSequenceStepV0","PackAnimSequenceTriggerV0","PackAnimSequenceDataV0","PackAnimSequenceV0","PackAnimSequencesV0","PackMapShadowTileV1","PackMapShadowV1","PackMapShadowTileV0","PackMapShadowV0","PackMapShadowExtV1","MapShoreChain","MapShore","ModelTransformData","ModelBoneData","ModelGrannySkeletonV1","ModelMeshBindingData","ModelGrannyModelV1","ModelBoneConstraintLinkV63","ModelBoneConstraintV63","PackGrannyMirrorSpecType","ModelTrackMaskV63","ModelSkeletonDataV63","ModelSkeletonOverridesV1","ModelFileSkeletonV1","ModelGrannySkeletonV0","ModelGrannyModelV0","ModelBoneConstraintLinkV62","ModelBoneConstraintV62","ModelBoneSymmetryV62","ModelTrackMaskV62","ModelSkeletonDataV62","ModelFileSkeletonV0","SceneBoneV3","SceneJointV3","SceneHingeJointV3","SceneFileSkeletonV3","SceneBoneV2","SceneJointV2","SceneHingeJointV2","SceneFileSkeletonV2","SceneBoneV1","SceneJointV1","SceneHingeJointV1","SceneUnmappedBoneV1","SceneFileSkeletonV1","SceneBoneV0","SceneJointV0","SceneUnmappedBoneV0","SceneFileSkeletonV0","MapLegacy","MapSurfaceAttribute","MapSurfaceAttributeTool","MapSurfaceOverride","MapSurfaceTerrainOverride","MapSurfacePropOverride","MapSurfaces","MapSurfaceMeta","MapSurfaceChunk","KeyEntry","KeyTableData","PackMapToolFsFileV0","PackMapToolFsV0","AmatToolConstant","AmatToolTexture","AmatToolParams","AmatToolConstantV1","AmatToolTextureV1","AmatToolParamsV1","AmatToolConstantV0","AmatToolTextureV0","AmatToolParamsV0","ModelToolCloudV16","ModelToolBlitTextureV16","ModelToolStreakV16","ModelToolLightningV16","ModelToolAnimationV16","ModelSequenceCompressionInfoV16","ModelFileToolV16","ModelToolCloudV15","ModelToolBlitTextureV15","ModelToolStreakV15","ModelToolLightningV15","ModelToolAnimationV15","ModelSequenceCompressionInfoV15","ModelFileToolV15","ModelToolCloudV14","ModelToolBlitTextureV14","ModelToolStreakV14","ModelToolLightningV14","ModelToolAnimationV14","ModelSequenceCompressionInfoV14","ModelFileToolV14","ModelToolCloudV13","ModelToolBlitTextureV13","ModelToolStreakV13","ModelToolLightningV13","ModelToolAnimationV13","ModelFileToolV13","ModelToolCloudV12","ModelToolBlitTextureV12","ModelToolStreakV12","ModelToolLightningV12","ModelToolAnimationV12","ModelFileToolV12","ModelToolCloudV11","ModelToolBlitTextureV11","ModelToolStreakV11","ModelToolLightningV11","ModelFileToolV11","ModelToolCloudV10","ModelToolBlitTextureV10","ModelToolStreakV10","ModelToolLightningV10","ModelFileToolV10","ModelToolCloudV9","ModelToolBlitTextureV9","ModelToolStreakV9","ModelToolLightningV9","ModelToolPropertyDataV9","ModelFileToolV9","ModelToolCloudV8","ModelToolBlitTextureV8","ModelToolStreakV8","ModelToolLightningV8","ModelFileToolV8","ModelToolCloudV7","ModelToolBlitTextureV7","ModelToolStreakV7","ModelToolLightningV7","ModelFileToolV7","ModelToolCloudV6","ModelToolBlitTextureV6","ModelToolStreakV6","ModelFileToolV6","ModelToolCloudV5","ModelToolMotionV5","ModelToolBlitTextureV5","ModelToolStreakV5","ModelFileToolV5","ModelToolCloudV4","ModelToolMotionV4","ModelToolBlitTextureV4","ModelToolStreakV4","ModelFileToolV4","ModelToolCloudV3","ModelToolMotionV3","ModelToolBlitTextureV3","ModelFileToolV3","ModelToolCloudV2","ModelToolMotionV2","ModelToolBlitTextureV2","ModelFileToolV2","ModelToolCloudV1","ModelToolMotionV1","ModelFileToolV1","ModelToolCloudV0","ModelFileToolV0","PackMapTerrainChunkV14","PackMapTerrainConstV14","PackMapTerrainTexV14","PackMapTerrainMaterialV14","PackMapTerrainChunkUVDataV14","PackMapTerrrainChunkMaterialV14","PackMapTerrainMaterialsV14","PackMapTerrainV14","PackMapTerrainChunkV13","PackMapTerrainConstV13","PackMapTerrainTexV13","PackMapTerrainMaterialV13","PackMapTerrainChunkUVDataV13","PackMapTerrrainChunkMaterialV13","PackMapTerrainMaterialsV13","PackMapTerrainV13","PackMapTerrainChunkV12","PackMapTerrainConstV12","PackMapTerrainTexV12","PackMapTerrainMaterialV12","PackMapTerrainChunkUVDataV12","PackMapTerrrainChunkMaterialV12","PackMapTerrainMaterialsV12","PackMapTerrainV12","PackMapTerrainChunkV11","PackMapTerrainConstV11","PackMapTerrainTexV11","PackMapTerrainMaterialV11","PackMapTerrainChunkUVDataV11","PackMapTerrrainChunkMaterialV11","PackMapTerrainMaterialsV11","PackMapTerrainV11","PackMapTerrainChunkV10","PackMapTerrainConstV10","PackMapTerrainTexV10","PackMapTerrainMaterialV10","PackMapTerrainChunkUVDataV10","PackMapTerrrainChunkMaterialV10","PackMapTerrainMaterialsV10","PackMapTerrainV10","PagedImageEmbeddedPageDataV3","PagedImageEmbeddedPagesDataV3","MapTerrainImg","PagedImageEmbeddedPageDataV2","PagedImageEmbeddedPagesDataV2","PagedImageEmbeddedPageDataV1","PagedImageEmbeddedPagesDataV1","TextPackLanguage","TextPackManifest","TextPackPassword","TextPackPasswords","TextPackVoice","TextPackVoices","AmatAppleUPDBentry","AmatAppleUPDBinfo","AmatXbxUPDBentry","AmatXbxUPDBinfo","TextPackVariant","TextPackVariants","PackMapWaterV0","AmatXbxShaderConstant","AmatXbxSamplerConstant","AmatXbxShader","AmatXbxRenderState","AmatXbxPass","AmatXbxEffect","AmatXbxSamplerState","AmatXbxMaterial","PackMapZoneModelV22","PackMapZoneLayerDefV22","PackMapZonePageV10","PackMapZonePageTableV10","PackMapZoneDefV22","PackMapZoneEncodingDataV22","PackMapZoneCollideDataV22","PackMapZoneV22","PackMapZonesV22","PackMapZoneModelV21","PackMapZoneLayerDefV21","PackMapZonePageV9","PackMapZonePageTableV9","PackMapZoneDefV21","PackMapZoneEncodingDataV21","PackMapZoneCollideDataV21","PackMapZoneV21","PackMapZonesV21","PackMapZoneModelV20","PackMapZoneLayerDefV20","PackMapZonePageV8","PackMapZonePageTableV8","PackMapZoneDefV20","PackMapZoneEncodingDataV20","PackMapZoneCollideDataV20","PackMapZoneV20","PackMapZonesV20","PackMapZoneModelV19","PackMapZoneLayerDefV19","PackMapZonePageV7","PackMapZonePageTableV7","PackMapZoneDefV19","PackMapZoneEncodingDataV19","PackMapZoneCollideDataV19","PackMapZoneV19","PackMapZonesV19","PackMapZoneModelV18","PackMapZoneLayerDefV18","PackMapZonePageV6","PackMapZonePageTableV6","PackMapZoneDefV18","PackMapZoneEncodingDataV18","PackMapZoneCollideDataV18","PackMapZoneV18","PackMapZonesV18","PackMapZoneModelV17","PackMapZoneLayerDefV17","PackMapZonePageV5","PackMapZonePageTableV5","PackMapZoneDefV17","PackMapZoneEncodingDataV17","PackMapZoneCollideDataV17","PackMapZoneV17","PackMapZonesV17","PackMapZoneModelV16","PackMapZoneLayerDefV16","PackMapZonePageV4","PackMapZonePageTableV4","PackMapZoneDefV16","PackMapZoneEncodingDataV16","PackMapZoneCollideDataV16","PackMapZoneV16","PackMapZonesV16","PackMapZoneModelV15","PackMapZoneLayerDefV15","PackMapZonePageV3","PackMapZonePageTableV3","PackMapZoneDefV15","PackMapZoneEncodingDataV15","PackMapZoneCollideDataV15","PackMapZoneV15","PackMapZonesV15","PackMapZoneModelV14","PackMapZoneLayerDefV14","PackMapZonePageV2","PackMapZonePageTableV2","PackMapZoneDefV14","PackMapZoneEncodingDataV14","PackMapZoneCollideDataV14","PackMapZoneV14","PackMapZonesV14","PackMapZoneModelV13","PackMapZoneLayerDefV13","PackMapZoneDefV13","PackMapZoneEncodingDataV13","PackMapZoneCollideDataV13","PackMapZoneV13","PackMapZonesV13","PackMapZoneModelV12","PackMapZoneLayerDefV12","PackMapZoneDefV12","PackMapZoneEncodingDataV12","PackMapZoneCollideDataV12","PackMapZoneV12","PackMapZonesV12","HEAD_STRUCT","DUPLICATE_SETTINGS","PACKTOCHUNK","root","addr","setting","regex","RegExp","chunkDef","defsIdx","defs","getRootName","pop","match","definition","genDuplicateSettings","headerLength","NaN","loadHead","useNthIndex","fileTypes","defsFound","chunkVersion","def","getDefinition","chunkDataSize","Chunk","noChunks","chunks","readHead","readChunks","ch","loadData","next","toLowerCase","buildVS","numUv","vdefs","adefs","reads","generateDataTexture","DataTexture","RGBAFormat","buildPS","textures","alphaTest","lightMap","t1uv","uvIdx","discard","writeColor","varyings","getUVMat","numUV","attributes","vs","FrontSide","getTexture","texURL","sharedTextures","finalTexture","flipY","mapping","defaultColor","random","minFilter","LinearMipMapLinearFilter","magFilter","LinearFilter","generateMipmaps","needsUpdate","getMaterial","materialFile","finalMaterial","dxChunk","grChunk","finalTextures","techniques","textureToken","samplerTex","effect","passes","effects","samplerTextures","samplerIndex","samplerIdx","sampler","samplers","texTokens","textureIndex","uvPSInputIndex","ft","nt","MeshPhongMaterial","normalMap","textureFilename","shading","FlatShading","alphaMask0","alphaMask1","lightMask","base32Max","pow","f16","h","s","Infinity","popcount","bits","arr","sort_unique","arr_in","comparator","prototype","hasOwnProperty","structDef","maxCount","struct","arr_len","arr_ptr","readType","ret_arr","orgPos","offsets","readInt32Array","pointer","ptr","stringOffset","num","fileRef","m_highPart","m_lowPart","matFiles","fvfFormat","Position","Weights","Normal","Tangent","Bitangent","TangentFrame","UV32Mask","UV16Mask","Unknown1","Unknown2","Unknown3","Unknown4","PositionCompressed","Unknown5","renderGeomChunk","modelDataChunk","showUnmaterialed","rawMeshes","mats","permutations","rawMesh","rawGeom","fvf","numVerts","vertexCount","rawVerts","vertDS","distToUV","uv32Flag","uv16Flag","isUV32","hasUV","masked","readFloat32","Uint16Array","computeVertexNormals","uvName","matIdx","materialIndex","finalMesh","materialFilename","materialName","numLods","lods","loadMeshFromModelFile","solidColor","finalMeshes","modelFile","geometryDataChunk","bsc","center","loadMaterialIndex","mIdx","matCallback","yPos","dz","cz","plane","overdraw","sharedMeshes","matFileName","ShaderChunk"],"mappings":"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A,SAGAp0B,KAAAs0B,oBACA,UACA,UACA,UACAt0B,KAAAq0B,oBACA,WACAr0B,KAAAq0B,oBACA,QACAr0B,KAAAq0B,oBACA,SACAr0B,KAAAq0B,oBACA,WACAr0B,KAAAq0B,oBACA,UACAr0B,KAAAq0B,oBACA,UACAr0B,KAAAq0B,oBACA,MACAr0B,KAAAq0B,qBAGAr0B,KAAAu0B,wBACA,OACAf,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,WACA,UACA,eACA,UACA,aACA,UACA,QACA,SACA,aACA,SACA,eACA,SACA,eACA,UAGA9zB,KAAAw0B,iBACA,OACAhB,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAs0B,oBACA,cACAd,EAAAQ,iBAAAh0B,KAAAu0B,wBACA,eACA,UACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,QACA,WACA,SAGAv0B,KAAAy0B,iBACA,OACAjB,EAAAM,iBACA,QACA,SACA,eACA,UACA,eACA,UACA,eACA,UACA,YACA,WAGA9zB,KAAA00B,uBACA,OACAlB,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA20B,iBACA,YACAnB,EAAAM,iBACA,WACAN,EAAAM,iBACA,SACA,UACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,QACA,WACA,QACA,UACA,QACA,UACA,SAGA50B,KAAA60B,sBACA,WACArB,EAAAM,iBACA,OACAN,EAAAM,iBACA,oBACAN,EAAAM,iBACA,sBACAN,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAA20B,iBACA,aACA,UACA,cACA,UACA,QACA,SACA,iBACA30B,KAAAm0B,aACA,kBACAn0B,KAAAm0B,aACA,gBACAn0B,KAAAm0B,aACA,SACAn0B,KAAAq0B,oBACA,kBACA,SAGAr0B,KAAA80B,iBACA,OACAtB,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACA,WAGA9zB,KAAA+0B,eACA,OACAvB,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAg1B,kBAAA,OAAAxB,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAi1B,iBACA,OACAzB,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA6zB,oBACA,WACAL,EAAAI,eAAA5zB,KAAAu0B,wBACA,WACA,SAGAv0B,KAAAk1B,sBAAA,OAAA1B,EAAAM,iBAAA,mBAAAN,EAAA2B,qBAEAn1B,KAAAo1B,sBACA,kBACA5B,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,YACA,UACA,kBACA,UACA,aACA,UACA,cACA,UACA,gBACA,SACA,gBACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA+zB,aACA,WACAP,EAAAI,eAAA5zB,KAAAw0B,iBACA,WACAhB,EAAAI,eAAA5zB,KAAAy0B,iBACA,iBACAjB,EAAAI,eAAA5zB,KAAA00B,uBACA,gBACAlB,EAAAI,eAAA5zB,KAAA60B,sBACA,WACArB,EAAAI,eAAA5zB,KAAA80B,iBACA,SACAtB,EAAAI,eAAA5zB,KAAA+0B,eACA,YACAvB,EAAAI,eAAA5zB,KAAAg1B,kBACA,WACAxB,EAAAI,eAAA5zB,KAAAi1B,iBACA,oBACAzB,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,oBACA,gBACApB,EAAAI,eAAA5zB,KAAAk1B,uBAGAl1B,KAAAq1B,gBACA,OACA7B,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAs1B,kBACA,WACA9B,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA2zB,YACA,cACAH,EAAAQ,iBAAAh0B,KAAAs0B,oBACA,WACAd,EAAAI,eAAA5zB,KAAA20B,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACA30B,KAAAq0B,oBACA,MACAr0B,KAAAq0B,oBACA,QACAr0B,KAAAq0B,oBACA,UACAr0B,KAAAq0B,oBACA,SACAr0B,KAAAq0B,oBACA,WACAr0B,KAAAq0B,oBACA,eACAr0B,KAAAm0B,aACA,aACAn0B,KAAAm0B,aACA,sBACAn0B,KAAAm0B,aACA,gBACAn0B,KAAAm0B,aACA,cACAn0B,KAAAm0B,aACA,aACAn0B,KAAAm0B,aACA,cACAn0B,KAAAm0B,aACA,kBACAn0B,KAAAm0B,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAn0B,KAAAu1B,sBACA,MACA/B,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAw1B,mBACA,OACAhC,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAu1B,uBAGAv1B,KAAAy1B,OAAAz1B,KAAA01B,mBACA,WACAlC,EAAAM,iBACA,iBACAN,EAAAM,iBACA,WACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAo1B,sBACA,UACA5B,EAAAI,eAAA5zB,KAAAq1B,gBACA,YACA7B,EAAAI,eAAA5zB,KAAAs1B,kBACA,YACA9B,EAAAI,eAAA5zB,KAAAg1B,kBACA,aACAxB,EAAAI,eAAA5zB,KAAAw1B,mBACA,WACAhC,EAAAI,eAAA5zB,KAAA80B,iBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,QACA,oBACA,QACA,gBACA,UAKAa,GAAA,WACA31B,KAAA41B,YAAA,OAAA,SAAA,QAAA,SAAA,WAAApC,EAAAI,eAAA,YAEA5zB,KAAA61B,oBACA,OACArC,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAA41B,aAGA51B,KAAA81B,aACA,OACAtC,EAAAM,iBACA,SACAN,EAAAM,iBACA,QACA,SACA,oBACA,UACA,qBACA,UACA,kBACA,UACA,sBACA,UACA,mBACA,UACA,oBACA,UACA,uBACA,UACA,cACAN,EAAAQ,iBAAAh0B,KAAA61B,qBAGA71B,KAAA+1B,sBAAA,SAAA,UAAA,QAAA,WAEA/1B,KAAAg2B,iBACA,kBACAxC,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA+1B,sBACA,aACA,SAGA/1B,KAAAi2B,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAj2B,KAAAk2B,oBAAA,OAAAl2B,KAAAi2B,aAAA,QAAAj2B,KAAAi2B,cAEAj2B,KAAAm2B,qBACA,eACA3C,EAAAQ,iBAAAh0B,KAAAg2B,iBACA,kBACAxC,EAAAQ,iBAAAh0B,KAAAk2B,oBACA,QACA,UACA,OACA,SAGAl2B,KAAAo2B,oBACA,UACA,UACA,UACAp2B,KAAAm2B,oBACA,WACAn2B,KAAAm2B,oBACA,QACAn2B,KAAAm2B,oBACA,SACAn2B,KAAAm2B,oBACA,WACAn2B,KAAAm2B,oBACA,UACAn2B,KAAAm2B,oBACA,UACAn2B,KAAAm2B,oBACA,MACAn2B,KAAAm2B,qBAGAn2B,KAAAq2B,wBACA,OACA7C,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,WACA,UACA,eACA,UACA,aACA,UACA,QACA,SACA,aACA,SACA,eACA,SACA,eACA,UAGA9zB,KAAAs2B,iBACA,OACA9C,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAo2B,oBACA,cACA5C,EAAAQ,iBAAAh0B,KAAAq2B,wBACA,eACA,UACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,QACA,WACA,SAGAr2B,KAAAu2B,iBACA,OACA/C,EAAAM,iBACA,QACA,SACA,eACA,UACA,eACA,UACA,eACA,UACA,YACA,WAGA9zB,KAAAw2B,uBACA,OACAhD,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAy2B,iBACA,YACAjD,EAAAM,iBACA,WACAN,EAAAM,iBACA,SACA,UACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,QACA,WACA,QACA,UACA,QACA,UACA,SAGA50B,KAAA02B,sBACA,WACAlD,EAAAM,iBACA,OACAN,EAAAM,iBACA,oBACAN,EAAAM,iBACA,sBACAN,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAy2B,iBACA,aACA,UACA,cACA,UACA,QACA,SACA,iBACAz2B,KAAAi2B,aACA,kBACAj2B,KAAAi2B,aACA,gBACAj2B,KAAAi2B,aACA,SACAj2B,KAAAm2B,oBACA,kBACA,SAGAn2B,KAAA22B,iBACA,OACAnD,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACA,WAGA9zB,KAAA42B,eACA,OACApD,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAA62B,kBAAA,OAAArD,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA82B,iBACA,OACAtD,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA61B,oBACA,WACArC,EAAAI,eAAA5zB,KAAAq2B,wBACA,WACA,SAGAr2B,KAAA+2B,sBACA,kBACAvD,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,YACA,UACA,kBACA,UACA,aACA,UACA,cACA,UACA,gBACA,SACA,gBACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA81B,aACA,WACAtC,EAAAI,eAAA5zB,KAAAs2B,iBACA,WACA9C,EAAAI,eAAA5zB,KAAAu2B,iBACA,iBACA/C,EAAAI,eAAA5zB,KAAAw2B,uBACA,gBACAhD,EAAAI,eAAA5zB,KAAA02B,sBACA,WACAlD,EAAAI,eAAA5zB,KAAA22B,iBACA,SACAnD,EAAAI,eAAA5zB,KAAA42B,eACA,YACApD,EAAAI,eAAA5zB,KAAA62B,kBACA,WACArD,EAAAI,eAAA5zB,KAAA82B,iBACA,oBACAtD,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAg3B,gBACA,OACAxD,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAi3B,kBACA,WACAzD,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA41B,YACA,cACApC,EAAAQ,iBAAAh0B,KAAAo2B,oBACA,WACA5C,EAAAI,eAAA5zB,KAAAy2B,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACAz2B,KAAAm2B,oBACA,MACAn2B,KAAAm2B,oBACA,QACAn2B,KAAAm2B,oBACA,UACAn2B,KAAAm2B,oBACA,SACAn2B,KAAAm2B,oBACA,WACAn2B,KAAAm2B,oBACA,eACAn2B,KAAAi2B,aACA,aACAj2B,KAAAi2B,aACA,sBACAj2B,KAAAi2B,aACA,gBACAj2B,KAAAi2B,aACA,cACAj2B,KAAAi2B,aACA,aACAj2B,KAAAi2B,aACA,cACAj2B,KAAAi2B,aACA,kBACAj2B,KAAAi2B,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAj2B,KAAAk3B,sBACA,MACA1D,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAm3B,mBACA,OACA3D,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAk3B,uBAGAl3B,KAAAy1B,OAAAz1B,KAAAo3B,mBACA,WACA5D,EAAAM,iBACA,iBACAN,EAAAM,iBACA,WACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAA+2B,sBACA,UACAvD,EAAAI,eAAA5zB,KAAAg3B,gBACA,YACAxD,EAAAI,eAAA5zB,KAAAi3B,kBACA,YACAzD,EAAAI,eAAA5zB,KAAA62B,kBACA,aACArD,EAAAI,eAAA5zB,KAAAm3B,mBACA,WACA3D,EAAAI,eAAA5zB,KAAA22B,iBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,QACA,oBACA,QACA,gBACA,UAKAU,GAAA,WACAr3B,KAAAs3B,YAAA,OAAA,SAAA,QAAA,SAAA,WAAA9D,EAAAI,eAAA,YAEA5zB,KAAAu3B,oBACA,OACA/D,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAs3B,aAGAt3B,KAAAw3B,aACA,OACAhE,EAAAM,iBACA,SACAN,EAAAM,iBACA,QACA,SACA,oBACA,UACA,qBACA,UACA,kBACA,UACA,sBACA,UACA,mBACA,UACA,oBACA,UACA,uBACA,UACA,cACAN,EAAAQ,iBAAAh0B,KAAAu3B,qBAGAv3B,KAAAy3B,sBAAA,SAAA,UAAA,QAAA,WAEAz3B,KAAA03B,iBACA,kBACAlE,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAy3B,sBACA,aACA,SAGAz3B,KAAA23B,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA33B,KAAA43B,oBAAA,OAAA53B,KAAA23B,aAAA,QAAA33B,KAAA23B,cAEA33B,KAAA63B,qBACA,eACArE,EAAAQ,iBAAAh0B,KAAA03B,iBACA,kBACAlE,EAAAQ,iBAAAh0B,KAAA43B,oBACA,QACA,UACA,OACA,SAGA53B,KAAA83B,oBACA,UACA,UACA,UACA93B,KAAA63B,oBACA,WACA73B,KAAA63B,oBACA,QACA73B,KAAA63B,oBACA,SACA73B,KAAA63B,oBACA,WACA73B,KAAA63B,oBACA,UACA73B,KAAA63B,oBACA,UACA73B,KAAA63B,oBACA,MACA73B,KAAA63B,qBAGA73B,KAAA+3B,wBACA,OACAvE,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,WACA,UACA,eACA,UACA,aACA,UACA,QACA,SACA,aACA,SACA,eACA,SACA,eACA,UAGA9zB,KAAAg4B,iBACA,OACAxE,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA83B,oBACA,cACAtE,EAAAQ,iBAAAh0B,KAAA+3B,wBACA,eACA,UACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,QACA,WACA,SAGA/3B,KAAAi4B,iBACA,OACAzE,EAAAM,iBACA,QACA,SACA,eACA,UACA,eACA,UACA,eACA,UACA,YACA,WAGA9zB,KAAAk4B,uBACA,OACA1E,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAm4B,iBACA,YACA3E,EAAAM,iBACA,WACAN,EAAAM,iBACA,SACA,UACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,QACA,WACA,QACA,UACA,QACA,UACA,SAGA50B,KAAAo4B,sBACA,WACA5E,EAAAM,iBACA,OACAN,EAAAM,iBACA,oBACAN,EAAAM,iBACA,sBACAN,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAm4B,iBACA,aACA,UACA,cACA,UACA,QACA,SACA,iBACAn4B,KAAA23B,aACA,kBACA33B,KAAA23B,aACA,gBACA33B,KAAA23B,aACA,SACA33B,KAAA63B,oBACA,kBACA,SAGA73B,KAAAq4B,iBACA,OACA7E,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACA,WAGA9zB,KAAAs4B,eACA,OACA9E,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAu4B,kBAAA,OAAA/E,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAw4B,iBACA,OACAhF,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAu3B,oBACA,WACA/D,EAAAI,eAAA5zB,KAAA+3B,wBACA,WACA,SAGA/3B,KAAAy4B,sBACA,kBACAjF,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,YACA,UACA,kBACA,UACA,aACA,UACA,cACA,UACA,gBACA,SACA,gBACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAw3B,aACA,WACAhE,EAAAI,eAAA5zB,KAAAg4B,iBACA,WACAxE,EAAAI,eAAA5zB,KAAAi4B,iBACA,iBACAzE,EAAAI,eAAA5zB,KAAAk4B,uBACA,gBACA1E,EAAAI,eAAA5zB,KAAAo4B,sBACA,WACA5E,EAAAI,eAAA5zB,KAAAq4B,iBACA,SACA7E,EAAAI,eAAA5zB,KAAAs4B,eACA,YACA9E,EAAAI,eAAA5zB,KAAAu4B,kBACA,WACA/E,EAAAI,eAAA5zB,KAAAw4B,iBACA,oBACAhF,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAA04B,gBACA,OACAlF,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA24B,kBACA,WACAnF,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAs3B,YACA,cACA9D,EAAAQ,iBAAAh0B,KAAA83B,oBACA,WACAtE,EAAAI,eAAA5zB,KAAAm4B,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACAn4B,KAAA63B,oBACA,MACA73B,KAAA63B,oBACA,QACA73B,KAAA63B,oBACA,UACA73B,KAAA63B,oBACA,SACA73B,KAAA63B,oBACA,WACA73B,KAAA63B,oBACA,eACA73B,KAAA23B,aACA,aACA33B,KAAA23B,aACA,sBACA33B,KAAA23B,aACA,gBACA33B,KAAA23B,aACA,cACA33B,KAAA23B,aACA,aACA33B,KAAA23B,aACA,kBACA33B,KAAA23B,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA33B,KAAA44B,sBACA,MACApF,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA64B,mBACA,OACArF,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA44B,uBAGA54B,KAAAy1B,OAAAz1B,KAAA84B,mBACA,WACAtF,EAAAM,iBACA,iBACAN,EAAAM,iBACA,WACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAy4B,sBACA,UACAjF,EAAAI,eAAA5zB,KAAA04B,gBACA,YACAlF,EAAAI,eAAA5zB,KAAA24B,kBACA,YACAnF,EAAAI,eAAA5zB,KAAAu4B,kBACA,aACA/E,EAAAI,eAAA5zB,KAAA64B,mBACA,WACArF,EAAAI,eAAA5zB,KAAAq4B,iBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,QACA,oBACA,UAKAU,GAAA,WACA/4B,KAAAg5B,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAxF,EAAAI,eAAA,YAEA5zB,KAAAi5B,oBACA,OACAzF,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAg5B,aAGAh5B,KAAAk5B,aACA,OACA1F,EAAAM,iBACA,SACAN,EAAAM,iBACA,QACA,SACA,oBACA,UACA,qBACA,UACA,kBACA,UACA,sBACA,UACA,mBACA,UACA,oBACA,UACA,uBACA,UACA,cACAN,EAAAQ,iBAAAh0B,KAAAi5B,qBAGAj5B,KAAAm5B,sBAAA,SAAA,UAAA,QAAA,WAEAn5B,KAAAo5B,iBACA,kBACA5F,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAm5B,sBACA,aACA,SAGAn5B,KAAAq5B,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAr5B,KAAAs5B,oBAAA,OAAAt5B,KAAAq5B,aAAA,QAAAr5B,KAAAq5B,cAEAr5B,KAAAu5B,qBACA,eACA/F,EAAAQ,iBAAAh0B,KAAAo5B,iBACA,kBACA5F,EAAAQ,iBAAAh0B,KAAAs5B,oBACA,QACA,UACA,OACA,SAGAt5B,KAAAw5B,oBACA,UACA,UACA,UACAx5B,KAAAu5B,oBACA,WACAv5B,KAAAu5B,oBACA,QACAv5B,KAAAu5B,oBACA,SACAv5B,KAAAu5B,oBACA,WACAv5B,KAAAu5B,oBACA,UACAv5B,KAAAu5B,oBACA,UACAv5B,KAAAu5B,oBACA,MACAv5B,KAAAu5B,qBAGAv5B,KAAAy5B,wBACA,OACAjG,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,WACA,UACA,eACA,UACA,aACA,UACA,QACA,SACA,aACA,SACA,eACA,SACA,eACA,UAGA9zB,KAAA05B,iBACA,OACAlG,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAw5B,oBACA,cACAhG,EAAAQ,iBAAAh0B,KAAAy5B,wBACA,eACA,UACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,QACA,WACA,SAGAz5B,KAAA25B,iBACA,OACAnG,EAAAM,iBACA,QACA,SACA,eACA,UACA,eACA,UACA,eACA,UACA,YACA,WAGA9zB,KAAA45B,uBACA,OACApG,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA65B,iBACA,YACArG,EAAAM,iBACA,WACAN,EAAAM,iBACA,SACA,UACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,QACA,WACA,QACA,UACA,QACA,UACA,SAGA50B,KAAA85B,sBACA,WACAtG,EAAAM,iBACA,OACAN,EAAAM,iBACA,oBACAN,EAAAM,iBACA,sBACAN,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAA65B,iBACA,aACA,UACA,cACA,UACA,QACA,SACA,iBACA75B,KAAAq5B,aACA,kBACAr5B,KAAAq5B,aACA,gBACAr5B,KAAAq5B,aACA,SACAr5B,KAAAu5B,oBACA,kBACA,SAGAv5B,KAAA+5B,eACA,OACAvG,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAg6B,iBACA,OACAxG,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAi5B,oBACA,WACAzF,EAAAI,eAAA5zB,KAAAy5B,wBACA,WACA,SAGAz5B,KAAAi6B,sBACA,kBACAzG,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,aACA,UACA,cACA,UACA,gBACA,SACA,gBACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAk5B,aACA,WACA1F,EAAAI,eAAA5zB,KAAA05B,iBACA,WACAlG,EAAAI,eAAA5zB,KAAA25B,iBACA,iBACAnG,EAAAI,eAAA5zB,KAAA45B,uBACA,gBACApG,EAAAI,eAAA5zB,KAAA85B,sBACA,SACAtG,EAAAI,eAAA5zB,KAAA+5B,eACA,WACAvG,EAAAI,eAAA5zB,KAAAg6B,iBACA,oBACAxG,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAk6B,gBACA,OACA1G,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAm6B,kBACA,WACA3G,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAg5B,YACA,cACAxF,EAAAQ,iBAAAh0B,KAAAw5B,oBACA,WACAhG,EAAAI,eAAA5zB,KAAA65B,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACA75B,KAAAu5B,oBACA,MACAv5B,KAAAu5B,oBACA,QACAv5B,KAAAu5B,oBACA,UACAv5B,KAAAu5B,oBACA,SACAv5B,KAAAu5B,oBACA,WACAv5B,KAAAu5B,oBACA,eACAv5B,KAAAq5B,aACA,aACAr5B,KAAAq5B,aACA,sBACAr5B,KAAAq5B,aACA,gBACAr5B,KAAAq5B,aACA,cACAr5B,KAAAq5B,aACA,aACAr5B,KAAAq5B,aACA,kBACAr5B,KAAAq5B,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAr5B,KAAAo6B,kBAAA,OAAA5G,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAq6B,sBACA,MACA7G,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAs6B,mBACA,OACA9G,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAq6B,uBAGAr6B,KAAAy1B,OAAAz1B,KAAAu6B,mBACA,WACA/G,EAAAM,iBACA,iBACAN,EAAAM,iBACA,WACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAi6B,sBACA,UACAzG,EAAAI,eAAA5zB,KAAAk6B,gBACA,YACA1G,EAAAI,eAAA5zB,KAAAm6B,kBACA,YACA3G,EAAAI,eAAA5zB,KAAAo6B,kBACA,aACA5G,EAAAI,eAAA5zB,KAAAs6B,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,QACA,oBACA,UAKAE,GAAA,WACAx6B,KAAAy6B,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAjH,EAAAI,eAAA,YAEA5zB,KAAA06B,oBACA,OACAlH,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAy6B,aAGAz6B,KAAA26B,aACA,OACAnH,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA06B,qBAGA16B,KAAA46B,sBAAA,SAAA,UAAA,QAAA,WAEA56B,KAAA66B,iBACA,kBACArH,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA46B,sBACA,aACA,SAGA56B,KAAA86B,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA96B,KAAA+6B,oBAAA,OAAA/6B,KAAA86B,aAAA,QAAA96B,KAAA86B,cAEA96B,KAAAg7B,qBACA,eACAxH,EAAAQ,iBAAAh0B,KAAA66B,iBACA,kBACArH,EAAAQ,iBAAAh0B,KAAA+6B,oBACA,QACA,UACA,OACA,SAGA/6B,KAAAi7B,oBACA,UACA,UACA,UACAj7B,KAAAg7B,oBACA,WACAh7B,KAAAg7B,oBACA,QACAh7B,KAAAg7B,oBACA,SACAh7B,KAAAg7B,oBACA,WACAh7B,KAAAg7B,oBACA,UACAh7B,KAAAg7B,oBACA,UACAh7B,KAAAg7B,qBAGAh7B,KAAAk7B,wBACA,OACA1H,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,WACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAm7B,iBACA,OACA3H,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAi7B,oBACA,cACAzH,EAAAQ,iBAAAh0B,KAAAk7B,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAl7B,KAAAo7B,iBACA,OACA5H,EAAAM,iBACA,QACA,SACA,eACA,UACA,eACA,UACA,eACA,UACA,YACA,WAGA9zB,KAAAq7B,uBACA,OACA7H,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAs7B,iBACA,YACA9H,EAAAM,iBACA,WACAN,EAAAM,iBACA,SACA,UACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,QACA,WACA,QACA,UACA,QACA,UACA,SAGA50B,KAAAu7B,sBACA,WACA/H,EAAAM,iBACA,OACAN,EAAAM,iBACA,oBACAN,EAAAM,iBACA,sBACAN,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAs7B,iBACA,aACA,UACA,cACA,UACA,QACA,SACA,iBACAt7B,KAAA86B,aACA,kBACA96B,KAAA86B,aACA,gBACA96B,KAAA86B,aACA,SACA96B,KAAAg7B,oBACA,kBACA,SAGAh7B,KAAAw7B,eACA,OACAhI,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAy7B,iBACA,OACAjI,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA06B,oBACA,WACAlH,EAAAI,eAAA5zB,KAAAk7B,wBACA,WACA,SAGAl7B,KAAA07B,sBACA,kBACAlI,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAA26B,aACA,WACAnH,EAAAI,eAAA5zB,KAAAm7B,iBACA,WACA3H,EAAAI,eAAA5zB,KAAAo7B,iBACA,iBACA5H,EAAAI,eAAA5zB,KAAAq7B,uBACA,gBACA7H,EAAAI,eAAA5zB,KAAAu7B,sBACA,SACA/H,EAAAI,eAAA5zB,KAAAw7B,eACA,WACAhI,EAAAI,eAAA5zB,KAAAy7B,iBACA,oBACAjI,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAA27B,gBACA,OACAnI,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA47B,kBACA,WACApI,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAy6B,YACA,cACAjH,EAAAQ,iBAAAh0B,KAAAi7B,oBACA,WACAzH,EAAAI,eAAA5zB,KAAAs7B,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACAt7B,KAAAg7B,oBACA,MACAh7B,KAAAg7B,oBACA,QACAh7B,KAAAg7B,oBACA,UACAh7B,KAAAg7B,oBACA,SACAh7B,KAAAg7B,oBACA,WACAh7B,KAAAg7B,oBACA,eACAh7B,KAAA86B,aACA,aACA96B,KAAA86B,aACA,sBACA96B,KAAA86B,aACA,gBACA96B,KAAA86B,aACA,cACA96B,KAAA86B,aACA,aACA96B,KAAA86B,aACA,kBACA96B,KAAA86B,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA96B,KAAA67B,kBAAA,OAAArI,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA87B,sBACA,MACAtI,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA+7B,mBACA,OACAvI,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA87B,uBAGA97B,KAAAy1B,OAAAz1B,KAAAg8B,mBACA,WACAxI,EAAAM,iBACA,iBACAN,EAAAM,iBACA,WACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAA07B,sBACA,UACAlI,EAAAI,eAAA5zB,KAAA27B,gBACA,YACAnI,EAAAI,eAAA5zB,KAAA47B,kBACA,YACApI,EAAAI,eAAA5zB,KAAA67B,kBACA,aACArI,EAAAI,eAAA5zB,KAAA+7B,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,QACA,oBACA,UAKAE,GAAA,WACAj8B,KAAAk8B,YAAA,OAAA,SAAA,QAAA,SAAA,WAAA1I,EAAAI,eAAA,YAEA5zB,KAAAm8B,oBACA,OACA3I,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAk8B,aAGAl8B,KAAAo8B,aACA,OACA5I,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAm8B,qBAGAn8B,KAAAq8B,sBAAA,SAAA,UAAA,QAAA,WAEAr8B,KAAAs8B,iBACA,kBACA9I,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAq8B,sBACA,aACA,SAGAr8B,KAAAu8B,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAv8B,KAAAw8B,oBAAA,OAAAx8B,KAAAu8B,aAAA,QAAAv8B,KAAAu8B,cAEAv8B,KAAAy8B,qBACA,eACAjJ,EAAAQ,iBAAAh0B,KAAAs8B,iBACA,kBACA9I,EAAAQ,iBAAAh0B,KAAAw8B,oBACA,QACA,UACA,OACA,SAGAx8B,KAAA08B,oBACA,UACA,UACA,UACA18B,KAAAy8B,oBACA,WACAz8B,KAAAy8B,oBACA,QACAz8B,KAAAy8B,oBACA,SACAz8B,KAAAy8B,oBACA,WACAz8B,KAAAy8B,oBACA,UACAz8B,KAAAy8B,oBACA,UACAz8B,KAAAy8B,qBAGAz8B,KAAA28B,wBACA,OACAnJ,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,WACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAA48B,iBACA,OACApJ,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA08B,oBACA,cACAlJ,EAAAQ,iBAAAh0B,KAAA28B,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGA38B,KAAA68B,uBACA,OACArJ,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA88B,iBACA,YACAtJ,EAAAM,iBACA,WACAN,EAAAM,iBACA,SACA,UACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,QACA,WACA,QACA,UACA,QACA,UACA,SAGA50B,KAAA+8B,sBACA,WACAvJ,EAAAM,iBACA,OACAN,EAAAM,iBACA,oBACAN,EAAAM,iBACA,sBACAN,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAA88B,iBACA,aACA,UACA,cACA,UACA,QACA,SACA,iBACA98B,KAAAu8B,aACA,kBACAv8B,KAAAu8B,aACA,gBACAv8B,KAAAu8B,aACA,SACAv8B,KAAAy8B,oBACA,kBACA,SAGAz8B,KAAAg9B,eACA,OACAxJ,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAi9B,iBACA,OACAzJ,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAm8B,oBACA,WACA3I,EAAAI,eAAA5zB,KAAA28B,wBACA,WACA,SAGA38B,KAAAk9B,sBACA,kBACA1J,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAo8B,aACA,WACA5I,EAAAI,eAAA5zB,KAAA48B,iBACA,iBACApJ,EAAAI,eAAA5zB,KAAA68B,uBACA,gBACArJ,EAAAI,eAAA5zB,KAAA+8B,sBACA,SACAvJ,EAAAI,eAAA5zB,KAAAg9B,eACA,WACAxJ,EAAAI,eAAA5zB,KAAAi9B,iBACA,oBACAzJ,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAm9B,gBACA,OACA3J,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAo9B,kBACA,WACA5J,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAk8B,YACA,cACA1I,EAAAQ,iBAAAh0B,KAAA08B,oBACA,WACAlJ,EAAAI,eAAA5zB,KAAA88B,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACA98B,KAAAy8B,oBACA,MACAz8B,KAAAy8B,oBACA,QACAz8B,KAAAy8B,oBACA,UACAz8B,KAAAy8B,oBACA,SACAz8B,KAAAy8B,oBACA,WACAz8B,KAAAy8B,oBACA,eACAz8B,KAAAu8B,aACA,aACAv8B,KAAAu8B,aACA,sBACAv8B,KAAAu8B,aACA,gBACAv8B,KAAAu8B,aACA,cACAv8B,KAAAu8B,aACA,aACAv8B,KAAAu8B,aACA,kBACAv8B,KAAAu8B,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAv8B,KAAAq9B,kBAAA,OAAA7J,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAs9B,sBACA,MACA9J,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAu9B,mBACA,OACA/J,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAs9B,uBAGAt9B,KAAAy1B,OAAAz1B,KAAAw9B,mBACA,WACAhK,EAAAM,iBACA,iBACAN,EAAAM,iBACA,WACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAk9B,sBACA,UACA1J,EAAAI,eAAA5zB,KAAAm9B,gBACA,YACA3J,EAAAI,eAAA5zB,KAAAo9B,kBACA,YACA5J,EAAAI,eAAA5zB,KAAAq9B,kBACA,aACA7J,EAAAI,eAAA5zB,KAAAu9B,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,QACA,oBACA,UAKAE,GAAA,WACAz9B,KAAA09B,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAlK,EAAAI,eAAA,YAEA5zB,KAAA29B,oBACA,OACAnK,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAA09B,aAGA19B,KAAA49B,aACA,OACApK,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA29B,qBAGA39B,KAAA69B,sBAAA,SAAA,UAAA,QAAA,WAEA79B,KAAA89B,iBACA,kBACAtK,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA69B,sBACA,aACA,SAGA79B,KAAA+9B,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA/9B,KAAAg+B,oBAAA,OAAAh+B,KAAA+9B,aAAA,QAAA/9B,KAAA+9B,cAEA/9B,KAAAi+B,qBACA,eACAzK,EAAAQ,iBAAAh0B,KAAA89B,iBACA,kBACAtK,EAAAQ,iBAAAh0B,KAAAg+B,oBACA,QACA,UACA,OACA,SAGAh+B,KAAAk+B,oBACA,UACA,UACA,UACAl+B,KAAAi+B,oBACA,WACAj+B,KAAAi+B,oBACA,QACAj+B,KAAAi+B,oBACA,SACAj+B,KAAAi+B,oBACA,WACAj+B,KAAAi+B,oBACA,UACAj+B,KAAAi+B,oBACA,UACAj+B,KAAAi+B,qBAGAj+B,KAAAm+B,wBACA,OACA3K,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,WACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAo+B,iBACA,OACA5K,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAk+B,oBACA,cACA1K,EAAAQ,iBAAAh0B,KAAAm+B,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAn+B,KAAAq+B,uBACA,OACA7K,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAs+B,iBACA,YACA9K,EAAAM,iBACA,WACAN,EAAAM,iBACA,SACA,UACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAu+B,sBACA,WACA/K,EAAAM,iBACA,OACAN,EAAAM,iBACA,oBACAN,EAAAM,iBACA,sBACAN,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAs+B,iBACA,aACA,UACA,cACA,UACA,QACA,SACA,iBACAt+B,KAAA+9B,aACA,kBACA/9B,KAAA+9B,aACA,gBACA/9B,KAAA+9B,aACA,SACA/9B,KAAAi+B,oBACA,kBACA,SAGAj+B,KAAAw+B,eACA,OACAhL,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAy+B,iBACA,OACAjL,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA29B,oBACA,WACAnK,EAAAI,eAAA5zB,KAAAm+B,wBACA,WACA,SAGAn+B,KAAA0+B,sBACA,kBACAlL,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAA49B,aACA,WACApK,EAAAI,eAAA5zB,KAAAo+B,iBACA,iBACA5K,EAAAI,eAAA5zB,KAAAq+B,uBACA,gBACA7K,EAAAI,eAAA5zB,KAAAu+B,sBACA,SACA/K,EAAAI,eAAA5zB,KAAAw+B,eACA,WACAhL,EAAAI,eAAA5zB,KAAAy+B,iBACA,oBACAjL,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAA2+B,gBACA,OACAnL,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA4+B,kBACA,WACApL,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA09B,YACA,cACAlK,EAAAQ,iBAAAh0B,KAAAk+B,oBACA,WACA1K,EAAAI,eAAA5zB,KAAAs+B,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACAt+B,KAAAi+B,oBACA,MACAj+B,KAAAi+B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CA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAigC,iBACA,OACAzM,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAm/B,oBACA,WACA3L,EAAAI,eAAA5zB,KAAA2/B,wBACA,WACA,SAGA3/B,KAAAkgC,sBACA,kBACA1M,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAo/B,aACA,WACA5L,EAAAI,eAAA5zB,KAAA4/B,iBACA,iBACApM,EAAAI,eAAA5zB,KAAA6/B,uBACA,gBACArM,EAAAI,eAAA5zB,KAAA+/B,sBACA,SACAvM,EAAAI,eAAA5zB,KAAAggC,eACA,WACAxM,EAAAI,eAAA5zB,KAAAigC,iBACA,oBACAzM,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAmgC,gBACA,OACA3M,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAogC,kBACA,WACA5M,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAk/B,YACA,cACA1L,EAAAQ,iBAAAh0B,KAAA0/B,oBACA,WACAlM,EAAAI,eAAA5zB,KAAA8/B,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACA9/B,KAAAy/B,oBACA,MACAz/B,KAAAy/B,oBACA,QACAz/B,KAAAy/B,oBACA,UACAz/B,KAAAy/B,oBACA,SACAz/B,KAAAy/B,oBACA,WACAz/B,KAAAy/B,oBACA,eACAz/B,KAAAu/B,aACA,aACAv/B,KAAAu/B,aACA,sBACAv/B,KAAAu/B,aACA,gBACAv/B,KAAAu/B,aACA,cACAv/B,KAAAu/B,aACA,aACAv/B,KAAAu/B,aACA,kBACAv/B,KAAAu/B,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAv/B,KAAAqgC,kBAAA,OAAA7M,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAsgC,sBACA,MACA9M,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAugC,mBACA,OACA/M,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAsgC,uBAGAtgC,KAAAy1B,OAAAz1B,KAAAwgC,mBACA,WACAhN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,WACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAkgC,sBACA,UACA1M,EAAAI,eAAA5zB,KAAAmgC,gBACA,YACA3M,EAAAI,eAAA5zB,KAAAogC,kBACA,YACA5M,EAAAI,eAAA5zB,KAAAqgC,kBACA,aACA7M,EAAAI,eAAA5zB,KAAAugC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACAzgC,KAAA0gC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAlN,EAAAI,eAAA,YAEA5zB,KAAA2gC,oBACA,OACAnN,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAA0gC,aAGA1gC,KAAA4gC,aACA,OACApN,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA2gC,qBAGA3gC,KAAA6gC,sBAAA,SAAA,UAAA,QAAA,WAEA7gC,KAAA8gC,iBACA,kBACAtN,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA6gC,sBACA,aACA,SAGA7gC,KAAA+gC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA/gC,KAAAghC,oBAAA,OAAAhhC,KAAA+gC,aAAA,QAAA/gC,KAAA+gC,cAEA/gC,KAAAihC,qBACA,eACAzN,EAAAQ,iBAAAh0B,KAAA8gC,iBACA,kBACAtN,EAAAQ,iBAAAh0B,KAAAghC,oBACA,QACA,UACA,OACA,SAGAhhC,KAAAkhC,oBACA,UACA,UACA,UACAlhC,KAAAihC,oBACA,QACAjhC,KAAAihC,oBACA,SACAjhC,KAAAihC,oBACA,WACAjhC,KAAAihC,oBACA,UACAjhC,KAAAihC,oBACA,UACAjhC,KAAAihC,qBAGAjhC,KAAAmhC,wBACA,OACA3N,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAohC,iBACA,OACA5N,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAkhC,oBACA,cACA1N,EAAAQ,iBAAAh0B,KAAAmhC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAnhC,KAAAqhC,uBACA,OACA7N,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAshC,iBACA,YACA9N,EAAAM,iBACA,WACAN,EAAAM,iBACA,SACA,UACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAuhC,sBACA,WACA/N,EAAAM,iBACA,OACAN,EAAAM,iBACA,oBACAN,EAAAM,iBACA,sBACAN,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAshC,iBACA,aACA,UACA,cACA,UACA,QACA,SACA,iBACAthC,KAAA+gC,aACA,kBACA/gC,KAAA+gC,aACA,gBACA/gC,KAAA+gC,aACA,SACA/gC,KAAAihC,oBACA,kBACA,SAGAjhC,KAAAwhC,eACA,OACAhO,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAyhC,iBACA,OACAjO,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA2gC,oBACA,WACAnN,EAAAI,eAAA5zB,KAAAmhC,wBACA,WACA,SAGAnhC,KAAA0hC,sBACA,kBACAlO,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAA4gC,aACA,WACApN,EAAAI,eAAA5zB,KAAAohC,iBACA,iBACA5N,EAAAI,eAAA5zB,KAAAqhC,uBACA,gBACA7N,EAAAI,eAAA5zB,KAAAuhC,sBACA,SACA/N,EAAAI,eAAA5zB,KAAAwhC,eACA,WACAhO,EAAAI,eAAA5zB,KAAAyhC,iBACA,oBACAjO,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAA2hC,gBACA,OACAnO,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA4hC,kBACA,WACApO,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA0gC,YACA,cACAlN,EAAAQ,iBAAAh0B,KAAAkhC,oBACA,WACA1N,EAAAI,eAAA5zB,KAAAshC,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACAthC,KAAAihC,oBACA,MACAjhC,KAAAihC,oBACA,QACAjhC,KAAAihC,oBACA,UACAjhC,KAAAihC,oBACA,SACAjhC,KAAAihC,oBACA,WACAjhC,KAAAihC,oBACA,eACAjhC,KAAA+gC,aACA,aACA/gC,KAAA+gC,aACA,sBACA/gC,KAAA+gC,aACA,gBACA/gC,KAAA+gC,aACA,cACA/gC,KAAA+gC,aACA,aACA/gC,KAAA+gC,aACA,kBACA/gC,KAAA+gC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA/gC,KAAA6hC,kBAAA,OAAArO,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA8hC,sBACA,MACAtO,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA+hC,mBACA,OACAvO,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA8hC,uBAGA9hC,KAAAy1B,OAAAz1B,KAAAgiC,mBACA,WACAxO,EAAAM,iBACA,iBACAN,EAAAM,iBACA,WACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAA0hC,sBACA,UACAlO,EAAAI,eAAA5zB,KAAA2hC,gBACA,YACAnO,EAAAI,eAAA5zB,KAAA4hC,kBACA,YACApO,EAAAI,eAAA5zB,KAAA6hC,kBACA,aACArO,EAAAI,eAAA5zB,KAAA+hC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACAjiC,KAAAkiC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAA1O,EAAAI,eAAA,YAEA5zB,KAAAmiC,oBACA,OACA3O,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAkiC,aAGAliC,KAAAoiC,aACA,OACA5O,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAmiC,qBAGAniC,KAAAqiC,sBAAA,SAAA,UAAA,QAAA,WAEAriC,KAAAsiC,iBACA,kBACA9O,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAqiC,sBACA,aACA,SAGAriC,KAAAuiC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAviC,KAAAwiC,oBAAA,OAAAxiC,KAAAuiC,aAAA,QAAAviC,KAAAuiC,cAEAviC,KAAAyiC,qBACA,eACAjP,EAAAQ,iBAAAh0B,KAAAsiC,iBACA,kBACA9O,EAAAQ,iBAAAh0B,KAAAwiC,oBACA,QACA,UACA,OACA,SAGAxiC,KAAA0iC,oBACA,UACA,UACA,UACA1iC,KAAAyiC,oBACA,QACAziC,KAAAyiC,oBACA,SACAziC,KAAAyiC,oBACA,WACAziC,KAAAyiC,oBACA,UACAziC,KAAAyiC,oBACA,UACAziC,KAAAyiC,qBAGAziC,KAAA2iC,wBACA,OACAnP,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAA4iC,iBACA,OACApP,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA0iC,oBACA,cACAlP,EAAAQ,iBAAAh0B,KAAA2iC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGA3iC,KAAA6iC,eACA,OACArP,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAA8iC,iBACA,OACAtP,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAmiC,oBACA,WACA3O,EAAAI,eAAA5zB,KAAA2iC,wBACA,WACA,SAGA3iC,KAAA+iC,sBACA,kBACAvP,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAoiC,aACA,WACA5O,EAAAI,eAAA5zB,KAAA4iC,iBACA,SACApP,EAAAI,eAAA5zB,KAAA6iC,eACA,WACArP,EAAAI,eAAA5zB,KAAA8iC,iBACA,oBACAtP,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAgjC,gBACA,OACAxP,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAijC,iBACA,WACAzP,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAkjC,kBACA,WACA1P,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAkiC,YACA,cACA1O,EAAAQ,iBAAAh0B,KAAA0iC,oBACA,WACAlP,EAAAI,eAAA5zB,KAAAijC,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACAjjC,KAAAyiC,oBACA,MACAziC,KAAAyiC,oBACA,QACAziC,KAAAyiC,oBACA,UACAziC,KAAAyiC,oBACA,SACAziC,KAAAyiC,oBACA,WACAziC,KAAAyiC,oBACA,eACAziC,KAAAuiC,aACA,aACAviC,KAAAuiC,aACA,sBACAviC,KAAAuiC,aACA,gBACAviC,KAAAuiC,aACA,cACAviC,KAAAuiC,aACA,aACAviC,KAAAuiC,aACA,kBACAviC,KAAAuiC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAviC,KAAAmjC,kBAAA,OAAA3P,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAojC,sBACA,MACA5P,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAqjC,mBACA,OACA7P,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAojC,uBAGApjC,KAAAy1B,OAAAz1B,KAAAsjC,mBACA,WACA9P,EAAAM,iBACA,iBACAN,EAAAM,iBACA,WACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAA+iC,sBACA,UACAvP,EAAAI,eAAA5zB,KAAAgjC,gBACA,YACAxP,EAAAI,eAAA5zB,KAAAkjC,kBACA,YACA1P,EAAAI,eAAA5zB,KAAAmjC,kBACA,aACA3P,EAAAI,eAAA5zB,KAAAqjC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACAvjC,KAAAwjC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAhQ,EAAAI,eAAA,YAEA5zB,KAAAyjC,oBACA,OACAjQ,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAwjC,aAGAxjC,KAAA0jC,aACA,OACAlQ,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAyjC,qBAGAzjC,KAAA2jC,sBAAA,SAAA,UAAA,QAAA,WAEA3jC,KAAA4jC,iBACA,kBACApQ,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA2jC,sBACA,aACA,SAGA3jC,KAAA6jC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA7jC,KAAA8jC,oBAAA,OAAA9jC,KAAA6jC,aAAA,QAAA7jC,KAAA6jC,cAEA7jC,KAAA+jC,qBACA,eACAvQ,EAAAQ,iBAAAh0B,KAAA4jC,iBACA,kBACApQ,EAAAQ,iBAAAh0B,KAAA8jC,oBACA,QACA,UACA,OACA,SAGA9jC,KAAAgkC,oBACA,UACA,UACA,UACAhkC,KAAA+jC,oBACA,QACA/jC,KAAA+jC,oBACA,SACA/jC,KAAA+jC,oBACA,WACA/jC,KAAA+jC,oBACA,UACA/jC,KAAA+jC,oBACA,UACA/jC,KAAA+jC,qBAGA/jC,KAAAikC,wBACA,OACAzQ,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAkkC,iBACA,OACA1Q,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAgkC,oBACA,cACAxQ,EAAAQ,iBAAAh0B,KAAAikC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAjkC,KAAAmkC,eACA,OACA3Q,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAokC,iBACA,OACA5Q,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAyjC,oBACA,WACAjQ,EAAAI,eAAA5zB,KAAAikC,wBACA,WACA,SAGAjkC,KAAAqkC,sBACA,kBACA7Q,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAA0jC,aACA,WACAlQ,EAAAI,eAAA5zB,KAAAkkC,iBACA,SACA1Q,EAAAI,eAAA5zB,KAAAmkC,eACA,WACA3Q,EAAAI,eAAA5zB,KAAAokC,iBACA,oBACA5Q,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAskC,gBACA,OACA9Q,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAukC,iBACA,WACA/Q,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAwkC,kBACA,WACAhR,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAwjC,YACA,cACAhQ,EAAAQ,iBAAAh0B,KAAAgkC,oBACA,WACAxQ,EAAAI,eAAA5zB,KAAAukC,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACAvkC,KAAA+jC,oBACA,MACA/jC,KAAA+jC,oBACA,QACA/jC,KAAA+jC,oBACA,UACA/jC,KAAA+jC,oBACA,SACA/jC,KAAA+jC,oBACA,WACA/jC,KAAA+jC,oBACA,eACA/jC,KAAA6jC,aACA,aACA7jC,KAAA6jC,aACA,sBACA7jC,KAAA6jC,aACA,gBACA7jC,KAAA6jC,aACA,cACA7jC,KAAA6jC,aACA,aACA7jC,KAAA6jC,aACA,kBACA7jC,KAAA6jC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA7jC,KAAAykC,kBAAA,OAAAjR,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA0kC,sBACA,MACAlR,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA2kC,mBACA,OACAnR,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA0kC,uBAGA1kC,KAAAy1B,OAAAz1B,KAAA4kC,mBACA,WACApR,EAAAM,iBACA,iBACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAqkC,sBACA,UACA7Q,EAAAI,eAAA5zB,KAAAskC,gBACA,YACA9Q,EAAAI,eAAA5zB,KAAAwkC,kBACA,YACAhR,EAAAI,eAAA5zB,KAAAykC,kBACA,aACAjR,EAAAI,eAAA5zB,KAAA2kC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACA7kC,KAAA8kC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAtR,EAAAI,eAAA,YAEA5zB,KAAA+kC,oBACA,OACAvR,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAA8kC,aAGA9kC,KAAAglC,aACA,OACAxR,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA+kC,qBAGA/kC,KAAAilC,sBAAA,SAAA,UAAA,QAAA,WAEAjlC,KAAAklC,iBACA,kBACA1R,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAilC,sBACA,aACA,SAGAjlC,KAAAmlC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAnlC,KAAAolC,oBAAA,OAAAplC,KAAAmlC,aAAA,QAAAnlC,KAAAmlC,cAEAnlC,KAAAqlC,qBACA,eACA7R,EAAAQ,iBAAAh0B,KAAAklC,iBACA,kBACA1R,EAAAQ,iBAAAh0B,KAAAolC,oBACA,QACA,UACA,OACA,SAGAplC,KAAAslC,oBACA,UACA,UACA,UACAtlC,KAAAqlC,oBACA,QACArlC,KAAAqlC,oBACA,SACArlC,KAAAqlC,oBACA,WACArlC,KAAAqlC,oBACA,UACArlC,KAAAqlC,oBACA,UACArlC,KAAAqlC,qBAGArlC,KAAAulC,wBACA,OACA/R,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAwlC,iBACA,OACAhS,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAslC,oBACA,cACA9R,EAAAQ,iBAAAh0B,KAAAulC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAvlC,KAAAylC,eACA,OACAjS,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAA0lC,iBACA,OACAlS,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA+kC,oBACA,WACAvR,EAAAI,eAAA5zB,KAAAulC,yBAGAvlC,KAAA2lC,sBACA,kBACAnS,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAglC,aACA,WACAxR,EAAAI,eAAA5zB,KAAAwlC,iBACA,SACAhS,EAAAI,eAAA5zB,KAAAylC,eACA,WACAjS,EAAAI,eAAA5zB,KAAA0lC,iBACA,oBACAlS,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAA4lC,gBACA,OACApS,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA6lC,iBACA,WACArS,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAA8lC,kBACA,WACAtS,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA8kC,YACA,cACAtR,EAAAQ,iBAAAh0B,KAAAslC,oBACA,WACA9R,EAAAI,eAAA5zB,KAAA6lC,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACA7lC,KAAAqlC,oBACA,MACArlC,KAAAqlC,oBACA,QACArlC,KAAAqlC,oBACA,UACArlC,KAAAqlC,oBACA,SACArlC,KAAAqlC,oBACA,WACArlC,KAAAqlC,oBACA,eACArlC,KAAAmlC,aACA,aACAnlC,KAAAmlC,aACA,sBACAnlC,KAAAmlC,aACA,gBACAnlC,KAAAmlC,aACA,cACAnlC,KAAAmlC,aACA,aACAnlC,KAAAmlC,aACA,kBACAnlC,KAAAmlC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAnlC,KAAA+lC,kBAAA,OAAAvS,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAgmC,sBACA,MACAxS,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAimC,mBACA,OACAzS,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAgmC,uBAGAhmC,KAAAy1B,OAAAz1B,KAAAkmC,mBACA,WACA1S,EAAAM,iBACA,iBACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAA2lC,sBACA,UACAnS,EAAAI,eAAA5zB,KAAA4lC,gBACA,YACApS,EAAAI,eAAA5zB,KAAA8lC,kBACA,YACAtS,EAAAI,eAAA5zB,KAAA+lC,kBACA,aACAvS,EAAAI,eAAA5zB,KAAAimC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACAnmC,KAAAomC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAA5S,EAAAI,eAAA,YAEA5zB,KAAAqmC,oBACA,OACA7S,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAomC,aAGApmC,KAAAsmC,aACA,OACA9S,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAqmC,qBAGArmC,KAAAumC,sBAAA,SAAA,UAAA,QAAA,WAEAvmC,KAAAwmC,iBACA,kBACAhT,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAumC,sBACA,aACA,SAGAvmC,KAAAymC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAzmC,KAAA0mC,oBAAA,OAAA1mC,KAAAymC,aAAA,QAAAzmC,KAAAymC,cAEAzmC,KAAA2mC,qBACA,eACAnT,EAAAQ,iBAAAh0B,KAAAwmC,iBACA,kBACAhT,EAAAQ,iBAAAh0B,KAAA0mC,oBACA,QACA,UACA,OACA,SAGA1mC,KAAA4mC,oBACA,UACA,UACA,UACA5mC,KAAA2mC,oBACA,QACA3mC,KAAA2mC,oBACA,SACA3mC,KAAA2mC,oBACA,WACA3mC,KAAA2mC,oBACA,UACA3mC,KAAA2mC,oBACA,UACA3mC,KAAA2mC,qBAGA3mC,KAAA6mC,wBACA,OACArT,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAA8mC,iBACA,OACAtT,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA4mC,oBACA,cACApT,EAAAQ,iBAAAh0B,KAAA6mC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGA7mC,KAAA+mC,eACA,OACAvT,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAgnC,iBACA,OACAxT,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAqmC,oBACA,WACA7S,EAAAI,eAAA5zB,KAAA6mC,yBAGA7mC,KAAAinC,sBACA,kBACAzT,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAsmC,aACA,WACA9S,EAAAI,eAAA5zB,KAAA8mC,iBACA,SACAtT,EAAAI,eAAA5zB,KAAA+mC,eACA,WACAvT,EAAAI,eAAA5zB,KAAAgnC,iBACA,oBACAxT,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAknC,gBACA,OACA1T,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAmnC,iBACA,WACA3T,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAonC,kBACA,WACA5T,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAomC,YACA,cACA5S,EAAAQ,iBAAAh0B,KAAA4mC,oBACA,WACApT,EAAAI,eAAA5zB,KAAAmnC,iBACA,gBACA,UACA,iBACA,UACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,aACA,SACA,QACA,SACA,YACA,SACA,QACAnnC,KAAA2mC,oBACA,MACA3mC,KAAA2mC,oBACA,QACA3mC,KAAA2mC,oBACA,UACA3mC,KAAA2mC,oBACA,SACA3mC,KAAA2mC,oBACA,WACA3mC,KAAA2mC,oBACA,eACA3mC,KAAAymC,aACA,aACAzmC,KAAAymC,aACA,sBACAzmC,KAAAymC,aACA,gBACAzmC,KAAAymC,aACA,cACAzmC,KAAAymC,aACA,aACAzmC,KAAAymC,aACA,kBACAzmC,KAAAymC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAzmC,KAAAqnC,kBAAA,OAAA7T,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAsnC,sBACA,MACA9T,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAunC,mBACA,OACA/T,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAsnC,uBAGAtnC,KAAAy1B,OAAAz1B,KAAAwnC,mBACA,WACAhU,EAAAM,iBACA,iBACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAinC,sBACA,UACAzT,EAAAI,eAAA5zB,KAAAknC,gBACA,YACA1T,EAAAI,eAAA5zB,KAAAonC,kBACA,YACA5T,EAAAI,eAAA5zB,KAAAqnC,kBACA,aACA7T,EAAAI,eAAA5zB,KAAAunC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACAznC,KAAA0nC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAlU,EAAAI,eAAA,YAEA5zB,KAAA2nC,oBACA,OACAnU,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAA0nC,aAGA1nC,KAAA4nC,aACA,OACApU,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA2nC,qBAGA3nC,KAAA6nC,sBAAA,SAAA,UAAA,QAAA,WAEA7nC,KAAA8nC,iBACA,kBACAtU,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA6nC,sBACA,aACA,SAGA7nC,KAAA+nC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA/nC,KAAAgoC,oBAAA,OAAAhoC,KAAA+nC,aAAA,QAAA/nC,KAAA+nC,cAEA/nC,KAAAioC,qBACA,eACAzU,EAAAQ,iBAAAh0B,KAAA8nC,iBACA,kBACAtU,EAAAQ,iBAAAh0B,KAAAgoC,oBACA,QACA,UACA,OACA,SAGAhoC,KAAAkoC,oBACA,UACA,UACA,UACAloC,KAAAioC,oBACA,QACAjoC,KAAAioC,oBACA,SACAjoC,KAAAioC,oBACA,WACAjoC,KAAAioC,oBACA,UACAjoC,KAAAioC,oBACA,UACAjoC,KAAAioC,qBAGAjoC,KAAAmoC,wBACA,OACA3U,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAooC,iBACA,OACA5U,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAkoC,oBACA,cACA1U,EAAAQ,iBAAAh0B,KAAAmoC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAnoC,KAAAqoC,eACA,OACA7U,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,UACA,YACA,UACA,iBACA,UACA,aACA,UACA,aACA,WAGA9zB,KAAAsoC,iBACA,OACA9U,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA2nC,oBACA,WACAnU,EAAAI,eAAA5zB,KAAAmoC,yBAGAnoC,KAAAuoC,sBACA,kBACA/U,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAA4nC,aACA,WACApU,EAAAI,eAAA5zB,KAAAooC,iBACA,SACA5U,EAAAI,eAAA5zB,KAAAqoC,eACA,WACA7U,EAAAI,eAAA5zB,KAAAsoC,iBACA,oBACA9U,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAwoC,gBACA,OACAhV,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAyoC,iBACA,WACAjV,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAA0oC,kBACA,WACAlV,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA0nC,YACA,cACAlU,EAAAQ,iBAAAh0B,KAAAkoC,oBACA,WACA1U,EAAAI,eAAA5zB,KAAAyoC,iBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACAzoC,KAAAioC,oBACA,MACAjoC,KAAAioC,oBACA,QACAjoC,KAAAioC,oBACA,UACAjoC,KAAAioC,oBACA,SACAjoC,KAAAioC,oBACA,WACAjoC,KAAAioC,oBACA,eACAjoC,KAAA+nC,aACA,aACA/nC,KAAA+nC,aACA,sBACA/nC,KAAA+nC,aACA,gBACA/nC,KAAA+nC,aACA,cACA/nC,KAAA+nC,aACA,aACA/nC,KAAA+nC,aACA,kBACA/nC,KAAA+nC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA/nC,KAAA2oC,kBAAA,OAAAnV,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA4oC,sBACA,MACApV,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA6oC,mBACA,OACArV,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA4oC,uBAGA5oC,KAAAy1B,OAAAz1B,KAAA8oC,mBACA,WACAtV,EAAAM,iBACA,iBACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAuoC,sBACA,UACA/U,EAAAI,eAAA5zB,KAAAwoC,gBACA,YACAhV,EAAAI,eAAA5zB,KAAA0oC,kBACA,YACAlV,EAAAI,eAAA5zB,KAAA2oC,kBACA,aACAnV,EAAAI,eAAA5zB,KAAA6oC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACA/oC,KAAAgpC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAxV,EAAAI,eAAA,YAEA5zB,KAAAipC,oBACA,OACAzV,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAgpC,aAGAhpC,KAAAkpC,aACA,OACA1V,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAipC,qBAGAjpC,KAAAmpC,sBAAA,SAAA,UAAA,QAAA,WAEAnpC,KAAAopC,iBACA,kBACA5V,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAmpC,sBACA,aACA,SAGAnpC,KAAAqpC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEArpC,KAAAspC,oBAAA,OAAAtpC,KAAAqpC,aAAA,QAAArpC,KAAAqpC,cAEArpC,KAAAupC,qBACA,eACA/V,EAAAQ,iBAAAh0B,KAAAopC,iBACA,kBACA5V,EAAAQ,iBAAAh0B,KAAAspC,oBACA,QACA,UACA,OACA,SAGAtpC,KAAAwpC,oBACA,UACA,UACA,UACAxpC,KAAAupC,oBACA,QACAvpC,KAAAupC,oBACA,SACAvpC,KAAAupC,oBACA,WACAvpC,KAAAupC,oBACA,UACAvpC,KAAAupC,oBACA,UACAvpC,KAAAupC,qBAGAvpC,KAAAypC,wBACA,OACAjW,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAA0pC,iBACA,OACAlW,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAwpC,oBACA,cACAhW,EAAAQ,iBAAAh0B,KAAAypC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAzpC,KAAA2pC,eACA,OACAnW,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,WAGA9zB,KAAA4pC,iBACA,OACApW,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAipC,oBACA,WACAzV,EAAAI,eAAA5zB,KAAAypC,yBAGAzpC,KAAA6pC,sBACA,kBACArW,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAkpC,aACA,WACA1V,EAAAI,eAAA5zB,KAAA0pC,iBACA,SACAlW,EAAAI,eAAA5zB,KAAA2pC,eACA,WACAnW,EAAAI,eAAA5zB,KAAA4pC,iBACA,oBACApW,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAA8pC,gBACA,OACAtW,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA+pC,iBACA,WACAvW,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAgqC,kBACA,WACAxW,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAgpC,YACA,cACAxV,EAAAQ,iBAAAh0B,KAAAwpC,oBACA,WACAhW,EAAAI,eAAA5zB,KAAA+pC,iBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACA/pC,KAAAupC,oBACA,MACAvpC,KAAAupC,oBACA,QACAvpC,KAAAupC,oBACA,UACAvpC,KAAAupC,oBACA,SACAvpC,KAAAupC,oBACA,WACAvpC,KAAAupC,oBACA,eACAvpC,KAAAqpC,aACA,aACArpC,KAAAqpC,aACA,sBACArpC,KAAAqpC,aACA,gBACArpC,KAAAqpC,aACA,cACArpC,KAAAqpC,aACA,aACArpC,KAAAqpC,aACA,kBACArpC,KAAAqpC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGArpC,KAAAiqC,kBAAA,OAAAzW,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAkqC,sBACA,MACA1W,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAmqC,mBACA,OACA3W,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAkqC,uBAGAlqC,KAAAy1B,OAAAz1B,KAAAoqC,mBACA,WACA5W,EAAAM,iBACA,iBACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAA6pC,sBACA,UACArW,EAAAI,eAAA5zB,KAAA8pC,gBACA,YACAtW,EAAAI,eAAA5zB,KAAAgqC,kBACA,YACAxW,EAAAI,eAAA5zB,KAAAiqC,kBACA,aACAzW,EAAAI,eAAA5zB,KAAAmqC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACArqC,KAAAsqC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAA9W,EAAAI,eAAA,YAEA5zB,KAAAuqC,oBACA,OACA/W,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAsqC,aAGAtqC,KAAAwqC,aACA,OACAhX,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAuqC,qBAGAvqC,KAAAyqC,sBAAA,SAAA,UAAA,QAAA,WAEAzqC,KAAA0qC,iBACA,kBACAlX,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAyqC,sBACA,aACA,SAGAzqC,KAAA2qC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA3qC,KAAA4qC,oBAAA,OAAA5qC,KAAA2qC,aAAA,QAAA3qC,KAAA2qC,cAEA3qC,KAAA6qC,qBACA,eACArX,EAAAQ,iBAAAh0B,KAAA0qC,iBACA,kBACAlX,EAAAQ,iBAAAh0B,KAAA4qC,oBACA,QACA,UACA,OACA,SAGA5qC,KAAA8qC,oBACA,UACA,UACA,UACA9qC,KAAA6qC,oBACA,QACA7qC,KAAA6qC,oBACA,WACA7qC,KAAA6qC,oBACA,UACA7qC,KAAA6qC,oBACA,UACA7qC,KAAA6qC,qBAGA7qC,KAAA+qC,wBACA,OACAvX,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAgrC,iBACA,OACAxX,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA8qC,oBACA,cACAtX,EAAAQ,iBAAAh0B,KAAA+qC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGA/qC,KAAAirC,eACA,OACAzX,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,WAGA9zB,KAAAkrC,iBACA,OACA1X,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAuqC,oBACA,WACA/W,EAAAI,eAAA5zB,KAAA+qC,yBAGA/qC,KAAAmrC,sBACA,kBACA3X,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,eACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAwqC,aACA,WACAhX,EAAAI,eAAA5zB,KAAAgrC,iBACA,SACAxX,EAAAI,eAAA5zB,KAAAirC,eACA,WACAzX,EAAAI,eAAA5zB,KAAAkrC,iBACA,oBACA1X,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAorC,gBACA,OACA5X,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAqrC,iBACA,WACA7X,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAsrC,kBACA,WACA9X,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAsqC,YACA,cACA9W,EAAAQ,iBAAAh0B,KAAA8qC,oBACA,WACAtX,EAAAI,eAAA5zB,KAAAqrC,iBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACArrC,KAAA6qC,oBACA,MACA7qC,KAAA6qC,oBACA,QACA7qC,KAAA6qC,oBACA,UACA7qC,KAAA6qC,oBACA,SACA7qC,KAAA6qC,oBACA,WACA7qC,KAAA6qC,oBACA,eACA7qC,KAAA2qC,aACA,aACA3qC,KAAA2qC,aACA,sBACA3qC,KAAA2qC,aACA,gBACA3qC,KAAA2qC,aACA,cACA3qC,KAAA2qC,aACA,aACA3qC,KAAA2qC,aACA,kBACA3qC,KAAA2qC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA3qC,KAAAurC,kBAAA,OAAA/X,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAwrC,sBACA,MACAhY,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAyrC,mBACA,OACAjY,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAwrC,uBAGAxrC,KAAAy1B,OAAAz1B,KAAA0rC,mBACA,WACAlY,EAAAM,iBACA,iBACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAmrC,sBACA,UACA3X,EAAAI,eAAA5zB,KAAAorC,gBACA,YACA5X,EAAAI,eAAA5zB,KAAAsrC,kBACA,YACA9X,EAAAI,eAAA5zB,KAAAurC,kBACA,aACA/X,EAAAI,eAAA5zB,KAAAyrC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACA3rC,KAAA4rC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAApY,EAAAI,eAAA,YAEA5zB,KAAA6rC,oBACA,OACArY,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAA4rC,aAGA5rC,KAAA8rC,aACA,OACAtY,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA6rC,qBAGA7rC,KAAA+rC,sBAAA,SAAA,UAAA,QAAA,WAEA/rC,KAAAgsC,iBACA,kBACAxY,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA+rC,sBACA,aACA,SAGA/rC,KAAAisC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAjsC,KAAAksC,oBAAA,OAAAlsC,KAAAisC,aAAA,QAAAjsC,KAAAisC,cAEAjsC,KAAAmsC,qBACA,eACA3Y,EAAAQ,iBAAAh0B,KAAAgsC,iBACA,kBACAxY,EAAAQ,iBAAAh0B,KAAAksC,oBACA,QACA,UACA,OACA,SAGAlsC,KAAAosC,oBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACApsC,KAAAmsC,oBACA,QACAnsC,KAAAmsC,oBACA,WACAnsC,KAAAmsC,oBACA,UACAnsC,KAAAmsC,oBACA,UACAnsC,KAAAmsC,qBAGAnsC,KAAAqsC,wBACA,OACA7Y,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAssC,iBACA,OACA9Y,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAosC,oBACA,cACA5Y,EAAAQ,iBAAAh0B,KAAAqsC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGArsC,KAAAusC,eACA,OACA/Y,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,WAGA9zB,KAAAwsC,iBACA,OACAhZ,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA6rC,oBACA,WACArY,EAAAI,eAAA5zB,KAAAqsC,yBAGArsC,KAAAysC,sBACA,kBACAjZ,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAA8rC,aACA,WACAtY,EAAAI,eAAA5zB,KAAAssC,iBACA,SACA9Y,EAAAI,eAAA5zB,KAAAusC,eACA,WACA/Y,EAAAI,eAAA5zB,KAAAwsC,iBACA,oBACAhZ,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAA0sC,gBACA,OACAlZ,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA2sC,iBACA,WACAnZ,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAA4sC,kBACA,WACApZ,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA4rC,YACA,cACApY,EAAAQ,iBAAAh0B,KAAAosC,oBACA,WACA5Y,EAAAI,eAAA5zB,KAAA2sC,iBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACA3sC,KAAAmsC,oBACA,MACAnsC,KAAAmsC,oBACA,QACAnsC,KAAAmsC,oBACA,UACAnsC,KAAAmsC,oBACA,SACAnsC,KAAAmsC,oBACA,WACAnsC,KAAAmsC,oBACA,eACAnsC,KAAAisC,aACA,aACAjsC,KAAAisC,aACA,sBACAjsC,KAAAisC,aACA,gBACAjsC,KAAAisC,aACA,cACAjsC,KAAAisC,aACA,aACAjsC,KAAAisC,aACA,kBACAjsC,KAAAisC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAjsC,KAAA6sC,kBAAA,OAAArZ,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA8sC,sBACA,MACAtZ,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA+sC,mBACA,OACAvZ,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA8sC,uBAGA9sC,KAAAy1B,OAAAz1B,KAAAgtC,mBACA,WACAxZ,EAAAM,iBACA,iBACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAysC,sBACA,UACAjZ,EAAAI,eAAA5zB,KAAA0sC,gBACA,YACAlZ,EAAAI,eAAA5zB,KAAA4sC,kBACA,YACApZ,EAAAI,eAAA5zB,KAAA6sC,kBACA,aACArZ,EAAAI,eAAA5zB,KAAA+sC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACAjtC,KAAAktC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAA1Z,EAAAI,eAAA,YAEA5zB,KAAAmtC,oBACA,OACA3Z,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAktC,aAGAltC,KAAAotC,aACA,OACA5Z,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAmtC,qBAGAntC,KAAAqtC,sBAAA,SAAA,UAAA,QAAA,WAEArtC,KAAAstC,iBACA,kBACA9Z,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAqtC,sBACA,aACA,SAGArtC,KAAAutC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAvtC,KAAAwtC,oBAAA,OAAAxtC,KAAAutC,aAAA,QAAAvtC,KAAAutC,cAEAvtC,KAAAytC,qBACA,eACAja,EAAAQ,iBAAAh0B,KAAAstC,iBACA,kBACA9Z,EAAAQ,iBAAAh0B,KAAAwtC,oBACA,QACA,UACA,OACA,SAGAxtC,KAAA0tC,oBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACA1tC,KAAAytC,oBACA,QACAztC,KAAAytC,oBACA,WACAztC,KAAAytC,oBACA,UACAztC,KAAAytC,oBACA,UACAztC,KAAAytC,qBAGAztC,KAAA2tC,wBACA,OACAna,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAA4tC,iBACA,OACApa,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA0tC,oBACA,cACAla,EAAAQ,iBAAAh0B,KAAA2tC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGA3tC,KAAA6tC,eACA,OACAra,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,WAGA9zB,KAAA8tC,iBACA,OACAta,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAmtC,oBACA,WACA3Z,EAAAI,eAAA5zB,KAAA2tC,yBAGA3tC,KAAA+tC,sBACA,kBACAva,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAotC,aACA,WACA5Z,EAAAI,eAAA5zB,KAAA4tC,iBACA,SACApa,EAAAI,eAAA5zB,KAAA6tC,eACA,WACAra,EAAAI,eAAA5zB,KAAA8tC,iBACA,oBACAta,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAguC,gBACA,OACAxa,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAiuC,iBACA,WACAza,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAkuC,kBACA,WACA1a,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAktC,YACA,cACA1Z,EAAAQ,iBAAAh0B,KAAA0tC,oBACA,WACAla,EAAAI,eAAA5zB,KAAAiuC,iBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACAjuC,KAAAytC,oBACA,MACAztC,KAAAytC,oBACA,QACAztC,KAAAytC,oBACA,UACAztC,KAAAytC,oBACA,SACAztC,KAAAytC,oBACA,WACAztC,KAAAytC,oBACA,eACAztC,KAAAutC,aACA,aACAvtC,KAAAutC,aACA,sBACAvtC,KAAAutC,aACA,gBACAvtC,KAAAutC,aACA,cACAvtC,KAAAutC,aACA,aACAvtC,KAAAutC,aACA,kBACAvtC,KAAAutC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAvtC,KAAAmuC,kBAAA,OAAA3a,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAouC,sBACA,MACA5a,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAquC,mBACA,OACA7a,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAouC,uBAGApuC,KAAAy1B,OAAAz1B,KAAAsuC,mBACA,WACA9a,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAA+tC,sBACA,UACAva,EAAAI,eAAA5zB,KAAAguC,gBACA,YACAxa,EAAAI,eAAA5zB,KAAAkuC,kBACA,YACA1a,EAAAI,eAAA5zB,KAAAmuC,kBACA,aACA3a,EAAAI,eAAA5zB,KAAAquC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,UACA,mBACA,UAKAE,GAAA,WACAvuC,KAAAwuC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAhb,EAAAI,eAAA,YAEA5zB,KAAAyuC,oBACA,OACAjb,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAwuC,aAGAxuC,KAAA0uC,aACA,OACAlb,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAyuC,qBAGAzuC,KAAA2uC,sBAAA,SAAA,UAAA,QAAA,WAEA3uC,KAAA4uC,iBACA,kBACApb,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA2uC,sBACA,aACA,SAGA3uC,KAAA6uC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA7uC,KAAA8uC,oBAAA,OAAA9uC,KAAA6uC,aAAA,QAAA7uC,KAAA6uC,cAEA7uC,KAAA+uC,qBACA,eACAvb,EAAAQ,iBAAAh0B,KAAA4uC,iBACA,kBACApb,EAAAQ,iBAAAh0B,KAAA8uC,oBACA,QACA,UACA,OACA,SAGA9uC,KAAAgvC,oBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACAhvC,KAAA+uC,oBACA,QACA/uC,KAAA+uC,oBACA,WACA/uC,KAAA+uC,oBACA,UACA/uC,KAAA+uC,oBACA,UACA/uC,KAAA+uC,qBAGA/uC,KAAAivC,wBACA,OACAzb,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAkvC,iBACA,OACA1b,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAgvC,oBACA,cACAxb,EAAAQ,iBAAAh0B,KAAAivC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAjvC,KAAAmvC,eACA,OACA3b,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,WAGA9zB,KAAAovC,iBACA,OACA5b,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAyuC,oBACA,WACAjb,EAAAI,eAAA5zB,KAAAivC,yBAGAjvC,KAAAqvC,sBACA,kBACA7b,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAA0uC,aACA,WACAlb,EAAAI,eAAA5zB,KAAAkvC,iBACA,SACA1b,EAAAI,eAAA5zB,KAAAmvC,eACA,WACA3b,EAAAI,eAAA5zB,KAAAovC,iBACA,oBACA5b,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,qBAGA50B,KAAAsvC,gBACA,OACA9b,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAuvC,iBACA,WACA/b,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAwvC,kBACA,WACAhc,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAwuC,YACA,cACAhb,EAAAQ,iBAAAh0B,KAAAgvC,oBACA,WACAxb,EAAAI,eAAA5zB,KAAAuvC,iBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACAvvC,KAAA+uC,oBACA,MACA/uC,KAAA+uC,oBACA,QACA/uC,KAAA+uC,oBACA,UACA/uC,KAAA+uC,oBACA,SACA/uC,KAAA+uC,oBACA,WACA/uC,KAAA+uC,oBACA,eACA/uC,KAAA6uC,aACA,aACA7uC,KAAA6uC,aACA,sBACA7uC,KAAA6uC,aACA,gBACA7uC,KAAA6uC,aACA,cACA7uC,KAAA6uC,aACA,aACA7uC,KAAA6uC,aACA,kBACA7uC,KAAA6uC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA7uC,KAAAyvC,kBAAA,OAAAjc,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA0vC,sBACA,MACAlc,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA2vC,mBACA,OACAnc,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA0vC,uBAGA1vC,KAAAy1B,OAAAz1B,KAAA4vC,mBACA,WACApc,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAqvC,sBACA,UACA7b,EAAAI,eAAA5zB,KAAAsvC,gBACA,YACA9b,EAAAI,eAAA5zB,KAAAwvC,kBACA,YACAhc,EAAAI,eAAA5zB,KAAAyvC,kBACA,aACAjc,EAAAI,eAAA5zB,KAAA2vC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,YAKAE,GAAA,WACA7vC,KAAA8vC,YAAA,OAAA,SAAA,QAAA,SAAA,WAAAtc,EAAAI,eAAA,YAEA5zB,KAAA+vC,oBACA,OACAvc,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAA8vC,aAGA9vC,KAAAgwC,aACA,OACAxc,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA+vC,qBAGA/vC,KAAAiwC,sBAAA,SAAA,UAAA,QAAA,WAEAjwC,KAAAkwC,iBACA,kBACA1c,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAiwC,sBACA,aACA,SAGAjwC,KAAAmwC,cAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAnwC,KAAAowC,oBAAA,OAAApwC,KAAAmwC,aAAA,QAAAnwC,KAAAmwC,cAEAnwC,KAAAqwC,qBACA,eACA7c,EAAAQ,iBAAAh0B,KAAAkwC,iBACA,kBACA1c,EAAAQ,iBAAAh0B,KAAAowC,oBACA,QACA,UACA,OACA,SAGApwC,KAAAswC,oBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACAtwC,KAAAqwC,oBACA,QACArwC,KAAAqwC,oBACA,WACArwC,KAAAqwC,oBACA,UACArwC,KAAAqwC,oBACA,UACArwC,KAAAqwC,qBAGArwC,KAAAuwC,wBACA,OACA/c,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAwwC,iBACA,OACAhd,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAswC,oBACA,cACA9c,EAAAQ,iBAAAh0B,KAAAuwC,wBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAvwC,KAAAywC,eACA,OACAjd,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,WAGA9zB,KAAA0wC,iBACA,OACAld,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA+vC,oBACA,WACAvc,EAAAI,eAAA5zB,KAAAuwC,yBAGAvwC,KAAA2wC,sBACA,kBACAnd,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAgwC,aACA,WACAxc,EAAAI,eAAA5zB,KAAAwwC,iBACA,SACAhd,EAAAI,eAAA5zB,KAAAywC,eACA,WACAjd,EAAAI,eAAA5zB,KAAA0wC,iBACA,oBACAld,EAAAoB,oBACA,qBACApB,EAAAoB,qBAGA50B,KAAA4wC,gBACA,OACApd,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA6wC,iBACA,WACArd,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAA8wC,kBACA,WACAtd,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA8vC,YACA,cACAtc,EAAAQ,iBAAAh0B,KAAAswC,oBACA,WACA9c,EAAAI,eAAA5zB,KAAA6wC,iBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACA7wC,KAAAqwC,oBACA,MACArwC,KAAAqwC,oBACA,QACArwC,KAAAqwC,oBACA,UACArwC,KAAAqwC,oBACA,SACArwC,KAAAqwC,oBACA,WACArwC,KAAAqwC,oBACA,eACArwC,KAAAmwC,aACA,aACAnwC,KAAAmwC,aACA,sBACAnwC,KAAAmwC,aACA,gBACAnwC,KAAAmwC,aACA,cACAnwC,KAAAmwC,aACA,aACAnwC,KAAAmwC,aACA,kBACAnwC,KAAAmwC,aACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAnwC,KAAA+wC,kBAAA,OAAAvd,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAgxC,sBACA,MACAxd,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAixC,mBACA,OACAzd,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAgxC,uBAGAhxC,KAAAy1B,OAAAz1B,KAAAkxC,mBACA,WACA1d,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAA2wC,sBACA,UACAnd,EAAAI,eAAA5zB,KAAA4wC,gBACA,YACApd,EAAAI,eAAA5zB,KAAA8wC,kBACA,YACAtd,EAAAI,eAAA5zB,KAAA+wC,kBACA,aACAvd,EAAAI,eAAA5zB,KAAAixC,mBACA,QACA,SACA,iBACA,SACA,aACA,UACA,iBACA,UACA,SACA,YAKAE,EAAA,WACAnxC,KAAAoxC,WAAA,OAAA,SAAA,QAAA,SAAA,WAAA5d,EAAAI,eAAA,YAEA5zB,KAAAqxC,mBACA,OACA7d,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAoxC,YAGApxC,KAAAsxC,YACA,OACA9d,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAqxC,oBAGArxC,KAAAuxC,qBAAA,SAAA,UAAA,QAAA,WAEAvxC,KAAAwxC,gBACA,kBACAhe,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAuxC,qBACA,aACA,SAGAvxC,KAAAyxC,aAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAzxC,KAAA0xC,mBAAA,OAAA1xC,KAAAyxC,YAAA,QAAAzxC,KAAAyxC,aAEAzxC,KAAA2xC,oBACA,eACAne,EAAAQ,iBAAAh0B,KAAAwxC,gBACA,kBACAhe,EAAAQ,iBAAAh0B,KAAA0xC,mBACA,QACA,UACA,OACA,SAGA1xC,KAAA4xC,mBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACA5xC,KAAA2xC,mBACA,QACA3xC,KAAA2xC,mBACA,WACA3xC,KAAA2xC,mBACA,UACA3xC,KAAA2xC,mBACA,UACA3xC,KAAA2xC,oBAGA3xC,KAAA6xC,uBACA,OACAre,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAA8xC,gBACA,OACAte,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,oBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA4xC,mBACA,cACApe,EAAAQ,iBAAAh0B,KAAA6xC,uBACA,eACA,UACA,iBACA,UACA,QACA,SACA,aACA,SACA,iBACA,SACA,qBACA,QACA,yBACA,QACA,gBACA,SAGA7xC,KAAA+xC,cACA,OACAve,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,WAGA9zB,KAAAgyC,gBACA,OACAxe,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAqxC,mBACA,WACA7d,EAAAI,eAAA5zB,KAAA6xC,wBAGA7xC,KAAAiyC,qBACA,kBACAze,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAsxC,YACA,WACA9d,EAAAI,eAAA5zB,KAAA8xC,gBACA,SACAte,EAAAI,eAAA5zB,KAAA+xC,cACA,WACAve,EAAAI,eAAA5zB,KAAAgyC,gBACA,oBACAxe,EAAAoB,oBACA,qBACApB,EAAAoB,qBAGA50B,KAAAkyC,eACA,OACA1e,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAmyC,gBACA,WACA3e,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAoyC,iBACA,WACA5e,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAoxC,WACA,cACA5d,EAAAQ,iBAAAh0B,KAAA4xC,mBACA,WACApe,EAAAI,eAAA5zB,KAAAmyC,gBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACAnyC,KAAA2xC,mBACA,MACA3xC,KAAA2xC,mBACA,QACA3xC,KAAA2xC,mBACA,UACA3xC,KAAA2xC,mBACA,SACA3xC,KAAA2xC,mBACA,WACA3xC,KAAA2xC,mBACA,eACA3xC,KAAAyxC,YACA,aACAzxC,KAAAyxC,YACA,sBACAzxC,KAAAyxC,YACA,gBACAzxC,KAAAyxC,YACA,cACAzxC,KAAAyxC,YACA,aACAzxC,KAAAyxC,YACA,kBACAzxC,KAAAyxC,YACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAzxC,KAAAqyC,iBAAA,OAAA7e,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAsyC,qBACA,MACA9e,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAuyC,kBACA,OACA/e,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAsyC,sBAGAtyC,KAAAy1B,OAAAz1B,KAAAwyC,kBACA,WACAhf,EAAAM,iBACA,SACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAiyC,qBACA,UACAze,EAAAI,eAAA5zB,KAAAkyC,eACA,YACA1e,EAAAI,eAAA5zB,KAAAoyC,iBACA,YACA5e,EAAAI,eAAA5zB,KAAAqyC,iBACA,aACA7e,EAAAI,eAAA5zB,KAAAuyC,kBACA,QACA,SACA,aACA,UACA,SACA,YAKAE,EAAA,WACAzyC,KAAA0yC,WAAA,OAAA,SAAA,QAAA,SAAA,WAAAlf,EAAAI,eAAA,YAEA5zB,KAAA2yC,mBACA,OACAnf,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAA0yC,YAGA1yC,KAAA4yC,YACA,OACApf,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA2yC,oBAGA3yC,KAAA6yC,qBAAA,SAAA,UAAA,QAAA,WAEA7yC,KAAA8yC,gBACA,kBACAtf,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA6yC,qBACA,aACA,SAGA7yC,KAAA+yC,aAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA/yC,KAAAgzC,mBAAA,OAAAhzC,KAAA+yC,YAAA,QAAA/yC,KAAA+yC,aAEA/yC,KAAAizC,oBACA,eACAzf,EAAAQ,iBAAAh0B,KAAA8yC,gBACA,kBACAtf,EAAAQ,iBAAAh0B,KAAAgzC,mBACA,QACA,UACA,OACA,SAGAhzC,KAAAkzC,mBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACAlzC,KAAAizC,mBACA,QACAjzC,KAAAizC,mBACA,WACAjzC,KAAAizC,mBACA,UACAjzC,KAAAizC,mBACA,UACAjzC,KAAAizC,oBAGAjzC,KAAAmzC,uBACA,OACA3f,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,eACA,UACA,aACA,UACA,QACA,UAGA9zB,KAAAozC,gBACA,OACA5f,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAkzC,mBACA,cACA1f,EAAAQ,iBAAAh0B,KAAAmzC,uBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAnzC,KAAAqzC,cACA,OACA7f,EAAAM,iBACA,QACA,SACA,OACA,UACA,SACA,UACA,SACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,mBACA,UACA,SACA,UACA,cACA,UACA,cACA,UACA,cACA,UACA,YACA,UACA,UACA,WAGA9zB,KAAAszC,gBACA,OACA9f,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAA2yC,mBACA,WACAnf,EAAAI,eAAA5zB,KAAAmzC,wBAGAnzC,KAAAuzC,qBACA,kBACA/f,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAA4yC,YACA,WACApf,EAAAI,eAAA5zB,KAAAozC,gBACA,SACA5f,EAAAI,eAAA5zB,KAAAqzC,cACA,WACA7f,EAAAI,eAAA5zB,KAAAszC,gBACA,oBACA9f,EAAAoB,oBACA,qBACApB,EAAAoB,qBAGA50B,KAAAwzC,eACA,OACAhgB,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAyzC,gBACA,WACAjgB,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAA0zC,iBACA,WACAlgB,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA0yC,WACA,cACAlf,EAAAQ,iBAAAh0B,KAAAkzC,mBACA,WACA1f,EAAAI,eAAA5zB,KAAAyzC,gBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACAzzC,KAAAizC,mBACA,MACAjzC,KAAAizC,mBACA,QACAjzC,KAAAizC,mBACA,UACAjzC,KAAAizC,mBACA,SACAjzC,KAAAizC,mBACA,WACAjzC,KAAAizC,mBACA,eACAjzC,KAAA+yC,YACA,aACA/yC,KAAA+yC,YACA,sBACA/yC,KAAA+yC,YACA,gBACA/yC,KAAA+yC,YACA,cACA/yC,KAAA+yC,YACA,aACA/yC,KAAA+yC,YACA,kBACA/yC,KAAA+yC,YACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,gBACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA/yC,KAAA2zC,iBAAA,OAAAngB,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA4zC,qBACA,MACApgB,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA6zC,kBACA,OACArgB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA4zC,sBAGA5zC,KAAAy1B,OAAAz1B,KAAA8zC,kBACA,WACAtgB,EAAAM,iBACA,SACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAuzC,qBACA,UACA/f,EAAAI,eAAA5zB,KAAAwzC,eACA,YACAhgB,EAAAI,eAAA5zB,KAAA0zC,iBACA,YACAlgB,EAAAI,eAAA5zB,KAAA2zC,iBACA,aACAngB,EAAAI,eAAA5zB,KAAA6zC,kBACA,QACA,SACA,aACA,UACA,SACA,YAKAE,EAAA,WACA/zC,KAAAg0C,WAAA,OAAA,SAAA,QAAA,SAAA,WAAAxgB,EAAAI,eAAA,YAEA5zB,KAAAi0C,mBACA,OACAzgB,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAg0C,YAGAh0C,KAAAk0C,YACA,OACA1gB,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAi0C,oBAGAj0C,KAAAm0C,qBAAA,SAAA,UAAA,QAAA,WAEAn0C,KAAAo0C,gBACA,kBACA5gB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAm0C,qBACA,aACA,SAGAn0C,KAAAq0C,aAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAr0C,KAAAs0C,mBAAA,OAAAt0C,KAAAq0C,YAAA,QAAAr0C,KAAAq0C,aAEAr0C,KAAAu0C,oBACA,eACA/gB,EAAAQ,iBAAAh0B,KAAAo0C,gBACA,kBACA5gB,EAAAQ,iBAAAh0B,KAAAs0C,mBACA,QACA,UACA,OACA,SAGAt0C,KAAAw0C,mBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACAx0C,KAAAu0C,mBACA,QACAv0C,KAAAu0C,mBACA,WACAv0C,KAAAu0C,mBACA,UACAv0C,KAAAu0C,mBACA,UACAv0C,KAAAu0C,oBAGAv0C,KAAAy0C,uBACA,OACAjhB,EAAAM,iBACA,SACA,UACA,eACA,UACA,UACA,UACA,QACA,UAGA9zB,KAAA00C,gBACA,OACAlhB,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAw0C,mBACA,cACAhhB,EAAAQ,iBAAAh0B,KAAAy0C,uBACA,eACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAz0C,KAAA20C,gBACA,OACAnhB,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAi0C,mBACA,WACAzgB,EAAAI,eAAA5zB,KAAAy0C,wBAGAz0C,KAAA40C,qBACA,kBACAphB,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,kBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAk0C,YACA,WACA1gB,EAAAI,eAAA5zB,KAAA00C,gBACA,WACAlhB,EAAAI,eAAA5zB,KAAA20C,gBACA,oBACAnhB,EAAAoB,oBACA,qBACApB,EAAAoB,qBAGA50B,KAAA60C,eACA,OACArhB,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA80C,gBACA,WACAthB,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAA+0C,iBACA,WACAvhB,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAg0C,WACA,cACAxgB,EAAAQ,iBAAAh0B,KAAAw0C,mBACA,WACAhhB,EAAAI,eAAA5zB,KAAA80C,gBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACA90C,KAAAu0C,mBACA,MACAv0C,KAAAu0C,mBACA,QACAv0C,KAAAu0C,mBACA,UACAv0C,KAAAu0C,mBACA,SACAv0C,KAAAu0C,mBACA,WACAv0C,KAAAu0C,mBACA,eACAv0C,KAAAq0C,YACA,aACAr0C,KAAAq0C,YACA,sBACAr0C,KAAAq0C,YACA,gBACAr0C,KAAAq0C,YACA,cACAr0C,KAAAq0C,YACA,aACAr0C,KAAAq0C,YACA,kBACAr0C,KAAAq0C,YACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAr0C,KAAAg1C,iBAAA,OAAAxhB,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAi1C,qBACA,MACAzhB,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAk1C,kBACA,OACA1hB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAi1C,sBAGAj1C,KAAAy1B,OAAAz1B,KAAAm1C,kBACA,WACA3hB,EAAAM,iBACA,SACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAA40C,qBACA,UACAphB,EAAAI,eAAA5zB,KAAA60C,eACA,YACArhB,EAAAI,eAAA5zB,KAAA+0C,iBACA,YACAvhB,EAAAI,eAAA5zB,KAAAg1C,iBACA,aACAxhB,EAAAI,eAAA5zB,KAAAk1C,kBACA,QACA,SACA,aACA,UACA,SACA,YAKAE,EAAA,WACAp1C,KAAAq1C,WAAA,OAAA,SAAA,QAAA,SAAA,WAAA7hB,EAAAI,eAAA,YAEA5zB,KAAAs1C,mBACA,OACA9hB,EAAAM,iBACA,QACA,SACA,SACA,UACA,MACAN,EAAAI,eAAA5zB,KAAAq1C,YAGAr1C,KAAAu1C,YACA,OACA/hB,EAAAM,iBACA,QACA,SACA,SACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAs1C,oBAGAt1C,KAAAw1C,qBAAA,SAAA,UAAA,QAAA,WAEAx1C,KAAAy1C,gBACA,kBACAjiB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAw1C,qBACA,aACA,SAGAx1C,KAAA01C,aAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA11C,KAAA21C,mBAAA,OAAA31C,KAAA01C,YAAA,QAAA11C,KAAA01C,aAEA11C,KAAA41C,oBACA,eACApiB,EAAAQ,iBAAAh0B,KAAAy1C,gBACA,kBACAjiB,EAAAQ,iBAAAh0B,KAAA21C,mBACA,QACA,UACA,OACA,SAGA31C,KAAA61C,mBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACA71C,KAAA41C,mBACA,QACA51C,KAAA41C,mBACA,WACA51C,KAAA41C,mBACA,UACA51C,KAAA41C,oBAGA51C,KAAA81C,gBACA,OACAtiB,EAAAM,iBACA,kBACAN,EAAAM,iBACA,iBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA61C,mBACA,eACA,UACA,UACA,UACA,mBACA,UACA,UACA,UACA,mBACA,UACA,mBACA,UACA,gBACA,UACA,0BACA,UACA,2BACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGA71C,KAAA+1C,gBACA,OACAviB,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAs1C,oBAGAt1C,KAAAg2C,qBACA,kBACAxiB,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAu1C,YACA,WACA/hB,EAAAI,eAAA5zB,KAAA81C,gBACA,WACAtiB,EAAAI,eAAA5zB,KAAA+1C,gBACA,oBACAviB,EAAAoB,oBACA,qBACApB,EAAAoB,qBAGA50B,KAAAi2C,eACA,OACAziB,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAk2C,gBACA,WACA1iB,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAm2C,iBACA,WACA3iB,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAq1C,WACA,cACA7hB,EAAAQ,iBAAAh0B,KAAA61C,mBACA,WACAriB,EAAAI,eAAA5zB,KAAAk2C,gBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACAl2C,KAAA41C,mBACA,MACA51C,KAAA41C,mBACA,QACA51C,KAAA41C,mBACA,UACA51C,KAAA41C,mBACA,SACA51C,KAAA41C,mBACA,WACA51C,KAAA41C,mBACA,eACA51C,KAAA01C,YACA,aACA11C,KAAA01C,YACA,sBACA11C,KAAA01C,YACA,gBACA11C,KAAA01C,YACA,cACA11C,KAAA01C,YACA,aACA11C,KAAA01C,YACA,kBACA11C,KAAA01C,YACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA11C,KAAAo2C,iBAAA,OAAA5iB,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAq2C,qBACA,MACA7iB,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAs2C,kBACA,OACA9iB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAq2C,sBAGAr2C,KAAAy1B,OAAAz1B,KAAAu2C,kBACA,WACA/iB,EAAAM,iBACA,SACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAg2C,qBACA,UACAxiB,EAAAI,eAAA5zB,KAAAi2C,eACA,YACAziB,EAAAI,eAAA5zB,KAAAm2C,iBACA,YACA3iB,EAAAI,eAAA5zB,KAAAo2C,iBACA,aACA5iB,EAAAI,eAAA5zB,KAAAs2C,kBACA,QACA,SACA,aACA,UACA,SACA,YAKAE,EAAA,WACAx2C,KAAAy2C,qBAAA,SAAA,UAAA,QAAA,WAEAz2C,KAAA02C,gBACA,kBACAljB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAy2C,qBACA,aACA,SAGAz2C,KAAA22C,aAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA32C,KAAA42C,mBAAA,OAAA52C,KAAA22C,YAAA,QAAA32C,KAAA22C,aAEA32C,KAAA62C,oBACA,eACArjB,EAAAQ,iBAAAh0B,KAAA02C,gBACA,kBACAljB,EAAAQ,iBAAAh0B,KAAA42C,mBACA,QACA,UACA,OACA,SAGA52C,KAAA82C,mBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACA92C,KAAA62C,mBACA,QACA72C,KAAA62C,mBACA,WACA72C,KAAA62C,mBACA,UACA72C,KAAA62C,oBAGA72C,KAAA+2C,gBACA,OACAvjB,EAAAM,iBACA,kBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAA82C,mBACA,eACA,UACA,UACA,UACA,mBACA,UACA,UACA,UACA,mBACA,UACA,mBACA,UACA,gBACA,UACA,0BACA,UACA,2BACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGA92C,KAAAg3C,WAAA,OAAA,SAAA,QAAA,SAAA,WAAAxjB,EAAAI,eAAA,YAEA5zB,KAAAi3C,YACA,OACAzjB,EAAAM,iBACA,SACAN,EAAAM,iBACA,QACA,SACA,MACAN,EAAAI,eAAA5zB,KAAAg3C,WACA,SACA,WAGAh3C,KAAAk3C,gBACA,OACA1jB,EAAAM,iBACA,cACA,UACA,eACA,UACA,QACA,SACA,OACAN,EAAAI,eAAA5zB,KAAAi3C,aAGAj3C,KAAAm3C,qBACA,cACA3jB,EAAAM,iBACA,cACAN,EAAAM,iBACA,gBACA,UACA,WACAN,EAAAI,eAAA5zB,KAAA+2C,gBACA,WACAvjB,EAAAI,eAAA5zB,KAAAk3C,gBACA,oBACA1jB,EAAAoB,oBACA,qBACApB,EAAAoB,qBAGA50B,KAAAo3C,eACA,OACA5jB,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAq3C,gBACA,WACA7jB,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAs3C,iBACA,WACA9jB,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAg3C,WACA,cACAxjB,EAAAQ,iBAAAh0B,KAAA82C,mBACA,WACAtjB,EAAAI,eAAA5zB,KAAAq3C,gBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACAr3C,KAAA62C,mBACA,MACA72C,KAAA62C,mBACA,QACA72C,KAAA62C,mBACA,UACA72C,KAAA62C,mBACA,SACA72C,KAAA62C,mBACA,WACA72C,KAAA62C,mBACA,eACA72C,KAAA22C,YACA,aACA32C,KAAA22C,YACA,sBACA32C,KAAA22C,YACA,gBACA32C,KAAA22C,YACA,cACA32C,KAAA22C,YACA,aACA32C,KAAA22C,YACA,kBACA32C,KAAA22C,YACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA32C,KAAAu3C,iBAAA,OAAA/jB,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAw3C,qBACA,MACAhkB,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAy3C,kBACA,OACAjkB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAw3C,sBAGAx3C,KAAAy1B,OAAAz1B,KAAA03C,kBACA,WACAlkB,EAAAM,iBACA,SACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAm3C,qBACA,UACA3jB,EAAAI,eAAA5zB,KAAAo3C,eACA,YACA5jB,EAAAI,eAAA5zB,KAAAs3C,iBACA,YACA9jB,EAAAI,eAAA5zB,KAAAu3C,iBACA,aACA/jB,EAAAI,eAAA5zB,KAAAy3C,kBACA,QACA,SACA,aACA,UACA,SACA,YAKAE,EAAA,WACA33C,KAAA43C,mBACA,OACApkB,EAAAM,iBACA,aACAN,EAAAM,iBACA,QACA,SACA,SACA,WAGA9zB,KAAA63C,qBAAA,SAAA,UAAA,QAAA,WAEA73C,KAAA83C,gBACA,kBACAtkB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA63C,qBACA,aACA,SAGA73C,KAAA+3C,aAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEA/3C,KAAAg4C,mBAAA,OAAAh4C,KAAA+3C,YAAA,QAAA/3C,KAAA+3C,aAEA/3C,KAAAi4C,oBACA,eACAzkB,EAAAQ,iBAAAh0B,KAAA83C,gBACA,kBACAtkB,EAAAQ,iBAAAh0B,KAAAg4C,mBACA,QACA,UACA,OACA,SAGAh4C,KAAAk4C,mBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACAl4C,KAAAi4C,mBACA,QACAj4C,KAAAi4C,mBACA,WACAj4C,KAAAi4C,mBACA,UACAj4C,KAAAi4C,oBAGAj4C,KAAAm4C,gBACA,OACA3kB,EAAAM,iBACA,kBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAk4C,mBACA,eACA,UACA,UACA,UACA,mBACA,UACA,UACA,UACA,mBACA,UACA,mBACA,UACA,gBACA,UACA,0BACA,UACA,2BACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAl4C,KAAAo4C,qBACA,cACA5kB,EAAAI,eAAA5zB,KAAA43C,mBACA,WACApkB,EAAAI,eAAA5zB,KAAAm4C,gBACA,gBACA,UACA,oBACA3kB,EAAAoB,oBACA,qBACApB,EAAAoB,qBAGA50B,KAAAq4C,eACA,OACA7kB,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAs4C,WAAA,QAAA9kB,EAAAI,eAAA5zB,KAAAi4C,oBAAA,OAAA,SAEAj4C,KAAAu4C,gBACA,WACA/kB,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAAw4C,iBACA,WACAhlB,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAs4C,WACA,cACA9kB,EAAAQ,iBAAAh0B,KAAAk4C,mBACA,WACA1kB,EAAAI,eAAA5zB,KAAAu4C,gBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACAv4C,KAAAi4C,mBACA,MACAj4C,KAAAi4C,mBACA,QACAj4C,KAAAi4C,mBACA,UACAj4C,KAAAi4C,mBACA,SACAj4C,KAAAi4C,mBACA,WACAj4C,KAAAi4C,mBACA,eACAj4C,KAAA+3C,YACA,aACA/3C,KAAA+3C,YACA,sBACA/3C,KAAA+3C,YACA,gBACA/3C,KAAA+3C,YACA,cACA/3C,KAAA+3C,YACA,aACA/3C,KAAA+3C,YACA,kBACA/3C,KAAA+3C,YACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGA/3C,KAAAy4C,iBAAA,OAAAjlB,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA04C,qBACA,MACAllB,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA24C,kBACA,OACAnlB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA04C,sBAGA14C,KAAAy1B,OAAAz1B,KAAA44C,kBACA,WACAplB,EAAAM,iBACA,SACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAo4C,qBACA,UACA5kB,EAAAI,eAAA5zB,KAAAq4C,eACA,YACA7kB,EAAAI,eAAA5zB,KAAAw4C,iBACA,YACAhlB,EAAAI,eAAA5zB,KAAAy4C,iBACA,aACAjlB,EAAAI,eAAA5zB,KAAA24C,kBACA,QACA,SACA,aACA,UACA,SACA,YAKAE,EAAA,WACA74C,KAAA84C,mBACA,OACAtlB,EAAAM,iBACA,aACAN,EAAAM,iBACA,QACA,SACA,SACA,WAGA9zB,KAAA+4C,qBAAA,SAAA,UAAA,QAAA,WAEA/4C,KAAAg5C,gBACA,kBACAxlB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA+4C,qBACA,aACA,SAGA/4C,KAAAi5C,aAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAj5C,KAAAk5C,mBAAA,OAAAl5C,KAAAi5C,YAAA,QAAAj5C,KAAAi5C,aAEAj5C,KAAAm5C,oBACA,eACA3lB,EAAAQ,iBAAAh0B,KAAAg5C,gBACA,kBACAxlB,EAAAQ,iBAAAh0B,KAAAk5C,mBACA,QACA,UACA,OACA,SAGAl5C,KAAAo5C,mBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACAp5C,KAAAm5C,mBACA,QACAn5C,KAAAm5C,mBACA,WACAn5C,KAAAm5C,mBACA,UACAn5C,KAAAm5C,oBAGAn5C,KAAAq5C,gBACA,OACA7lB,EAAAM,iBACA,kBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAo5C,mBACA,eACA,UACA,UACA,UACA,mBACA,UACA,UACA,UACA,mBACA,UACA,mBACA,UACA,gBACA,UACA,0BACA,UACA,2BACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAp5C,KAAAs5C,qBACA,cACA9lB,EAAAI,eAAA5zB,KAAA84C,mBACA,WACAtlB,EAAAI,eAAA5zB,KAAAq5C,gBACA,gBACA,UACA,oBACA7lB,EAAAoB,qBAGA50B,KAAAu5C,eACA,OACA/lB,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAAw5C,WAAA,QAAAhmB,EAAAI,eAAA5zB,KAAAm5C,oBAAA,OAAA,SAEAn5C,KAAAy5C,gBACA,WACAjmB,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAA05C,iBACA,WACAlmB,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAAw5C,WACA,cACAhmB,EAAAQ,iBAAAh0B,KAAAo5C,mBACA,WACA5lB,EAAAI,eAAA5zB,KAAAy5C,gBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACAz5C,KAAAm5C,mBACA,MACAn5C,KAAAm5C,mBACA,QACAn5C,KAAAm5C,mBACA,UACAn5C,KAAAm5C,mBACA,SACAn5C,KAAAm5C,mBACA,WACAn5C,KAAAm5C,mBACA,eACAn5C,KAAAi5C,YACA,aACAj5C,KAAAi5C,YACA,sBACAj5C,KAAAi5C,YACA,gBACAj5C,KAAAi5C,YACA,cACAj5C,KAAAi5C,YACA,aACAj5C,KAAAi5C,YACA,kBACAj5C,KAAAi5C,YACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAj5C,KAAA25C,iBAAA,OAAAnmB,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA45C,qBACA,MACApmB,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA65C,kBACA,OACArmB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA45C,sBAGA55C,KAAAy1B,OAAAz1B,KAAA85C,kBACA,WACAtmB,EAAAM,iBACA,SACAN,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAs5C,qBACA,UACA9lB,EAAAI,eAAA5zB,KAAAu5C,eACA,YACA/lB,EAAAI,eAAA5zB,KAAA05C,iBACA,YACAlmB,EAAAI,eAAA5zB,KAAA25C,iBACA,aACAnmB,EAAAI,eAAA5zB,KAAA65C,kBACA,QACA,SACA,aACA,UACA,SACA,YAKAE,EAAA,WACA/5C,KAAAg6C,mBACA,OACAxmB,EAAAM,iBACA,aACAN,EAAAM,iBACA,QACA,SACA,SACA,WAGA9zB,KAAAi6C,qBAAA,SAAA,UAAA,QAAA,WAEAj6C,KAAAk6C,gBACA,kBACA1mB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAAi6C,qBACA,aACA,SAGAj6C,KAAAm6C,aAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAn6C,KAAAo6C,mBAAA,OAAAp6C,KAAAm6C,YAAA,QAAAn6C,KAAAm6C,aAEAn6C,KAAAq6C,oBACA,eACA7mB,EAAAQ,iBAAAh0B,KAAAk6C,gBACA,kBACA1mB,EAAAQ,iBAAAh0B,KAAAo6C,mBACA,QACA,UACA,OACA,SAGAp6C,KAAAs6C,mBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACAt6C,KAAAq6C,mBACA,QACAr6C,KAAAq6C,mBACA,WACAr6C,KAAAq6C,mBACA,UACAr6C,KAAAq6C,oBAGAr6C,KAAAu6C,gBACA,OACA/mB,EAAAM,iBACA,kBACAN,EAAAM,iBACA,cACAN,EAAAQ,iBAAAh0B,KAAAs6C,mBACA,eACA,UACA,UACA,UACA,mBACA,UACA,UACA,UACA,mBACA,UACA,mBACA,UACA,gBACA,UACA,0BACA,UACA,2BACA,UACA,QACA,SACA,aACA,SACA,qBACA,SAGAt6C,KAAAw6C,qBACA,cACAhnB,EAAAI,eAAA5zB,KAAAg6C,mBACA,WACAxmB,EAAAI,eAAA5zB,KAAAu6C,gBACA,gBACA,UACA,oBACA/mB,EAAAoB,qBAGA50B,KAAAy6C,eACA,OACAjnB,EAAAM,iBACA,QACA,SACA,WACAN,EAAAI,eAAA,UAGA5zB,KAAA06C,WAAA,QAAAlnB,EAAAI,eAAA5zB,KAAAq6C,oBAAA,OAAA,SAEAr6C,KAAA26C,gBACA,WACAnnB,EAAAM,iBACA,SACA,UACA,WACAN,EAAAoB,oBACA,YACA,SAGA50B,KAAA46C,iBACA,WACApnB,EAAAM,iBACA,SACAN,EAAAM,iBACA,OACAN,EAAAM,iBACA,aACAN,EAAAM,iBACA,MACAN,EAAAI,eAAA5zB,KAAA06C,WACA,cACAlnB,EAAAQ,iBAAAh0B,KAAAs6C,mBACA,WACA9mB,EAAAI,eAAA5zB,KAAA26C,gBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,SACA,QACA36C,KAAAq6C,mBACA,MACAr6C,KAAAq6C,mBACA,QACAr6C,KAAAq6C,mBACA,UACAr6C,KAAAq6C,mBACA,SACAr6C,KAAAq6C,mBACA,WACAr6C,KAAAq6C,mBACA,eACAr6C,KAAAm6C,YACA,aACAn6C,KAAAm6C,YACA,sBACAn6C,KAAAm6C,YACA,gBACAn6C,KAAAm6C,YACA,cACAn6C,KAAAm6C,YACA,aACAn6C,KAAAm6C,YACA,kBACAn6C,KAAAm6C,YACA,cACA,QACA,kBACA,QACA,kBACA,QACA,WACA,QACA,eACA,QACA,eACA,QACA,iBACA,SAGAn6C,KAAA66C,iBAAA,OAAArnB,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAA86C,qBACA,MACAtnB,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAA+6C,kBACA,OACAvnB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA86C,sBAGA96C,KAAAy1B,OAAAz1B,KAAAg7C,kBACA,WACAxnB,EAAAM,iBACA,gBACAN,EAAAQ,iBAAAh0B,KAAAw6C,qBACA,UACAhnB,EAAAI,eAAA5zB,KAAAy6C,eACA,YACAjnB,EAAAI,eAAA5zB,KAAA46C,iBACA,YACApnB,EAAAI,eAAA5zB,KAAA66C,iBACA,aACArnB,EAAAI,eAAA5zB,KAAA+6C,kBACA,QACA,SACA,aACA,UACA,SACA,YAKA95C,EAAA,WACAjB,KAAAi7C,qBAAA,SAAA,UAAA,QAAA,WAEAj7C,KAAAk7C,gBACA,gBACA1nB,EAAAI,eAAA5zB,KAAAi7C,qBACA,aACA,QACA,kBACAznB,EAAAM,kBAGA9zB,KAAAm7C,aAAA,MAAA,UAAA,MAAA,UAAA,MAAA,SAEAn7C,KAAAo7C,mBAAA,OAAAp7C,KAAAm7C,YAAA,QAAAn7C,KAAAm7C,aAEAn7C,KAAAq7C,oBACA,eACA7nB,EAAAQ,iBAAAh0B,KAAAk7C,gBACA,kBACA1nB,EAAAQ,iBAAAh0B,KAAAo7C,mBACA,OACA,QACA,QACA,WAGAp7C,KAAAs7C,mBACA,kBACA,UACA,mBACA,UACA,oBACA,UACA,UACAt7C,KAAAq7C,mBACA,QACAr7C,KAAAq7C,mBACA,WACAr7C,KAAAq7C,mBACA,UACAr7C,KAAAq7C,oBAGAr7C,KAAAu7C,gBACA,cACA/nB,EAAAQ,iBAAAh0B,KAAAs7C,mBACA,QACA,SACA,aACA,SACA,qBACA,QACA,eACA,UACA,OACA9nB,EAAAM,iBACA,UACA,UACA,mBACA,UACA,UACA,UACA,mBACA,UACA,mBACA,UACA,gBACA,UACA,0BACA,UACA,2BACA,UACA,kBACAN,EAAAM,kBAGA9zB,KAAAw7C,mBACA,QACA,SACA,OACAhoB,EAAAM,iBACA,aACAN,EAAAM,iBACA,SACA,WAGA9zB,KAAAy7C,qBACA,WACAjoB,EAAAI,eAAA5zB,KAAAu7C,gBACA,gBACA,UACA,oBACA/nB,EAAAoB,oBACA,cACApB,EAAAI,eAAA5zB,KAAAw7C,oBAGAx7C,KAAA07C,eACA,WACAloB,EAAAI,eAAA,SACA,QACA,SACA,OACAJ,EAAAM,kBAGA9zB,KAAA27C,WAAA,QAAAnoB,EAAAI,eAAA5zB,KAAAq7C,oBAAA,OAAA,SAEAr7C,KAAA47C,gBACA,YACA,QACA,WACApoB,EAAAoB,oBACA,WACApB,EAAAM,iBACA,SACA,WAGA9zB,KAAA67C,iBACA,cACAroB,EAAAQ,iBAAAh0B,KAAAs7C,mBACA,WACA9nB,EAAAM,iBACA,cACA,QACA,kBACA,QACA,QACA9zB,KAAAq7C,mBACA,MACA7nB,EAAAI,eAAA5zB,KAAA27C,WACA,SACAnoB,EAAAM,iBACA,eACA,UACA,aACA,UACA,cACA,UACA,kBACA,QACA,WACAN,EAAAI,eAAA5zB,KAAA47C,gBACA,QACA,SACA,eACA57C,KAAAm7C,YACA,YACA,SACA,WACA,QACA,OACA3nB,EAAAM,iBACA,MACA9zB,KAAAq7C,mBACA,QACAr7C,KAAAq7C,mBACA,eACA,QACA,aACAr7C,KAAAm7C,YACA,aACA3nB,EAAAM,iBACA,eACA,QACA,kBACA,KAAA,UAAA,GACA,sBACA9zB,KAAAm7C,YACA,gBACAn7C,KAAAm7C,YACA,cACAn7C,KAAAm7C,YACA,aACAn7C,KAAAm7C,YACA,kBACAn7C,KAAAm7C,YACA,iBACA,QACA,SACAn7C,KAAAq7C,oBAGAr7C,KAAA87C,iBAAA,WAAAtoB,EAAAoB,oBAAA,OAAApB,EAAAM,kBAEA9zB,KAAA+7C,qBACA,MACAvoB,EAAAM,iBACA,MACAN,EAAAM,iBACA,OACA,UACA,OACA,SAGA9zB,KAAAg8C,kBACA,OACAxoB,EAAAM,iBACA,gBACAN,EAAAI,eAAA5zB,KAAA+7C,sBAGA/7C,KAAAy1B,OAAAz1B,KAAAi8C,kBACA,gBACAzoB,EAAAQ,iBAAAh0B,KAAAy7C,qBACA,aACA,UACA,QACA,SACA,UACAjoB,EAAAI,eAAA5zB,KAAA07C,eACA,YACAloB,EAAAI,eAAA5zB,KAAA67C,iBACA,YACAroB,EAAAI,eAAA5zB,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ACAJ,EAAAI,eAAA,WAKA3yB,EAAA,WACAjB,KAAAy1B,OAAAz1B,KAAAi2D,gBACA,SACA,UACA,SACA,UACA,MACA,SACA,aACA,SACA,YACA,SACA,UACA,SACA,QACA,SACA,SACA,QACA,WACA,QACA,WACA,QACA,UACA,QACA,cACA,QACA,YACA,QACA,YACA,QACA,YACA,QACA,YACAziC,EAAAI,eAAA,SACA,YACAJ,EAAAI,eAAA,WAKAsoB,EAAA,WACAl8C,KAAAy1B,OAAAz1B,KAAAk2D,gBACA,OACA1iC,EAAAI,eAAA,SACA,QACA,SACA,SACA,UACA,WACA,QACA,WACA,QACA,UACA,QACA,cACA,QACA,aACA,SACA,mBACA,qEC/HA,IAAAJ,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAgf,EAAA,WACAzyC,KAAAm2D,oBACA,aACA,SACA,eACA,SACA,oBACA3iC,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,oBACA,uBACApB,EAAAoB,oBACA,mBACApB,EAAAoB,oBACA,iBACA,UACA,WACA,SACA,SACApB,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,SACA,UACA,SACA,UACA,OACAJ,EAAAM,iBACA,QACA,UAGA9zB,KAAAo2D,wBAAA,aAAA5iC,EAAA2B,qBAEAn1B,KAAAq2D,iBAAA,aAAA7iC,EAAAoB,oBAAA,QAAA,UAEA50B,KAAAy1B,OAAAz1B,KAAAs2D,UACA,4BACA9iC,EAAAoB,oBACA,+BACApB,EAAAoB,oBACA,8BACApB,EAAAoB,oBACA,iCACApB,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAm2D,oBACA,mBACA3iC,EAAAI,eAAA5zB,KAAAo2D,wBACA,gBACA5iC,EAAAI,eAAA5zB,KAAAq2D,mBAKAtiB,EAAA,WACA/zC,KAAAm2D,oBACA,aACA,SACA,eACA,SACA,oBACA3iC,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,oBACA,uBACApB,EAAAoB,oBACA,mBACApB,EAAAoB,oBACA,iBACA,UACA,WACA,SACA,SACApB,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,SACA,UACA,SACA,UACA,OACAJ,EAAAM,iBACA,QACA,UAGA9zB,KAAAo2D,wBAAA,aAAA5iC,EAAA2B,qBAEAn1B,KAAAy1B,OAAAz1B,KAAAs2D,UACA,4BACA9iC,EAAAoB,oBACA,+BACApB,EAAAoB,oBACA,8BACApB,EAAAoB,oBACA,iCACApB,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAm2D,oBACA,mBACA3iC,EAAAI,eAAA5zB,KAAAo2D,0BAKAhhB,EAAA,WACAp1C,KAAAm2D,oBACA,aACA,SACA,eACA,SACA,oBACA3iC,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,oBACA,uBACApB,EAAAoB,oBACA,mBACApB,EAAAoB,oBACA,iBACA,UACA,WACA,SACA,SACApB,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,SACA,UACA,SACA,UACA,OACAJ,EAAAM,iBACA,QACA,UAGA9zB,KAAAy1B,OAAAz1B,KAAAs2D,UACA,4BACA9iC,EAAAoB,oBACA,+BACApB,EAAAoB,oBACA,8BACApB,EAAAoB,oBACA,iCACApB,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAm2D,sBAKA3f,EAAA,WACAx2C,KAAAm2D,oBACA,aACA,SACA,eACA,SACA,oBACA3iC,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,oBACA,uBACApB,EAAAoB,oBACA,SACApB,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,SACA,UACA,SACA,UACA,OACAJ,EAAAM,iBACA,QACA,UAGA9zB,KAAAy1B,OAAAz1B,KAAAs2D,UACA,4BACA9iC,EAAAoB,oBACA,+BACApB,EAAAoB,oBACA,8BACApB,EAAAoB,oBACA,iCACApB,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAm2D,sBAKAxe,EAAA,WACA33C,KAAAm2D,oBACA,aACA,SACA,eACA,SACA,oBACA3iC,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,mBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,oBACA,uBACApB,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,SACApB,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,SACA,UACA,SACA,UACA,OACAJ,EAAAM,kBAGA9zB,KAAAy1B,OAAAz1B,KAAAs2D,UACA,4BACA9iC,EAAAoB,oBACA,0BACApB,EAAAoB,oBACA,+BACApB,EAAAoB,oBACA,6BACApB,EAAAoB,oBACA,8BACApB,EAAAoB,oBACA,4BACApB,EAAAoB,oBACA,iCACApB,EAAAoB,oBACA,+BACApB,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAm2D,sBAKAtd,EAAA,WACA74C,KAAAm2D,oBACA,aACA,SACA,eACA,SACA,oBACA3iC,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,mBACApB,EAAAoB,oBACA,sBACApB,EAAAoB,oBACA,uBACApB,EAAAoB,oBACA,qBACApB,EAAAoB,oBACA,SACApB,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,SACA,UACA,SACA,WAGA5zB,KAAAy1B,OAAAz1B,KAAAs2D,UACA,4BACA9iC,EAAAoB,oBACA,0BACApB,EAAAoB,oBACA,+BACApB,EAAAoB,oBACA,6BACApB,EAAAoB,oBACA,8BACApB,EAAAoB,oBACA,4BACApB,EAAAoB,oBACA,iCACApB,EAAAoB,oBACA,+BACApB,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAm2D,sBAKApc,EAAA,WACA/5C,KAAAm2D,oBACA,aACA,SACA,eACA,SACA,iBACA3iC,EAAAoB,oBACA,kBACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,SACApB,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,SACA,UACA,SACA,WAGA5zB,KAAAy1B,OAAAz1B,KAAAs2D,UACA,8BACA9iC,EAAAoB,oBACA,4BACApB,EAAAoB,oBACA,wCACApB,EAAAoB,oBACA,sCACApB,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAm2D,sBAKAl1D,EAAA,WACAjB,KAAAm2D,oBACA,aACA,SACA,eACA,SACA,iBACA3iC,EAAAoB,oBACA,kBACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,SACApB,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,SACA,UACA,SACA,WAGA5zB,KAAAy1B,OAAAz1B,KAAAs2D,UACA,8BACA9iC,EAAAoB,oBACA,4BACApB,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAm2D,sBAKAja,EAAA,WACAl8C,KAAAy1B,OAAAz1B,KAAAs2D,UACA,8BACA9iC,EAAAoB,oBACA,4BACApB,EAAAoB,iFCxaA,IAAApB,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAyoB,EAAA,WACAl8C,KAAAu2D,oBAAA,WAAA/iC,EAAAoB,qBAEA50B,KAAAw2D,oBAAA,eAAAhjC,EAAAI,eAAA5zB,KAAAu2D,qBAEAv2D,KAAAy1B,OAAAz1B,KAAAy2D,iBAAA,eAAAjjC,EAAAI,eAAA5zB,KAAAw2D,iFChBA,IAAAhjC,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAsmB,EAAA,WACA/5C,KAAA02D,gBACA,UACA,SACA,QACA,SACA,YACA,SACA,YACA,SACA,YACA,SACA,YACA,SACA,SACA,UACA,SACA,UACA,YACA,QACA,YACA,QACA,YACA,QACA,YACA,QACA,YACAljC,EAAAI,eAAA,UAGA5zB,KAAA22D,oBACA,YACA,SACA,YACA,SACA,YACA,SACA,YACA,UAGA32D,KAAAy1B,OAAAz1B,KAAA42D,gBACA,YACA,SACA,YACA,SACA,YACA,SACA,YACA,SACA,WACApjC,EAAAI,eAAA5zB,KAAA02D,gBACA,eACAljC,EAAAQ,iBAAAh0B,KAAA22D,sBAKA11D,EAAA,WACAjB,KAAA62D,gBACA,UACA,SACA,QACA,SACA,YACA,SACA,YACA,SACA,SACA,UACA,SACA,UACA,YACArjC,EAAAI,eAAA,UAGA5zB,KAAAy1B,OAAAz1B,KAAA82D,gBACA,YACA,SACA,YACA,SACA,WACAtjC,EAAAI,eAAA5zB,KAAA62D,kBAKA3a,EAAA,WACAl8C,KAAA+2D,gBACA,UACA,SACA,QACA,SACA,YACA,SACA,YACA,SACA,SACA,UACA,SACA,UACA,YACAvjC,EAAAI,eAAA,UAGA5zB,KAAAy1B,OAAAz1B,KAAAg3D,gBACA,YACA,SACA,YACA,SACA,WACAxjC,EAAAI,eAAA5zB,KAAA+2D,6EC1HA,IAAAvjC,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAyoB,EAAA,WACAl8C,KAAAi3D,oBAAA,WAAAzjC,EAAAoB,qBAEA50B,KAAAy1B,OAAAz1B,KAAAk3D,cACA,aACA,KAAA,SAAA,GACA,mBACA1jC,EAAAI,eAAA5zB,KAAAi3D,iFClBA,IAAAzjC,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAxyB,EAAA,WACAjB,KAAAm3D,iBACA,iBACA,QACA,kBACA,QACA,iBACA,QACA,gBACA,QACA,WACA,QACA,QACA,UAGAn3D,KAAAo3D,qBACA,cACAp3D,KAAAm3D,gBACA,eACA,SACA,cACA,SACA,UACA,KAAA,SAAA,IACA,YACA,UAGAn3D,KAAAy1B,OAAAz1B,KAAAq3D,iBAAA,OAAA7jC,EAAAI,eAAA5zB,KAAAo3D,uBAIAlb,EAAA,WACAl8C,KAAAs3D,uBACA,SACA,SACA,eACA,SACA,cACA,SACA,UACA,KAAA,SAAA,IA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5zB,KAAAo7D,yBACA,gBACA5nC,EAAAI,eAAA5zB,KAAAq7D,+BAGAr7D,KAAAy1B,OAAAz1B,KAAAu7D,kBACA,gBACA/nC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAy6D,6BACA,aACAjnC,EAAAI,eAAA5zB,KAAA66D,2BACA,cACArnC,EAAAI,eAAA5zB,KAAAs7D,0BACA,gBACA,WAKAz2B,GAAA,WACA7kC,KAAAw7D,6BACA,OACAhoC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAy7D,gCACA,OACAjoC,EAAAM,iBACA,QACA,QACA,MACA,UACA,MACA,UACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,IAGA9zB,KAAA07D,iCACA,OACAloC,EAAAM,iBACA,QACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAy7D,iCAGAz7D,KAAA27D,6BAAA,OAAAnoC,EAAAM,iBAAA,QAAA,WAEA9zB,KAAA47D,2BACA,aACApoC,EAAAI,eAAA5zB,KAAA07D,iCACA,cACAloC,EAAAI,eAAA5zB,KAAA27D,8BAGA37D,KAAA67D,+BAAA,WAAAroC,EAAA2B,qBAEAn1B,KAAA87D,0BACA,OACAtoC,EAAAM,iBACA,OACA,QACA,QACA,QACA,mBACAN,EAAAM,iBACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,SAGA50B,KAAA+7D,6BACA,QACAvoC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAAg8D,2BACA,QACAxoC,EAAAM,iBACA,OACAN,EAAAM,iBACA,QACAN,EAAAM,iBACA,OACAN,EAAAM,kBAGA9zB,KAAAi8D,uBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAj8D,KAAAk8D,kCACA,YACA1oC,EAAAM,iBACA,SACA9zB,KAAAi8D,sBACA,SACAj8D,KAAAi8D,sBACA,SACAj8D,KAAAi8D,sBACA,SACAj8D,KAAAi8D,uBAGAj8D,KAAAm8D,yBACA,QACA3oC,EAAAM,iBACA,iBACA,SACA,aACAN,EAAAI,eAAA5zB,KAAAk8D,kCACA,WACAl8D,KAAAi8D,sBACA,YACAj8D,KAAAi8D,sBACA,aACAj8D,KAAAi8D,sBACA,eACAj8D,KAAAi8D,sBACA,YACAj8D,KAAAi8D,sBACA,YACA,UAGAj8D,KAAAo8D,8BAAA,WAAA5oC,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAq8D,0BACA,OACA7oC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACAN,EAAAI,eAAA5zB,KAAA47D,2BACA,qBACApoC,EAAAI,eAAA5zB,KAAA67D,+BACA,OACAroC,EAAAI,eAAAJ,EAAAM,kBACA,kBACAN,EAAA2B,oBACA,iBACA3B,EAAAI,eAAA5zB,KAAA47D,2BACA,QACApoC,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA87D,0BACA,QACA,SACA,aACAtoC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA+7D,6BACA,mBACAvoC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAAg8D,2BACA,OACA,SACA,iBACAxoC,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAm8D,yBACA,gBACA3oC,EAAAI,eAAA5zB,KAAAo8D,+BAGAp8D,KAAAy1B,OAAAz1B,KAAAs8D,kBACA,gBACA9oC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAw7D,6BACA,aACAhoC,EAAAI,eAAA5zB,KAAA47D,2BACA,cACApoC,EAAAI,eAAA5zB,KAAAq8D,0BACA,gBACA,WAKAl2B,GAAA,WACAnmC,KAAAu8D,6BACA,OACA/oC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAw8D,gCACA,OACAhpC,EAAAM,iBACA,QACA,QACA,MACA,UACA,MACA,UACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,IAGA9zB,KAAAy8D,iCACA,OACAjpC,EAAAM,iBACA,QACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAw8D,iCAGAx8D,KAAA08D,6BAAA,OAAAlpC,EAAAM,iBAAA,QAAA,WAEA9zB,KAAA28D,2BACA,aACAnpC,EAAAI,eAAA5zB,KAAAy8D,iCACA,cACAjpC,EAAAI,eAAA5zB,KAAA08D,8BAGA18D,KAAA48D,+BAAA,WAAAppC,EAAA2B,qBAEAn1B,KAAA68D,0BACA,OACArpC,EAAAM,iBACA,OACA,QACA,QACA,QACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,SAGA50B,KAAA88D,6BACA,QACAtpC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA+8D,2BACA,QACAvpC,EAAAM,iBACA,OACAN,EAAAM,iBACA,QACAN,EAAAM,iBACA,OACAN,EAAAM,kBAGA9zB,KAAAg9D,uBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAh9D,KAAAi9D,kCACA,YACAzpC,EAAAM,iBACA,SACA9zB,KAAAg9D,sBACA,SACAh9D,KAAAg9D,sBACA,SACAh9D,KAAAg9D,sBACA,SACAh9D,KAAAg9D,uBAGAh9D,KAAAk9D,yBACA,QACA1pC,EAAAM,iBACA,iBACA,SACA,aACAN,EAAAI,eAAA5zB,KAAAi9D,kCACA,WACAj9D,KAAAg9D,sBACA,YACAh9D,KAAAg9D,sBACA,aACAh9D,KAAAg9D,sBACA,eACAh9D,KAAAg9D,sBACA,YACAh9D,KAAAg9D,sBACA,YACA,UAGAh9D,KAAAm9D,8BAAA,WAAA3pC,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAo9D,0BACA,OACA5pC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACAN,EAAAI,eAAA5zB,KAAA28D,2BACA,qBACAnpC,EAAAI,eAAA5zB,KAAA48D,+BACA,OACAppC,EAAAI,eAAAJ,EAAAM,kBACA,kBACAN,EAAA2B,oBACA,iBACA3B,EAAAI,eAAA5zB,KAAA28D,2BACA,QACAnpC,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA68D,0BACA,QACA,SACA,aACArpC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA88D,6BACA,mBACAtpC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAA+8D,2BACA,OACA,SACA,iBACAvpC,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAk9D,yBACA,gBACA1pC,EAAAI,eAAA5zB,KAAAm9D,+BAGAn9D,KAAAy1B,OAAAz1B,KAAAq9D,kBACA,gBACA7pC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAu8D,6BACA,aACA/oC,EAAAI,eAAA5zB,KAAA28D,2BACA,cACAnpC,EAAAI,eAAA5zB,KAAAo9D,0BACA,gBACA,WAKA31B,GAAA,WACAznC,KAAAs9D,6BACA,OACA9pC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAu9D,gCACA,OACA/pC,EAAAM,iBACA,QACA,QACA,MACA,UACA,MACA,UACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,IAGA9zB,KAAAw9D,iCACA,OACAhqC,EAAAM,iBACA,QACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAu9D,iCAGAv9D,KAAAy9D,6BAAA,OAAAjqC,EAAAM,iBAAA,QAAA,WAEA9zB,KAAA09D,2BACA,aACAlqC,EAAAI,eAAA5zB,KAAAw9D,iCACA,cACAhqC,EAAAI,eAAA5zB,KAAAy9D,8BAGAz9D,KAAA29D,+BAAA,WAAAnqC,EAAA2B,qBAEAn1B,KAAA49D,0BACA,OACApqC,EAAAM,iBACA,OACA,QACA,QACA,QACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,SAGA50B,KAAA69D,6BACA,QACArqC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA89D,uBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGA99D,KAAA+9D,kCACA,YACAvqC,EAAAM,iBACA,SACA9zB,KAAA89D,sBACA,SACA99D,KAAA89D,sBACA,SACA99D,KAAA89D,sBACA,SACA99D,KAAA89D,uBAGA99D,KAAAg+D,yBACA,QACAxqC,EAAAM,iBACA,iBACA,SACA,aACAN,EAAAI,eAAA5zB,KAAA+9D,kCACA,WACA/9D,KAAA89D,sBACA,YACA99D,KAAA89D,sBACA,aACA99D,KAAA89D,sBACA,eACA99D,KAAA89D,sBACA,YACA99D,KAAA89D,sBACA,YACA,UAGA99D,KAAAi+D,8BAAA,WAAAzqC,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAk+D,0BACA,OACA1qC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACAN,EAAAI,eAAA5zB,KAAA09D,2BACA,qBACAlqC,EAAAI,eAAA5zB,KAAA29D,+BACA,OACAnqC,EAAAI,eAAAJ,EAAAM,kBACA,kBACAN,EAAA2B,oBACA,iBACA3B,EAAAI,eAAA5zB,KAAA09D,2BACA,QACAlqC,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA49D,0BACA,QACA,SACA,aACApqC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA69D,6BACA,mBACArqC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,iBACA,QACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAg+D,yBACA,gBACAxqC,EAAAI,eAAA5zB,KAAAi+D,+BAGAj+D,KAAAy1B,OAAAz1B,KAAAm+D,kBACA,gBACA3qC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAs9D,6BACA,aACA9pC,EAAAI,eAAA5zB,KAAA09D,2BACA,cACAlqC,EAAAI,eAAA5zB,KAAAk+D,0BACA,gBACA,WAKAn1B,GAAA,WACA/oC,KAAAo+D,6BACA,OACA5qC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAq+D,gCACA,OACA7qC,EAAAM,iBACA,QACA,QACA,MACA,UACA,MACA,UACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,IAGA9zB,KAAAs+D,iCACA,OACA9qC,EAAAM,iBACA,QACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAq+D,iCAGAr+D,KAAAu+D,6BAAA,OAAA/qC,EAAAM,iBAAA,QAAA,WAEA9zB,KAAAw+D,2BACA,aACAhrC,EAAAI,eAAA5zB,KAAAs+D,iCACA,cACA9qC,EAAAI,eAAA5zB,KAAAu+D,8BAGAv+D,KAAAy+D,+BAAA,WAAAjrC,EAAA2B,qBAEAn1B,KAAA0+D,0BACA,OACAlrC,EAAAM,iBACA,OACA,QACA,QACA,QACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,SAGA50B,KAAA2+D,6BACA,QACAnrC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA4+D,uBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGA5+D,KAAA6+D,kCACA,YACArrC,EAAAM,iBACA,SACA9zB,KAAA4+D,sBACA,SACA5+D,KAAA4+D,sBACA,SACA5+D,KAAA4+D,sBACA,SACA5+D,KAAA4+D,uBAGA5+D,KAAA8+D,yBACA,QACAtrC,EAAAM,iBACA,iBACA,SACA,aACAN,EAAAI,eAAA5zB,KAAA6+D,kCACA,WACA7+D,KAAA4+D,sBACA,YACA5+D,KAAA4+D,sBACA,aACA5+D,KAAA4+D,sBACA,eACA5+D,KAAA4+D,sBACA,YACA5+D,KAAA4+D,sBACA,YACA,UAGA5+D,KAAA++D,8BAAA,WAAAvrC,EAAAM,iBAAA,WAAAN,EAAAoB,qBAEA50B,KAAAg/D,0BACA,OACAxrC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACAN,EAAAI,eAAA5zB,KAAAw+D,2BACA,qBACAhrC,EAAAI,eAAA5zB,KAAAy+D,+BACA,OACAjrC,EAAAI,eAAAJ,EAAAM,kBACA,kBACAN,EAAA2B,oBACA,iBACA3B,EAAAI,eAAA5zB,KAAAw+D,2BACA,QACAhrC,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA0+D,0BACA,QACA,SACA,aACAlrC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA2+D,6BACA,mBACAnrC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,iBACA,QACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAA8+D,yBACA,gBACAtrC,EAAAI,eAAA5zB,KAAA++D,+BAGA/+D,KAAAy1B,OAAAz1B,KAAAi/D,kBACA,gBACAzrC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAo+D,6BACA,aACA5qC,EAAAI,eAAA5zB,KAAAw+D,2BACA,cACAhrC,EAAAI,eAAA5zB,KAAAg/D,0BACA,gBACA,WAKA30B,GAAA,WACArqC,KAAAk/D,6BACA,OACA1rC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAm/D,gCACA,OACA3rC,EAAAM,iBACA,QACA,QACA,MACA,UACA,MACA,UACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,IAGA9zB,KAAAo/D,iCACA,OACA5rC,EAAAM,iBACA,QACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAm/D,iCAGAn/D,KAAAq/D,6BAAA,OAAA7rC,EAAAM,iBAAA,QAAA,WAEA9zB,KAAAs/D,2BACA,aACA9rC,EAAAI,eAAA5zB,KAAAo/D,iCACA,cACA5rC,EAAAI,eAAA5zB,KAAAq/D,8BAGAr/D,KAAAu/D,+BAAA,WAAA/rC,EAAA2B,qBAEAn1B,KAAAw/D,0BACA,OACAhsC,EAAAM,iBACA,OACA,QACA,QACA,QACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,SAGA50B,KAAAy/D,6BACA,QACAjsC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA0/D,uBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGA1/D,KAAA2/D,kCACA,YACAnsC,EAAAM,iBACA,SACA9zB,KAAA0/D,sBACA,SACA1/D,KAAA0/D,sBACA,SACA1/D,KAAA0/D,sBACA,SACA1/D,KAAA0/D,uBAGA1/D,KAAA4/D,yBACA,QACApsC,EAAAM,iBACA,iBACA,SACA,aACAN,EAAAI,eAAA5zB,KAAA2/D,kCACA,WACA3/D,KAAA0/D,sBACA,YACA1/D,KAAA0/D,sBACA,aACA1/D,KAAA0/D,sBACA,eACA1/D,KAAA0/D,sBACA,YACA1/D,KAAA0/D,sBACA,YACA,UAGA1/D,KAAA6/D,0BACA,OACArsC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACAN,EAAAI,eAAA5zB,KAAAs/D,2BACA,qBACA9rC,EAAAI,eAAA5zB,KAAAu/D,+BACA,OACA/rC,EAAAI,eAAAJ,EAAAM,kBACA,kBACAN,EAAA2B,oBACA,iBACA3B,EAAAI,eAAA5zB,KAAAs/D,2BACA,QACA9rC,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAAw/D,0BACA,QACA,SACA,aACAhsC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAy/D,6BACA,mBACAjsC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,iBACA,QACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAA4/D,0BAGA5/D,KAAAy1B,OAAAz1B,KAAA8/D,kBACA,gBACAtsC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAk/D,6BACA,aACA1rC,EAAAI,eAAA5zB,KAAAs/D,2BACA,cACA9rC,EAAAI,eAAA5zB,KAAA6/D,0BACA,gBACA,WAKAl0B,GAAA,WACA3rC,KAAA+/D,6BACA,OACAvsC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAggE,gCACA,OACAxsC,EAAAM,iBACA,QACA,QACA,MACA,UACA,MACA,UACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,IAGA9zB,KAAAigE,iCACA,OACAzsC,EAAAM,iBACA,QACA,UACA,OACAN,EAAAI,eAAA5zB,KAAAggE,iCAGAhgE,KAAAkgE,6BAAA,QAAA,UAAA,OAAA1sC,EAAAM,kBAEA9zB,KAAAmgE,2BACA,aACA3sC,EAAAI,eAAA5zB,KAAAigE,iCACA,cACAzsC,EAAAI,eAAA5zB,KAAAkgE,8BAGAlgE,KAAAogE,+BAAA,WAAA5sC,EAAA2B,qBAEAn1B,KAAAqgE,0BACA,OACA7sC,EAAAM,iBACA,OACA,QACA,QACA,QACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,SAGA50B,KAAAsgE,6BACA,QACA9sC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAAugE,uBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAvgE,KAAAwgE,kCACA,YACAhtC,EAAAM,iBACA,SACA9zB,KAAAugE,sBACA,SACAvgE,KAAAugE,sBACA,SACAvgE,KAAAugE,sBACA,SACAvgE,KAAAugE,uBAGAvgE,KAAAygE,yBACA,QACAjtC,EAAAM,iBACA,iBACA,SACA,aACAN,EAAAI,eAAA5zB,KAAAwgE,kCACA,YACAxgE,KAAAugE,sBACA,aACAvgE,KAAAugE,sBACA,eACAvgE,KAAAugE,sBACA,YACAvgE,KAAAugE,sBACA,YACA,UAGAvgE,KAAA0gE,0BACA,OACAltC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACAN,EAAAI,eAAA5zB,KAAAmgE,2BACA,qBACA3sC,EAAAI,eAAA5zB,KAAAogE,+BACA,OACA5sC,EAAAI,eAAAJ,EAAAM,kBACA,iBACAN,EAAAI,eAAA5zB,KAAAmgE,2BACA,QACA3sC,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAAqgE,0BACA,QACA,SACA,aACA7sC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAsgE,6BACA,mBACA9sC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,iBACA,QACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAygE,0BAGAzgE,KAAAy1B,OAAAz1B,KAAA2gE,kBACA,gBACAntC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA+/D,6BACA,aACAvsC,EAAAI,eAAA5zB,KAAAmgE,2BACA,cACA3sC,EAAAI,eAAA5zB,KAAA0gE,0BACA,gBACA,WAKAzzB,GAAA,WACAjtC,KAAA4gE,6BACA,OACAptC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAA6gE,gCACA,OACArtC,EAAAM,iBACA,QACA,QACA,MACA,UACA,MACA,UACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,IAGA9zB,KAAA8gE,iCACA,OACAttC,EAAAM,iBACA,QACA,UACA,OACAN,EAAAI,eAAA5zB,KAAA6gE,iCAGA7gE,KAAA+gE,6BAAA,QAAA,UAAA,OAAAvtC,EAAAM,kBAEA9zB,KAAAghE,2BACA,aACAxtC,EAAAI,eAAA5zB,KAAA8gE,iCACA,cACAttC,EAAAI,eAAA5zB,KAAA+gE,8BAGA/gE,KAAAihE,+BAAA,WAAAztC,EAAA2B,qBAEAn1B,KAAAkhE,0BACA,OACA1tC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAAmhE,6BACA,QACA3tC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAAohE,uBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAphE,KAAAqhE,kCACA,YACA7tC,EAAAM,iBACA,SACA9zB,KAAAohE,sBACA,SACAphE,KAAAohE,sBACA,SACAphE,KAAAohE,sBACA,SACAphE,KAAAohE,uBAGAphE,KAAAshE,yBACA,QACA9tC,EAAAM,iBACA,iBACA,SACA,aACAN,EAAAI,eAAA5zB,KAAAqhE,kCACA,YACArhE,KAAAohE,sBACA,aACAphE,KAAAohE,sBACA,eACAphE,KAAAohE,sBACA,YACAphE,KAAAohE,sBACA,YACA,UAGAphE,KAAAuhE,0BACA,OACA/tC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACAN,EAAAI,eAAA5zB,KAAAghE,2BACA,qBACAxtC,EAAAI,eAAA5zB,KAAAihE,+BACA,OACAztC,EAAAI,eAAAJ,EAAAM,kBACA,iBACAN,EAAAI,eAAA5zB,KAAAghE,2BACA,QACAxtC,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAAkhE,0BACA,QACA,SACA,aACA1tC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAmhE,6BACA,mBACA3tC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,iBACA,QACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAshE,0BAGAthE,KAAAy1B,OAAAz1B,KAAAwhE,kBACA,gBACAhuC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA4gE,6BACA,aACAptC,EAAAI,eAAA5zB,KAAAghE,2BACA,cACAxtC,EAAAI,eAAA5zB,KAAAuhE,0BACA,gBACA,WAKAhzB,GAAA,WACAvuC,KAAAyhE,6BACA,OACAjuC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAA0hE,gCACA,OACAluC,EAAAM,iBACA,QACA,QACA,MACA,UACA,MACA,UACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,IAGA9zB,KAAA2hE,iCACA,QACA,UACA,OACAnuC,EAAAI,eAAA5zB,KAAA0hE,iCAGA1hE,KAAA4hE,2BAAA,aAAApuC,EAAAI,eAAA5zB,KAAA2hE,kCAEA3hE,KAAA6hE,0BACA,OACAruC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAA8hE,6BACA,QACAtuC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA+hE,uBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGA/hE,KAAAgiE,kCACA,YACAxuC,EAAAM,iBACA,SACA9zB,KAAA+hE,sBACA,SACA/hE,KAAA+hE,sBACA,SACA/hE,KAAA+hE,sBACA,SACA/hE,KAAA+hE,uBAGA/hE,KAAAiiE,yBACA,QACAzuC,EAAAM,iBACA,iBACA,SACA,aACAN,EAAAI,eAAA5zB,KAAAgiE,kCACA,YACAhiE,KAAA+hE,sBACA,aACA/hE,KAAA+hE,sBACA,eACA/hE,KAAA+hE,sBACA,YACA/hE,KAAA+hE,sBACA,YACA,UAGA/hE,KAAAkiE,0BACA,OACA1uC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA6hE,0BACA,QACA,SACA,aACAruC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA8hE,6BACA,mBACAtuC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAiiE,0BAGAjiE,KAAAy1B,OAAAz1B,KAAAmiE,kBACA,gBACA3uC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAyhE,6BACA,aACAjuC,EAAAI,eAAA5zB,KAAA4hE,2BACA,cACApuC,EAAAI,eAAA5zB,KAAAkiE,0BACA,gBACA,WAKAryB,GAAA,WACA7vC,KAAAoiE,6BACA,OACA5uC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAqiE,0BACA,OACA7uC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAAsiE,6BACA,QACA9uC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAAuiE,uBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAviE,KAAAwiE,kCACA,YACAhvC,EAAAM,iBACA,SACA9zB,KAAAuiE,sBACA,SACAviE,KAAAuiE,sBACA,SACAviE,KAAAuiE,sBACA,SACAviE,KAAAuiE,uBAGAviE,KAAAyiE,yBACA,QACAjvC,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAwiE,kCACA,YACAxiE,KAAAuiE,sBACA,aACAviE,KAAAuiE,sBACA,eACAviE,KAAAuiE,sBACA,YACAviE,KAAAuiE,sBACA,YACA,UAGAviE,KAAA0iE,0BACA,OACAlvC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAAqiE,0BACA,QACA,SACA,aACA7uC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAsiE,6BACA,mBACA9uC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAyiE,0BAGAziE,KAAAy1B,OAAAz1B,KAAA2iE,kBACA,gBACAnvC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAoiE,6BACA,cACA5uC,EAAAI,eAAA5zB,KAAA0iE,0BACA,gBACA,WAKAvxB,EAAA,WACAnxC,KAAA4iE,4BACA,OACApvC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAA6iE,yBACA,OACArvC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAA8iE,4BACA,QACAtvC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA+iE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGA/iE,KAAAgjE,iCACA,YACAxvC,EAAAM,iBACA,SACA9zB,KAAA+iE,qBACA,SACA/iE,KAAA+iE,qBACA,SACA/iE,KAAA+iE,qBACA,SACA/iE,KAAA+iE,sBAGA/iE,KAAAijE,wBACA,QACAzvC,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAgjE,iCACA,YACAhjE,KAAA+iE,qBACA,aACA/iE,KAAA+iE,qBACA,eACA/iE,KAAA+iE,qBACA,YACA/iE,KAAA+iE,qBACA,YACA,UAGA/iE,KAAAkjE,yBACA,OACA1vC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA6iE,yBACA,aACArvC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA8iE,4BACA,mBACAtvC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAijE,yBAGAjjE,KAAAy1B,OAAAz1B,KAAAmjE,iBACA,gBACA3vC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA4iE,4BACA,cACApvC,EAAAI,eAAA5zB,KAAAkjE,yBACA,gBACA,WAKAzwB,EAAA,WACAzyC,KAAAojE,4BACA,OACA5vC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAqjE,yBACA,OACA7vC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAAsjE,4BACA,QACA9vC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAAujE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAvjE,KAAAwjE,iCACA,YACAhwC,EAAAM,iBACA,SACA9zB,KAAAujE,qBACA,SACAvjE,KAAAujE,qBACA,SACAvjE,KAAAujE,qBACA,SACAvjE,KAAAujE,sBAGAvjE,KAAAyjE,wBACA,QACAjwC,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAwjE,iCACA,YACAxjE,KAAAujE,qBACA,aACAvjE,KAAAujE,qBACA,eACAvjE,KAAAujE,qBACA,YACAvjE,KAAAujE,qBACA,YACA,UAGAvjE,KAAA0jE,yBACA,OACAlwC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,gBACAN,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAAqjE,yBACA,aACA7vC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAsjE,4BACA,mBACA9vC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAyjE,yBAGAzjE,KAAAy1B,OAAAz1B,KAAA2jE,iBACA,gBACAnwC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAojE,4BACA,cACA5vC,EAAAI,eAAA5zB,KAAA0jE,2BAKA3vB,EAAA,WACA/zC,KAAA4jE,4BACA,OACApwC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAA6jE,yBACA,OACArwC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAA8jE,4BACA,QACAtwC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA+jE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGA/jE,KAAAgkE,iCACA,YACAxwC,EAAAM,iBACA,SACA9zB,KAAA+jE,qBACA,SACA/jE,KAAA+jE,qBACA,SACA/jE,KAAA+jE,qBACA,SACA/jE,KAAA+jE,sBAGA/jE,KAAAikE,wBACA,QACAzwC,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAgkE,iCACA,YACAhkE,KAAA+jE,qBACA,aACA/jE,KAAA+jE,qBACA,eACA/jE,KAAA+jE,qBACA,YACA/jE,KAAA+jE,qBACA,YACA,UAGA/jE,KAAAkkE,yBACA,OACA1wC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA6jE,yBACA,aACArwC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA8jE,4BACA,mBACAtwC,EAAA2B,oBACA,qBACA3B,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAikE,yBAGAjkE,KAAAy1B,OAAAz1B,KAAAmkE,iBACA,gBACA3wC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA4jE,4BACA,cACApwC,EAAAI,eAAA5zB,KAAAkkE,2BAKA9uB,EAAA,WACAp1C,KAAAokE,4BACA,OACA5wC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAqkE,yBACA,OACA7wC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAAskE,4BACA,QACA9wC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAAukE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAvkE,KAAAwkE,iCACA,YACAhxC,EAAAM,iBACA,SACA9zB,KAAAukE,qBACA,SACAvkE,KAAAukE,qBACA,SACAvkE,KAAAukE,qBACA,SACAvkE,KAAAukE,sBAGAvkE,KAAAykE,wBACA,QACAjxC,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAwkE,iCACA,YACAxkE,KAAAukE,qBACA,aACAvkE,KAAAukE,qBACA,eACAvkE,KAAAukE,qBACA,YACAvkE,KAAAukE,qBACA,YACA,UAGAvkE,KAAA0kE,yBACA,OACAlxC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAAqkE,yBACA,aACA7wC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAskE,4BACA,mBACA9wC,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAykE,yBAGAzkE,KAAAy1B,OAAAz1B,KAAA2kE,iBACA,gBACAnxC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAokE,4BACA,cACA5wC,EAAAI,eAAA5zB,KAAA0kE,2BAKAluB,EAAA,WACAx2C,KAAA4kE,4BACA,OACApxC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAA6kE,yBACA,OACArxC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAA8kE,4BACA,QACAtxC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA+kE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGA/kE,KAAAglE,iCACA,YACAxxC,EAAAM,iBACA,SACA9zB,KAAA+kE,qBACA,SACA/kE,KAAA+kE,qBACA,SACA/kE,KAAA+kE,qBACA,SACA/kE,KAAA+kE,sBAGA/kE,KAAAilE,wBACA,QACAzxC,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAglE,iCACA,YACAhlE,KAAA+kE,qBACA,aACA/kE,KAAA+kE,qBACA,eACA/kE,KAAA+kE,qBACA,YACA/kE,KAAA+kE,qBACA,YACA,UAGA/kE,KAAAklE,yBACA,OACA1xC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA6kE,yBACA,aACArxC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA8kE,4BACA,mBACAtxC,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAilE,yBAGAjlE,KAAAy1B,OAAAz1B,KAAAmlE,iBACA,gBACA3xC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA4kE,4BACA,cACApxC,EAAAI,eAAA5zB,KAAAklE,2BAKAvtB,EAAA,WACA33C,KAAAolE,4BACA,OACA5xC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,SACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAqlE,yBACA,OACA7xC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAAslE,4BACA,QACA9xC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAAulE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAvlE,KAAAwlE,iCACA,YACAhyC,EAAAM,iBACA,aACA9zB,KAAAulE,qBACA,eACAvlE,KAAAulE,qBACA,aACAvlE,KAAAulE,sBAGAvlE,KAAAylE,wBACA,aACAjyC,EAAAI,eAAA5zB,KAAAwlE,iCACA,YACAxlE,KAAAulE,qBACA,eACAvlE,KAAAulE,qBACA,YACAvlE,KAAAulE,qBACA,YACA,UAGAvlE,KAAA0lE,yBACA,OACAlyC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAAqlE,yBACA,aACA7xC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAslE,4BACA,mBACA9xC,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAylE,yBAGAzlE,KAAAy1B,OAAAz1B,KAAA2lE,iBACA,gBACAnyC,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAolE,4BACA,cACA5xC,EAAAI,eAAA5zB,KAAA0lE,2BAKA7sB,EAAA,WACA74C,KAAA4lE,4BACA,OACApyC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,UACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAA6lE,yBACA,OACAryC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAA8lE,4BACA,QACAtyC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA+lE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGA/lE,KAAAgmE,iCACA,YACAxyC,EAAAM,iBACA,aACA9zB,KAAA+lE,qBACA,eACA/lE,KAAA+lE,qBACA,aACA/lE,KAAA+lE,sBAGA/lE,KAAAimE,wBACA,aACAzyC,EAAAI,eAAA5zB,KAAAgmE,iCACA,YACAhmE,KAAA+lE,qBACA,eACA/lE,KAAA+lE,qBACA,YACA/lE,KAAA+lE,qBACA,YACA,UAGA/lE,KAAAkmE,yBACA,OACA1yC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA6lE,yBACA,aACAryC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA8lE,4BACA,mBACAtyC,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAimE,yBAGAjmE,KAAAy1B,OAAAz1B,KAAAmmE,iBACA,YACA3yC,EAAAI,eAAA5zB,KAAA4lE,4BACA,cACApyC,EAAAI,eAAA5zB,KAAAkmE,2BAKAnsB,EAAA,WACA/5C,KAAAomE,4BACA,OACA5yC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,UACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAqmE,yBACA,OACA7yC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAAsmE,4BACA,QACA9yC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAAumE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAvmE,KAAAwmE,iCACA,YACAhzC,EAAAM,iBACA,aACA9zB,KAAAumE,qBACA,eACAvmE,KAAAumE,qBACA,aACAvmE,KAAAumE,sBAGAvmE,KAAAymE,wBACA,aACAjzC,EAAAI,eAAA5zB,KAAAwmE,iCACA,YACAxmE,KAAAumE,qBACA,eACAvmE,KAAAumE,qBACA,YACAvmE,KAAAumE,qBACA,YACA,UAGAvmE,KAAA0mE,yBACA,OACAlzC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAAqmE,yBACA,aACA7yC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAAsmE,4BACA,mBACA9yC,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAymE,yBAGAzmE,KAAAy1B,OAAAz1B,KAAA2mE,iBACA,YACAnzC,EAAAI,eAAA5zB,KAAAomE,4BACA,cACA5yC,EAAAI,eAAA5zB,KAAA0mE,2BAKAzlE,EAAA,WACAjB,KAAA4mE,4BACA,OACApzC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,UACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAA6mE,yBACA,OACArzC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,UACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,WACA,SACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAA8mE,4BACA,QACAtzC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAA+mE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGA/mE,KAAAgnE,iCACA,YACAxzC,EAAAM,iBACA,aACA9zB,KAAA+mE,qBACA,eACA/mE,KAAA+mE,qBACA,aACA/mE,KAAA+mE,sBAGA/mE,KAAAinE,wBACA,aACAzzC,EAAAI,eAAA5zB,KAAAgnE,iCACA,YACAhnE,KAAA+mE,qBACA,eACA/mE,KAAA+mE,qBACA,YACA/mE,KAAA+mE,qBACA,YACA,UAGA/mE,KAAAknE,yBACA,OACA1zC,EAAA2B,oBACA,YACA3B,EAAAM,iBACA,OACAN,EAAAI,eAAAJ,EAAAM,kBACA,QACAN,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAI,eAAA5zB,KAAA6mE,yBACA,aACArzC,EAAAI,eAAAJ,EAAAM,kBACA,mBACAN,EAAA2B,oBACA,eACA3B,EAAAoB,oBACA,eACApB,EAAAI,eAAA5zB,KAAA8mE,4BACA,mBACAtzC,EAAA2B,oBACA,OACA,SACA,iBACA3B,EAAAM,iBACA,WACAN,EAAAI,eAAA5zB,KAAAinE,yBAGAjnE,KAAAy1B,OAAAz1B,KAAAmnE,iBACA,YACA3zC,EAAAI,eAAA5zB,KAAA4mE,4BACA,cACApzC,EAAAI,eAAA5zB,KAAAknE,2BAKAhrB,EAAA,WACAl8C,KAAAonE,4BACA,OACA5zC,EAAA2B,oBACA,QACA,KAAA,SAAA,GACA,YACA3B,EAAAI,eAAA,UACA,YACAJ,EAAAI,gBAAA,KAAA,SAAA,KAGA5zB,KAAAqnE,yBACA,OACA7zC,EAAAM,iBACA,OACA,SACA,WACAN,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,oBACA,cACApB,EAAAoB,oBACA,gBACApB,EAAAoB,oBACA,YACA,SACA,YACA,SACA,gBACA,UAGA50B,KAAAsnE,4BACA,QACA9zC,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,OACApB,EAAAoB,oBACA,QACApB,EAAAoB,oBACA,OACApB,EAAAoB,qBAGA50B,KAAAunE,sBACA,aACA,QACA,WACA,QACA,MACA,QACA,aACA,QACA,YACA,SAGAvnE,KAAAwnE,iCACA,YACAh0C,EAAAM,iBACA,aACA9zB,KAAAunE,qBACA,eACAvnE,KAAAunE,qBACA,aA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,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGApxF,KAAAqxF,2BAAA,QAAA,UAEArxF,KAAAsxF,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,eACA,UACA,eACA,UACA,eACA,UACA,QACA,SACA,kBACA99D,EAAAoB,oBACA,MACApB,EAAAQ,iBAAAh0B,KAAAqxF,4BAGArxF,KAAAuxF,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGAvxF,KAAAwxF,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,UACA,UACAh+D,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,oBACA,WACA,UAGAn1B,KAAAyxF,+BACA,OACAj+D,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA0xF,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGA1xF,KAAA2xF,4BACA,OACA,SACA,UACA,SACA,QACA,SACA,MACA,UACA,SACA,KAAA,QAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,eACA,UACA,iBACA,UACA,QACA,SAGA3xF,KAAA4xF,+BAAA,UAAAp+D,EAAAoB,qBAEA50B,KAAA6xF,iCAAA,QAAA,SAAA,SAAA,KAAA,UAAA,IAEA7xF,KAAA8xF,wBACA,QACAt+D,EAAAI,eAAA5zB,KAAA2xF,4BACA,WACAn+D,EAAAI,eAAA5zB,KAAA4xF,+BACA,WACAp+D,EAAAoB,oBACA,YACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,eACA,UACA,QACA,QACA,YACApB,EAAAI,eAAA5zB,KAAA6xF,kCAGA7xF,KAAA+xF,sCAAA,QAAA,UAEA/xF,KAAAgyF,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAx+D,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,UACA,YACApB,EAAAQ,iBAAAh0B,KAAA8xF,wBACA,MACAt+D,EAAAQ,iBAAAh0B,KAAA+xF,uCAGA/xF,KAAAiyF,gCACA,WACAz+D,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAkyF,gCACA,0BACA,KAAA,UAAA,GACA,0BACA,KAAA,UAAA,GACA,0BACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,sBACA,UACA,YACA,UAGAlyF,KAAAmyF,kCACA,OACA,SACA,UACA,SACA,QACA,SACA,QACA,SACA,MACA,WAGAnyF,KAAAoyF,kCACA,WACA5+D,EAAAoB,oBACA,YACApB,EAAAI,eAAA5zB,KAAA6xF,iCACA,WACAr+D,EAAAI,eAAA5zB,KAAAiyF,gCACA,mBACAjyF,KAAAkyF,+BACA,WACAlyF,KAAAmyF,kCAGAnyF,KAAAqyF,4BAAA,QAAA,UAEAryF,KAAAsyF,0BACA,MACAtyF,KAAAgyF,mCACA,QACAhyF,KAAAgyF,mCACA,QACA,SACA,OACAx+D,EAAA2B,oBACA,YACA,KAAA,UAAA,GACA,WACA3B,EAAAQ,iBAAAh0B,KAAAoyF,kCACA,MACA5+D,EAAAQ,iBAAAh0B,KAAAqyF,6BAGAryF,KAAAuyF,2BAAA,QAAA/+D,EAAAI,eAAA5zB,KAAAsyF,2BAEAtyF,KAAAwyF,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,eACAh/D,EAAAM,iBACA,YACAN,EAAAoB,oBACA,gBACA,UAGA50B,KAAAyyF,4BAAA,SAAAj/D,EAAAI,eAAA5zB,KAAAwyF,kCAEAxyF,KAAA0yF,8BACA,cACAl/D,EAAAI,eAAA5zB,KAAAyyF,4BACA,UACAj/D,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA2yF,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAn/D,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAA4yF,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,QACA,YACA,SAGA5yF,KAAA6yF,wBAAA,QAAAr/D,EAAAM,kBAEA9zB,KAAA8yF,0BAAA,QAAA,UAEA9yF,KAAA+yF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AAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA0zF,kCACA,OACAlgE,EAAA2B,oBACA,WACA,UAGAn1B,KAAA4zF,yBAAA,SAAApgE,EAAAI,eAAA5zB,KAAA2zF,yBAEA3zF,KAAA6zF,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGA7zF,KAAA8zF,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGA9zF,KAAA+zF,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGA/zF,KAAAg0F,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,UACA,UACAxgE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,oBACA,WACA,UAGAn1B,KAAAi0F,+BACA,OACAzgE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAk0F,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGAl0F,KAAAm0F,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA3gE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAo0F,0BACA,MACAp0F,KAAAm0F,mCACA,QACAn0F,KAAAm0F,mCACA,QACA,SACA,OACA3gE,EAAA2B,qBAGAn1B,KAAAq0F,2BAAA,QAAA7gE,EAAAI,eAAA5zB,KAAAo0F,2BAEAp0F,KAAAs0F,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,eACA9gE,EAAAM,iBACA,YACAN,EAAAoB,oBACA,gBACA,UAGA50B,KAAAu0F,4BAAA,SAAA/gE,EAAAI,eAAA5zB,KAAAs0F,kCAEAt0F,KAAAw0F,8BACA,cACAhhE,EAAAI,eAAA5zB,KAAAu0F,4BACA,UACA/gE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAy0F,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAjhE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UA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qBAGAn1B,KAAAw1F,yBAAA,SAAAhiE,EAAAI,eAAA5zB,KAAAu1F,yBAEAv1F,KAAAy1F,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAz1F,KAAA01F,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGA11F,KAAA21F,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGA31F,KAAA41F,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,UACA,UACApiE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA61F,+BACA,OACAriE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA81F,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGA91F,KAAA+1F,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAviE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAg2F,0BACA,MACAh2F,KAAA+1F,mCACA,QACA/1F,KAAA+1F,mCACA,QACA,SACA,OACAviE,EAAA2B,qBAGAn1B,KAAAi2F,2BAAA,QAAAziE,EAAAI,eAAA5zB,KAAAg2F,2BAEAh2F,KAAAk2F,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,eACA1iE,EAAAM,iBACA,YACAN,EAAAoB,oBACA,gBACA,UAGA50B,KAAAm2F,4BAAA,SAAA3iE,EAAAI,eAAA5zB,KAAAk2F,kCAEAl2F,KAAAo2F,8BACA,cACA5iE,EAAAI,eAAA5zB,KAAAm2F,4BACA,UACA3iE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAq2F,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA7iE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAAs2F,uBACA,UACA,QACA,YACA,QACA,QA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AAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAr3F,KAAAs3F,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGAt3F,KAAAu3F,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGAv3F,KAAAw3F,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,UACA,UACAhkE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAy3F,+BACA,OACAjkE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA03F,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGA13F,KAAA23F,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAnkE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA43F,0BACA,MACA53F,KAAA23F,mCACA,QACA33F,KAAA23F,mCACA,QACA,SACA,OACAnkE,EAAA2B,qBAGAn1B,KAAA63F,2BAAA,QAAArkE,EAAAI,eAAA5zB,KAAA43F,2BAEA53F,KAAA83F,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,eACAtkE,EAAAM,iBACA,YACAN,EAAAoB,oBACA,gBACA,UAGA50B,KAAA+3F,4BAAA,SAAAvkE,EAAAI,eAAA5zB,KAAA83F,kCAEA93F,KAAAg4F,8BACA,cACAxkE,EAAAI,eAAA5zB,KAAA+3F,4BACA,UACAvkE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAi4F,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAzkE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAAk4F,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,QACA,YACA,SAGAl4F,KAAAm4F,wBACA,UACA,KAAA,UAAA,GACA,SACA,UACA,iBACA,UACA,iBACA,UACA,eACA,UACA,cACA3kE,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,SAGA5zB,KAAAo4F,wBACA,WACA5kE,EAAAI,eAAA5zB,KAAA+2F,2BACA,qBACAvjE,EAAAI,eAAA5zB,KAAAi3F,oCACA,SACAzjE,EAAAQ,iBAAAh0B,KAAAo3F,yBACA,oBACA5jE,EAAA6qB,kBAAAr+C,KAAAq3F,oCACA,SACA7jE,EAAA6qB,kBAAAr+C,KAAAs3F,yBACA,OACA9jE,EAAA6qB,kBAAAr+C,KAAAu3F,uBACA,iBACA/jE,EAAA6qB,kBAAAr+C,KAAAw3F,yBACA,uBACAhkE,EAAAI,eAAA5zB,KAAAy3F,+BACA,MACAjkE,EAAAQ,iBAAAh0B,KAAA03F,sBACA,WACAlkE,EAAAQ,iBAAAh0B,KAAA63F,2BACA,SACArkE,EAAAQ,iBAAAh0B,KAAAg4F,8BACA,QACAxkE,EAAA6qB,kBAAAr+C,KAAAi4F,wBACA,OACAzkE,EAAA6qB,kBAAAr+C,KAAAk4F,uBACA,OACA1kE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAM,iBACA,OACA,QACA,OACAN,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAm4F,yBAGAn4F,KAAAq4F,6BACA,YACA7kE,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAs4F,yBACA,WACA9kE,EAAAI,eAAA5zB,KAAA+2F,2BACA,qBACAvjE,EAAAI,eAAA5zB,KAAAi3F,oCACA,SACAzjE,EAAAQ,iBAAAh0B,KAAAo3F,yBACA,oBACA5jE,EAAA6qB,kBAAAr+C,KAAAq3F,oCACA,SACA7jE,EAAA6qB,kBAAAr+C,KAAAs3F,yBACA,OACA9jE,EAAA6qB,kBAAAr+C,KAAAu3F,uBACA,iBACA/jE,EAAA6qB,kBAAAr+C,KAAAw3F,yBACA,uBACAhkE,EAAAI,eAAA5zB,KAAAy3F,+BACA,MACAjkE,EAAAQ,iBAAAh0B,KAAA03F,sBACA,WACAlkE,EAAAQ,iBAAAh0B,KAAA63F,2BACA,SACArkE,EAAAQ,iBAAAh0B,KAAAg4F,8BACA,QACAxkE,EAAA6qB,kBAAAr+C,KAAAi4F,wBACA,OACAzkE,EAAA6qB,kBAAAr+C,KAAAk4F,uBACA,OACA1kE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAq4F,6BACA,WACA7kE,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAu4F,uBACA,iBACA/kE,EAAAI,eAAA5zB,KAAAo4F,wBACA,aACA5kE,EAAAQ,iBAAAh0B,KAAAs4F,2BAKAE,GAAA,WACAx4F,KAAAy4F,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAz4F,KAAA04F,2BACA,SACAllE,EAAA6qB,kBAAAr+C,KAAAy4F,wBACA,kBACA,UACA,kBACA,KAAA,QAAA,GACA,qBACA,WAGAz4F,KAAA24F,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGA34F,KAAA44F,oCACA,eACAplE,EAAAI,eAAA5zB,KAAA24F,gCAGA34F,KAAA64F,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGA74F,KAAA84F,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAtlE,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA64F,kCACA,OACArlE,EAAA2B,qBAGAn1B,KAAA+4F,yBAAA,SAAAvlE,EAAAI,eAAA5zB,KAAA84F,yBAEA94F,KAAAg5F,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAh5F,KAAAi5F,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGAj5F,KAAAk5F,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGAl5F,KAAAm5F,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,UACA,UACA3lE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAo5F,+BACA,OACA5lE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAq5F,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGAr5F,KAAAs5F,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA9lE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAu5F,0BACA,MACAv5F,KAAAs5F,mCACA,QACAt5F,KAAAs5F,mCACA,QACA,SACA,OACA9lE,EAAA2B,qBAGAn1B,KAAAw5F,2BAAA,QAAAhmE,EAAAI,eAAA5zB,KAAAu5F,2BAEAv5F,KAAAy5F,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,eACAjmE,EAAAM,iBACA,YACAN,EAAAoB,oBACA,gBACA,UAGA50B,KAAA05F,4BAAA,SAAAlmE,EAAAI,eAAA5zB,KAAAy5F,kCAEAz5F,KAAA25F,8BACA,cACAnmE,EAAAI,eAAA5zB,KAAA05F,4BACA,UACAlmE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA45F,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACApmE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAA65F,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,QACA,YACA,SAGA75F,KAAA85F,wBACA,UACA,KAAA,UAAA,GACA,SACA,UACA,iBACA,UACA,iBACA,UACA,eACA,UACA,cACAtmE,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,SAGA5zB,KAAA+5F,wBACA,WACAvmE,EAAAI,eAAA5zB,KAAA04F,2BACA,qBACAllE,EAAAI,eAAA5zB,KAAA44F,oCACA,SACAplE,EAAAQ,iBAAAh0B,KAAA+4F,yBACA,oBACAvlE,EAAA6qB,kBAAAr+C,KAAAg5F,oCACA,SACAxlE,EAAA6qB,kBAAAr+C,KAAAi5F,yBACA,OACAzlE,EAAA6qB,kBAAAr+C,KAAAk5F,uBACA,iBACA1lE,EAAA6qB,kBAAAr+C,KAAAm5F,yBACA,uBACA3lE,EAAAI,eAAA5zB,KAAAo5F,+BACA,MACA5lE,EAAAQ,iBAAAh0B,KAAAq5F,sBACA,WACA7lE,EAAAQ,iBAAAh0B,KAAAw5F,2BACA,SACAhmE,EAAAQ,iBAAAh0B,KAAA25F,8BACA,QACAnmE,EAAA6qB,kBAAAr+C,KAAA45F,wBACA,OACApmE,EAAA6qB,kBAAAr+C,KAAA65F,uBACA,OACArmE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,OACA,QACA,OACAN,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA85F,yBAGA95F,KAAAg6F,6BACA,YACAxmE,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAi6F,yBACA,WACAzmE,EAAAI,eAAA5zB,KAAA04F,2BACA,qBACAllE,EAAAI,eAAA5zB,KAAA44F,oCACA,SACAplE,EAAAQ,iBAAAh0B,KAAA+4F,yBACA,oBACAvlE,EAAA6qB,kBAAAr+C,KAAAg5F,oCACA,SACAxlE,EAAA6qB,kBAAAr+C,KAAAi5F,yBACA,OACAzlE,EAAA6qB,kBAAAr+C,KAAAk5F,uBACA,iBACA1lE,EAAA6qB,kBAAAr+C,KAAAm5F,yBACA,uBACA3lE,EAAAI,eAAA5zB,KAAAo5F,+BACA,MACA5lE,EAAAQ,iBAAAh0B,KAAAq5F,sBACA,WACA7lE,EAAAQ,iBAAAh0B,KAAAw5F,2BACA,SACAhmE,EAAAQ,iBAAAh0B,KAAA25F,8BACA,QACAnmE,EAAA6qB,kBAAAr+C,KAAA45F,wBACA,OACApmE,EAAA6qB,kBAAAr+C,KAAA65F,uBACA,OACArmE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAg6F,6BACA,WACAxmE,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAk6F,uBACA,iBACA1mE,EAAAI,eAAA5zB,KAAA+5F,wBACA,aACAvmE,EAAAQ,iBAAAh0B,KAAAi6F,2BAKAE,GAAA,WACAn6F,KAAAo6F,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAp6F,KAAAq6F,2BACA,SACA7mE,EAAA6qB,kBAAAr+C,KAAAo6F,wBACA,kBACA,WAGAp6F,KAAAs6F,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAt6F,KAAAu6F,oCACA,eACA/mE,EAAAI,eAAA5zB,KAAAs6F,gCAGAt6F,KAAAw6F,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAx6F,KAAAy6F,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAjnE,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAw6F,kCACA,OACAhnE,EAAA2B,qBAGAn1B,KAAA06F,yBAAA,SAAAlnE,EAAAI,eAAA5zB,KAAAy6F,yBAEAz6F,KAAA26F,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGA36F,KAAA46F,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGA56F,KAAA66F,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGA76F,KAAA86F,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,UACA,UACAtnE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA+6F,+BACA,OACAvnE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAg7F,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGAh7F,KAAAi7F,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAznE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAk7F,0BACA,MACAl7F,KAAAi7F,mCACA,QACAj7F,KAAAi7F,mCACA,QACA,SACA,OACAznE,EAAA2B,qBAGAn1B,KAAAm7F,2BAAA,QAAA3nE,EAAAI,eAAA5zB,KAAAk7F,2BAEAl7F,KAAAo7F,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,eACA5nE,EAAAM,iBACA,YACAN,EAAAoB,oBACA,gBACA,UAGA50B,KAAAq7F,4BAAA,SAAA7nE,EAAAI,eAAA5zB,KAAAo7F,kCAEAp7F,KAAAs7F,8BACA,cACA9nE,EAAAI,eAAA5zB,KAAAq7F,4BACA,UACA7nE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAu7F,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA/nE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAAw7F,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,QACA,YACA,SAGAx7F,KAAAy7F,wBACA,UACA,KAAA,UAAA,GACA,SACA,UACA,iBACA,UACA,iBACA,UACA,eACA,UACA,cACAjoE,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,SAGA5zB,KAAA07F,wBACA,WACAloE,EAAAI,eAAA5zB,KAAAq6F,2BACA,qBACA7mE,EAAAI,eAAA5zB,KAAAu6F,oCACA,SACA/mE,EAAAQ,iBAAAh0B,KAAA06F,yBACA,oBACAlnE,EAAA6qB,kBAAAr+C,KAAA26F,oCACA,SACAnnE,EAAA6qB,kBAAAr+C,KAAA46F,yBACA,OACApnE,EAAA6qB,kBAAAr+C,KAAA66F,uBACA,iBACArnE,EAAA6qB,kBAAAr+C,KAAA86F,yBACA,uBACAtnE,EAAAI,eAAA5zB,KAAA+6F,+BACA,MACAvnE,EAAAQ,iBAAAh0B,KAAAg7F,sBACA,WACAxnE,EAAAQ,iBAAAh0B,KAAAm7F,2BACA,SACA3nE,EAAAQ,iBAAAh0B,KAAAs7F,8BACA,QACA9nE,EAAA6qB,kBAAAr+C,KAAAu7F,wBACA,OACA/nE,EAAA6qB,kBAAAr+C,KAAAw7F,uBACA,OACAhoE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,OACA,QACA,OACAN,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAy7F,yBAGAz7F,KAAA27F,6BACA,YACAnoE,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA47F,yBACA,WACApoE,EAAAI,eAAA5zB,KAAAq6F,2BACA,qBACA7mE,EAAAI,eAAA5zB,KAAAu6F,oCACA,SACA/mE,EAAAQ,iBAAAh0B,KAAA06F,yBACA,oBACAlnE,EAAA6qB,kBAAAr+C,KAAA26F,oCACA,SACAnnE,EAAA6qB,kBAAAr+C,KAAA46F,yBACA,OACApnE,EAAA6qB,kBAAAr+C,KAAA66F,uBACA,iBACArnE,EAAA6qB,kBAAAr+C,KAAA86F,yBACA,uBACAtnE,EAAAI,eAAA5zB,KAAA+6F,+BACA,MACAvnE,EAAAQ,iBAAAh0B,KAAAg7F,sBACA,WACAxnE,EAAAQ,iBAAAh0B,KAAAm7F,2BACA,SACA3nE,EAAAQ,iBAAAh0B,KAAAs7F,8BACA,QACA9nE,EAAA6qB,kBAAAr+C,KAAAu7F,wBACA,OACA/nE,EAAA6qB,kBAAAr+C,KAAAw7F,uBACA,OACAhoE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA27F,6BACA,WACAnoE,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA67F,uBACA,iBACAroE,EAAAI,eAAA5zB,KAAA07F,wBACA,aACAloE,EAAAQ,iBAAAh0B,KAAA47F,2BAKAE,GAAA,WACA97F,KAAA+7F,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA/7F,KAAAg8F,2BACA,SACAxoE,EAAA6qB,kBAAAr+C,KAAA+7F,wBACA,kBACA,WAGA/7F,KAAAi8F,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAj8F,KAAAk8F,oCACA,eACA1oE,EAAAI,eAAA5zB,KAAAi8F,gCAGAj8F,KAAAm8F,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAn8F,KAAAo8F,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACA5oE,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAm8F,kCACA,OACA3oE,EAAA2B,qBAGAn1B,KAAAq8F,yBAAA,SAAA7oE,EAAAI,eAAA5zB,KAAAo8F,yBAEAp8F,KAAAs8F,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAt8F,KAAAu8F,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGAv8F,KAAAw8F,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGAx8F,KAAAy8F,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAjpE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA08F,+BACA,OACAlpE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA28F,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGA38F,KAAA48F,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAppE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA68F,0BACA,MACA78F,KAAA48F,mCACA,QACA58F,KAAA48F,mCACA,QACA,SACA,OACAppE,EAAA2B,qBAGAn1B,KAAA88F,2BAAA,QAAAtpE,EAAAI,eAAA5zB,KAAA68F,2BAEA78F,KAAA+8F,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,eACAvpE,EAAAM,iBACA,YACAN,EAAAoB,oBACA,gBACA,UAGA50B,KAAAg9F,4BAAA,SAAAxpE,EAAAI,eAAA5zB,KAAA+8F,kCAEA/8F,KAAAi9F,8BACA,cACAzpE,EAAAI,eAAA5zB,KAAAg9F,4BACA,UACAxpE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAk9F,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,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,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAvqE,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA89F,kCACA,OACAtqE,EAAA2B,qBAGAn1B,KAAAg+F,yBAAA,SAAAxqE,EAAAI,eAAA5zB,KAAA+9F,yBAEA/9F,KAAAi+F,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAj+F,KAAAk+F,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGAl+F,KAAAm+F,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGAn+F,KAAAo+F,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA5qE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAq+F,+BACA,OACA7qE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAs+F,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGAt+F,KAAAu+F,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA/qE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAw+F,0BACA,MACAx+F,KAAAu+F,mCACA,QACAv+F,KAAAu+F,mCACA,QACA,SACA,OACA/qE,EAAA2B,qBAGAn1B,KAAAy+F,2BAAA,QAAAjrE,EAAAI,eAAA5zB,KAAAw+F,2BAEAx+F,KAAA0+F,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,eACAlrE,EAAAM,iBACA,YACAN,EAAAoB,oBACA,gBACA,UAGA50B,KAAA2+F,4BAAA,SAAAnrE,EAAAI,eAAA5zB,KAAA0+F,kCAEA1+F,KAAA4+F,8BACA,cACAprE,EAAAI,eAAA5zB,KAAA2+F,4BACA,UACAnrE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA6+F,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACArrE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YAC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QAAA,GAAA,IAGA5/F,KAAA6/F,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGA7/F,KAAA8/F,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGA9/F,KAAA+/F,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAvsE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAggG,+BACA,OACAxsE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAigG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGAjgG,KAAAkgG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA1sE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAmgG,0BACA,MACAngG,KAAAkgG,mCACA,QACAlgG,KAAAkgG,mCACA,QACA,SACA,OACA1sE,EAAA2B,qBAGAn1B,KAAAogG,2BAAA,QAAA5sE,EAAAI,eAAA5zB,KAAAmgG,2BAEAngG,KAAAqgG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,eACA7sE,EAAAM,iBACA,YACAN,EAAAoB,oBACA,gBACA,UAGA50B,KAAAsgG,4BAAA,SAAA9sE,EAAAI,eAAA5zB,KAAAqgG,kCAEArgG,KAAAugG,8BACA,cACA/sE,EAAAI,eAAA5zB,KAAAsgG,4BACA,UACA9sE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAwgG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAhtE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAAygG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,QACA,YACA,SAGAzgG,KAAA0gG,wBACA,UACA,KAAA,UAAA,GACA,SACA,UACA,iBACA,UACA,iBACA,UACA,eACA,UACA,cACAltE,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,SAGA5zB,KAAA2gG,wBACA,WACAntE,EAAAI,eAAA5zB,KAAAs/F,2BACA,qBACA9rE,EAAAI,eAAA5zB,KAAAw/F,oCACA,SACAhsE,EAAAQ,iBAAAh0B,KAAA2/F,yBACA,oBACAnsE,EAAA6qB,kBAAAr+C,KAAA4/F,oCACA,SACApsE,EAAA6qB,kBAAAr+C,KAAA6/F,yBACA,OACArsE,EAAA6qB,kBAAAr+C,KAAA8/F,uBACA,iBACAtsE,EAAA6qB,kBAAAr+C,KAAA+/F,yBACA,uBACAvsE,EAAAI,eAAA5zB,KAAAggG,+BACA,MACAxsE,EAAAQ,iBAAAh0B,KAAAigG,sBACA,WACAzsE,EAAAQ,iBAAAh0B,KAAAogG,2BACA,SACA5sE,EAAAQ,iBAAAh0B,KAAAugG,8BACA,QACA/sE,EAAA6qB,kBAAAr+C,KAAAwgG,wBACA,OACAhtE,EAAA6qB,kBAAAr+C,KAAAygG,uBACA,OACAjtE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,OACA,QACA,OACAN,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA0gG,yBAGA1gG,KAAA4gG,6BACA,YACAptE,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA6gG,yBACA,WACArtE,EAAAI,eAAA5zB,KAAAs/F,2BACA,qBACA9rE,EAAAI,eAAA5zB,KAAAw/F,oCACA,SACAhsE,EAAAQ,iBAAAh0B,KAAA2/F,yBACA,oBACAnsE,EAAA6qB,kBAAAr+C,KAAA4/F,oCACA,SACApsE,EAAA6qB,kBAAAr+C,KAAA6/F,yBACA,OACArsE,EAAA6qB,kBAAAr+C,KAAA8/F,uBACA,iBACAtsE,EAAA6qB,kBAAAr+C,KAAA+/F,yBACA,uBACAvsE,EAAAI,eAAA5zB,KAAAggG,+BACA,MACAxsE,EAAAQ,iBAAAh0B,KAAAigG,sBACA,WACAzsE,EAAAQ,iBAAAh0B,KAAAogG,2BACA,SACA5sE,EAAAQ,iBAAAh0B,KAAAugG,8BACA,QACA/sE,EAAA6qB,kBAAAr+C,KAAAwgG,wBACA,OACAhtE,EAAA6qB,kBAAAr+C,KAAAygG,uBACA,OACAjtE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA4gG,6BACA,WACAptE,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA8gG,uBACA,iBACAttE,EAAAI,eAAA5zB,KAAA2gG,wBACA,aACAntE,EAAAQ,iBAAAh0B,KAAA6gG,2BAKAE,GAAA,WACA/gG,KAAAghG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAhhG,KAAAihG,2BACA,SACAztE,EAAA6qB,kBAAAr+C,KAAAghG,wBACA,kBACA,WAGAhhG,KAAAkhG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAlhG,KAAAmhG,oCACA,eACA3tE,EAAAI,eAAA5zB,KAAAkhG,gCAGAlhG,KAAAohG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAphG,KAAAqhG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACA7tE,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAohG,kCACA,OACA5tE,EAAA2B,qBAGAn1B,KAAAshG,yBAAA,SAAA9tE,EAAAI,eAAA5zB,KAAAqhG,yBAEArhG,KAAAuhG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAvhG,KAAAwhG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGAxhG,KAAAyhG,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGAzhG,KAAA0hG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAluE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA2hG,+BACA,OACAnuE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA4hG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGA5hG,KAAA6hG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAruE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA8hG,0BACA,MACA9hG,KAAA6hG,mCACA,QACA7hG,KAAA6hG,mCACA,QACA,SACA,OACAruE,EAAA2B,qBAGAn1B,KAAA+hG,2BAAA,QAAAvuE,EAAAI,eAAA5zB,KAAA8hG,2BAEA9hG,KAAAgiG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACAxuE,EAAAoB,oBACA,gBACA,UAGA50B,KAAAiiG,4BAAA,SAAAzuE,EAAAI,eAAA5zB,KAAAgiG,kCAEAhiG,KAAAkiG,8BACA,cACA1uE,EAAAI,eAAA5zB,KAAAiiG,4BACA,UACAzuE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAmiG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA3uE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAAoiG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,QACA,YACA,SAGApiG,KAAAqiG,wBACA,UACA,KAAA,UAAA,GACA,SACA,UACA,iBACA,UACA,iBACA,UACA,eACA,UACA,cACA7uE,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,SAGA5zB,KAAAsiG,wBACA,WACA9uE,EAAAI,eAAA5zB,KAAAihG,2BACA,qBACAztE,EAAAI,eAAA5zB,KAAAmhG,oCACA,SACA3tE,EAAAQ,iBAAAh0B,KAAAshG,yBACA,oBACA9tE,EAAA6qB,kBAAAr+C,KAAAuhG,oCACA,SACA/tE,EAAA6qB,kBAAAr+C,KAAAwhG,yBACA,OACAhuE,EAAA6qB,kBAAAr+C,KAAAyhG,uBACA,iBACAjuE,EAAA6qB,kBAAAr+C,KAAA0hG,yBACA,uBACAluE,EAAAI,eAAA5zB,KAAA2hG,+BACA,MACAnuE,EAAAQ,iBAAAh0B,KAAA4hG,sBACA,WACApuE,EAAAQ,iBAAAh0B,KAAA+hG,2BACA,SACAvuE,EAAAQ,iBAAAh0B,KAAAkiG,8BACA,QACA1uE,EAAA6qB,kBAAAr+C,KAAAmiG,wBACA,OACA3uE,EAAA6qB,kBAAAr+C,KAAAoiG,uBACA,OACA5uE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,OACA,QACA,OACAN,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAqiG,yBAGAriG,KAAAuiG,6BACA,YACA/uE,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAwiG,yBACA,WACAhvE,EAAAI,eAAA5zB,KAAAihG,2BACA,qBACAztE,EAAAI,eAAA5zB,KAAAmhG,oCACA,SACA3tE,EAAAQ,iBAAAh0B,KAAAshG,yBACA,oBACA9tE,EAAA6qB,kBAAAr+C,KAAAuhG,oCACA,SACA/tE,EAAA6qB,kBAAAr+C,KAAAwhG,yBACA,OACAhuE,EAAA6qB,kBAAAr+C,KAAAyhG,uBACA,iBACAjuE,EAAA6qB,kBAAAr+C,KAAA0hG,yBACA,uBACAluE,EAAAI,eAAA5zB,KAAA2hG,+BACA,MACAnuE,EAAAQ,iBAAAh0B,KAAA4hG,sBACA,WACApuE,EAAAQ,iBAAAh0B,KAAA+hG,2BACA,SACAvuE,EAAAQ,iBAAAh0B,KAAAkiG,8BACA,QACA1uE,EAAA6qB,kBAAAr+C,KAAAmiG,wBACA,OACA3uE,EAAA6qB,kBAAAr+C,KAAAoiG,uBACA,OACA5uE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAuiG,6BACA,WACA/uE,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAyiG,uBACA,iBACAjvE,EAAAI,eAAA5zB,KAAAsiG,wBACA,aACA9uE,EAAAQ,iBAAAh0B,KAAAwiG,2BAKAE,GAAA,WACA1iG,KAAA2iG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA3iG,KAAA4iG,2BACA,SACApvE,EAAA6qB,kBAAAr+C,KAAA2iG,wBACA,kBACA,WAGA3iG,KAAA6iG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGA7iG,KAAA8iG,oCACA,eACAtvE,EAAAI,eAAA5zB,KAAA6iG,gCAGA7iG,KAAA+iG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGA/iG,KAAAgjG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAxvE,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA+iG,kCACA,OACAvvE,EAAA2B,qBAGAn1B,KAAAijG,yBAAA,SAAAzvE,EAAAI,eAAA5zB,KAAAgjG,yBAEAhjG,KAAAkjG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAljG,KAAAmjG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGAnjG,KAAAojG,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGApjG,KAAAqjG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA7vE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAsjG,+BACA,OACA9vE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAujG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGAvjG,KAAAwjG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAhwE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAyjG,0BACA,MACAzjG,KAAAwjG,mCACA,QACAxjG,KAAAwjG,mCACA,QACA,SACA,OACAhwE,EAAA2B,qBAGAn1B,KAAA0jG,2BAAA,QAAAlwE,EAAAI,eAAA5zB,KAAAyjG,2BAEAzjG,KAAA2jG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACAnwE,EAAAoB,oBACA,gBACA,UAGA50B,KAAA4jG,4BAAA,SAAApwE,EAAAI,eAAA5zB,KAAA2jG,kCAEA3jG,KAAA6jG,8BACA,cACArwE,EAAAI,eAAA5zB,KAAA4jG,4BACA,UACApwE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA8jG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAtwE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAA+jG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,QACA,YACA,SAGA/jG,KAAAgkG,wBACA,WACAxwE,EAAAI,eAAA5zB,KAAA4iG,2BACA,qBACApvE,EAAAI,eAAA5zB,KAAA8iG,oCACA,SACAtvE,EAAAQ,iBAAAh0B,KAAAijG,yBACA,oBACAzvE,EAAA6qB,kBAAAr+C,KAAAkjG,oCACA,SACA1vE,EAAA6qB,kBAAAr+C,KAAAmjG,yBACA,OACA3vE,EAAA6qB,kBAAAr+C,KAAAojG,uBACA,iBACA5vE,EAAA6qB,kBAAAr+C,KAAAqjG,yBACA,uBACA7vE,EAAAI,eAAA5zB,KAAAsjG,+BACA,MACA9vE,EAAAQ,iBAAAh0B,KAAAujG,sBACA,WACA/vE,EAAAQ,iBAAAh0B,KAAA0jG,2BACA,SACAlwE,EAAAQ,iBAAAh0B,KAAA6jG,8BACA,QACArwE,EAAA6qB,kBAAAr+C,KAAA8jG,wBACA,OACAtwE,EAAA6qB,kBAAAr+C,KAAA+jG,uBACA,OACAvwE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAikG,6BACA,YACAzwE,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAkkG,yBACA,WACA1wE,EAAAI,eAAA5zB,KAAA4iG,2BACA,qBACApvE,EAAAI,eAAA5zB,KAAA8iG,oCACA,SACAtvE,EAAAQ,iBAAAh0B,KAAAijG,yBACA,oBACAzvE,EAAA6qB,kBAAAr+C,KAAAkjG,oCACA,SACA1vE,EAAA6qB,kBAAAr+C,KAAAmjG,yBACA,OACA3vE,EAAA6qB,kBAAAr+C,KAAAojG,uBACA,iBACA5vE,EAAA6qB,kBAAAr+C,KAAAqjG,yBACA,uBACA7vE,EAAAI,eAAA5zB,KAAAsjG,+BACA,MACA9vE,EAAAQ,iBAAAh0B,KAAAujG,sBACA,WACA/vE,EAAAQ,iBAAAh0B,KAAA0jG,2BACA,SACAlwE,EAAAQ,iBAAAh0B,KAAA6jG,8BACA,QACArwE,EAAA6qB,kBAAAr+C,KAAA8jG,wBACA,OACAtwE,EAAA6qB,kBAAAr+C,KAAA+jG,uBACA,OACAvwE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAikG,6BACA,WACAzwE,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAmkG,uBACA,iBACA3wE,EAAAI,eAAA5zB,KAAAgkG,wBACA,aACAxwE,EAAAQ,iBAAAh0B,KAAAkkG,2BAKAE,GAAA,WACApkG,KAAAqkG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGArkG,KAAAskG,2BAAA,SAAA9wE,EAAA6qB,kBAAAr+C,KAAAqkG,yBAEArkG,KAAAukG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAvkG,KAAAwkG,oCACA,eACAhxE,EAAAI,eAAA5zB,KAAAukG,gCAGAvkG,KAAAykG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAzkG,KAAA0kG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAlxE,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAykG,kCACA,OACAjxE,EAAA2B,qBAGAn1B,KAAA2kG,yBAAA,SAAAnxE,EAAAI,eAAA5zB,KAAA0kG,yBAEA1kG,KAAA4kG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGA5kG,KAAA6kG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGA7kG,KAAA8kG,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGA9kG,KAAA+kG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAvxE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAglG,+BACA,OACAxxE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAilG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,UACA,iBACA,WAGAjlG,KAAAklG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA1xE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAmlG,0BACA,MACAnlG,KAAAklG,mCACA,QACAllG,KAAAklG,mCACA,QACA,SACA,OACA1xE,EAAA2B,qBAGAn1B,KAAAolG,2BAAA,QAAA5xE,EAAAI,eAAA5zB,KAAAmlG,2BAEAnlG,KAAAqlG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACA7xE,EAAAoB,oBACA,gBACA,UAGA50B,KAAAslG,4BAAA,SAAA9xE,EAAAI,eAAA5zB,KAAAqlG,kCAEArlG,KAAAulG,8BACA,cACA/xE,EAAAI,eAAA5zB,KAAAslG,4BACA,UACA9xE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAwlG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAhyE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAAylG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,QACA,YACA,SAGAzlG,KAAA0lG,wBACA,WACAlyE,EAAAI,eAAA5zB,KAAAskG,2BACA,qBACA9wE,EAAAI,eAAA5zB,KAAAwkG,oCACA,SACAhxE,EAAAQ,iBAAAh0B,KAAA2kG,yBACA,oBACAnxE,EAAA6qB,kBAAAr+C,KAAA4kG,oCACA,SACApxE,EAAA6qB,kBAAAr+C,KAAA6kG,yBACA,OACArxE,EAAA6qB,kBAAAr+C,KAAA8kG,uBACA,iBACAtxE,EAAA6qB,kBAAAr+C,KAAA+kG,yBACA,uBACAvxE,EAAAI,eAAA5zB,KAAAglG,+BACA,MACAxxE,EAAAQ,iBAAAh0B,KAAAilG,sBACA,WACAzxE,EAAAQ,iBAAAh0B,KAAAolG,2BACA,SACA5xE,EAAAQ,iBAAAh0B,KAAAulG,8BACA,QACA/xE,EAAA6qB,kBAAAr+C,KAAAwlG,wBACA,OACAhyE,EAAA6qB,kBAAAr+C,KAAAylG,uBACA,OACAjyE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAA2lG,6BACA,YACAnyE,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA4lG,yBACA,WACApyE,EAAAI,eAAA5zB,KAAAskG,2BACA,qBACA9wE,EAAAI,eAAA5zB,KAAAwkG,oCACA,SACAhxE,EAAAQ,iBAAAh0B,KAAA2kG,yBACA,oBACAnxE,EAAA6qB,kBAAAr+C,KAAA4kG,oCACA,SACApxE,EAAA6qB,kBAAAr+C,KAAA6kG,yBACA,OACArxE,EAAA6qB,kBAAAr+C,KAAA8kG,uBACA,iBACAtxE,EAAA6qB,kBAAAr+C,KAAA+kG,yBACA,uBACAvxE,EAAAI,eAAA5zB,KAAAglG,+BACA,MACAxxE,EAAAQ,iBAAAh0B,KAAAilG,sBACA,WACAzxE,EAAAQ,iBAAAh0B,KAAAolG,2BACA,SACA5xE,EAAAQ,iBAAAh0B,KAAAulG,8BACA,QACA/xE,EAAA6qB,kBAAAr+C,KAAAwlG,wBACA,OACAhyE,EAAA6qB,kBAAAr+C,KAAAylG,uBACA,OACAjyE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA2lG,6BACA,WACAnyE,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA6lG,uBACA,iBACAryE,EAAAI,eAAA5zB,KAAA0lG,wBACA,aACAlyE,EAAAQ,iBAAAh0B,KAAA4lG,2BAKAE,GAAA,WACA9lG,KAAA+lG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA/lG,KAAAgmG,2BAAA,SAAAxyE,EAAA6qB,kBAAAr+C,KAAA+lG,yBAEA/lG,KAAAimG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAjmG,KAAAkmG,oCACA,eACA1yE,EAAAI,eAAA5zB,KAAAimG,gCAGAjmG,KAAAmmG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAnmG,KAAAomG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACA5yE,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAmmG,kCACA,OACA3yE,EAAA2B,qBAGAn1B,KAAAqmG,yBAAA,SAAA7yE,EAAAI,eAAA5zB,KAAAomG,yBAEApmG,KAAAsmG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAtmG,KAAAumG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGAvmG,KAAAwmG,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGAxmG,KAAAymG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAjzE,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA0mG,+BACA,OACAlzE,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA2mG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA3mG,KAAA4mG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACApzE,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA6mG,0BACA,MACA7mG,KAAA4mG,mCACA,QACA5mG,KAAA4mG,mCACA,QACA,SACA,OACApzE,EAAA2B,qBAGAn1B,KAAA8mG,2BAAA,QAAAtzE,EAAAI,eAAA5zB,KAAA6mG,2BAEA7mG,KAAA+mG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACAvzE,EAAAoB,oBACA,gBACA,UAGA50B,KAAAgnG,4BAAA,SAAAxzE,EAAAI,eAAA5zB,KAAA+mG,kCAEA/mG,KAAAinG,8BACA,cACAzzE,EAAAI,eAAA5zB,KAAAgnG,4BACA,UACAxzE,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAknG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA1zE,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,YACA,UACA,eACA,UACA,uBACA,UACA,cACA,KAAA,QAAA,GACA,cACA,KAAA,QAAA,IAGA5zB,KAAAmnG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAnnG,KAAAonG,wBACA,WACA5zE,EAAAI,eAAA5zB,KAAAgmG,2BACA,qBACAxyE,EAAAI,eAAA5zB,KAAAkmG,oCACA,SACA1yE,EAAAQ,iBAAAh0B,KAAAqmG,yBACA,oBACA7yE,EAAA6qB,kBAAAr+C,KAAAsmG,oCACA,SACA9yE,EAAA6qB,kBAAAr+C,KAAAumG,yBACA,OACA/yE,EAAA6qB,kBAAAr+C,KAAAwmG,uBACA,iBACAhzE,EAAA6qB,kBAAAr+C,KAAAymG,yBACA,uBACAjzE,EAAAI,eAAA5zB,KAAA0mG,+BACA,MACAlzE,EAAAQ,iBAAAh0B,KAAA2mG,sBACA,WACAnzE,EAAAQ,iBAAAh0B,KAAA8mG,2BACA,SACAtzE,EAAAQ,iBAAAh0B,KAAAinG,8BACA,QACAzzE,EAAA6qB,kBAAAr+C,KAAAknG,wBACA,OACA1zE,EAAA6qB,kBAAAr+C,KAAAmnG,uBACA,OACA3zE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAqnG,6BACA,YACA7zE,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAsnG,yBACA,WACA9zE,EAAAI,eAAA5zB,KAAAgmG,2BACA,qBACAxyE,EAAAI,eAAA5zB,KAAAkmG,oCACA,SACA1yE,EAAAQ,iBAAAh0B,KAAAqmG,yBACA,oBACA7yE,EAAA6qB,kBAAAr+C,KAAAsmG,oCACA,SACA9yE,EAAA6qB,kBAAAr+C,KAAAumG,yBACA,OACA/yE,EAAA6qB,kBAAAr+C,KAAAwmG,uBACA,iBACAhzE,EAAA6qB,kBAAAr+C,KAAAymG,yBACA,uBACAjzE,EAAAI,eAAA5zB,KAAA0mG,+BACA,MACAlzE,EAAAQ,iBAAAh0B,KAAA2mG,sBACA,WACAnzE,EAAAQ,iBAAAh0B,KAAA8mG,2BACA,SACAtzE,EAAAQ,iBAAAh0B,KAAAinG,8BACA,QACAzzE,EAAA6qB,kBAAAr+C,KAAAknG,wBACA,OACA1zE,EAAA6qB,kBAAAr+C,KAAAmnG,uBACA,OACA3zE,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAqnG,6BACA,WACA7zE,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAunG,uBACA,iBACA/zE,EAAAI,eAAA5zB,KAAAonG,wBACA,aACA5zE,EAAAQ,iBAAAh0B,KAAAsnG,2BAKAE,GAAA,WACAxnG,KAAAynG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAznG,KAAA0nG,2BAAA,SAAAl0E,EAAA6qB,kBAAAr+C,KAAAynG,yBAEAznG,KAAA2nG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGA3nG,KAAA4nG,oCACA,eACAp0E,EAAAI,eAAA5zB,KAAA2nG,gCAGA3nG,KAAA6nG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGA7nG,KAAA8nG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAt0E,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA6nG,kCACA,OACAr0E,EAAA2B,qBAGAn1B,KAAA+nG,yBAAA,SAAAv0E,EAAAI,eAAA5zB,KAAA8nG,yBAEA9nG,KAAAgoG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAhoG,KAAAioG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGAjoG,KAAAkoG,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,UACA,eACA,KAAA,UAAA,IAGAloG,KAAAmoG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA30E,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAooG,+BACA,OACA50E,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAqoG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAroG,KAAAsoG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA90E,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAuoG,0BACA,MACAvoG,KAAAsoG,mCACA,QACAtoG,KAAAsoG,mCACA,QACA,SACA,OACA90E,EAAA2B,qBAGAn1B,KAAAwoG,2BAAA,QAAAh1E,EAAAI,eAAA5zB,KAAAuoG,2BAEAvoG,KAAAyoG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACAj1E,EAAAoB,oBACA,gBACA,UAGA50B,KAAA0oG,4BAAA,SAAAl1E,EAAAI,eAAA5zB,KAAAyoG,kCAEAzoG,KAAA2oG,8BACA,cACAn1E,EAAAI,eAAA5zB,KAAA0oG,4BACA,UACAl1E,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA4oG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAp1E,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA6oG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA7oG,KAAA8oG,wBACA,WACAt1E,EAAAI,eAAA5zB,KAAA0nG,2BACA,qBACAl0E,EAAAI,eAAA5zB,KAAA4nG,oCACA,SACAp0E,EAAAQ,iBAAAh0B,KAAA+nG,yBACA,oBACAv0E,EAAA6qB,kBAAAr+C,KAAAgoG,oCACA,SACAx0E,EAAA6qB,kBAAAr+C,KAAAioG,yBACA,OACAz0E,EAAA6qB,kBAAAr+C,KAAAkoG,uBACA,iBACA10E,EAAA6qB,kBAAAr+C,KAAAmoG,yBACA,uBACA30E,EAAAI,eAAA5zB,KAAAooG,+BACA,MACA50E,EAAAQ,iBAAAh0B,KAAAqoG,sBACA,WACA70E,EAAAQ,iBAAAh0B,KAAAwoG,2BACA,SACAh1E,EAAAQ,iBAAAh0B,KAAA2oG,8BACA,QACAn1E,EAAA6qB,kBAAAr+C,KAAA4oG,wBACA,OACAp1E,EAAA6qB,kBAAAr+C,KAAA6oG,uBACA,OACAr1E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAA+oG,6BACA,YACAv1E,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAgpG,yBACA,WACAx1E,EAAAI,eAAA5zB,KAAA0nG,2BACA,qBACAl0E,EAAAI,eAAA5zB,KAAA4nG,oCACA,SACAp0E,EAAAQ,iBAAAh0B,KAAA+nG,yBACA,oBACAv0E,EAAA6qB,kBAAAr+C,KAAAgoG,oCACA,SACAx0E,EAAA6qB,kBAAAr+C,KAAAioG,yBACA,OACAz0E,EAAA6qB,kBAAAr+C,KAAAkoG,uBACA,iBACA10E,EAAA6qB,kBAAAr+C,KAAAmoG,yBACA,uBACA30E,EAAAI,eAAA5zB,KAAAooG,+BACA,MACA50E,EAAAQ,iBAAAh0B,KAAAqoG,sBACA,WACA70E,EAAAQ,iBAAAh0B,KAAAwoG,2BACA,SACAh1E,EAAAQ,iBAAAh0B,KAAA2oG,8BACA,QACAn1E,EAAA6qB,kBAAAr+C,KAAA4oG,wBACA,OACAp1E,EAAA6qB,kBAAAr+C,KAAA6oG,uBACA,OACAr1E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA+oG,6BACA,WACAv1E,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAipG,uBACA,iBACAz1E,EAAAI,eAAA5zB,KAAA8oG,wBACA,aACAt1E,EAAAQ,iBAAAh0B,KAAAgpG,2BAKAE,GAAA,WACAlpG,KAAAmpG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAnpG,KAAAopG,2BAAA,SAAA51E,EAAA6qB,kBAAAr+C,KAAAmpG,yBAEAnpG,KAAAqpG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGArpG,KAAAspG,oCACA,eACA91E,EAAAI,eAAA5zB,KAAAqpG,gCAGArpG,KAAAupG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAvpG,KAAAwpG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAh2E,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAupG,kCACA,OACA/1E,EAAA2B,qBAGAn1B,KAAAypG,yBAAA,SAAAj2E,EAAAI,eAAA5zB,KAAAwpG,yBAEAxpG,KAAA0pG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGA1pG,KAAA2pG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,GACA,4BACA,KAAA,UAAA,IAGA3pG,KAAA4pG,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA5pG,KAAA6pG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAr2E,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA8pG,+BACA,OACAt2E,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA+pG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA/pG,KAAAgqG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAx2E,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAiqG,0BACA,MACAjqG,KAAAgqG,mCACA,QACAhqG,KAAAgqG,mCACA,QACA,SACA,OACAx2E,EAAA2B,qBAGAn1B,KAAAkqG,2BAAA,QAAA12E,EAAAI,eAAA5zB,KAAAiqG,2BAEAjqG,KAAAmqG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACA32E,EAAAoB,oBACA,gBACA,UAGA50B,KAAAoqG,4BAAA,SAAA52E,EAAAI,eAAA5zB,KAAAmqG,kCAEAnqG,KAAAqqG,8BACA,cACA72E,EAAAI,eAAA5zB,KAAAoqG,4BACA,UACA52E,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAsqG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA92E,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA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A,GACA,cACA,UACA,aACA,UACA,aACA,UACA,mBACA,KAAA,UAAA,IAGArrG,KAAAsrG,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAtrG,KAAAurG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA/3E,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAwrG,+BACA,OACAh4E,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAyrG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAzrG,KAAA0rG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAl4E,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA2rG,0BACA,MACA3rG,KAAA0rG,mCACA,QACA1rG,KAAA0rG,mCACA,QACA,SACA,OACAl4E,EAAA2B,qBAGAn1B,KAAA4rG,2BAAA,QAAAp4E,EAAAI,eAAA5zB,KAAA2rG,2BAEA3rG,KAAA6rG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACAr4E,EAAAoB,oBACA,gBACA,UAGA50B,KAAA8rG,4BAAA,SAAAt4E,EAAAI,eAAA5zB,KAAA6rG,kCAEA7rG,KAAA+rG,8BACA,cACAv4E,EAAAI,eAAA5zB,KAAA8rG,4BACA,UACAt4E,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAgsG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAx4E,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAisG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAjsG,KAAAksG,wBACA,WACA14E,EAAAI,eAAA5zB,KAAA8qG,2BACA,qBACAt3E,EAAAI,eAAA5zB,KAAAgrG,oCACA,SACAx3E,EAAAQ,iBAAAh0B,KAAAmrG,yBACA,oBACA33E,EAAA6qB,kBAAAr+C,KAAAorG,oCACA,SACA53E,EAAA6qB,kBAAAr+C,KAAAqrG,yBACA,OACA73E,EAAA6qB,kBAAAr+C,KAAAsrG,uBACA,iBACA93E,EAAA6qB,kBAAAr+C,KAAAurG,yBACA,uBACA/3E,EAAAI,eAAA5zB,KAAAwrG,+BACA,MACAh4E,EAAAQ,iBAAAh0B,KAAAyrG,sBACA,WACAj4E,EAAAQ,iBAAAh0B,KAAA4rG,2BACA,SACAp4E,EAAAQ,iBAAAh0B,KAAA+rG,8BACA,QACAv4E,EAAA6qB,kBAAAr+C,KAAAgsG,wBACA,OACAx4E,EAAA6qB,kBAAAr+C,KAAAisG,uBACA,OACAz4E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAmsG,6BACA,YACA34E,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAosG,yBACA,WACA54E,EAAAI,eAAA5zB,KAAA8qG,2BACA,qBACAt3E,EAAAI,eAAA5zB,KAAAgrG,oCACA,SACAx3E,EAAAQ,iBAAAh0B,KAAAmrG,yBACA,oBACA33E,EAAA6qB,kBAAAr+C,KAAAorG,oCACA,SACA53E,EAAA6qB,kBAAAr+C,KAAAqrG,yBACA,OACA73E,EAAA6qB,kBAAAr+C,KAAAsrG,uBACA,iBACA93E,EAAA6qB,kBAAAr+C,KAAAurG,yBACA,uBACA/3E,EAAAI,eAAA5zB,KAAAwrG,+BACA,MACAh4E,EAAAQ,iBAAAh0B,KAAAyrG,sBACA,WACAj4E,EAAAQ,iBAAAh0B,KAAA4rG,2BACA,SACAp4E,EAAAQ,iBAAAh0B,KAAA+rG,8BACA,QACAv4E,EAAA6qB,kBAAAr+C,KAAAgsG,wBACA,OACAx4E,EAAA6qB,kBAAAr+C,KAAAisG,uBACA,OACAz4E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAmsG,6BACA,WACA34E,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAqsG,uBACA,iBACA74E,EAAAI,eAAA5zB,KAAAksG,wBACA,aACA14E,EAAAQ,iBAAAh0B,KAAAosG,2BAKAE,GAAA,WACAtsG,KAAAusG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAvsG,KAAAwsG,2BAAA,SAAAh5E,EAAA6qB,kBAAAr+C,KAAAusG,yBAEAvsG,KAAAysG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAzsG,KAAA0sG,oCACA,eACAl5E,EAAAI,eAAA5zB,KAAAysG,gCAGAzsG,KAAA2sG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGA3sG,KAAA4sG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAp5E,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA2sG,kCACA,OACAn5E,EAAA2B,qBAGAn1B,KAAA6sG,yBAAA,SAAAr5E,EAAAI,eAAA5zB,KAAA4sG,yBAEA5sG,KAAA8sG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGA9sG,KAAA+sG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGA/sG,KAAAgtG,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAhtG,KAAAitG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAz5E,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAktG,+BACA,OACA15E,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAmtG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAntG,KAAAotG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA55E,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAqtG,0BACA,MACArtG,KAAAotG,mCACA,QACAptG,KAAAotG,mCACA,QACA,SACA,OACA55E,EAAA2B,qBAGAn1B,KAAAstG,2BAAA,QAAA95E,EAAAI,eAAA5zB,KAAAqtG,2BAEArtG,KAAAutG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACA/5E,EAAAoB,oBACA,gBACA,UAGA50B,KAAAwtG,4BAAA,SAAAh6E,EAAAI,eAAA5zB,KAAAutG,kCAEAvtG,KAAAytG,8BACA,cACAj6E,EAAAI,eAAA5zB,KAAAwtG,4BACA,UACAh6E,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA0tG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cA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AAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAxuG,KAAAyuG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAzuG,KAAA0uG,uBACA,aACA,KAAA,QAAA,GACA,YACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA1uG,KAAA2uG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAn7E,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA4uG,+BACA,OACAp7E,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA6uG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA7uG,KAAA8uG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAt7E,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA+uG,0BACA,MACA/uG,KAAA8uG,mCACA,QACA9uG,KAAA8uG,mCACA,QACA,SACA,OACAt7E,EAAA2B,qBAGAn1B,KAAAgvG,2BAAA,QAAAx7E,EAAAI,eAAA5zB,KAAA+uG,2BAEA/uG,KAAAivG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACAz7E,EAAA2B,oBACA,gBACA,UAGAn1B,KAAAkvG,4BAAA,SAAA17E,EAAAI,eAAA5zB,KAAAivG,kCAEAjvG,KAAAmvG,8BACA,cACA37E,EAAAI,eAAA5zB,KAAAkvG,4BACA,UACA17E,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAovG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA57E,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAqvG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGArvG,KAAAsvG,wBACA,WACA97E,EAAAI,eAAA5zB,KAAAkuG,2BACA,qBACA16E,EAAAI,eAAA5zB,KAAAouG,oCACA,SACA56E,EAAAQ,iBAAAh0B,KAAAuuG,yBACA,oBACA/6E,EAAA6qB,kBAAAr+C,KAAAwuG,oCACA,SACAh7E,EAAA6qB,kBAAAr+C,KAAAyuG,yBACA,OACAj7E,EAAA6qB,kBAAAr+C,KAAA0uG,uBACA,iBACAl7E,EAAA6qB,kBAAAr+C,KAAA2uG,yBACA,uBACAn7E,EAAAI,eAAA5zB,KAAA4uG,+BACA,MACAp7E,EAAAQ,iBAAAh0B,KAAA6uG,sBACA,WACAr7E,EAAAQ,iBAAAh0B,KAAAgvG,2BACA,SACAx7E,EAAAQ,iBAAAh0B,KAAAmvG,8BACA,QACA37E,EAAA6qB,kBAAAr+C,KAAAovG,wBACA,OACA57E,EAAA6qB,kBAAAr+C,KAAAqvG,uBACA,OACA77E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAuvG,6BACA,YACA/7E,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAwvG,yBACA,WACAh8E,EAAAI,eAAA5zB,KAAAkuG,2BACA,qBACA16E,EAAAI,eAAA5zB,KAAAouG,oCACA,SACA56E,EAAAQ,iBAAAh0B,KAAAuuG,yBACA,oBACA/6E,EAAA6qB,kBAAAr+C,KAAAwuG,oCACA,SACAh7E,EAAA6qB,kBAAAr+C,KAAAyuG,yBACA,OACAj7E,EAAA6qB,kBAAAr+C,KAAA0uG,uBACA,iBACAl7E,EAAA6qB,kBAAAr+C,KAAA2uG,yBACA,uBACAn7E,EAAAI,eAAA5zB,KAAA4uG,+BACA,MACAp7E,EAAAQ,iBAAAh0B,KAAA6uG,sBACA,WACAr7E,EAAAQ,iBAAAh0B,KAAAgvG,2BACA,SACAx7E,EAAAQ,iBAAAh0B,KAAAmvG,8BACA,QACA37E,EAAA6qB,kBAAAr+C,KAAAovG,wBACA,OACA57E,EAAA6qB,kBAAAr+C,KAAAqvG,uBACA,OACA77E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAuvG,6BACA,WACA/7E,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAyvG,uBACA,iBACAj8E,EAAAI,eAAA5zB,KAAAsvG,wBACA,aACA97E,EAAAQ,iBAAAh0B,KAAAwvG,2BAKAE,GAAA,WACA1vG,KAAA2vG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA3vG,KAAA4vG,2BAAA,SAAAp8E,EAAA6qB,kBAAAr+C,KAAA2vG,yBAEA3vG,KAAA6vG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGA7vG,KAAA8vG,oCACA,eACAt8E,EAAAI,eAAA5zB,KAAA6vG,gCAGA7vG,KAAA+vG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGA/vG,KAAAgwG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAx8E,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA+vG,kCACA,OACAv8E,EAAA2B,qBAGAn1B,KAAAiwG,yBAAA,SAAAz8E,EAAAI,eAAA5zB,KAAAgwG,yBAEAhwG,KAAAkwG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAlwG,KAAAmwG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAnwG,KAAAowG,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGApwG,KAAAqwG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA78E,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAswG,+BACA,OACA98E,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAuwG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAvwG,KAAAwwG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAh9E,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAywG,0BACA,MACAzwG,KAAAwwG,mCACA,QACAxwG,KAAAwwG,mCACA,QACA,SACA,OACAh9E,EAAA2B,qBAGAn1B,KAAA0wG,2BAAA,QAAAl9E,EAAAI,eAAA5zB,KAAAywG,2BAEAzwG,KAAA2wG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACAn9E,EAAA2B,oBACA,gBACA,UAGAn1B,KAAA4wG,4BAAA,SAAAp9E,EAAAI,eAAA5zB,KAAA2wG,kCAEA3wG,KAAA6wG,8BACA,cACAr9E,EAAAI,eAAA5zB,KAAA4wG,4BACA,eACAp9E,EAAAM,kBAGA9zB,KAAA8wG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAt9E,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA+wG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA/wG,KAAAgxG,wBACA,WACAx9E,EAAAI,eAAA5zB,KAAA4vG,2BACA,qBACAp8E,EAAAI,eAAA5zB,KAAA8vG,oCACA,SACAt8E,EAAAQ,iBAAAh0B,KAAAiwG,yBACA,oBACAz8E,EAAA6qB,kBAAAr+C,KAAAkwG,oCACA,SACA18E,EAAA6qB,kBAAAr+C,KAAAmwG,yBACA,OACA38E,EAAA6qB,kBAAAr+C,KAAAowG,uBACA,iBACA58E,EAAA6qB,kBAAAr+C,KAAAqwG,yBACA,uBACA78E,EAAAI,eAAA5zB,KAAAswG,+BACA,MACA98E,EAAAQ,iBAAAh0B,KAAAuwG,sBACA,WACA/8E,EAAAQ,iBAAAh0B,KAAA0wG,2BACA,SACAl9E,EAAAQ,iBAAAh0B,KAAA6wG,8BACA,QACAr9E,EAAA6qB,kBAAAr+C,KAAA8wG,wBACA,OACAt9E,EAAA6qB,kBAAAr+C,KAAA+wG,uBACA,OACAv9E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAixG,6BACA,YACAz9E,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAkxG,yBACA,WACA19E,EAAAI,eAAA5zB,KAAA4vG,2BACA,qBACAp8E,EAAAI,eAAA5zB,KAAA8vG,oCACA,SACAt8E,EAAAQ,iBAAAh0B,KAAAiwG,yBACA,oBACAz8E,EAAA6qB,kBAAAr+C,KAAAkwG,oCACA,SACA18E,EAAA6qB,kBAAAr+C,KAAAmwG,yBACA,OACA38E,EAAA6qB,kBAAAr+C,KAAAowG,uBACA,iBACA58E,EAAA6qB,kBAAAr+C,KAAAqwG,yBACA,uBACA78E,EAAAI,eAAA5zB,KAAAswG,+BACA,MACA98E,EAAAQ,iBAAAh0B,KAAAuwG,sBACA,WACA/8E,EAAAQ,iBAAAh0B,KAAA0wG,2BACA,SACAl9E,EAAAQ,iBAAAh0B,KAAA6wG,8BACA,QACAr9E,EAAA6qB,kBAAAr+C,KAAA8wG,wBACA,OACAt9E,EAAA6qB,kBAAAr+C,KAAA+wG,uBACA,OACAv9E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAixG,6BACA,WACAz9E,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAmxG,uBACA,iBACA39E,EAAAI,eAAA5zB,KAAAgxG,wBACA,aACAx9E,EAAAQ,iBAAAh0B,KAAAkxG,2BAKAE,GAAA,WACApxG,KAAAqxG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGArxG,KAAAsxG,2BAAA,SAAA99E,EAAA6qB,kBAAAr+C,KAAAqxG,yBAEArxG,KAAAuxG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAvxG,KAAAwxG,oCACA,eACAh+E,EAAAI,eAAA5zB,KAAAuxG,gCAGAvxG,KAAAyxG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAzxG,KAAA0xG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAl+E,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAyxG,kCACA,OACAj+E,EAAA2B,qBAGAn1B,KAAA2xG,yBAAA,SAAAn+E,EAAAI,eAAA5zB,KAAA0xG,yBAEA1xG,KAAA4xG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGA5xG,KAAA6xG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGA7xG,KAAA8xG,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA9xG,KAAA+xG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAv+E,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAgyG,+BACA,OACAx+E,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAiyG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAjyG,KAAAkyG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA1+E,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAmyG,0BACA,MACAnyG,KAAAkyG,mCACA,QACAlyG,KAAAkyG,mCACA,QACA,SACA,OACA1+E,EAAA2B,qBAGAn1B,KAAAoyG,2BAAA,QAAA5+E,EAAAI,eAAA5zB,KAAAmyG,2BAEAnyG,KAAAqyG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,cACA,UACA,QACA,UACA,QACA,SACA,YACA7+E,EAAA2B,oBACA,gBACA,UAGAn1B,KAAAsyG,4BAAA,SAAA9+E,EAAAI,eAAA5zB,KAAAqyG,kCAEAryG,KAAAuyG,8BACA,cACA/+E,EAAAI,eAAA5zB,KAAAsyG,4BACA,eACA9+E,EAAAM,kBAGA9zB,KAAAwyG,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAh/E,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAyyG,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAzyG,KAAA0yG,wBACA,WACAl/E,EAAAI,eAAA5zB,KAAAsxG,2BACA,qBACA99E,EAAAI,eAAA5zB,KAAAwxG,oCACA,SACAh+E,EAAAQ,iBAAAh0B,KAAA2xG,yBACA,oBACAn+E,EAAA6qB,kBAAAr+C,KAAA4xG,oCACA,SACAp+E,EAAA6qB,kBAAAr+C,KAAA6xG,yBACA,OACAr+E,EAAA6qB,kBAAAr+C,KAAA8xG,uBACA,iBACAt+E,EAAA6qB,kBAAAr+C,KAAA+xG,yBACA,uBACAv+E,EAAAI,eAAA5zB,KAAAgyG,+BACA,MACAx+E,EAAAQ,iBAAAh0B,KAAAiyG,sBACA,WACAz+E,EAAAQ,iBAAAh0B,KAAAoyG,2BACA,SACA5+E,EAAAQ,iBAAAh0B,KAAAuyG,8BACA,QACA/+E,EAAA6qB,kBAAAr+C,KAAAwyG,wBACA,OACAh/E,EAAA6qB,kBAAAr+C,KAAAyyG,uBACA,OACAj/E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAA2yG,6BACA,YACAn/E,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA4yG,yBACA,WACAp/E,EAAAI,eAAA5zB,KAAAsxG,2BACA,qBACA99E,EAAAI,eAAA5zB,KAAAwxG,oCACA,SACAh+E,EAAAQ,iBAAAh0B,KAAA2xG,yBACA,oBACAn+E,EAAA6qB,kBAAAr+C,KAAA4xG,oCACA,SACAp+E,EAAA6qB,kBAAAr+C,KAAA6xG,yBACA,OACAr+E,EAAA6qB,kBAAAr+C,KAAA8xG,uBACA,iBACAt+E,EAAA6qB,kBAAAr+C,KAAA+xG,yBACA,uBACAv+E,EAAAI,eAAA5zB,KAAAgyG,+BACA,MACAx+E,EAAAQ,iBAAAh0B,KAAAiyG,sBACA,WACAz+E,EAAAQ,iBAAAh0B,KAAAoyG,2BACA,SACA5+E,EAAAQ,iBAAAh0B,KAAAuyG,8BACA,QACA/+E,EAAA6qB,kBAAAr+C,KAAAwyG,wBACA,OACAh/E,EAAA6qB,kBAAAr+C,KAAAyyG,uBACA,OACAj/E,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA2yG,6BACA,WACAn/E,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA6yG,uBACA,iBACAr/E,EAAAI,eAAA5zB,KAAA0yG,wBACA,aACAl/E,EAAAQ,iBAAAh0B,KAAA4yG,2BAKAE,GAAA,WACA9yG,KAAA+yG,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA/yG,KAAAgzG,2BAAA,SAAAx/E,EAAA6qB,kBAAAr+C,KAAA+yG,yBAEA/yG,KAAAizG,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAjzG,KAAAkzG,oCACA,eACA1/E,EAAAI,eAAA5zB,KAAAizG,gCAGAjzG,KAAAmzG,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAnzG,KAAAozG,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACA5/E,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAmzG,kCACA,OACA3/E,EAAA2B,qBAGAn1B,KAAAqzG,yBAAA,SAAA7/E,EAAAI,eAAA5zB,KAAAozG,yBAEApzG,KAAAszG,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAtzG,KAAAuzG,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAvzG,KAAAwzG,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAxzG,KAAAyzG,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAjgF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA0zG,+BACA,OACAlgF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA2zG,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA3zG,KAAA4zG,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACApgF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA6zG,0BACA,MACA7zG,KAAA4zG,mCACA,QACA5zG,KAAA4zG,mCACA,QACA,SACA,OACApgF,EAAA2B,qBAGAn1B,KAAA8zG,2BAAA,QAAAtgF,EAAAI,eAAA5zB,KAAA6zG,2BAEA7zG,KAAA+zG,iCACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,QACA,UACA,gBACA,SACA,QACA,SACA,YACAvgF,EAAA2B,qBAGAn1B,KAAAg0G,4BAAA,SAAAxgF,EAAAI,eAAA5zB,KAAA+zG,kCAEA/zG,KAAAi0G,8BACA,cACAzgF,EAAAI,eAAA5zB,KAAAg0G,4BACA,eACAxgF,EAAAM,kBAGA9zB,KAAAk0G,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA1gF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAm0G,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAn0G,KAAAo0G,wBACA,WACA5gF,EAAAI,eAAA5zB,KAAAgzG,2BACA,qBACAx/E,EAAAI,eAAA5zB,KAAAkzG,oCACA,SACA1/E,EAAAQ,iBAAAh0B,KAAAqzG,yBACA,oBACA7/E,EAAA6qB,kBAAAr+C,KAAAszG,oCACA,SACA9/E,EAAA6qB,kBAAAr+C,KAAAuzG,yBACA,OACA//E,EAAA6qB,kBAAAr+C,KAAAwzG,uBACA,iBACAhgF,EAAA6qB,kBAAAr+C,KAAAyzG,yBACA,uBACAjgF,EAAAI,eAAA5zB,KAAA0zG,+BACA,MACAlgF,EAAAQ,iBAAAh0B,KAAA2zG,sBACA,WACAngF,EAAAQ,iBAAAh0B,KAAA8zG,2BACA,SACAtgF,EAAAQ,iBAAAh0B,KAAAi0G,8BACA,QACAzgF,EAAA6qB,kBAAAr+C,KAAAk0G,wBACA,OACA1gF,EAAA6qB,kBAAAr+C,KAAAm0G,uBACA,OACA3gF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAq0G,6BACA,YACA7gF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAs0G,yBACA,WACA9gF,EAAAI,eAAA5zB,KAAAgzG,2BACA,qBACAx/E,EAAAI,eAAA5zB,KAAAkzG,oCACA,SACA1/E,EAAAQ,iBAAAh0B,KAAAqzG,yBACA,oBACA7/E,EAAA6qB,kBAAAr+C,KAAAszG,oCACA,SACA9/E,EAAA6qB,kBAAAr+C,KAAAuzG,yBACA,OACA//E,EAAA6qB,kBAAAr+C,KAAAwzG,uBACA,iBACAhgF,EAAA6qB,kBAAAr+C,KAAAyzG,yBACA,uBACAjgF,EAAAI,eAAA5zB,KAAA0zG,+BACA,MACAlgF,EAAAQ,iBAAAh0B,KAAA2zG,sBACA,WACAngF,EAAAQ,iBAAAh0B,KAAA8zG,2BACA,SACAtgF,EAAAQ,iBAAAh0B,KAAAi0G,8BACA,QACAzgF,EAAA6qB,kBAAAr+C,KAAAk0G,wBACA,OACA1gF,EAAA6qB,kBAAAr+C,KAAAm0G,uBACA,OACA3gF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAq0G,6BACA,WACA7gF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAu0G,uBACA,iBACA/gF,EAAAI,eAAA5zB,KAAAo0G,wBACA,aACA5gF,EAAAQ,iBAAAh0B,KAAAs0G,2BAKAE,GAAA,WACAx0G,KAAAy0G,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAz0G,KAAA00G,2BAAA,SAAAlhF,EAAA6qB,kBAAAr+C,KAAAy0G,yBAEAz0G,KAAA20G,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGA30G,KAAA40G,oCACA,eACAphF,EAAAI,eAAA5zB,KAAA20G,gCAGA30G,KAAA60G,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGA70G,KAAA80G,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAthF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA60G,kCACA,OACArhF,EAAA2B,qBAGAn1B,KAAA+0G,yBAAA,SAAAvhF,EAAAI,eAAA5zB,KAAA80G,yBAEA90G,KAAAg1G,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAh1G,KAAAi1G,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAj1G,KAAAk1G,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAl1G,KAAAm1G,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA3hF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAo1G,+BACA,OACA5hF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAq1G,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAr1G,KAAAs1G,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA9hF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAu1G,0BACA,MACAv1G,KAAAs1G,mCACA,QACAt1G,KAAAs1G,mCACA,QACA,SACA,OACA9hF,EAAA2B,qBAGAn1B,KAAAw1G,2BAAA,QAAAhiF,EAAAI,eAAA5zB,KAAAu1G,2BAEAv1G,KAAAy1G,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAjiF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA01G,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA11G,KAAA21G,wBACA,WACAniF,EAAAI,eAAA5zB,KAAA00G,2BACA,qBACAlhF,EAAAI,eAAA5zB,KAAA40G,oCACA,SACAphF,EAAAQ,iBAAAh0B,KAAA+0G,yBACA,oBACAvhF,EAAA6qB,kBAAAr+C,KAAAg1G,oCACA,SACAxhF,EAAA6qB,kBAAAr+C,KAAAi1G,yBACA,OACAzhF,EAAA6qB,kBAAAr+C,KAAAk1G,uBACA,iBACA1hF,EAAA6qB,kBAAAr+C,KAAAm1G,yBACA,uBACA3hF,EAAAI,eAAA5zB,KAAAo1G,+BACA,MACA5hF,EAAAQ,iBAAAh0B,KAAAq1G,sBACA,WACA7hF,EAAAQ,iBAAAh0B,KAAAw1G,2BACA,QACAhiF,EAAA6qB,kBAAAr+C,KAAAy1G,wBACA,OACAjiF,EAAA6qB,kBAAAr+C,KAAA01G,uBACA,OACAliF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAA41G,6BACA,YACApiF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA61G,yBACA,WACAriF,EAAAI,eAAA5zB,KAAA00G,2BACA,qBACAlhF,EAAAI,eAAA5zB,KAAA40G,oCACA,SACAphF,EAAAQ,iBAAAh0B,KAAA+0G,yBACA,oBACAvhF,EAAA6qB,kBAAAr+C,KAAAg1G,oCACA,SACAxhF,EAAA6qB,kBAAAr+C,KAAAi1G,yBACA,OACAzhF,EAAA6qB,kBAAAr+C,KAAAk1G,uBACA,iBACA1hF,EAAA6qB,kBAAAr+C,KAAAm1G,yBACA,uBACA3hF,EAAAI,eAAA5zB,KAAAo1G,+BACA,MACA5hF,EAAAQ,iBAAAh0B,KAAAq1G,sBACA,WACA7hF,EAAAQ,iBAAAh0B,KAAAw1G,2BACA,QACAhiF,EAAA6qB,kBAAAr+C,KAAAy1G,wBACA,OACAjiF,EAAA6qB,kBAAAr+C,KAAA01G,uBACA,OACAliF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA41G,6BACA,WACApiF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA81G,uBACA,iBACAtiF,EAAAI,eAAA5zB,KAAA21G,wBACA,aACAniF,EAAAQ,iBAAAh0B,KAAA61G,2BAKAE,GAAA,WACA/1G,KAAAg2G,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAh2G,KAAAi2G,2BAAA,SAAAziF,EAAA6qB,kBAAAr+C,KAAAg2G,yBAEAh2G,KAAAk2G,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAl2G,KAAAm2G,oCACA,eACA3iF,EAAAI,eAAA5zB,KAAAk2G,gCAGAl2G,KAAAo2G,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAp2G,KAAAq2G,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACA7iF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAo2G,kCACA,OACA5iF,EAAA2B,qBAGAn1B,KAAAs2G,yBAAA,SAAA9iF,EAAAI,eAAA5zB,KAAAq2G,yBAEAr2G,KAAAu2G,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAv2G,KAAAw2G,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAx2G,KAAAy2G,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAz2G,KAAA02G,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,kBACA,KAAA,UAAA,GACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAljF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA22G,+BACA,OACAnjF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA42G,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA52G,KAAA62G,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACArjF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA82G,0BACA,MACA92G,KAAA62G,mCACA,QACA72G,KAAA62G,mCACA,QACA,SACA,OACArjF,EAAA2B,qBAGAn1B,KAAA+2G,2BAAA,QAAAvjF,EAAAI,eAAA5zB,KAAA82G,2BAEA92G,KAAAg3G,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAxjF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAi3G,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAj3G,KAAAk3G,wBACA,WACA1jF,EAAAI,eAAA5zB,KAAAi2G,2BACA,qBACAziF,EAAAI,eAAA5zB,KAAAm2G,oCACA,SACA3iF,EAAAQ,iBAAAh0B,KAAAs2G,yBACA,oBACA9iF,EAAA6qB,kBAAAr+C,KAAAu2G,oCACA,SACA/iF,EAAA6qB,kBAAAr+C,KAAAw2G,yBACA,OACAhjF,EAAA6qB,kBAAAr+C,KAAAy2G,uBACA,iBACAjjF,EAAA6qB,kBAAAr+C,KAAA02G,yBACA,uBACAljF,EAAAI,eAAA5zB,KAAA22G,+BACA,MACAnjF,EAAAQ,iBAAAh0B,KAAA42G,sBACA,WACApjF,EAAAQ,iBAAAh0B,KAAA+2G,2BACA,QACAvjF,EAAA6qB,kBAAAr+C,KAAAg3G,wBACA,OACAxjF,EAAA6qB,kBAAAr+C,KAAAi3G,uBACA,OACAzjF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAm3G,6BACA,YACA3jF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAo3G,yBACA,WACA5jF,EAAAI,eAAA5zB,KAAAi2G,2BACA,qBACAziF,EAAAI,eAAA5zB,KAAAm2G,oCACA,SACA3iF,EAAAQ,iBAAAh0B,KAAAs2G,yBACA,oBACA9iF,EAAA6qB,kBAAAr+C,KAAAu2G,oCACA,SACA/iF,EAAA6qB,kBAAAr+C,KAAAw2G,yBACA,OACAhjF,EAAA6qB,kBAAAr+C,KAAAy2G,uBACA,iBACAjjF,EAAA6qB,kBAAAr+C,KAAA02G,yBACA,uBACAljF,EAAAI,eAAA5zB,KAAA22G,+BACA,MACAnjF,EAAAQ,iBAAAh0B,KAAA42G,sBACA,WACApjF,EAAAQ,iBAAAh0B,KAAA+2G,2BACA,QACAvjF,EAAA6qB,kBAAAr+C,KAAAg3G,wBACA,OACAxjF,EAAA6qB,kBAAAr+C,KAAAi3G,uBACA,OACAzjF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAm3G,6BACA,WACA3jF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAq3G,uBACA,iBACA7jF,EAAAI,eAAA5zB,KAAAk3G,wBACA,aACA1jF,EAAAQ,iBAAAh0B,KAAAo3G,2BAKAE,GAAA,WACAt3G,KAAAu3G,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAv3G,KAAAw3G,2BAAA,SAAAhkF,EAAA6qB,kBAAAr+C,KAAAu3G,yBAEAv3G,KAAAy3G,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAz3G,KAAA03G,oCACA,eACAlkF,EAAAI,eAAA5zB,KAAAy3G,gCAGAz3G,KAAA23G,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGA33G,KAAA43G,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACApkF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA23G,kCACA,OACAnkF,EAAA2B,qBAGAn1B,KAAA63G,yBAAA,SAAArkF,EAAAI,eAAA5zB,KAAA43G,yBAEA53G,KAAA83G,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGA93G,KAAA+3G,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGA/3G,KAAAg4G,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAh4G,KAAAi4G,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,eACA,SACA,cACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,OACA,SACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAzkF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAk4G,+BACA,OACA1kF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAm4G,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAn4G,KAAAo4G,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA5kF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAq4G,0BACA,MACAr4G,KAAAo4G,mCACA,QACAp4G,KAAAo4G,mCACA,QACA,SACA,OACA5kF,EAAA2B,qBAGAn1B,KAAAs4G,2BAAA,QAAA9kF,EAAAI,eAAA5zB,KAAAq4G,2BAEAr4G,KAAAu4G,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA/kF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAw4G,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAx4G,KAAAy4G,wBACA,WACAjlF,EAAAI,eAAA5zB,KAAAw3G,2BACA,qBACAhkF,EAAAI,eAAA5zB,KAAA03G,oCACA,SACAlkF,EAAAQ,iBAAAh0B,KAAA63G,yBACA,oBACArkF,EAAA6qB,kBAAAr+C,KAAA83G,oCACA,SACAtkF,EAAA6qB,kBAAAr+C,KAAA+3G,yBACA,OACAvkF,EAAA6qB,kBAAAr+C,KAAAg4G,uBACA,iBACAxkF,EAAA6qB,kBAAAr+C,KAAAi4G,yBACA,uBACAzkF,EAAAI,eAAA5zB,KAAAk4G,+BACA,MACA1kF,EAAAQ,iBAAAh0B,KAAAm4G,sBACA,WACA3kF,EAAAQ,iBAAAh0B,KAAAs4G,2BACA,QACA9kF,EAAA6qB,kBAAAr+C,KAAAu4G,wBACA,OACA/kF,EAAA6qB,kBAAAr+C,KAAAw4G,uBACA,OACAhlF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAA04G,6BACA,YACAllF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA24G,yBACA,WACAnlF,EAAAI,eAAA5zB,KAAAw3G,2BACA,qBACAhkF,EAAAI,eAAA5zB,KAAA03G,oCACA,SACAlkF,EAAAQ,iBAAAh0B,KAAA63G,yBACA,oBACArkF,EAAA6qB,kBAAAr+C,KAAA83G,oCACA,SACAtkF,EAAA6qB,kBAAAr+C,KAAA+3G,yBACA,OACAvkF,EAAA6qB,kBAAAr+C,KAAAg4G,uBACA,iBACAxkF,EAAA6qB,kBAAAr+C,KAAAi4G,yBACA,uBACAzkF,EAAAI,eAAA5zB,KAAAk4G,+BACA,MACA1kF,EAAAQ,iBAAAh0B,KAAAm4G,sBACA,WACA3kF,EAAAQ,iBAAAh0B,KAAAs4G,2BACA,QACA9kF,EAAA6qB,kBAAAr+C,KAAAu4G,wBACA,OACA/kF,EAAA6qB,kBAAAr+C,KAAAw4G,uBACA,OACAhlF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA04G,6BACA,WACAllF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA44G,uBACA,iBACAplF,EAAAI,eAAA5zB,KAAAy4G,wBACA,aACAjlF,EAAAQ,iBAAAh0B,KAAA24G,2BAKAE,GAAA,WACA74G,KAAA84G,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA94G,KAAA+4G,2BAAA,SAAAvlF,EAAA6qB,kBAAAr+C,KAAA84G,yBAEA94G,KAAAg5G,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAh5G,KAAAi5G,oCACA,eACAzlF,EAAAI,eAAA5zB,KAAAg5G,gCAGAh5G,KAAAk5G,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAl5G,KAAAm5G,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACA3lF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAk5G,kCACA,OACA1lF,EAAA2B,qBAGAn1B,KAAAo5G,yBAAA,SAAA5lF,EAAAI,eAAA5zB,KAAAm5G,yBAEAn5G,KAAAq5G,oCACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,QAAA,GAAA,GACA,gBACA,MAAA,KAAA,QAAA,GAAA,IAGAr5G,KAAAs5G,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAt5G,KAAAu5G,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAv5G,KAAAw5G,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,UACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,SACA,UACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAhmF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAy5G,+BACA,OACAjmF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA05G,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA15G,KAAA25G,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAnmF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA45G,0BACA,MACA55G,KAAA25G,mCACA,QACA35G,KAAA25G,mCACA,QACA,SACA,OACAnmF,EAAA2B,qBAGAn1B,KAAA65G,2BAAA,QAAArmF,EAAAI,eAAA5zB,KAAA45G,2BAEA55G,KAAA85G,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,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,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGA76G,KAAA86G,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA96G,KAAA+6G,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAvnF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAg7G,+BACA,OACAxnF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAi7G,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAj7G,KAAAk7G,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA1nF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAm7G,0BACA,MACAn7G,KAAAk7G,mCACA,QACAl7G,KAAAk7G,mCACA,QACA,SACA,OACA1nF,EAAA2B,qBAGAn1B,KAAAo7G,2BAAA,QAAA5nF,EAAAI,eAAA5zB,KAAAm7G,2BAEAn7G,KAAAq7G,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UA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KAAA,QAAA,GAAA,GACA,aACA,KAAA,UAAA,IAGAn8G,KAAAo8G,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAp8G,KAAAq8G,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAr8G,KAAAs8G,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA9oF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAu8G,+BACA,OACA/oF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAw8G,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAx8G,KAAAy8G,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAjpF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA08G,0BACA,MACA18G,KAAAy8G,mCACA,QACAz8G,KAAAy8G,mCACA,QACA,SACA,OACAjpF,EAAA2B,qBAGAn1B,KAAA28G,2BAAA,QAAAnpF,EAAAI,eAAA5zB,KAAA08G,2BAEA18G,KAAA48G,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAppF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA68G,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA78G,KAAA88G,wBACA,WACAtpF,EAAAI,eAAA5zB,KAAA67G,2BACA,qBACAroF,EAAAI,eAAA5zB,KAAA+7G,oCACA,SACAvoF,EAAAQ,iBAAAh0B,KAAAk8G,yBACA,oBACA1oF,EAAA6qB,kBAAAr+C,KAAAm8G,oCACA,SACA3oF,EAAA6qB,kBAAAr+C,KAAAo8G,yBACA,OACA5oF,EAAA6qB,kBAAAr+C,KAAAq8G,uBACA,iBACA7oF,EAAA6qB,kBAAAr+C,KAAAs8G,yBACA,uBACA9oF,EAAAI,eAAA5zB,KAAAu8G,+BACA,MACA/oF,EAAAQ,iBAAAh0B,KAAAw8G,sBACA,WACAhpF,EAAAQ,iBAAAh0B,KAAA28G,2BACA,QACAnpF,EAAA6qB,kBAAAr+C,KAAA48G,wBACA,OACAppF,EAAA6qB,kBAAAr+C,KAAA68G,uBACA,OACArpF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAA+8G,6BACA,YACAvpF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAg9G,yBACA,WACAxpF,EAAAI,eAAA5zB,KAAA67G,2BACA,qBACAroF,EAAAI,eAAA5zB,KAAA+7G,oCACA,SACAvoF,EAAAQ,iBAAAh0B,KAAAk8G,yBACA,oBACA1oF,EAAA6qB,kBAAAr+C,KAAAm8G,oCACA,SACA3oF,EAAA6qB,kBAAAr+C,KAAAo8G,yBACA,OACA5oF,EAAA6qB,kBAAAr+C,KAAAq8G,uBACA,iBACA7oF,EAAA6qB,kBAAAr+C,KAAAs8G,yBACA,uBACA9oF,EAAAI,eAAA5zB,KAAAu8G,+BACA,MACA/oF,EAAAQ,iBAAAh0B,KAAAw8G,sBACA,WACAhpF,EAAAQ,iBAAAh0B,KAAA28G,2BACA,QACAnpF,EAAA6qB,kBAAAr+C,KAAA48G,wBACA,OACAppF,EAAA6qB,kBAAAr+C,KAAA68G,uBACA,OACArpF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAA+8G,6BACA,WACAvpF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAi9G,uBACA,iBACAzpF,EAAAI,eAAA5zB,KAAA88G,wBACA,aACAtpF,EAAAQ,iBAAAh0B,KAAAg9G,2BAKAE,GAAA,WACAl9G,KAAAm9G,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAn9G,KAAAo9G,2BAAA,SAAA5pF,EAAA6qB,kBAAAr+C,KAAAm9G,yBAEAn9G,KAAAq9G,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAr9G,KAAAs9G,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAt9G,KAAAu9G,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACA/pF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAs9G,kCACA,OACA9pF,EAAA2B,qBAGAn1B,KAAAw9G,yBAAA,SAAAhqF,EAAAI,eAAA5zB,KAAAu9G,yBAEAv9G,KAAAy9G,oCACA,SACA,KAAA,UAAA,GACA,UACA,MAAA,KAAA,QAAA,GAAA,GACA,aACA,KAAA,UAAA,IAGAz9G,KAAA09G,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGA19G,KAAA29G,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA39G,KAAA49G,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACApqF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA69G,+BACA,OACArqF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA89G,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA99G,KAAA+9G,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAvqF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAg+G,0BACA,MACAh+G,KAAA+9G,mCACA,QACA/9G,KAAA+9G,mCACA,QACA,SACA,OACAvqF,EAAA2B,qBAGAn1B,KAAAi+G,2BAAA,QAAAzqF,EAAAI,eAAA5zB,KAAAg+G,2BAEAh+G,KAAAk+G,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA1qF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAm+G,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAn+G,KAAAo+G,wBACA,WACA5qF,EAAAI,eAAA5zB,KAAAo9G,2BACA,eACA5pF,EAAAI,eAAA5zB,KAAAq9G,+BACA,SACA7pF,EAAAQ,iBAAAh0B,KAAAw9G,yBACA,oBACAhqF,EAAA6qB,kBAAAr+C,KAAAy9G,oCACA,SACAjqF,EAAA6qB,kBAAAr+C,KAAA09G,yBACA,OACAlqF,EAAA6qB,kBAAAr+C,KAAA29G,uBACA,iBACAnqF,EAAA6qB,kBAAAr+C,KAAA49G,yBACA,uBACApqF,EAAAI,eAAA5zB,KAAA69G,+BACA,MACArqF,EAAAQ,iBAAAh0B,KAAA89G,sBACA,WACAtqF,EAAAQ,iBAAAh0B,KAAAi+G,2BACA,QACAzqF,EAAA6qB,kBAAAr+C,KAAAk+G,wBACA,OACA1qF,EAAA6qB,kBAAAr+C,KAAAm+G,uBACA,OACA3qF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAq+G,6BACA,YACA7qF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAs+G,yBACA,WACA9qF,EAAAI,eAAA5zB,KAAAo9G,2BACA,eACA5pF,EAAAI,eAAA5zB,KAAAq9G,+BACA,SACA7pF,EAAAQ,iBAAAh0B,KAAAw9G,yBACA,oBACAhqF,EAAA6qB,kBAAAr+C,KAAAy9G,oCACA,SACAjqF,EAAA6qB,kBAAAr+C,KAAA09G,yBACA,OACAlqF,EAAA6qB,kBAAAr+C,KAAA29G,uBACA,iBACAnqF,EAAA6qB,kBAAAr+C,KAAA49G,yBACA,uBACApqF,EAAAI,eAAA5zB,KAAA69G,+BACA,MACArqF,EAAAQ,iBAAAh0B,KAAA89G,sBACA,WACAtqF,EAAAQ,iBAAAh0B,KAAAi+G,2BACA,QACAzqF,EAAA6qB,kBAAAr+C,KAAAk+G,wBACA,OACA1qF,EAAA6qB,kBAAAr+C,KAAAm+G,uBACA,OACA3qF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAM,iBACA,aACAN,EAAAI,eAAA5zB,KAAAq+G,6BACA,WACA7qF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAu+G,uBACA,iBACA/qF,EAAAI,eAAA5zB,KAAAo+G,wBACA,aACA5qF,EAAAQ,iBAAAh0B,KAAAs+G,2BAKAE,GAAA,WACAx+G,KAAAy+G,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAz+G,KAAA0+G,2BAAA,SAAAlrF,EAAA6qB,kBAAAr+C,KAAAy+G,yBAEAz+G,KAAA2+G,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGA3+G,KAAA4+G,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGA5+G,KAAA6+G,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACArrF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA4+G,kCACA,OACAprF,EAAA2B,qBAGAn1B,KAAA8+G,yBAAA,SAAAtrF,EAAAI,eAAA5zB,KAAA6+G,yBAEA7+G,KAAA++G,oCACA,SACA,KAAA,UAAA,GACA,UACA,MAAA,KAAA,QAAA,GAAA,GACA,aACA,KAAA,UAAA,IAGA/+G,KAAAg/G,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAh/G,KAAAi/G,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAj/G,KAAAk/G,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA1rF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAm/G,+BACA,OACA3rF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAo/G,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAp/G,KAAAq/G,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA7rF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAs/G,0BACA,MACAt/G,KAAAq/G,mCACA,QACAr/G,KAAAq/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B,KAAAkgH,kCACA,OACA1sF,EAAA2B,qBAGAn1B,KAAAogH,yBAAA,SAAA5sF,EAAAI,eAAA5zB,KAAAmgH,yBAEAngH,KAAAqgH,oCACA,SACA,KAAA,UAAA,GACA,UACA,MAAA,KAAA,QAAA,GAAA,GACA,aACA,KAAA,UAAA,IAGArgH,KAAAsgH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAtgH,KAAAugH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAvgH,KAAAwgH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAhtF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAygH,+BACA,OACAjtF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA0gH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA1gH,KAAA2gH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAntF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA4gH,0BACA,MACA5gH,KAAA2gH,mCACA,QACA3gH,KAAA2gH,mCACA,QACA,SACA,OACAntF,EAAA2B,qBAGAn1B,KAAA6gH,2BAAA,QAAArtF,EAAAI,eAAA5zB,KAAA4gH,2BAEA5gH,KAAA8gH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAttF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA+gH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA/gH,KAAAghH,wBACA,WACAxtF,EAAAI,eAAA5zB,KAAAggH,2BACA,eACAxsF,EAAAI,eAAA5zB,KAAAigH,+BACA,SACAzsF,EAAAQ,iBAAAh0B,KAAAogH,yBACA,oBACA5sF,EAAA6qB,kBAAAr+C,KAAAqgH,oCACA,SACA7sF,EAAA6qB,kBAAAr+C,KAAAsgH,yBACA,OACA9sF,EAAA6qB,kBAAAr+C,KAAAugH,uBACA,iBACA/sF,EAAA6qB,kBAAAr+C,KAAAwgH,yBACA,uBACAhtF,EAAAI,eAAA5zB,KAAAygH,+BACA,MACAjtF,EAAAQ,iBAAAh0B,KAAA0gH,sBACA,WACAltF,EAAAQ,iBAAAh0B,KAAA6gH,2BACA,QACArtF,EAAA6qB,kBAAAr+C,KAAA8gH,wBACA,OACAttF,EAAA6qB,kBAAAr+C,KAAA+gH,uBACA,OACAvtF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAihH,6BACA,YACAztF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAkhH,yBACA,WACA1tF,EAAAI,eAAA5zB,KAAAggH,2BACA,eACAxsF,EAAAI,eAAA5zB,KAAAigH,+BACA,SACAzsF,EAAAQ,iBAAAh0B,KAAAogH,yBACA,oBACA5sF,EAAA6qB,kBAAAr+C,KAAAqgH,oCACA,SACA7sF,EAAA6qB,kBAAAr+C,KAAAsgH,yBACA,OACA9sF,EAAA6qB,kBAAAr+C,KAAAugH,uBACA,iBACA/sF,EAAA6qB,kBAAAr+C,KAAAwgH,yBACA,uBACAhtF,EAAAI,eAAA5zB,KAAAygH,+BACA,MACAjtF,EAAAQ,iBAAAh0B,KAAA0gH,sBACA,WACAltF,EAAAQ,iBAAAh0B,KAAA6gH,2BACA,QACArtF,EAAA6qB,kBAAAr+C,KAAA8gH,wBACA,OACAttF,EAAA6qB,kBAAAr+C,KAAA+gH,uBACA,OACAvtF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAI,eAAA5zB,KAAAihH,6BACA,WACAztF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAmhH,uBACA,iBACA3tF,EAAAI,eAAA5zB,KAAAghH,wBACA,aACAxtF,EAAAQ,iBAAAh0B,KAAAkhH,2BAKAE,GAAA,WACAphH,KAAAqhH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGArhH,KAAAshH,2BAAA,SAAA9tF,EAAA6qB,kBAAAr+C,KAAAqhH,yBAEArhH,KAAAuhH,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAvhH,KAAAwhH,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGAxhH,KAAAyhH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAjuF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAwhH,kCACA,OACAhuF,EAAA2B,qBAGAn1B,KAAA0hH,yBAAA,SAAAluF,EAAAI,eAAA5zB,KAAAyhH,yBAEAzhH,KAAA2hH,oCACA,SACA,KAAA,UAAA,GACA,UACA,MAAA,KAAA,QAAA,GAAA,GACA,aACA,KAAA,UAAA,IAGA3hH,KAAA4hH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGA5hH,KAAA6hH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA7hH,KAAA8hH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAtuF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA+hH,+BACA,OACAvuF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAgiH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAhiH,KAAAiiH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAzuF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAkiH,0BACA,MACAliH,KAAAiiH,mCACA,QACAjiH,KAAAiiH,mCACA,QACA,SACA,OACAzuF,EAAA2B,qBAGAn1B,KAAAmiH,2BAAA,QAAA3uF,EAAAI,eAAA5zB,KAAAkiH,2BAEAliH,KAAAoiH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA5uF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAqiH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAriH,KAAAsiH,wBACA,WACA9uF,EAAAI,eAAA5zB,KAAAshH,2BACA,eACA9tF,EAAAI,eAAA5zB,KAAAuhH,+BACA,SACA/tF,EAAAQ,iBAAAh0B,KAAA0hH,yBACA,oBACAluF,EAAA6qB,kBAAAr+C,KAAA2hH,oCACA,SACAnuF,EAAA6qB,kBAAAr+C,KAAA4hH,yBACA,OACApuF,EAAA6qB,kBAAAr+C,KAAA6hH,uBACA,iBACAruF,EAAA6qB,kBAAAr+C,KAAA8hH,yBACA,uBACAtuF,EAAAI,eAAA5zB,KAAA+hH,+BACA,MACAvuF,EAAAQ,iBAAAh0B,KAAAgiH,sBACA,WACAxuF,EAAAQ,iBAAAh0B,KAAAmiH,2BACA,QACA3uF,EAAA6qB,kBAAAr+C,KAAAoiH,wBACA,OACA5uF,EAAA6qB,kBAAAr+C,KAAAqiH,uBACA,OACA7uF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAuiH,6BACA,YACA/uF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAwiH,yBACA,WACAhvF,EAAAI,eAAA5zB,KAAAshH,2BACA,eACA9tF,EAAAI,eAAA5zB,KAAAuhH,+BACA,SACA/tF,EAAAQ,iBAAAh0B,KAAA0hH,yBACA,oBACAluF,EAAA6qB,kBAAAr+C,KAAA2hH,oCACA,SACAnuF,EAAA6qB,kBAAAr+C,KAAA4hH,yBACA,OACApuF,EAAA6qB,kBAAAr+C,KAAA6hH,uBACA,iBACAruF,EAAA6qB,kBAAAr+C,KAAA8hH,yBACA,uBACAtuF,EAAAI,eAAA5zB,KAAA+hH,+BACA,MACAvuF,EAAAQ,iBAAAh0B,KAAAgiH,sBACA,WACAxuF,EAAAQ,iBAAAh0B,KAAAmiH,2BACA,QACA3uF,EAAA6qB,kBAAAr+C,KAAAoiH,wBACA,OACA5uF,EAAA6qB,kBAAAr+C,KAAAqiH,uBACA,OACA7uF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAI,eAAA5zB,KAAAuiH,6BACA,WACA/uF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAyiH,uBACA,iBACAjvF,EAAAI,eAAA5zB,KAAAsiH,wBACA,aACA9uF,EAAAQ,iBAAAh0B,KAAAwiH,2BAKAE,GAAA,WACA1iH,KAAA2iH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA3iH,KAAA4iH,2BAAA,SAAApvF,EAAA6qB,kBAAAr+C,KAAA2iH,yBAEA3iH,KAAA6iH,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGA7iH,KAAA8iH,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGA9iH,KAAA+iH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAvvF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA8iH,kCACA,OACAtvF,EAAA2B,qBAGAn1B,KAAAgjH,yBAAA,SAAAxvF,EAAAI,eAAA5zB,KAAA+iH,yBAEA/iH,KAAAijH,oCACA,SACA,KAAA,UAAA,GACA,UACA,MAAA,KAAA,QAAA,GAAA,GACA,aACA,KAAA,UAAA,IAGAjjH,KAAAkjH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAljH,KAAAmjH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAnjH,KAAAojH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA5vF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAqjH,+BACA,OACA7vF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAsjH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAtjH,KAAAujH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA/vF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAAwjH,0BACA,MACAxjH,KAAAujH,mCACA,QACAvjH,KAAAujH,mCACA,QACA,SACA,OACA/vF,EAAA2B,qBAGAn1B,KAAAyjH,2BAAA,QAAAjwF,EAAAI,eAAA5zB,KAAAwjH,2BAEAxjH,KAAA0jH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAlwF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA2jH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA3jH,KAAA4jH,wBACA,WACApwF,EAAAI,eAAA5zB,KAAA4iH,2BACA,eACApvF,EAAAI,eAAA5zB,KAAA6iH,+BACA,SACArvF,EAAAQ,iBAAAh0B,KAAAgjH,yBACA,oBACAxvF,EAAA6qB,kBAAAr+C,KAAAijH,oCACA,SACAzvF,EAAA6qB,kBAAAr+C,KAAAkjH,yBACA,OACA1vF,EAAA6qB,kBAAAr+C,KAAAmjH,uBACA,iBACA3vF,EAAA6qB,kBAAAr+C,KAAAojH,yBACA,uBACA5vF,EAAAI,eAAA5zB,KAAAqjH,+BACA,MACA7vF,EAAAQ,iBAAAh0B,KAAAsjH,sBACA,WACA9vF,EAAAQ,iBAAAh0B,KAAAyjH,2BACA,QACAjwF,EAAA6qB,kBAAAr+C,KAAA0jH,wBACA,OACAlwF,EAAA6qB,kBAAAr+C,KAAA2jH,uBACA,OACAnwF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAA6jH,6BACA,YACArwF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA8jH,yBACA,WACAtwF,EAAAI,eAAA5zB,KAAA4iH,2BACA,eACApvF,EAAAI,eAAA5zB,KAAA6iH,+BACA,SACArvF,EAAAQ,iBAAAh0B,KAAAgjH,yBACA,oBACAxvF,EAAA6qB,kBAAAr+C,KAAAijH,oCACA,SACAzvF,EAAA6qB,kBAAAr+C,KAAAkjH,yBACA,OACA1vF,EAAA6qB,kBAAAr+C,KAAAmjH,uBACA,iBACA3vF,EAAA6qB,kBAAAr+C,KAAAojH,yBACA,uBACA5vF,EAAAI,eAAA5zB,KAAAqjH,+BACA,MACA7vF,EAAAQ,iBAAAh0B,KAAAsjH,sBACA,WACA9vF,EAAAQ,iBAAAh0B,KAAAyjH,2BACA,QACAjwF,EAAA6qB,kBAAAr+C,KAAA0jH,wBACA,OACAlwF,EAAA6qB,kBAAAr+C,KAAA2jH,uBACA,OACAnwF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAI,eAAA5zB,KAAA6jH,6BACA,WACArwF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA+jH,uBACA,iBACAvwF,EAAAI,eAAA5zB,KAAA4jH,wBACA,aACApwF,EAAAQ,iBAAAh0B,KAAA8jH,2BAKAE,GAAA,WACAhkH,KAAAikH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAjkH,KAAAkkH,2BAAA,SAAA1wF,EAAA6qB,kBAAAr+C,KAAAikH,yBAEAjkH,KAAAmkH,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAnkH,KAAAokH,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,YACA,UACA,UACA,WAGApkH,KAAAqkH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACA7wF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAokH,kCACA,OACA5wF,EAAA2B,qBAGAn1B,KAAAskH,yBAAA,SAAA9wF,EAAAI,eAAA5zB,KAAAqkH,yBAEArkH,KAAAukH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAvkH,KAAAwkH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAxkH,KAAAykH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAjxF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA0kH,+BACA,OACAlxF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA2kH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA3kH,KAAA4kH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACApxF,EAAAoB,oBACA,aACA,KAAA,UAAA,GACA,aACA,WAGA50B,KAAA6kH,0BACA,MACA7kH,KAAA4kH,mCACA,QACA5kH,KAAA4kH,mCACA,QACA,SACA,OACApxF,EAAA2B,qBAGAn1B,KAAA8kH,2BAAA,QAAAtxF,EAAAI,eAAA5zB,KAAA6kH,2BAEA7kH,KAAA+kH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAvxF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,qBACA,iBACApB,EAAAI,eAAA,UACA,iBACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAglH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAhlH,KAAAilH,wBACA,WACAzxF,EAAAI,eAAA5zB,KAAAkkH,2BACA,eACA1wF,EAAAI,eAAA5zB,KAAAmkH,+BACA,SACA3wF,EAAAQ,iBAAAh0B,KAAAskH,yBACA,SACA9wF,EAAA6qB,kBAAAr+C,KAAAukH,yBACA,OACA/wF,EAAA6qB,kBAAAr+C,KAAAwkH,uBACA,iBACAhxF,EAAA6qB,kBAAAr+C,KAAAykH,yBACA,uBACAjxF,EAAAI,eAAA5zB,KAAA0kH,+BACA,MACAlxF,EAAAQ,iBAAAh0B,KAAA2kH,sBACA,WACAnxF,EAAAQ,iBAAAh0B,KAAA8kH,2BACA,QACAtxF,EAAA6qB,kBAAAr+C,KAAA+kH,wBACA,OACAvxF,EAAA6qB,kBAAAr+C,KAAAglH,uBACA,OACAxxF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAklH,6BACA,YACA1xF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAmlH,yBACA,WACA3xF,EAAAI,eAAA5zB,KAAAkkH,2BACA,eACA1wF,EAAAI,eAAA5zB,KAAAmkH,+BACA,SACA3wF,EAAAQ,iBAAAh0B,KAAAskH,yBACA,SACA9wF,EAAA6qB,kBAAAr+C,KAAAukH,yBACA,OACA/wF,EAAA6qB,kBAAAr+C,KAAAwkH,uBACA,iBACAhxF,EAAA6qB,kBAAAr+C,KAAAykH,yBACA,uBACAjxF,EAAAI,eAAA5zB,KAAA0kH,+BACA,MACAlxF,EAAAQ,iBAAAh0B,KAAA2kH,sBACA,WACAnxF,EAAAQ,iBAAAh0B,KAAA8kH,2BACA,QACAtxF,EAAA6qB,kBAAAr+C,KAAA+kH,wBACA,OACAvxF,EAAA6qB,kBAAAr+C,KAAAglH,uBACA,OACAxxF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAI,eAAA5zB,KAAAklH,6BACA,WACA1xF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAolH,uBACA,iBACA5xF,EAAAI,eAAA5zB,KAAAilH,wBACA,aACAzxF,EAAAQ,iBAAAh0B,KAAAmlH,2BAKAE,GAAA,WACArlH,KAAAslH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAtlH,KAAAulH,2BAAA,SAAA/xF,EAAA6qB,kBAAAr+C,KAAAslH,yBAEAtlH,KAAAwlH,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAxlH,KAAAylH,kCACA,aACA,UACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGAzlH,KAAA0lH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAlyF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAylH,kCACA,OACAjyF,EAAA2B,qBAGAn1B,KAAA2lH,yBAAA,SAAAnyF,EAAAI,eAAA5zB,KAAA0lH,yBAEA1lH,KAAA4lH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGA5lH,KAAA6lH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA7lH,KAAA8lH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAtyF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA+lH,+BACA,OACAvyF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAgmH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAhmH,KAAAimH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAzyF,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAkmH,0BACA,MACAlmH,KAAAimH,mCACA,QACAjmH,KAAAimH,mCACA,QACA,SACA,OACAzyF,EAAA2B,qBAGAn1B,KAAAmmH,2BAAA,QAAA3yF,EAAAI,eAAA5zB,KAAAkmH,2BAEAlmH,KAAAomH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACA5yF,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,sBAGA50B,KAAAqmH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGArmH,KAAAsmH,wBACA,WACA9yF,EAAAI,eAAA5zB,KAAAulH,2BACA,eACA/xF,EAAAI,eAAA5zB,KAAAwlH,+BACA,SACAhyF,EAAAQ,iBAAAh0B,KAAA2lH,yBACA,SACAnyF,EAAA6qB,kBAAAr+C,KAAA4lH,yBACA,OACApyF,EAAA6qB,kBAAAr+C,KAAA6lH,uBACA,iBACAryF,EAAA6qB,kBAAAr+C,KAAA8lH,yBACA,uBACAtyF,EAAAI,eAAA5zB,KAAA+lH,+BACA,MACAvyF,EAAAQ,iBAAAh0B,KAAAgmH,sBACA,WACAxyF,EAAAQ,iBAAAh0B,KAAAmmH,2BACA,QACA3yF,EAAA6qB,kBAAAr+C,KAAAomH,wBACA,OACA5yF,EAAA6qB,kBAAAr+C,KAAAqmH,uBACA,OACA7yF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAumH,6BACA,YACA/yF,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAwmH,yBACA,WACAhzF,EAAAI,eAAA5zB,KAAAulH,2BACA,eACA/xF,EAAAI,eAAA5zB,KAAAwlH,+BACA,SACAhyF,EAAAQ,iBAAAh0B,KAAA2lH,yBACA,SACAnyF,EAAA6qB,kBAAAr+C,KAAA4lH,yBACA,OACApyF,EAAA6qB,kBAAAr+C,KAAA6lH,uBACA,iBACAryF,EAAA6qB,kBAAAr+C,KAAA8lH,yBACA,uBACAtyF,EAAAI,eAAA5zB,KAAA+lH,+BACA,MACAvyF,EAAAQ,iBAAAh0B,KAAAgmH,sBACA,WACAxyF,EAAAQ,iBAAAh0B,KAAAmmH,2BACA,QACA3yF,EAAA6qB,kBAAAr+C,KAAAomH,wBACA,OACA5yF,EAAA6qB,kBAAAr+C,KAAAqmH,uBACA,OACA7yF,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAI,eAAA5zB,KAAAumH,6BACA,WACA/yF,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAymH,uBACA,iBACAjzF,EAAAI,eAAA5zB,KAAAsmH,wBACA,aACA9yF,EAAAQ,iBAAAh0B,KAAAwmH,2BAKAE,GAAA,WACA1mH,KAAA2mH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA3mH,KAAA4mH,2BAAA,SAAApzF,EAAA6qB,kBAAAr+C,KAAA2mH,yBAEA3mH,KAAA6mH,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGA7mH,KAAA8mH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGA9mH,KAAA+mH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAvzF,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA8mH,kCACA,OACAtzF,EAAA2B,qBAGAn1B,KAAAgnH,yBAAA,SAAAxzF,EAAAI,eAAA5zB,KAAA+mH,yBAEA/mH,KAAAinH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAjnH,KAAAknH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAlnH,KAAAmnH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA3zF,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAonH,+BACA,OACA5zF,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAqnH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGArnH,KAAAsnH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA9zF,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAunH,0BACA,MACAvnH,KAAAsnH,mCACA,QACAtnH,KAAAsnH,mCACA,QACA,SACA,OACA9zF,EAAA2B,qBAGAn1B,KAAAwnH,2BAAA,QAAAh0F,EAAAI,eAAA5zB,KAAAunH,2BAEAvnH,KAAAynH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,mBACA,UACA,mBACAj0F,EAAAoB,oBACA,mBACApB,EAAAI,eAAAJ,EAAAoB,sBAGA50B,KAAA0nH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA1nH,KAAA2nH,wBACA,WACAn0F,EAAAI,eAAA5zB,KAAA4mH,2BACA,eACApzF,EAAAI,eAAA5zB,KAAA6mH,+BACA,SACArzF,EAAAQ,iBAAAh0B,KAAAgnH,yBACA,SACAxzF,EAAA6qB,kBAAAr+C,KAAAinH,yBACA,OACAzzF,EAAA6qB,kBAAAr+C,KAAAknH,uBACA,iBACA1zF,EAAA6qB,kBAAAr+C,KAAAmnH,yBACA,uBACA3zF,EAAAI,eAAA5zB,KAAAonH,+BACA,MACA5zF,EAAAQ,iBAAAh0B,KAAAqnH,sBACA,WACA7zF,EAAAQ,iBAAAh0B,KAAAwnH,2BACA,QACAh0F,EAAA6qB,kBAAAr+C,KAAAynH,wBACA,OACAj0F,EAAA6qB,kBAAAr+C,KAAA0nH,uBACA,OACAl0F,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAA4nH,6BACA,YACAp0F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA6nH,yBACA,WACAr0F,EAAAI,eAAA5zB,KAAA4mH,2BACA,eACApzF,EAAAI,eAAA5zB,KAAA6mH,+BACA,SACArzF,EAAAQ,iBAAAh0B,KAAAgnH,yBACA,SACAxzF,EAAA6qB,kBAAAr+C,KAAAinH,yBACA,OACAzzF,EAAA6qB,kBAAAr+C,KAAAknH,uBACA,iBACA1zF,EAAA6qB,kBAAAr+C,KAAAmnH,yBACA,uBACA3zF,EAAAI,eAAA5zB,KAAAonH,+BACA,MACA5zF,EAAAQ,iBAAAh0B,KAAAqnH,sBACA,WACA7zF,EAAAQ,iBAAAh0B,KAAAwnH,2BACA,QACAh0F,EAAA6qB,kBAAAr+C,KAAAynH,wBACA,OACAj0F,EAAA6qB,kBAAAr+C,KAAA0nH,uBACA,OACAl0F,EAAA2B,oBACA,YACA3B,EAAAI,eAAA,SACA,aACAJ,EAAAI,eAAA5zB,KAAA4nH,6BACA,WACAp0F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA8nH,uBACA,iBACAt0F,EAAAI,eAAA5zB,KAAA2nH,wBACA,aACAn0F,EAAAQ,iBAAAh0B,KAAA6nH,2BAKAE,GAAA,WACA/nH,KAAAgoH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAhoH,KAAAioH,2BAAA,SAAAz0F,EAAA6qB,kBAAAr+C,KAAAgoH,yBAEAhoH,KAAAkoH,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAloH,KAAAmoH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGAnoH,KAAAooH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACA50F,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAmoH,kCACA,OACA30F,EAAA2B,qBAGAn1B,KAAAqoH,yBAAA,SAAA70F,EAAAI,eAAA5zB,KAAAooH,yBAEApoH,KAAAsoH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGAtoH,KAAAuoH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAvoH,KAAAwoH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAh1F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAyoH,+BACA,OACAj1F,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA0oH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA1oH,KAAA2oH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAn1F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAA4oH,0BACA,MACA5oH,KAAA2oH,mCACA,QACA3oH,KAAA2oH,mCACA,QACA,SACA,OACAn1F,EAAA2B,qBAGAn1B,KAAA6oH,2BAAA,QAAAr1F,EAAAI,eAAA5zB,KAAA4oH,2BAEA5oH,KAAA8oH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACAt1F,EAAAoB,oBACA,iBACApB,EAAAoB,oBACA,mBACA,WAGA50B,KAAA+oH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA/oH,KAAAgpH,wBACA,WACAx1F,EAAAI,eAAA5zB,KAAAioH,2BACA,eACAz0F,EAAAI,eAAA5zB,KAAAkoH,+BACA,SACA10F,EAAAQ,iBAAAh0B,KAAAqoH,yBACA,SACA70F,EAAA6qB,kBAAAr+C,KAAAsoH,yBACA,OACA90F,EAAA6qB,kBAAAr+C,KAAAuoH,uBACA,iBACA/0F,EAAA6qB,kBAAAr+C,KAAAwoH,yBACA,uBACAh1F,EAAAI,eAAA5zB,KAAAyoH,+BACA,MACAj1F,EAAAQ,iBAAAh0B,KAAA0oH,sBACA,WACAl1F,EAAAQ,iBAAAh0B,KAAA6oH,2BACA,QACAr1F,EAAA6qB,kBAAAr+C,KAAA8oH,wBACA,OACAt1F,EAAA6qB,kBAAAr+C,KAAA+oH,uBACA,OACAv1F,EAAA2B,oBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAipH,6BACA,YACAz1F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAkpH,yBACA,WACA11F,EAAAI,eAAA5zB,KAAAioH,2BACA,eACAz0F,EAAAI,eAAA5zB,KAAAkoH,+BACA,SACA10F,EAAAQ,iBAAAh0B,KAAAqoH,yBACA,SACA70F,EAAA6qB,kBAAAr+C,KAAAsoH,yBACA,OACA90F,EAAA6qB,kBAAAr+C,KAAAuoH,uBACA,iBACA/0F,EAAA6qB,kBAAAr+C,KAAAwoH,yBACA,uBACAh1F,EAAAI,eAAA5zB,KAAAyoH,+BACA,MACAj1F,EAAAQ,iBAAAh0B,KAAA0oH,sBACA,WACAl1F,EAAAQ,iBAAAh0B,KAAA6oH,2BACA,QACAr1F,EAAA6qB,kBAAAr+C,KAAA8oH,wBACA,OACAt1F,EAAA6qB,kBAAAr+C,KAAA+oH,uBACA,OACAv1F,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAAipH,6BACA,WACAz1F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAmpH,uBACA,iBACA31F,EAAAI,eAAA5zB,KAAAgpH,wBACA,aACAx1F,EAAAQ,iBAAAh0B,KAAAkpH,2BAKAE,GAAA,WACAppH,KAAAqpH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGArpH,KAAAspH,2BAAA,SAAA91F,EAAA6qB,kBAAAr+C,KAAAqpH,yBAEArpH,KAAAupH,+BACA,WACA,UACA,aACA,UACA,UACA,UACA,WACA,UACA,UACA,UACA,QACA,SAGAvpH,KAAAwpH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGAxpH,KAAAypH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAj2F,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAwpH,kCACA,OACAh2F,EAAA2B,qBAGAn1B,KAAA0pH,yBAAA,SAAAl2F,EAAAI,eAAA5zB,KAAAypH,yBAEAzpH,KAAA2pH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGA3pH,KAAA4pH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA5pH,KAAA6pH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAr2F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA8pH,+BACA,OACAt2F,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA+pH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA/pH,KAAAgqH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAx2F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAiqH,0BACA,MACAjqH,KAAAgqH,mCACA,QACAhqH,KAAAgqH,mCACA,OACAx2F,EAAA2B,qBAGAn1B,KAAAkqH,2BAAA,QAAA12F,EAAAI,eAAA5zB,KAAAiqH,2BAEAjqH,KAAAmqH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACA32F,EAAAoB,oBACA,iBACApB,EAAAoB,oBACA,mBACA,WAGA50B,KAAAoqH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGApqH,KAAAqqH,wBACA,WACA72F,EAAAI,eAAA5zB,KAAAspH,2BACA,eACA91F,EAAAI,eAAA5zB,KAAAupH,+BACA,SACA/1F,EAAAQ,iBAAAh0B,KAAA0pH,yBACA,SACAl2F,EAAA6qB,kBAAAr+C,KAAA2pH,yBACA,OACAn2F,EAAA6qB,kBAAAr+C,KAAA4pH,uBACA,iBACAp2F,EAAA6qB,kBAAAr+C,KAAA6pH,yBACA,uBACAr2F,EAAAI,eAAA5zB,KAAA8pH,+BACA,MACAt2F,EAAAQ,iBAAAh0B,KAAA+pH,sBACA,WACAv2F,EAAAQ,iBAAAh0B,KAAAkqH,2BACA,QACA12F,EAAA6qB,kBAAAr+C,KAAAmqH,wBACA,OACA32F,EAAA6qB,kBAAAr+C,KAAAoqH,uBACA,OACA52F,EAAA2B,oBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,kBAGA9zB,KAAAsqH,6BACA,YACA92F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAuqH,yBACA,WACA/2F,EAAAI,eAAA5zB,KAAAspH,2BACA,eACA91F,EAAAI,eAAA5zB,KAAAupH,+BACA,SACA/1F,EAAAQ,iBAAAh0B,KAAA0pH,yBACA,SACAl2F,EAAA6qB,kBAAAr+C,KAAA2pH,yBACA,OACAn2F,EAAA6qB,kBAAAr+C,KAAA4pH,uBACA,iBACAp2F,EAAA6qB,kBAAAr+C,KAAA6pH,yBACA,uBACAr2F,EAAAI,eAAA5zB,KAAA8pH,+BACA,MACAt2F,EAAAQ,iBAAAh0B,KAAA+pH,sBACA,WACAv2F,EAAAQ,iBAAAh0B,KAAAkqH,2BACA,QACA12F,EAAA6qB,kBAAAr+C,KAAAmqH,wBACA,OACA32F,EAAA6qB,kBAAAr+C,KAAAoqH,uBACA,OACA52F,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAAsqH,6BACA,WACA92F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAwqH,uBACA,iBACAh3F,EAAAI,eAAA5zB,KAAAqqH,wBACA,aACA72F,EAAAQ,iBAAAh0B,KAAAuqH,2BAKAE,GAAA,WACAzqH,KAAA0qH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA1qH,KAAA2qH,2BAAA,SAAAn3F,EAAA6qB,kBAAAr+C,KAAA0qH,yBAEA1qH,KAAA4qH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGA5qH,KAAA6qH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAr3F,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA4qH,kCACA,OACAp3F,EAAA2B,qBAGAn1B,KAAA8qH,yBAAA,SAAAt3F,EAAAI,eAAA5zB,KAAA6qH,yBAEA7qH,KAAA+qH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,UACA,aACA,UACA,aACA,WAGA/qH,KAAAgrH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAhrH,KAAAirH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAz3F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAkrH,8BACA,OACA13F,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAmrH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAnrH,KAAAorH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA53F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAqrH,0BACA,MACArrH,KAAAorH,mCACA,QACAprH,KAAAorH,mCACA,OACA53F,EAAA2B,qBAGAn1B,KAAAsrH,2BAAA,QAAA93F,EAAAI,eAAA5zB,KAAAqrH,2BAEArrH,KAAAurH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACA/3F,EAAAoB,oBACA,iBACApB,EAAAoB,oBACA,mBACA,WAGA50B,KAAAwrH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAxrH,KAAAyrH,wBACA,WACAj4F,EAAAI,eAAA5zB,KAAA2qH,2BACA,SACAn3F,EAAAQ,iBAAAh0B,KAAA8qH,yBACA,SACAt3F,EAAA6qB,kBAAAr+C,KAAA+qH,yBACA,OACAv3F,EAAA6qB,kBAAAr+C,KAAAgrH,uBACA,iBACAx3F,EAAA6qB,kBAAAr+C,KAAAirH,yBACA,uBACAz3F,EAAAI,eAAA5zB,KAAAkrH,8BACA,MACA13F,EAAAQ,iBAAAh0B,KAAAmrH,sBACA,WACA33F,EAAAQ,iBAAAh0B,KAAAsrH,2BACA,QACA93F,EAAA6qB,kBAAAr+C,KAAAurH,wBACA,OACA/3F,EAAA6qB,kBAAAr+C,KAAAwrH,uBACA,OACAh4F,EAAA2B,oBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA0rH,6BACA,YACAl4F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA2rH,yBACA,WACAn4F,EAAAI,eAAA5zB,KAAA2qH,2BACA,SACAn3F,EAAAQ,iBAAAh0B,KAAA8qH,yBACA,SACAt3F,EAAA6qB,kBAAAr+C,KAAA+qH,yBACA,OACAv3F,EAAA6qB,kBAAAr+C,KAAAgrH,uBACA,iBACAx3F,EAAA6qB,kBAAAr+C,KAAAirH,yBACA,uBACAz3F,EAAAI,eAAA5zB,KAAAkrH,8BACA,MACA13F,EAAAQ,iBAAAh0B,KAAAmrH,sBACA,WACA33F,EAAAQ,iBAAAh0B,KAAAsrH,2BACA,QACA93F,EAAA6qB,kBAAAr+C,KAAAurH,wBACA,OACA/3F,EAAA6qB,kBAAAr+C,KAAAwrH,uBACA,OACAh4F,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAA0rH,6BACA,WACAl4F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA4rH,uBACA,iBACAp4F,EAAAI,eAAA5zB,KAAAyrH,wBACA,aACAj4F,EAAAQ,iBAAAh0B,KAAA2rH,2BAKAE,GAAA,WACA7rH,KAAA8rH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA9rH,KAAA+rH,2BAAA,SAAAv4F,EAAA6qB,kBAAAr+C,KAAA8rH,yBAEA9rH,KAAAgsH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGAhsH,KAAAisH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,QACA,UACA,UACAz4F,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAgsH,kCACA,OACAx4F,EAAA2B,qBAGAn1B,KAAAksH,yBAAA,SAAA14F,EAAAI,eAAA5zB,KAAAisH,yBAEAjsH,KAAAmsH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,WAGAnsH,KAAAosH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGApsH,KAAAqsH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA74F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAssH,8BACA,OACA94F,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAAusH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAvsH,KAAAwsH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAh5F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAysH,0BACA,MACAzsH,KAAAwsH,mCACA,QACAxsH,KAAAwsH,mCACA,OACAh5F,EAAA2B,qBAGAn1B,KAAA0sH,2BAAA,QAAAl5F,EAAAI,eAAA5zB,KAAAysH,2BAEAzsH,KAAA2sH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACAn5F,EAAAoB,oBACA,iBACApB,EAAAoB,oBACA,mBACA,WAGA50B,KAAA4sH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA5sH,KAAA6sH,wBACA,WACAr5F,EAAAI,eAAA5zB,KAAA+rH,2BACA,SACAv4F,EAAAQ,iBAAAh0B,KAAAksH,yBACA,SACA14F,EAAA6qB,kBAAAr+C,KAAAmsH,yBACA,OACA34F,EAAA6qB,kBAAAr+C,KAAAosH,uBACA,iBACA54F,EAAA6qB,kBAAAr+C,KAAAqsH,yBACA,uBACA74F,EAAAI,eAAA5zB,KAAAssH,8BACA,MACA94F,EAAAQ,iBAAAh0B,KAAAusH,sBACA,WACA/4F,EAAAQ,iBAAAh0B,KAAA0sH,2BACA,QACAl5F,EAAA6qB,kBAAAr+C,KAAA2sH,wBACA,OACAn5F,EAAA6qB,kBAAAr+C,KAAA4sH,uBACA,OACAp5F,EAAA2B,oBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA8sH,6BACA,YACAt5F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA+sH,yBACA,WACAv5F,EAAAI,eAAA5zB,KAAA+rH,2BACA,SACAv4F,EAAAQ,iBAAAh0B,KAAAksH,yBACA,SACA14F,EAAA6qB,kBAAAr+C,KAAAmsH,yBACA,OACA34F,EAAA6qB,kBAAAr+C,KAAAosH,uBACA,iBACA54F,EAAA6qB,kBAAAr+C,KAAAqsH,yBACA,uBACA74F,EAAAI,eAAA5zB,KAAAssH,8BACA,MACA94F,EAAAQ,iBAAAh0B,KAAAusH,sBACA,WACA/4F,EAAAQ,iBAAAh0B,KAAA0sH,2BACA,QACAl5F,EAAA6qB,kBAAAr+C,KAAA2sH,wBACA,OACAn5F,EAAA6qB,kBAAAr+C,KAAA4sH,uBACA,OACAp5F,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAA8sH,6BACA,WACAt5F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAgtH,uBACA,iBACAx5F,EAAAI,eAAA5zB,KAAA6sH,wBACA,aACAr5F,EAAAQ,iBAAAh0B,KAAA+sH,2BAKAnlD,GAAA,WACA5nE,KAAAitH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAjtH,KAAAktH,2BAAA,SAAA15F,EAAA6qB,kBAAAr+C,KAAAitH,yBAEAjtH,KAAAmtH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGAntH,KAAAotH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,QACA,UACA,UACA55F,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAmtH,kCACA,OACA35F,EAAA2B,qBAGAn1B,KAAAqtH,yBAAA,SAAA75F,EAAAI,eAAA5zB,KAAAotH,yBAEAptH,KAAAstH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,WAGAttH,KAAAutH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAvtH,KAAAwtH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAh6F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAytH,8BACA,OACAj6F,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA0tH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA1tH,KAAA2tH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAn6F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAA4tH,0BACA,MACA5tH,KAAA2tH,mCACA,QACA3tH,KAAA2tH,mCACA,OACAn6F,EAAA2B,qBAGAn1B,KAAA6tH,2BAAA,QAAAr6F,EAAAI,eAAA5zB,KAAA4tH,2BAEA5tH,KAAA8tH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACAt6F,EAAAoB,oBACA,iBACApB,EAAAoB,oBACA,mBACA,WAGA50B,KAAA+tH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA/tH,KAAAguH,wBACA,WACAx6F,EAAAI,eAAA5zB,KAAAktH,2BACA,SACA15F,EAAAQ,iBAAAh0B,KAAAqtH,yBACA,SACA75F,EAAA6qB,kBAAAr+C,KAAAstH,yBACA,OACA95F,EAAA6qB,kBAAAr+C,KAAAutH,uBACA,iBACA/5F,EAAA6qB,kBAAAr+C,KAAAwtH,yBACA,uBACAh6F,EAAAI,eAAA5zB,KAAAytH,8BACA,MACAj6F,EAAAQ,iBAAAh0B,KAAA0tH,sBACA,WACAl6F,EAAAQ,iBAAAh0B,KAAA6tH,2BACA,QACAr6F,EAAA6qB,kBAAAr+C,KAAA8tH,wBACA,OACAt6F,EAAA6qB,kBAAAr+C,KAAA+tH,uBACA,OACAv6F,EAAA2B,oBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAiuH,6BACA,YACAz6F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAkuH,yBACA,WACA16F,EAAAI,eAAA5zB,KAAAktH,2BACA,SACA15F,EAAAQ,iBAAAh0B,KAAAqtH,yBACA,SACA75F,EAAA6qB,kBAAAr+C,KAAAstH,yBACA,OACA95F,EAAA6qB,kBAAAr+C,KAAAutH,uBACA,iBACA/5F,EAAA6qB,kBAAAr+C,KAAAwtH,yBACA,uBACAh6F,EAAAI,eAAA5zB,KAAAytH,8BACA,MACAj6F,EAAAQ,iBAAAh0B,KAAA0tH,sBACA,WACAl6F,EAAAQ,iBAAAh0B,KAAA6tH,2BACA,QACAr6F,EAAA6qB,kBAAAr+C,KAAA8tH,wBACA,OACAt6F,EAAA6qB,kBAAAr+C,KAAA+tH,uBACA,OACAv6F,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAAiuH,6BACA,WACAz6F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAmuH,uBACA,iBACA36F,EAAAI,eAAA5zB,KAAAguH,wBACA,aACAx6F,EAAAQ,iBAAAh0B,KAAAkuH,2BAKArlD,GAAA,WACA7oE,KAAAouH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGApuH,KAAAquH,2BAAA,SAAA76F,EAAA6qB,kBAAAr+C,KAAAouH,yBAEApuH,KAAAsuH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGAtuH,KAAAuuH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,QACA,UACA,UACA/6F,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAsuH,kCACA,OACA96F,EAAA2B,qBAGAn1B,KAAAwuH,yBAAA,SAAAh7F,EAAAI,eAAA5zB,KAAAuuH,yBAEAvuH,KAAAyuH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,WAGAzuH,KAAA0uH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA1uH,KAAA2uH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAn7F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA4uH,8BACA,OACAp7F,EAAA2B,oBACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,GACA,KACA,KAAA,UAAA,IAGAn1B,KAAA6uH,sBACA,QACA,QACA,gBACA,UACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA7uH,KAAA8uH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAt7F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAA+uH,0BACA,MACA/uH,KAAA8uH,mCACA,QACA9uH,KAAA8uH,mCACA,OACAt7F,EAAA2B,qBAGAn1B,KAAAgvH,2BAAA,QAAAx7F,EAAAI,eAAA5zB,KAAA+uH,2BAEA/uH,KAAAivH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACAz7F,EAAAoB,oBACA,iBACApB,EAAAoB,qBAGA50B,KAAAkvH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAlvH,KAAAmvH,wBACA,WACA37F,EAAAI,eAAA5zB,KAAAquH,2BACA,SACA76F,EAAAQ,iBAAAh0B,KAAAwuH,yBACA,SACAh7F,EAAA6qB,kBAAAr+C,KAAAyuH,yBACA,OACAj7F,EAAA6qB,kBAAAr+C,KAAA0uH,uBACA,iBACAl7F,EAAA6qB,kBAAAr+C,KAAA2uH,yBACA,uBACAn7F,EAAAI,eAAA5zB,KAAA4uH,8BACA,MACAp7F,EAAAQ,iBAAAh0B,KAAA6uH,sBACA,WACAr7F,EAAAQ,iBAAAh0B,KAAAgvH,2BACA,QACAx7F,EAAA6qB,kBAAAr+C,KAAAivH,wBACA,OACAz7F,EAAA6qB,kBAAAr+C,KAAAkvH,uBACA,OACA17F,EAAA2B,oBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAovH,6BACA,YACA57F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAqvH,yBACA,WACA77F,EAAAI,eAAA5zB,KAAAquH,2BACA,SACA76F,EAAAQ,iBAAAh0B,KAAAwuH,yBACA,SACAh7F,EAAA6qB,kBAAAr+C,KAAAyuH,yBACA,OACAj7F,EAAA6qB,kBAAAr+C,KAAA0uH,uBACA,iBACAl7F,EAAA6qB,kBAAAr+C,KAAA2uH,yBACA,uBACAn7F,EAAAI,eAAA5zB,KAAA4uH,8BACA,MACAp7F,EAAAQ,iBAAAh0B,KAAA6uH,sBACA,WACAr7F,EAAAQ,iBAAAh0B,KAAAgvH,2BACA,QACAx7F,EAAA6qB,kBAAAr+C,KAAAivH,wBACA,OACAz7F,EAAA6qB,kBAAAr+C,KAAAkvH,uBACA,OACA17F,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAAovH,6BACA,WACA57F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAsvH,uBACA,iBACA97F,EAAAI,eAAA5zB,KAAAmvH,wBACA,aACA37F,EAAAQ,iBAAAh0B,KAAAqvH,2BAKAvlD,GAAA,WACA9pE,KAAAuvH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAvvH,KAAAwvH,2BAAA,SAAAh8F,EAAA6qB,kBAAAr+C,KAAAuvH,yBAEAvvH,KAAAyvH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGAzvH,KAAA0vH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,QACA,UACA,UACAl8F,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAAyvH,kCACA,OACAj8F,EAAA2B,qBAGAn1B,KAAA2vH,yBAAA,SAAAn8F,EAAAI,eAAA5zB,KAAA0vH,yBAEA1vH,KAAA4vH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,mBACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,YACA,UACA,aACA,KAAA,QAAA,GACA,cACA,WAGA5vH,KAAA6vH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA7vH,KAAA8vH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAt8F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAA+vH,sBACA,QACA,QACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGA/vH,KAAAgwH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAx8F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAiwH,0BACA,MACAjwH,KAAAgwH,mCACA,QACAhwH,KAAAgwH,mCACA,OACAx8F,EAAA2B,qBAGAn1B,KAAAkwH,2BAAA,QAAA18F,EAAAI,eAAA5zB,KAAAiwH,2BAEAjwH,KAAAmwH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACA38F,EAAAoB,oBACA,iBACApB,EAAAoB,qBAGA50B,KAAAowH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGApwH,KAAAqwH,wBACA,WACA78F,EAAAI,eAAA5zB,KAAAwvH,2BACA,SACAh8F,EAAAQ,iBAAAh0B,KAAA2vH,yBACA,SACAn8F,EAAA6qB,kBAAAr+C,KAAA4vH,yBACA,OACAp8F,EAAA6qB,kBAAAr+C,KAAA6vH,uBACA,iBACAr8F,EAAA6qB,kBAAAr+C,KAAA8vH,yBACA,MACAt8F,EAAAQ,iBAAAh0B,KAAA+vH,sBACA,WACAv8F,EAAAQ,iBAAAh0B,KAAAkwH,2BACA,QACA18F,EAAA6qB,kBAAAr+C,KAAAmwH,wBACA,OACA38F,EAAA6qB,kBAAAr+C,KAAAowH,uBACA,OACA58F,EAAA2B,oBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAswH,6BACA,YACA98F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAuwH,yBACA,WACA/8F,EAAAI,eAAA5zB,KAAAwvH,2BACA,SACAh8F,EAAAQ,iBAAAh0B,KAAA2vH,yBACA,SACAn8F,EAAA6qB,kBAAAr+C,KAAA4vH,yBACA,OACAp8F,EAAA6qB,kBAAAr+C,KAAA6vH,uBACA,iBACAr8F,EAAA6qB,kBAAAr+C,KAAA8vH,yBACA,MACAt8F,EAAAQ,iBAAAh0B,KAAA+vH,sBACA,WACAv8F,EAAAQ,iBAAAh0B,KAAAkwH,2BACA,QACA18F,EAAA6qB,kBAAAr+C,KAAAmwH,wBACA,OACA38F,EAAA6qB,kBAAAr+C,KAAAowH,uBACA,OACA58F,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAAswH,6BACA,WACA98F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAwwH,uBACA,iBACAh9F,EAAAI,eAAA5zB,KAAAqwH,wBACA,aACA78F,EAAAQ,iBAAAh0B,KAAAuwH,2BAKAxlD,GAAA,WACA/qE,KAAAywH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAzwH,KAAA0wH,2BAAA,SAAAl9F,EAAA6qB,kBAAAr+C,KAAAywH,yBAEAzwH,KAAA2wH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGA3wH,KAAA4wH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,QACA,UACA,UACAp9F,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA2wH,kCACA,OACAn9F,EAAA2B,qBAGAn1B,KAAA6wH,yBAAA,SAAAr9F,EAAAI,eAAA5zB,KAAA4wH,yBAEA5wH,KAAA8wH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,aACA,KAAA,QAAA,GACA,cACA,WAGA9wH,KAAA+wH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGA/wH,KAAAgxH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAx9F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAixH,sBACA,QACA,QACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAjxH,KAAAkxH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA19F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAmxH,0BACA,MACAnxH,KAAAkxH,mCACA,QACAlxH,KAAAkxH,mCACA,OACA19F,EAAA2B,qBAGAn1B,KAAAoxH,2BAAA,QAAA59F,EAAAI,eAAA5zB,KAAAmxH,2BAEAnxH,KAAAqxH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACA79F,EAAAoB,oBACA,iBACApB,EAAAoB,qBAGA50B,KAAAsxH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAtxH,KAAAuxH,wBACA,WACA/9F,EAAAI,eAAA5zB,KAAA0wH,2BACA,SACAl9F,EAAAQ,iBAAAh0B,KAAA6wH,yBACA,SACAr9F,EAAA6qB,kBAAAr+C,KAAA8wH,yBACA,OACAt9F,EAAA6qB,kBAAAr+C,KAAA+wH,uBACA,iBACAv9F,EAAA6qB,kBAAAr+C,KAAAgxH,yBACA,MACAx9F,EAAAQ,iBAAAh0B,KAAAixH,sBACA,WACAz9F,EAAAQ,iBAAAh0B,KAAAoxH,2BACA,QACA59F,EAAA6qB,kBAAAr+C,KAAAqxH,wBACA,OACA79F,EAAA6qB,kBAAAr+C,KAAAsxH,uBACA,OACA99F,EAAA2B,oBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAwxH,6BACA,YACAh+F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAyxH,yBACA,WACAj+F,EAAAI,eAAA5zB,KAAA0wH,2BACA,SACAl9F,EAAAQ,iBAAAh0B,KAAA6wH,yBACA,SACAr9F,EAAA6qB,kBAAAr+C,KAAA8wH,yBACA,OACAt9F,EAAA6qB,kBAAAr+C,KAAA+wH,uBACA,iBACAv9F,EAAA6qB,kBAAAr+C,KAAAgxH,yBACA,MACAx9F,EAAAQ,iBAAAh0B,KAAAixH,sBACA,WACAz9F,EAAAQ,iBAAAh0B,KAAAoxH,2BACA,QACA59F,EAAA6qB,kBAAAr+C,KAAAqxH,wBACA,OACA79F,EAAA6qB,kBAAAr+C,KAAAsxH,uBACA,OACA99F,EAAA2B,oBACA,aACA3B,EAAAI,eAAA5zB,KAAAwxH,6BACA,WACAh+F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA0xH,uBACA,iBACAl+F,EAAAI,eAAA5zB,KAAAuxH,wBACA,aACA/9F,EAAAQ,iBAAAh0B,KAAAyxH,2BAKA1lD,GAAA,WACA/rE,KAAA2xH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA3xH,KAAA4xH,2BAAA,SAAAp+F,EAAA6qB,kBAAAr+C,KAAA2xH,yBAEA3xH,KAAA6xH,kCACA,UACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGA7xH,KAAA8xH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,QACA,UACA,UACAt+F,EAAAoB,oBACA,aACApB,EAAAI,eAAA5zB,KAAA6xH,kCACA,OACAr+F,EAAA2B,qBAGAn1B,KAAA+xH,yBAAA,SAAAv+F,EAAAI,eAAA5zB,KAAA8xH,yBAEA9xH,KAAAgyH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,aACA,KAAA,QAAA,GACA,cACA,WAGAhyH,KAAAiyH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAjyH,KAAAkyH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA1+F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAmyH,sBACA,QACA,QACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAnyH,KAAAoyH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA5+F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAqyH,0BACA,MACAryH,KAAAoyH,mCACA,QACApyH,KAAAoyH,mCACA,OACA5+F,EAAA2B,qBAGAn1B,KAAAsyH,2BAAA,QAAA9+F,EAAAI,eAAA5zB,KAAAqyH,2BAEAryH,KAAAuyH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACA/+F,EAAAoB,oBACA,iBACApB,EAAAoB,qBAGA50B,KAAAwyH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGAxyH,KAAAyyH,wBACA,WACAj/F,EAAAI,eAAA5zB,KAAA4xH,2BACA,SACAp+F,EAAAQ,iBAAAh0B,KAAA+xH,yBACA,SACAv+F,EAAA6qB,kBAAAr+C,KAAAgyH,yBACA,OACAx+F,EAAA6qB,kBAAAr+C,KAAAiyH,uBACA,iBACAz+F,EAAA6qB,kBAAAr+C,KAAAkyH,yBACA,MACA1+F,EAAAQ,iBAAAh0B,KAAAmyH,sBACA,WACA3+F,EAAAQ,iBAAAh0B,KAAAsyH,2BACA,QACA9+F,EAAA6qB,kBAAAr+C,KAAAuyH,wBACA,OACA/+F,EAAA6qB,kBAAAr+C,KAAAwyH,uBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAh/F,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA0yH,6BACA,YACAl/F,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA2yH,yBACA,WACAn/F,EAAAI,eAAA5zB,KAAA4xH,2BACA,SACAp+F,EAAAQ,iBAAAh0B,KAAA+xH,yBACA,SACAv+F,EAAA6qB,kBAAAr+C,KAAAgyH,yBACA,OACAx+F,EAAA6qB,kBAAAr+C,KAAAiyH,uBACA,iBACAz+F,EAAA6qB,kBAAAr+C,KAAAkyH,yBACA,MACA1+F,EAAAQ,iBAAAh0B,KAAAmyH,sBACA,WACA3+F,EAAAQ,iBAAAh0B,KAAAsyH,2BACA,QACA9+F,EAAA6qB,kBAAAr+C,KAAAuyH,wBACA,OACA/+F,EAAA6qB,kBAAAr+C,KAAAwyH,uBACA,aACAh/F,EAAAI,eAAA5zB,KAAA0yH,6BACA,WACAl/F,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA4yH,uBACA,iBACAp/F,EAAAI,eAAA5zB,KAAAyyH,wBACA,aACAj/F,EAAAQ,iBAAAh0B,KAAA2yH,2BAKA5lD,GAAA,WACA/sE,KAAA6yH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA7yH,KAAA8yH,2BAAA,SAAAt/F,EAAA6qB,kBAAAr+C,KAAA6yH,yBAEA7yH,KAAA+yH,kCACA,UACA,UACA,QACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGA/yH,KAAAgzH,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,UACAx/F,EAAAoB,oBACA,MACA50B,KAAA+yH,iCACA,QACA/yH,KAAA+yH,iCACA,OACAv/F,EAAA2B,qBAGAn1B,KAAAizH,yBAAA,SAAAz/F,EAAAI,eAAA5zB,KAAAgzH,yBAEAhzH,KAAAkzH,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,aACA,KAAA,QAAA,GACA,cACA,WAGAlzH,KAAAmzH,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAnzH,KAAAozH,yBACA,WACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,YACA,UACA,SACA,SACA,OACA,UACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA5/F,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAqzH,sBACA,QACA,QACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGArzH,KAAAszH,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACA9/F,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAuzH,0BACA,MACAvzH,KAAAszH,mCACA,QACAtzH,KAAAszH,mCACA,OACA9/F,EAAA2B,qBAGAn1B,KAAAwzH,2BAAA,QAAAhgG,EAAAI,eAAA5zB,KAAAuzH,2BAEAvzH,KAAAyzH,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,cACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACAjgG,EAAAoB,oBACA,iBACApB,EAAAoB,qBAGA50B,KAAA0zH,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA1zH,KAAA2zH,wBACA,WACAngG,EAAAI,eAAA5zB,KAAA8yH,2BACA,SACAt/F,EAAAQ,iBAAAh0B,KAAAizH,yBACA,SACAz/F,EAAA6qB,kBAAAr+C,KAAAkzH,yBACA,OACA1/F,EAAA6qB,kBAAAr+C,KAAAmzH,uBACA,iBACA3/F,EAAA6qB,kBAAAr+C,KAAAozH,yBACA,MACA5/F,EAAAQ,iBAAAh0B,KAAAqzH,sBACA,WACA7/F,EAAAQ,iBAAAh0B,KAAAwzH,2BACA,QACAhgG,EAAA6qB,kBAAAr+C,KAAAyzH,wBACA,OACAjgG,EAAA6qB,kBAAAr+C,KAAA0zH,uBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAlgG,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA4zH,6BACA,YACApgG,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA6zH,yBACA,WACArgG,EAAAI,eAAA5zB,KAAA8yH,2BACA,SACAt/F,EAAAQ,iBAAAh0B,KAAAizH,yBACA,SACAz/F,EAAA6qB,kBAAAr+C,KAAAkzH,yBACA,OACA1/F,EAAA6qB,kBAAAr+C,KAAAmzH,uBACA,iBACA3/F,EAAA6qB,kBAAAr+C,KAAAozH,yBACA,MACA5/F,EAAAQ,iBAAAh0B,KAAAqzH,sBACA,WACA7/F,EAAAQ,iBAAAh0B,KAAAwzH,2BACA,QACAhgG,EAAA6qB,kBAAAr+C,KAAAyzH,wBACA,OACAjgG,EAAA6qB,kBAAAr+C,KAAA0zH,uBACA,aACAlgG,EAAAI,eAAA5zB,KAAA4zH,6BACA,WACApgG,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAA8zH,uBACA,iBACAtgG,EAAAI,eAAA5zB,KAAA2zH,wBACA,aACAngG,EAAAQ,iBAAAh0B,KAAA6zH,2BAKA9lD,GAAA,WACA/tE,KAAA+zH,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGA/zH,KAAAg0H,2BAAA,SAAAxgG,EAAA6qB,kBAAAr+C,KAAA+zH,yBAEA/zH,KAAAi0H,kCACA,UACA,UACA,QACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGAj0H,KAAAk0H,wBACA,WACA,UACA,SACA,UACA,QACA,UACA,UACA1gG,EAAAoB,oBACA,MACA50B,KAAAi0H,iCACA,QACAj0H,KAAAi0H,iCACA,OACAzgG,EAAA2B,qBAGAn1B,KAAAm0H,yBAAA,SAAA3gG,EAAAI,eAAA5zB,KAAAk0H,yBAEAl0H,KAAAo0H,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,aACA,KAAA,QAAA,GACA,cACA,WAGAp0H,KAAAq0H,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAr0H,KAAAs0H,yBACA,SACA,KAAA,UAAA,GACA,YACA,UACA,SACA,SACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACA9gG,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAu0H,sBACA,QACA,QACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAv0H,KAAAw0H,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAhhG,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAAy0H,0BACA,MACAz0H,KAAAw0H,mCACA,QACAx0H,KAAAw0H,mCACA,OACAhhG,EAAA2B,qBAGAn1B,KAAA00H,2BAAA,QAAAlhG,EAAAI,eAAA5zB,KAAAy0H,2BAEAz0H,KAAA20H,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACAnhG,EAAAoB,oBACA,iBACApB,EAAAoB,qBAGA50B,KAAA40H,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA50H,KAAA60H,wBACA,WACArhG,EAAAI,eAAA5zB,KAAAg0H,2BACA,SACAxgG,EAAAQ,iBAAAh0B,KAAAm0H,yBACA,SACA3gG,EAAA6qB,kBAAAr+C,KAAAo0H,yBACA,OACA5gG,EAAA6qB,kBAAAr+C,KAAAq0H,uBACA,iBACA7gG,EAAA6qB,kBAAAr+C,KAAAs0H,yBACA,MACA9gG,EAAAQ,iBAAAh0B,KAAAu0H,sBACA,WACA/gG,EAAAQ,iBAAAh0B,KAAA00H,2BACA,QACAlhG,EAAA6qB,kBAAAr+C,KAAA20H,wBACA,OACAnhG,EAAA6qB,kBAAAr+C,KAAA40H,uBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAphG,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAA80H,6BACA,YACAthG,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAA+0H,yBACA,WACAvhG,EAAAI,eAAA5zB,KAAAg0H,2BACA,SACAxgG,EAAAQ,iBAAAh0B,KAAAm0H,yBACA,SACA3gG,EAAA6qB,kBAAAr+C,KAAAo0H,yBACA,OACA5gG,EAAA6qB,kBAAAr+C,KAAAq0H,uBACA,iBACA7gG,EAAA6qB,kBAAAr+C,KAAAs0H,yBACA,MACA9gG,EAAAQ,iBAAAh0B,KAAAu0H,sBACA,WACA/gG,EAAAQ,iBAAAh0B,KAAA00H,2BACA,QACAlhG,EAAA6qB,kBAAAr+C,KAAA20H,wBACA,OACAnhG,EAAA6qB,kBAAAr+C,KAAA40H,uBACA,aACAphG,EAAAI,eAAA5zB,KAAA80H,6BACA,WACAthG,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAg1H,uBACA,iBACAxhG,EAAAI,eAAA5zB,KAAA60H,wBACA,aACArhG,EAAAQ,iBAAAh0B,KAAA+0H,2BAKArhG,GAAA,WACA1zB,KAAAi1H,wBACA,SACA,KAAA,QAAA,GACA,YACA,UACA,aACA,KAAA,UAAA,IAGAj1H,KAAAk1H,2BAAA,SAAA1hG,EAAA6qB,kBAAAr+C,KAAAi1H,yBAEAj1H,KAAAm1H,kCACA,UACA,UACA,QACA,UACA,OACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,IAGAn1H,KAAAo1H,wBACA,WACA,UACA,QACA,UACA,UACA5hG,EAAAoB,oBACA,MACA50B,KAAAm1H,iCACA,QACAn1H,KAAAm1H,iCACA,OACA3hG,EAAA2B,qBAGAn1B,KAAAq1H,yBAAA,SAAA7hG,EAAAI,eAAA5zB,KAAAo1H,yBAEAp1H,KAAAs1H,yBACA,QACA,KAAA,QAAA,GACA,aACA,KAAA,QAAA,GACA,aACA,UACA,aACA,UACA,aACA,KAAA,QAAA,GACA,cACA,WAGAt1H,KAAAu1H,uBACA,aACA,KAAA,QAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,QAAA,GACA,eACA,KAAA,UAAA,GACA,WACA,WAGAv1H,KAAAw1H,yBACA,SACA,KAAA,UAAA,GACA,YACA,UACA,SACA,SACA,kBACA,KAAA,UAAA,GACA,QACA,QACA,WACA,KAAA,UAAA,GACA,gBACA,SACA,YACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,SACA,KAAA,UAAA,GACA,aACA,KAAA,SAAA,GACA,SACA,SACA,UACAhiG,EAAAoB,oBACA,OACA,QACA,OACApB,EAAA2B,qBAGAn1B,KAAAy1H,sBACA,QACA,QACA,gBACA,UACA,iBACA,UACA,iBACA,UACA,oBACA,UACA,iBACA,UACA,kBACA,UACA,mBACA,UACA,mBACA,UACA,sBACA,UACA,mBACA,WAGAz1H,KAAA01H,oCACA,UACA,UACA,UACA,UACA,cACA,UACA,WACA,UACA,iBACA,UACA,UACA,UACA,SACA,KAAA,UAAA,GACA,QACA,UACA,UACAliG,EAAAoB,oBACA,aACA,KAAA,UAAA,IAGA50B,KAAA21H,0BACA,MACA31H,KAAA01H,mCACA,QACA11H,KAAA01H,mCACA,OACAliG,EAAA2B,qBAGAn1B,KAAA41H,2BAAA,QAAApiG,EAAAI,eAAA5zB,KAAA21H,2BAEA31H,KAAA61H,wBACA,aACA,SACA,gBACA,UACA,iBACA,UACA,YACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,aACA,UACA,YACA,UACA,YACA,UACA,eACA,UACA,cACA,UACA,eACA,UACA,uBACA,KAAA,QAAA,GACA,oBACA,KAAA,QAAA,GACA,gBACA,KAAA,QAAA,GACA,iBACA,UACA,gBACA,UACA,cACAriG,EAAAoB,oBACA,iBACApB,EAAAoB,qBAGA50B,KAAA81H,uBACA,UACA,QACA,YACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,WACA,SAGA91H,KAAA+1H,wBACA,WACAviG,EAAAI,eAAA5zB,KAAAk1H,2BACA,SACA1hG,EAAAQ,iBAAAh0B,KAAAq1H,yBACA,SACA7hG,EAAA6qB,kBAAAr+C,KAAAs1H,yBACA,OACA9hG,EAAA6qB,kBAAAr+C,KAAAu1H,uBACA,iBACA/hG,EAAA6qB,kBAAAr+C,KAAAw1H,yBACA,MACAhiG,EAAAQ,iBAAAh0B,KAAAy1H,sBACA,WACAjiG,EAAAQ,iBAAAh0B,KAAA41H,2BACA,QACApiG,EAAA6qB,kBAAAr+C,KAAA61H,wBACA,OACAriG,EAAA6qB,kBAAAr+C,KAAA81H,uBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,iBACA,UACA,iBACA,UACA,eACA,UACA,OACA,QACA,cACAtiG,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAg2H,6BACA,YACAxiG,EAAAoB,oBACA,YACApB,EAAAoB,oBACA,WACApB,EAAAoB,qBAGA50B,KAAAi2H,yBACA,WACAziG,EAAAI,eAAA5zB,KAAAk1H,2BACA,SACA1hG,EAAAQ,iBAAAh0B,KAAAq1H,yBACA,SACA7hG,EAAA6qB,kBAAAr+C,KAAAs1H,yBACA,OACA9hG,EAAA6qB,kBAAAr+C,KAAAu1H,uBACA,iBACA/hG,EAAA6qB,kBAAAr+C,KAAAw1H,yBACA,MACAhiG,EAAAQ,iBAAAh0B,KAAAy1H,sBACA,WACAjiG,EAAAQ,iBAAAh0B,KAAA41H,2BACA,QACApiG,EAAA6qB,kBAAAr+C,KAAA61H,wBACA,OACAriG,EAAA6qB,kBAAAr+C,KAAA81H,uBACA,aACAtiG,EAAAI,eAAA5zB,KAAAg2H,6BACA,WACAxiG,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAk2H,uBACA,iBACA1iG,EAAAI,eAAA5zB,KAAA+1H,wBACA,aACAviG,EAAAQ,iBAAAh0B,KAAAi2H,sFCjmnBA,IAAAziG,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAyoB,EAAA,WACAl8C,KAAAm2H,oBAAA,WAAA,QAAA,OAAA3iG,EAAA2B,qBAEAn1B,KAAAy1B,OAAAz1B,KAAAo2H,YAAA,WAAA5iG,EAAAI,eAAA5zB,KAAAm2H,oBAAA,UAAA,qECdA,IAAA3iG,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,MACAuyB,UAEAyoB,EAAA,WACAl8C,KAAAq2H,sBACA,OACA,SACA,MACA7iG,EAAAM,iBACA,SACAN,EAAAoB,qBAGA50B,KAAAy1B,OAAAz1B,KAAAs2H,wBAAA,aAAA9iG,EAAAI,eAAA5zB,KAAAq2H,mFCrBA,IAAA7iG,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAolB,EAAA,WACA74C,KAAAu2H,sBACA,OACA/iG,EAAAM,iBACA,QACAN,EAAAM,iBACA,QACA,UAGA9zB,KAAAw2H,yBACA,OACA,UACA,aACA,UACA,cACA,SACA,YACA,SACA,aACA,WAGAx2H,KAAAy1B,OAAAz1B,KAAAy2H,sBACA,aACAjjG,EAAAI,eAAA5zB,KAAAu2H,sBACA,oBACA,UACA,WACA/iG,EAAAI,eAAA5zB,KAAAw2H,2BAKAz8E,EAAA,WACA/5C,KAAA02H,sBAAA,OAAAljG,EAAAM,iBAAA,QAAAN,EAAAM,kBAEA9zB,KAAA22H,yBACA,OACA,UACA,aACA,UACA,cACA,SACA,YACA,SACA,aACA,WAGA32H,KAAAy1B,OAAAz1B,KAAA42H,sBACA,aACApjG,EAAAI,eAAA5zB,KAAA02H,sBACA,oBACA,UACA,WACAljG,EAAAI,eAAA5zB,KAAA22H,2BAKA11H,EAAA,WACAjB,KAAA62H,sBAAA,OAAArjG,EAAAM,kBAEA9zB,KAAA82H,yBACA,OACA,UACA,aACA,UACA,cACA,SACA,YACA,SACA,aACA,WAGA92H,KAAAy1B,OAAAz1B,KAAA+2H,sBACA,aACAvjG,EAAAI,eAAA5zB,KAAA62H,sBACA,oBACA,UACA,WACArjG,EAAAI,eAAA5zB,KAAA82H,2BAKA56E,EAAA,WACAl8C,KAAAg3H,sBAAA,OAAAxjG,EAAAM,kBAEA9zB,KAAAi3H,yBAAA,OAAA,UAAA,aAAA,WAEAj3H,KAAAy1B,OAAAz1B,KAAAk3H,sBACA,aACA1jG,EAAAI,eAAA5zB,KAAAg3H,sBACA,oBACA,UACA,WACAxjG,EAAAI,eAAA5zB,KAAAi3H,sFC9GA,IAAAzjG,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAyoB,EAAA,WACAl8C,KAAAm3H,oBACA,aACA3jG,EAAAM,iBACA,cACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAy1B,OAAAz1B,KAAAo3H,qBAAA,YAAA5jG,EAAAI,eAAA5zB,KAAAm3H,iFCnBA,IAAA3jG,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAyoB,EAAA,WACAl8C,KAAAy1B,OAAAz1B,KAAAq3H,eAAA,WAAA7jG,EAAAI,eAAA,cAUA1yB,KAAA,OACAuyB,UAEA2hB,EAAA,WACAp1C,KAAAs3H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,SACA,YACA,UACA,cACA,SAGAt3H,KAAAu3H,aACA,aACA/jG,EAAAI,eAAAJ,EAAAM,kBACA,SACAN,EAAAI,eAAA5zB,KAAAs3H,iBACA,SACA,SAGAt3H,KAAAw3H,aAAA,WAAA,KAAA,SAAA,GAAA,YAAAhkG,EAAAI,eAAA,WAEA5zB,KAAAy3H,iBACA,UACAjkG,EAAAI,eAAA,UACA,WACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,QACAJ,EAAAI,eAAA5zB,KAAAw3H,aACA,YACA,KAAA,UAAA,GACA,YACAhkG,EAAAI,eAAA,SACA,WACAJ,EAAAI,eAAA,UAGA5zB,KAAA03H,oBAAA,SAAAlkG,EAAAI,eAAAJ,EAAAM,mBAEA9zB,KAAAy1B,OAAAz1B,KAAA23H,iBACA,QACAnkG,EAAAI,eAAA5zB,KAAAu3H,aACA,SACA/jG,EAAAI,eAAA5zB,KAAAy3H,iBACA,WACAjkG,EAAAI,eAAA5zB,KAAA03H,sBAKAlhF,EAAA,WACAx2C,KAAA43H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,UACA,QACA,SACA,YACA,UACA,cACA,SAGA53H,KAAA63H,aACA,aACArkG,EAAAI,eAAAJ,EAAAM,kBACA,SACAN,EAAAI,eAAA5zB,KAAA43H,iBACA,SACA,SAGA53H,KAAA83H,aAAA,WAAA,KAAA,SAAA,GAAA,YAAAtkG,EAAAI,eAAA,WAEA5zB,KAAA+3H,iBACA,UACAvkG,EAAAI,eAAA,UACA,WACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,QACAJ,EAAAI,eAAA5zB,KAAA83H,aACA,YACA,KAAA,UAAA,GACA,YACAtkG,EAAAI,eAAA,SACA,eACAJ,EAAAI,eAAA,WAGA5zB,KAAAy1B,OAAAz1B,KAAAg4H,iBACA,QACAxkG,EAAAI,eAAA5zB,KAAA63H,aACA,SACArkG,EAAAI,eAAA5zB,KAAA+3H,mBAKApgF,EAAA,WACA33C,KAAAi4H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,UACA,QACA,SACA,YACA,UACA,cACA,SAGAj4H,KAAAk4H,aACA,aACA1kG,EAAAI,eAAAJ,EAAAM,kBACA,SACAN,EAAAI,eAAA5zB,KAAAi4H,iBACA,SACA,SAGAj4H,KAAAm4H,aAAA,WAAA,KAAA,SAAA,GAAA,YAAA3kG,EAAAI,eAAA,WAEA5zB,KAAAo4H,iBACA,UACA5kG,EAAAI,eAAA,UACA,WACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,QACAJ,EAAAI,eAAA5zB,KAAAm4H,aACA,YACA,KAAA,UAAA,GACA,YACA3kG,EAAAI,eAAA,SACA,eACAJ,EAAAI,eAAA,WAGA5zB,KAAAq4H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,UACA,QACA,SACA,YACA,WAGAr4H,KAAAy1B,OAAAz1B,KAAAs4H,iBACA,QACA9kG,EAAAI,eAAA5zB,KAAAk4H,aACA,SACA1kG,EAAAI,eAAA5zB,KAAAo4H,iBACA,aACA5kG,EAAAI,eAAA5zB,KAAAq4H,mBAKAx/E,EAAA,WACA74C,KAAAu4H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,UACA,QACA,SACA,YACA,WAGAv4H,KAAAw4H,aACA,aACAhlG,EAAAI,eAAAJ,EAAAM,kBACA,SACAN,EAAAI,eAAA5zB,KAAAu4H,iBACA,SACA,SAGAv4H,KAAAy4H,aAAA,WAAA,KAAA,SAAA,GAAA,YAAAjlG,EAAAI,eAAA,WAEA5zB,KAAA04H,iBACA,UACAllG,EAAAI,eAAA,UACA,WACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,QACAJ,EAAAI,eAAA5zB,KAAAy4H,aACA,YACA,KAAA,UAAA,GACA,YACAjlG,EAAAI,eAAA,SACA,eACAJ,EAAAI,eAAA,WAGA5zB,KAAA24H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,UACA,QACA,SACA,YACA,WAGA34H,KAAAy1B,OAAAz1B,KAAA44H,iBACA,QACAplG,EAAAI,eAAA5zB,KAAAw4H,aACA,SACAhlG,EAAAI,eAAA5zB,KAAA04H,iBACA,aACAllG,EAAAI,eAAA5zB,KAAA24H,mBAKA5+E,EAAA,WACA/5C,KAAA64H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,UACA,QACA,SACA,YACA,WAGA74H,KAAA84H,aACA,aACAtlG,EAAAI,eAAAJ,EAAAM,kBACA,SACAN,EAAAI,eAAA5zB,KAAA64H,iBACA,SACA,SAGA74H,KAAA+4H,aAAA,WAAA,KAAA,SAAA,GAAA,YAAAvlG,EAAAI,eAAA,WAEA5zB,KAAAg5H,iBACA,UACAxlG,EAAAI,eAAA,UACA,WACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,QACAJ,EAAAI,eAAA5zB,KAAA+4H,aACA,YACA,KAAA,UAAA,GACA,YACAvlG,EAAAI,eAAA,UAGA5zB,KAAAi5H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,UACA,QACA,SACA,YACA,WAGAj5H,KAAAy1B,OAAAz1B,KAAAk5H,iBACA,QACA1lG,EAAAI,eAAA5zB,KAAA84H,aACA,SACAtlG,EAAAI,eAAA5zB,KAAAg5H,iBACA,aACAxlG,EAAAI,eAAA5zB,KAAAi5H,mBAKAh4H,EAAA,WACAjB,KAAAm5H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,UACA,QACA,SACA,YACA,WAGAn5H,KAAAo5H,aACA,aACA5lG,EAAAI,eAAAJ,EAAAM,kBACA,SACAN,EAAAI,eAAA5zB,KAAAm5H,iBACA,SACA,SAGAn5H,KAAAq5H,aAAA,WAAA,KAAA,SAAA,GAAA,YAAA7lG,EAAAI,eAAA,WAEA5zB,KAAAs5H,iBACA,UACA9lG,EAAAI,eAAA,UACA,WACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,QACAJ,EAAAI,eAAA5zB,KAAAq5H,aACA,YACA,KAAA,UAAA,GACA,YACA7lG,EAAAI,eAAA,UAGA5zB,KAAAy1B,OAAAz1B,KAAAu5H,iBACA,QACA/lG,EAAAI,eAAA5zB,KAAAo5H,aACA,SACA5lG,EAAAI,eAAA5zB,KAAAs5H,mBAKAp9E,EAAA,WACAl8C,KAAAw5H,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,UACA,QACA,UAGAx5H,KAAAy5H,aACA,aACAjmG,EAAAI,eAAAJ,EAAAM,kBACA,SACAN,EAAAI,eAAA5zB,KAAAw5H,iBACA,SACA,SAGAx5H,KAAA05H,aAAA,WAAA,KAAA,SAAA,GAAA,YAAAlmG,EAAAI,eAAA,WAEA5zB,KAAA25H,iBACA,UACAnmG,EAAAI,eAAA,UACA,WACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,QACAJ,EAAAI,eAAA5zB,KAAA05H,aACA,YACA,KAAA,UAAA,GACA,YACAlmG,EAAAI,eAAA,UAGA5zB,KAAAy1B,OAAAz1B,KAAA45H,iBACA,QACApmG,EAAAI,eAAA5zB,KAAAy5H,aACA,SACAjmG,EAAAI,eAAA5zB,KAAA25H,8ECxZA,IAAAnmG,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAxyB,EAAA,WACAjB,KAAA65H,uBAAA,QAAA,SAAA,UAAA,KAAA,UAAA,IAEA75H,KAAA85H,yBACA,YACAtmG,EAAAI,eAAA5zB,KAAA65H,uBACA,UACArmG,EAAAI,eAAA5zB,KAAA65H,uBACA,OACArmG,EAAAM,kBAGA9zB,KAAA+5H,aACA,UACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,WAGA/5H,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAi6H,uBAAA,cAAA,SAAA,OAAAj6H,KAAAg6H,gBAEAh6H,KAAAk6H,sBAAA,UAAA1mG,EAAAI,eAAA,WAEA5zB,KAAAm6H,qBACA,QACAn6H,KAAAi6H,sBACA,UACAj6H,KAAAk6H,qBACA,OACA1mG,EAAAI,eAAA5zB,KAAAk6H,sBACA,aACA1mG,EAAAI,eAAA,WAGA5zB,KAAAo6H,kBACA,UACA5mG,EAAAM,iBACA,eACAN,EAAAI,eAAA5zB,KAAA85H,yBACA,QACA,SACA,kBACAtmG,EAAAI,eAAA,UACA,WACAJ,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACAN,EAAAI,eAAA5zB,KAAA+5H,aACA,gBACA,SACA,eACAvmG,EAAAk4D,kBACA,eACAl4D,EAAAI,eAAAJ,EAAAM,kBACA,WACAN,EAAAQ,iBAAAh0B,KAAAm6H,sBAGAn6H,KAAAy1B,OAAAz1B,KAAAq6H,qBAAA,SAAA7mG,EAAA6qB,kBAAAr+C,KAAAo6H,oBAIAl+E,EAAA,WACAl8C,KAAAs6H,uBAAA,QAAA,SAAA,UAAA,KAAA,UAAA,IAEAt6H,KAAAu6H,yBACA,YACA/mG,EAAAI,eAAA5zB,KAAAs6H,uBACA,UACA9mG,EAAAI,eAAA5zB,KAAAs6H,uBACA,OACA9mG,EAAAM,kBAGA9zB,KAAA+5H,aACA,UACA,KAAA,UAAA,GACA,aACA,KAAA,UAAA,GACA,eACA,WAGA/5H,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAw6H,uBAAA,cAAA,SAAA,OAAAx6H,KAAAg6H,gBAEAh6H,KAAAy6H,sBAAA,UAAAjnG,EAAAI,eAAA,WAEA5zB,KAAA06H,qBACA,QACA16H,KAAAw6H,sBACA,UACAx6H,KAAAy6H,qBACA,OACAjnG,EAAAI,eAAA5zB,KAAAy6H,uBAGAz6H,KAAA26H,kBACA,UACAnnG,EAAAM,iBACA,eACAN,EAAAI,eAAA5zB,KAAAu6H,yBACA,QACA,SACA,kBACA/mG,EAAAI,eAAA,UACA,WACAJ,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACAN,EAAAI,eAAA5zB,KAAA+5H,aACA,gBACA,SACA,eACAvmG,EAAAk4D,kBACA,YACAl4D,EAAAI,eAAAJ,EAAAk4D,mBACA,WACAl4D,EAAAQ,iBAAAh0B,KAAA06H,sBAGA16H,KAAAy1B,OAAAz1B,KAAA46H,qBAAA,SAAApnG,EAAA6qB,kBAAAr+C,KAAA26H,+EC/IA,IAAAnnG,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEAkkB,EAAA,WACA33C,KAAA66H,gBACA,WACArnG,EAAA2B,oBACA,QACA,SACA,OACA3B,EAAAI,eAAA,UAGA5zB,KAAAy1B,OAAAz1B,KAAA86H,iBAAA,UAAAtnG,EAAAI,eAAA5zB,KAAA66H,kBAIAhiF,EAAA,WACA74C,KAAA+6H,gBACA,WACAvnG,EAAA2B,oBACA,QACA,SACA,OACA3B,EAAAI,eAAA,UAGA5zB,KAAAy1B,OAAAz1B,KAAAg7H,iBAAA,UAAAxnG,EAAAI,eAAA5zB,KAAA+6H,kBAIAhhF,EAAA,WACA/5C,KAAAi7H,gBACA,WACAznG,EAAA2B,oBACA,QACA,SACA,OACA3B,EAAAI,eAAA,UAGA5zB,KAAAy1B,OAAAz1B,KAAAk7H,iBAAA,UAAA1nG,EAAAI,eAAA5zB,KAAAi7H,kBAIAh6H,EAAA,WACAjB,KAAAm7H,gBACA,WACA3nG,EAAA2B,oBACA,QACA,SACA,OACA3B,EAAAI,eAAA,UAGA5zB,KAAAy1B,OAAAz1B,KAAAo7H,iBAAA,UAAA5nG,EAAAI,eAAA5zB,KAAAm7H,kBAIAj/E,EAAA,WACAl8C,KAAAq7H,gBAAA,OAAA7nG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAs7H,iBAAA,UAAA9nG,EAAAI,eAAA5zB,KAAAq7H,6ECtEA,IAAA7nG,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEA2hB,EAAA,WACAp1C,KAAAy1B,OAAAz1B,KAAAu7H,QACA,gBACA,QACA,WACA,QACA,YACA,QACA,UACA,QACA,WACA,QACA,aACA,SACA,QACA,SACA,YACA/nG,EAAAI,eAAAJ,EAAAM,oBAKA0iB,EAAA,WACAx2C,KAAAy1B,OAAAz1B,KAAAu7H,QACA,gBACA,QACA,WACA,QACA,oBACA,QACA,YACA,QACA,UACA,QACA,WACA,QACA,aACA,SACA,QACA,SACA,UACA,SACA,gBACA,KAAA,SAAA,GACA,YACA/nG,EAAAI,eAAAJ,EAAAM,oBAKA6jB,EAAA,WACA33C,KAAAy1B,OAAAz1B,KAAAu7H,QACA,gBACA,QACA,WACA,QACA,oBACA,QACA,YACA,QACA,UACA,QACA,WACA,QACA,aACA,SACA,QACA,SACA,UACA,SACA,gBACA,KAAA,SAAA,KAKA1iF,EAAA,WACA74C,KAAAy1B,OAAAz1B,KAAAw7H,UACA,gBACA,QACA,WACA,QACA,oBACA,QACA,YACA,QACA,UACA,QACA,aACA,SACA,QACA,SACA,UACA,SACA,gBACA,KAAA,SAAA,KAKAzhF,EAAA,WACA/5C,KAAAy1B,OAAAz1B,KAAAy7H,UACA,gBACA,QACA,WACA,QACA,oBACA,QACA,YACA,QACA,UACA,QACA,QACA,SACA,UACA,SACA,gBACA,KAAA,SAAA,KAKAx6H,EAAA,WACAjB,KAAAy1B,OAAAz1B,KAAA07H,UACA,gBACA,QACA,WACA,QACA,oBACA,QACA,YACA,QACA,QACA,SACA,UACA,SACA,gBACA,KAAA,SAAA,KAKAx/E,EAAA,WACAl8C,KAAAy1B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A,SAAA,WAAAhtG,EAAAI,gBAAA,KAAA,SAAA,KAEA5zB,KAAAy1B,OAAAz1B,KAAAygI,eACA,QACAjtG,EAAAI,eAAA5zB,KAAAugI,kBACA,SACA/sG,EAAAI,eAAA5zB,KAAAwgI,2ECpBA,IAAAhtG,EAAA/yB,EAAA,6BAEAf,EAAAD,UAMAyB,KAAA,OACAuyB,UAEA0S,GAAA,WACAnmC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAA6gI,mBACA,aACA,UACA,YACA,UACA,UACA,UACA,SACA,WAGA7gI,KAAA8gI,oBACA,OACAttG,EAAAM,iBACA,SACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,aACAJ,EAAAI,eAAA5zB,KAAA6gI,mBACA,UACA,UAGA7gI,KAAA+gI,mBAAA,iBAAAvtG,EAAAoB,qBAEA50B,KAAAghI,kBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACAxtG,EAAAoB,oBACA,aACApB,EAAAQ,iBAAAh0B,KAAA+gI,oBAGA/gI,KAAAihI,wBACA,OACAztG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAghI,kBACA,SACAxtG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,QACA,KAAA,SAAA,GACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,IACA,QACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAkhI,oBACA,UACA,UAGAlhI,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAA8gI,oBACA,aACAttG,EAAAI,eAAA5zB,KAAAihI,wBACA,eACAztG,EAAAI,eAAA5zB,KAAAmhI,oBACA,aACAnhI,KAAAohI,mBACA,aACA,WAKA35F,GAAA,WACAznC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAA6gI,mBACA,aACA,UACA,YACA,UACA,UACA,UACA,SACA,WAGA7gI,KAAA8gI,oBACA,OACAttG,EAAAM,iBACA,SACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,aACAJ,EAAAI,eAAA5zB,KAAA6gI,mBACA,UACA,UAGA7gI,KAAA+gI,mBAAA,iBAAAvtG,EAAAoB,qBAEA50B,KAAAghI,kBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACAxtG,EAAAoB,oBACA,aACApB,EAAAQ,iBAAAh0B,KAAA+gI,oBAGA/gI,KAAAihI,wBACA,OACAztG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAghI,kBACA,SACAxtG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,QACA,KAAA,SAAA,GACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,IACA,QACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAkhI,oBACA,UACA,UAGAlhI,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAA8gI,oBACA,aACAttG,EAAAI,eAAA5zB,KAAAihI,wBACA,eACAztG,EAAAI,eAAA5zB,KAAAmhI,oBACA,aACAnhI,KAAAohI,mBACA,aACA,WAKAr4F,GAAA,WACA/oC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAA6gI,mBACA,aACA,UACA,YACA,UACA,UACA,UACA,SACA,WAGA7gI,KAAA8gI,oBACA,OACAttG,EAAAM,iBACA,SACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,aACAJ,EAAAI,eAAA5zB,KAAA6gI,mBACA,UACA,UAGA7gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAAihI,wBACA,OACAztG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,QACA,KAAA,SAAA,GACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,IACA,QACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAkhI,oBACA,UACA,UAGAlhI,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAuhI,kBACA,cACA/tG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAA8gI,oBACA,aACAttG,EAAAI,eAAA5zB,KAAAihI,wBACA,eACAztG,EAAAI,eAAA5zB,KAAAmhI,oBACA,aACAnhI,KAAAohI,mBACA,aACA,WAKA/2F,GAAA,WACArqC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAwhI,oBACA,OACAhuG,EAAAM,iBACA,aACA,UACA,YACA,UACA,UACA,UACA,SACA,UACA,SACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,UACA,UAGA5zB,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAAihI,wBACA,OACAztG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,QACA,KAAA,SAAA,GACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,IACA,QACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAkhI,oBACA,UACA,UAGAlhI,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAyhI,kBACA,cACAjuG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAAwhI,oBACA,aACAhuG,EAAAI,eAAA5zB,KAAAihI,wBACA,eACAztG,EAAAI,eAAA5zB,KAAAmhI,oBACA,aACAnhI,KAAAohI,mBACA,aACA,WAKAz1F,GAAA,WACA3rC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA0hI,oBACA,OACAluG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,QACA,KAAA,SAAA,GACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA3B,EAAAI,gBAAA,KAAA,UAAA,IACA,QACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAkhI,oBACA,UACA,UAGAlhI,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA0hI,oBACA,aACAluG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAAmhI,oBACA,aACAnhI,KAAAohI,mBACA,aACA,WAKAn0F,GAAA,WACAjtC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA0hI,oBACA,OACAluG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,QACA,KAAA,SAAA,GACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA,KAAA,UAAA,GACA,QACA,SACA,SACA3B,EAAAI,eAAA5zB,KAAAkhI,oBACA,UACA,UAGAlhI,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA0hI,oBACA,aACAluG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAAmhI,oBACA,aACAnhI,KAAAohI,mBACA,aACA,WAKA7yF,GAAA,WACAvuC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA0hI,oBACA,OACAluG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,cACA,UACA,UAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,QACA,KAAA,SAAA,GACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA,KAAA,UAAA,GACA,QACA,SACA,SACA3B,EAAAI,eAAA5zB,KAAAkhI,oBACA,UACA,UAGAlhI,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA0hI,oBACA,aACAluG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAAmhI,oBACA,aACAnhI,KAAAohI,mBACA,aACA,WAKAvxF,GAAA,WACA7vC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA0hI,oBACA,OACAluG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,QACA,KAAA,SAAA,GACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA,KAAA,UAAA,GACA,QACA,SACA,SACA3B,EAAAI,eAAA5zB,KAAAkhI,qBAGAlhI,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA0hI,oBACA,aACAluG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAAmhI,sBAKAhwF,EAAA,WACAnxC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA0hI,oBACA,OACAluG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,OACA,SACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,WACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA,KAAA,UAAA,GACA,QACA,SACA,SACA3B,EAAAI,eAAA5zB,KAAAkhI,qBAGAlhI,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA0hI,oBACA,aACAluG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAAmhI,sBAKA1uF,EAAA,WACAzyC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA0hI,oBACA,OACAluG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,OACA,SACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,cACA,KAAA,UAAA,GACA,SACA3B,EAAAI,eAAA5zB,KAAAkhI,qBAGAlhI,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA0hI,oBACA,aACAluG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAAmhI,sBAKAptF,EAAA,WACA/zC,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA0hI,oBACA,OACAluG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,OACA,SACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,OACAN,EAAA2B,oBACA,SACA3B,EAAAI,eAAA5zB,KAAAkhI,qBAGAlhI,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA0hI,oBACA,aACAluG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAAmhI,sBAKA/rF,EAAA,WACAp1C,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA0hI,oBACA,OACAluG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB,qBAGA50B,KAAA4gI,yBACA,OACAptG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAAshI,mBACA,SACA9tG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAkhI,oBACA,WACA1tG,EAAAoB,oBACA,OACA,SACA,SACA,SACA,QACApB,EAAAI,eAAA,UAGA5zB,KAAAmhI,oBACA,OACA3tG,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,KAAA,UAAA,GACA,SACAN,EAAAI,eAAA5zB,KAAAkhI,qBAGAlhI,KAAAy1B,OAAAz1B,KAAAqhI,eACA,cACA7tG,EAAAI,eAAA5zB,KAAA0hI,oBACA,aACAluG,EAAAI,eAAA5zB,KAAA4gI,yBACA,eACAptG,EAAAI,eAAA5zB,KAAAmhI,sBAKA3qF,EAAA,WACAx2C,KAAA0gI,cACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,UAGA1gI,KAAA2gI,cACA,OACA,UACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,UACA,YACA,UACA,YACA,UAGA3gI,KAAA0hI,oBACA,OACAluG,EAAAM,iBACA,SACAN,EAAAI,eAAA5zB,KAAA0gI,cACA,SACAltG,EAAAI,eAAA5zB,KAAA2gI,eAGA3gI,KAAAshI,mBACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,YACA,UACA,eACA,UACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,GACA,aACA,UACA,aACA,UACA,cACA9tG,EAAAoB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jnI,KAAAmnI,uBACA,gBACA,KAAA,UAAA,GACA,OACA3zG,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,MACA,SACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,UACA,YACA,KAAA,UAAA,IAGA5zB,KAAAonI,uBAAA,YAAA,QAAA,OAAA5zG,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAqnI,0BACA,UACA,QACA,QACA,QACA,MACA,UACA,OACA,QACA,QACA,SAGArnI,KAAAsnI,kBAAA,KAAA,KAAA,UAAA,GAAA,KAAA,KAAA,UAAA,GAAA,KAAA,KAAA,UAAA,IAEAtnI,KAAAunI,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,WACA,SACA,gBACA,KAAA,UAAA,GACA,OACA/zG,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAonI,uBACA,qBACA,SACA,QACA,SACA,WACA5zG,EAAAQ,iBAAAh0B,KAAAqnI,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA7zG,EAAAQ,iBAAAh0B,KAAAonI,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,YACA5zG,EAAAQ,iBAAAh0B,KAAAsnI,kBACA,gBACA,QACA,gBACA,QACA,aACA,SAGAtnI,KAAAwnI,mBACA,SACAh0G,EAAAI,eAAA5zB,KAAAmnI,uBACA,WACA3zG,EAAAI,eAAA5zB,KAAAunI,0BAGAvnI,KAAAynI,sBACA,WACA,SACA,OACAj0G,EAAAM,iBACA,OACA,QACA,WACA,QACA,QACA,SACA,WACA,UACA,cACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,SACA,UACA,YACAN,EAAAQ,iBAAAh0B,KAAAsnI,mBAGAtnI,KAAA0nI,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAl0G,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAA2nI,sBACA,OACAn0G,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAA4nI,oBACA,UACAp0G,EAAAI,eAAA5zB,KAAA0nI,gBACA,UACAl0G,EAAAI,eAAA5zB,KAAA2nI,uBAGA3nI,KAAA6nI,qBACA,OACAr0G,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAA8nI,mBAAA,eAAAt0G,EAAAI,eAAA5zB,KAAA6nI,sBAEA7nI,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAA+nI,yBAAA,QAAAv0G,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAgoI,wBAAA,UAAAx0G,EAAAI,eAAA5zB,KAAA+nI,0BAEA/nI,KAAAioI,2BACA,gBACAz0G,EAAAM,iBACA,WACAN,EAAAk4D,kBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,IAGA1rF,KAAAkoI,uBAAA,SAAA,QAAA,YAAA,UAEAloI,KAAAmoI,yBACA,WACA,SACA,eACA,SACA,aACA,SACA,aACA,UAGAnoI,KAAAooI,mBACA,gBACA,SACA,OACA,UACA,UACA,UACA,kBACA,UACA,QACA,UACA,eACA,UACA,SACA,UACA,OACA,UACA,OACApoI,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,SACAJ,EAAAI,eAAA5zB,KAAAgoI,wBACA,gBACAx0G,EAAAI,eAAA5zB,KAAAioI,2BACA,YACAz0G,EAAAI,eAAA5zB,KAAAkoI,uBACA,kBACA10G,EAAAI,eAAA5zB,KAAAmoI,yBACA,kBACA30G,EAAAI,eAAA5zB,KAAAmoI,yBACA,cACA30G,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,YACA,SACA,gBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,mBACAJ,EAAAI,eAAA,UACA,kBACA,SACA,QACA,QACA,YACA,QACA,kBACA,UACA,UACAJ,EAAAM,kBAGA9zB,KAAAqoI,oBACA,OACA70G,EAAAM,iBACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAsoI,kBAAA,aAAA90G,EAAAI,eAAA5zB,KAAAqoI,qBAEAroI,KAAAuoI,yBACA,OACA/0G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAAwoI,uBACA,OACAh1G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,WACAJ,EAAAQ,iBAAAh0B,KAAAqnI,0BACA,MACA,UACA,YACA,UACA,WACA,SACA,WACA,SACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,UACA,YACA,KAAA,UAAA,GACA,WACA,UACA,WACA,UACA,kBACA,QACA,kBACA,KAAA,UAAA,GACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGArnI,KAAAyoI,uBACA,OACAj1G,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAA0oI,uBACA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,KAAAiqI,sBACA,WACA,SACA,OACAz2G,EAAAM,iBACA,OACA,QACA,WACA,QACA,QACA,SACA,WACA,UACA,cACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,SACA,UACA,YACAN,EAAAQ,iBAAAh0B,KAAA8pI,mBAGA9pI,KAAAkqI,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACA12G,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAmqI,sBACA,OACA32G,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAoqI,oBACA,UACA52G,EAAAI,eAAA5zB,KAAAkqI,gBACA,UACA12G,EAAAI,eAAA5zB,KAAAmqI,uBAGAnqI,KAAAqqI,qBACA,OACA72G,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAsqI,mBAAA,eAAA92G,EAAAI,eAAA5zB,KAAAqqI,sBAEArqI,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAuqI,yBAAA,QAAA/2G,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAwqI,wBAAA,UAAAh3G,EAAAI,eAAA5zB,KAAAuqI,0BAEAvqI,KAAAyqI,2BACA,gBACAj3G,EAAAM,iBACA,WACAN,EAAAk4D,kBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,IAGA1rF,KAAA0qI,uBAAA,SAAA,QAAA,YAAA,UAEA1qI,KAAA2qI,yBACA,WACA,SACA,eACA,SACA,aACA,SACA,aACA,UAGA3qI,KAAA4qI,mBACA,gBACA,SACA,OACA,UACA,UACA,UACA,kBACA,UACA,QACA,UACA,eACA,UACA,SACA,UACA,OACA,UACA,OACA5qI,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,SACAJ,EAAAI,eAAA5zB,KAAAwqI,wBACA,gBACAh3G,EAAAI,eAAA5zB,KAAAyqI,2BACA,YACAj3G,EAAAI,eAAA5zB,KAAA0qI,uBACA,kBACAl3G,EAAAI,eAAA5zB,KAAA2qI,yBACA,kBACAn3G,EAAAI,eAAA5zB,KAAA2qI,yBACA,cACAn3G,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,YACA,SACA,gBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,mBACAJ,EAAAI,eAAA,UACA,kBACA,SACA,QACA,QACA,YACA,QACA,kBACA,UACA,UACAJ,EAAAM,kBAGA9zB,KAAA6qI,oBACA,OACAr3G,EAAAM,iBACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAA8qI,kBAAA,aAAAt3G,EAAAI,eAAA5zB,KAAA6qI,qBAEA7qI,KAAA+qI,yBACA,OACAv3G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAAgrI,uBACA,OACAx3G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,WACAJ,EAAAQ,iBAAAh0B,KAAA6pI,0BACA,MACA,UACA,YACA,UACA,WACA,SACA,WACA,SACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,UACA,YACA,KAAA,UAAA,GACA,WACA,UACA,WACA,UACA,kBACA,QACA,kBACA,KAAA,UAAA,GACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA7pI,KAAAirI,uBACA,OACAz3G,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAAkrI,uBACA,UACA13G,EAAAI,eAAA5zB,KAAA+qI,yBACA,QACAv3G,EAAAI,eAAA5zB,KAAAgrI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msI,uBAAA,YAAA,QAAA,OAAA34G,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAosI,0BACA,UACA,QACA,QACA,QACA,MACA,UACA,OACA,QACA,QACA,SAGApsI,KAAAqsI,kBAAA,KAAA,KAAA,UAAA,GAAA,KAAA,KAAA,UAAA,GAAA,KAAA,KAAA,UAAA,IAEArsI,KAAAssI,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,WACA,SACA,gBACA,KAAA,UAAA,GACA,OACA94G,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAmsI,uBACA,qBACA,SACA,QACA,SACA,WACA34G,EAAAQ,iBAAAh0B,KAAAosI,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA54G,EAAAQ,iBAAAh0B,KAAAmsI,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,YACA34G,EAAAQ,iBAAAh0B,KAAAqsI,kBACA,gBACA,QACA,gBACA,QACA,aACA,SAGArsI,KAAAusI,mBACA,SACA/4G,EAAAI,eAAA5zB,KAAAksI,uBACA,WACA14G,EAAAI,eAAA5zB,KAAAssI,0BAGAtsI,KAAAwsI,sBACA,WACA,SACA,OACAh5G,EAAAM,iBACA,OACA,QACA,WACA,QACA,QACA,SACA,WACA,UACA,cACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,SACA,UACA,YACAN,EAAAQ,iBAAAh0B,KAAAqsI,mBAGArsI,KAAAysI,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAj5G,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAA0sI,sBACA,OACAl5G,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAA2sI,oBACA,UACAn5G,EAAAI,eAAA5zB,KAAAysI,gBACA,UACAj5G,EAAAI,eAAA5zB,KAAA0sI,uBAGA1sI,KAAA4sI,qBACA,OACAp5G,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAA6sI,mBAAA,eAAAr5G,EAAAI,eAAA5zB,KAAA4sI,sBAEA5sI,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAA8sI,yBAAA,QAAAt5G,EAAAM,iBAAA,SAAA,SAEA9zB,KAAA+sI,wBAAA,UAAAv5G,EAAAI,eAAA5zB,KAAA8sI,0BAEA9sI,KAAAgtI,2BACA,gBACAx5G,EAAAM,iBACA,WACAN,EAAAk4D,kBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,IAGA1rF,KAAAitI,uBAAA,SAAA,QAAA,YAAA,UAEAjtI,KAAAktI,yBACA,WACA,SACA,eACA,SACA,aACA,SACA,aACA,UAGAltI,KAAAmtI,mBACA,gBACA,SACA,OACA,UACA,UACA,UACA,kBACA,UACA,QACA,UACA,eACA,UACA,SACA,UACA,OACA,UACA,OACAntI,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,SACAJ,EAAAI,eAAA5zB,KAAA+sI,wBACA,gBACAv5G,EAAAI,eAAA5zB,KAAAgtI,2BACA,YACAx5G,EAAAI,eAAA5zB,KAAAitI,uBACA,kBACAz5G,EAAAI,eAAA5zB,KAAAktI,yBACA,kBACA15G,EAAAI,eAAA5zB,KAAAktI,yBACA,cACA15G,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,YACA,SACA,gBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,mBACAJ,EAAAI,eAAA,UACA,kBACA,SACA,QACA,QACA,YACA,QACA,kBACA,WAGA5zB,KAAAotI,oBACA,OACA55G,EAAAM,iBACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAqtI,kBAAA,aAAA75G,EAAAI,eAAA5zB,KAAAotI,qBAEAptI,KAAAstI,yBACA,OACA95G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAAutI,uBACA,OACA/5G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,WACAJ,EAAAQ,iBAAAh0B,KAAAosI,0BACA,MACA,UACA,YACA,UACA,WACA,SACA,WACA,SACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,UACA,YACA,KAAA,UAAA,GACA,WACA,UACA,WACA,UACA,kBACA,QACA,kBACA,KAAA,UAAA,GACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGApsI,KAAAwtI,uBACA,OACAh6G,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAAytI,uBACA,UACAj6G,EAAAI,eAAA5zB,KAAAstI,yBACA,QACA95G,EAAAI,eAAA5zB,KAAAutI,uBACA,QACA/5G,EAAAI,eAAA5zB,KAAAwtI,wBAGAxtI,KAAA0tI,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACAl6G,EAAAI,eAAA,SACA,UACAJ,EAAA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AA,UACA,YACA,SACA,gBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,mBACAJ,EAAAI,eAAA,UACA,kBACA,SACA,QACA,QACA,YACA,QACA,kBACA,WAGA5zB,KAAA2vI,oBACA,OACAn8G,EAAAM,iBACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAA4vI,kBAAA,aAAAp8G,EAAAI,eAAA5zB,KAAA2vI,qBAEA3vI,KAAA6vI,yBACA,OACAr8G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAA8vI,uBACA,OACAt8G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,WACAJ,EAAAQ,iBAAAh0B,KAAA2uI,0BACA,MACA,UACA,YACA,UACA,WACA,SACA,WACA,SACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,UACA,YACA,KAAA,UAAA,GACA,WACA,UACA,WACA,UACA,kBACA,QACA,kBACA,KAAA,UAAA,GACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA3uI,KAAA+vI,uBACA,OACAv8G,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAAgwI,uBACA,UACAx8G,EAAAI,eAAA5zB,KAAA6vI,yBACA,QACAr8G,EAAAI,eAAA5zB,KAAA8vI,uBACA,QACAt8G,EAAAI,eAAA5zB,KAAA+vI,wBAGA/vI,KAAAiwI,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACAz8G,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAkwI,wBACA,OACA18G,EAAAM,iBACA,eACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,qBACA,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SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAA0xI,uBACA,qBACA,SACA,QACA,SACA,WACAl+G,EAAAQ,iBAAAh0B,KAAA2xI,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAn+G,EAAAQ,iBAAAh0B,KAAA0xI,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,YACAl+G,EAAAQ,iBAAAh0B,KAAA4xI,kBACA,gBACA,QACA,gBACA,QACA,aACA,SAGA5xI,KAAA8xI,mBACA,SACAt+G,EAAAI,eAAA5zB,KAAAyxI,uBACA,WACAj+G,EAAAI,eAAA5zB,KAAA6xI,0BAGA7xI,KAAA+xI,sBACA,WACA,SACA,OACAv+G,EAAAM,iBACA,OACA,QACA,WACA,QACA,QACA,SACA,WACA,UACA,cACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,SACA,UACA,YACAN,EAAAQ,iBAAAh0B,KAAA4xI,mBAGA5xI,KAAAgyI,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAx+G,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAiyI,sBACA,OACAz+G,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAkyI,oBACA,UACA1+G,EAAAI,eAAA5zB,KAAAgyI,gBACA,UACAx+G,EAAAI,eAAA5zB,KAAAiyI,uBAGAjyI,KAAAmyI,qBACA,OACA3+G,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAoyI,mBAAA,eAAA5+G,EAAAI,eAAA5zB,KAAAmyI,sBAEAnyI,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAqyI,yBAAA,QAAA7+G,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAsyI,wBAAA,UAAA9+G,EAAAI,eAAA5zB,KAAAqyI,0BAEAryI,KAAAuyI,2BACA,gBACA/+G,EAAAM,iBACA,WACAN,EAAAk4D,kBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,IAGA1rF,KAAAwyI,uBAAA,SAAA,QAAA,YAAA,UAEAxyI,KAAAyyI,yBACA,WACA,SACA,eACA,SACA,aACA,SACA,aACA,UAGAzyI,KAAA0yI,mBACA,gBACA,SACA,OACA,UACA,UACA,UACA,kBACA,UACA,QACA,UACA,eACA,UACA,SACA,UACA,OACA,UACA,OACA1yI,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,SACAJ,EAAAI,eAAA5zB,KAAAsyI,wBACA,gBACA9+G,EAAAI,eAAA5zB,KAAAuyI,2BACA,YACA/+G,EAAAI,eAAA5zB,KAAAwyI,uBACA,kBACAh/G,EAAAI,eAAA5zB,KAAAyyI,yBACA,kBACAj/G,EAAAI,eAAA5zB,KAAAyyI,yBACA,cACAj/G,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,YACA,SACA,gBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,mBACAJ,EAAAI,eAAA,UACA,kBACA,SACA,QACA,QACA,YACA,SAGA5zB,KAAA2yI,oBACA,OACAn/G,EAAAM,iBACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAA4yI,kBAAA,aAAAp/G,EAAAI,eAAA5zB,KAAA2yI,qBAEA3yI,KAAA6yI,yBACA,OACAr/G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAA8yI,uBACA,OACAt/G,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,WACAJ,EAAAQ,iBAAAh0B,KAAA2xI,0BACA,MACA,UACA,YACA,UACA,WACA,SACA,WACA,SACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,UACA,YACA,KAAA,UAAA,GACA,WACA,UACA,WACA,UACA,kBACA,QACA,kBACA,KAAA,UAAA,GACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA3xI,KAAA+yI,uBACA,OACAv/G,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAAgzI,uBACA,UACAx/G,EAAAI,eAAA5zB,KAAA6yI,yBACA,QACAr/G,EAAAI,eAAA5zB,KAAA8yI,uBACA,QACAt/G,EAAAI,eAAA5zB,KAAA+yI,wBAGA/yI,KAAAizI,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAz/G,EAAAM,kBAGA9zB,KAAAkzI,wBACA,QACA1/G,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAAizI,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGAjzI,KAAAmzI,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACA3/G,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,EAAAM,mBAG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A,KAAA,UAAA,IAEA70I,KAAA80I,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,OACAthH,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAA20I,uBACA,qBACA,SACA,QACA,SACA,WACAnhH,EAAAQ,iBAAAh0B,KAAA40I,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAphH,EAAAQ,iBAAAh0B,KAAA20I,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,YACAnhH,EAAAQ,iBAAAh0B,KAAA60I,kBACA,gBACA,QACA,gBACA,QACA,aACA,SAGA70I,KAAA+0I,mBACA,SACAvhH,EAAAI,eAAA5zB,KAAA00I,uBACA,WACAlhH,EAAAI,eAAA5zB,KAAA80I,0BAGA90I,KAAAg1I,sBACA,OACAxhH,EAAAM,iBACA,OACA,QACA,WACA,QACA,QACA,SACA,WACA,UACA,cACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,SACA,UACA,YACAN,EAAAQ,iBAAAh0B,KAAA60I,mBAGA70I,KAAAi1I,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAzhH,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAk1I,sBACA,OACA1hH,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAm1I,oBACA,UACA3hH,EAAAI,eAAA5zB,KAAAi1I,gBACA,UACAzhH,EAAAI,eAAA5zB,KAAAk1I,uBAGAl1I,KAAAo1I,qBACA,OACA5hH,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAq1I,mBAAA,eAAA7hH,EAAAI,eAAA5zB,KAAAo1I,sBAEAp1I,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAs1I,yBAAA,QAAA9hH,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAu1I,wBAAA,UAAA/hH,EAAAI,eAAA5zB,KAAAs1I,0BAEAt1I,KAAAw1I,2BACA,gBACAhiH,EAAAM,iBACA,WACAN,EAAAk4D,kBACA,UACA,KAAA,UAAA,GACA,UACA,KAAA,UAAA,IAGA1rF,KAAAy1I,uBAAA,SAAA,QAAA,YAAA,UAEAz1I,KAAA01I,yBACA,WACA,SACA,eACA,SACA,aACA,SACA,aACA,UAGA11I,KAAA21I,mBACA,gBACA,SACA,OACA,UACA,UACA,UACA,kBACA,UACA,QACA,UACA,eACA,UACA,SACA,UACA,OACA,UACA,OACA31I,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,SACAJ,EAAAI,eAAA5zB,KAAAu1I,wBACA,gBACA/hH,EAAAI,eAAA5zB,KAAAw1I,2BACA,YACAhiH,EAAAI,eAAA5zB,KAAAy1I,uBACA,kBACAjiH,EAAAI,eAAA5zB,KAAA01I,yBACA,kBACAliH,EAAAI,eAAA5zB,KAAA01I,yBACA,cACAliH,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,YACA,SACA,gBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,mBACAJ,EAAAI,eAAA,UACA,kBACA,SACA,QACA,QACA,YACA,SAGA5zB,KAAA41I,yBACA,OACApiH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAA61I,uBACA,OACAriH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,WACAJ,EAAAQ,iBAAAh0B,KAAA40I,0BACA,MACA,UACA,YACA,UACA,WACA,SACA,WACA,SACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,UACA,YACA,KAAA,UAAA,GACA,WACA,UACA,WACA,UACA,kBACA,QACA,kBACA,KAAA,UAAA,GACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA50I,KAAA81I,uBACA,OACAtiH,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAA+1I,uBACA,UACAviH,EAAAI,eAAA5zB,KAAA41I,yBACA,QACApiH,EAAAI,eAAA5zB,KAAA61I,uBACA,QACAriH,EAAAI,eAAA5zB,KAAA81I,wBAGA91I,KAAAg2I,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAxiH,EAAAM,kBAGA9zB,KAAAi2I,wBACA,QACAziH,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAAg2I,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGAh2I,KAAAk2I,sBACA,g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A,SAGA33I,KAAA43I,kBAAA,KAAA,KAAA,UAAA,GAAA,KAAA,KAAA,UAAA,GAAA,KAAA,KAAA,UAAA,IAEA53I,KAAA63I,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,OACArkH,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAA03I,uBACA,qBACA,SACA,QACA,SACA,WACAlkH,EAAAQ,iBAAAh0B,KAAA23I,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAnkH,EAAAQ,iBAAAh0B,KAAA03I,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,YACAlkH,EAAAQ,iBAAAh0B,KAAA43I,kBACA,gBACA,QACA,gBACA,QACA,aACA,SAGA53I,KAAA83I,mBACA,SACAtkH,EAAAI,eAAA5zB,KAAAy3I,uBACA,WACAjkH,EAAAI,eAAA5zB,KAAA63I,0BAGA73I,KAAA+3I,sBACA,OACAvkH,EAAAM,iBACA,OACA,QACA,WACA,QACA,QACA,SACA,WACA,UACA,cACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,SACA,UACA,YACAN,EAAAQ,iBAAAh0B,KAAA43I,mBAGA53I,KAAAg4I,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAxkH,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAi4I,sBACA,OACAzkH,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAk4I,oBACA,UACA1kH,EAAAI,eAAA5zB,KAAAg4I,gBACA,UACAxkH,EAAAI,eAAA5zB,KAAAi4I,uBAGAj4I,KAAAm4I,qBACA,OACA3kH,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAo4I,mBAAA,eAAA5kH,EAAAI,eAAA5zB,KAAAm4I,sBAEAn4I,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAq4I,yBAAA,QAAA7kH,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAs4I,wBAAA,UAAA9kH,EAAAI,eAAA5zB,KAAAq4I,0BAEAr4I,KAAAu4I,uBAAA,SAAA,QAAA,YAAA,UAEAv4I,KAAAw4I,yBACA,WACA,SACA,eACA,SACA,aACA,SACA,aACA,UAGAx4I,KAAAy4I,mBACA,gBACA,SACA,OACA,UACA,UACA,UACA,kBACA,UACA,QACA,UACA,eACA,UACA,SACA,UACA,OACA,UACA,OACAz4I,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,SACAJ,EAAAI,eAAA5zB,KAAAs4I,wBACA,YACA9kH,EAAAI,eAAA5zB,KAAAu4I,uBACA,kBACA/kH,EAAAI,eAAA5zB,KAAAw4I,yBACA,kBACAhlH,EAAAI,eAAA5zB,KAAAw4I,yBACA,cACAhlH,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,YACA,SACA,gBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,mBACAJ,EAAAI,eAAA,UACA,kBACA,SACA,QACA,QACA,YACA,SAGA5zB,KAAA04I,yBACA,OACAllH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAA24I,uBACA,OACAnlH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,WACAJ,EAAAQ,iBAAAh0B,KAAA23I,0BACA,MACA,UACA,YACA,UACA,WACA,SACA,WACA,SACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,UACA,YACA,KAAA,UAAA,GACA,WACA,UACA,WACA,UACA,kBACA,QACA,kBACA,KAAA,UAAA,GACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA33I,KAAA44I,uBACA,OACAplH,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAA64I,uBACA,UACArlH,EAAAI,eAAA5zB,KAAA04I,yBACA,QACAllH,EAAAI,eAAA5zB,KAAA24I,uBACA,QACAnlH,EAAAI,eAAA5zB,KAAA44I,wBAGA54I,KAAA84I,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAtlH,EAAAM,kBAGA9zB,KAAA+4I,wBACA,QACAvlH,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAA84I,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGA94I,KAAAg5I,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACAxlH,EAAAI,eAAA,SACA,UACAJ,EAAAI,eA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,KAAA,UAAA,IAEA16I,KAAA26I,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,OACAnnH,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAw6I,uBACA,qBACA,SACA,QACA,SACA,WACAhnH,EAAAQ,iBAAAh0B,KAAAy6I,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAjnH,EAAAQ,iBAAAh0B,KAAAw6I,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,YACAhnH,EAAAQ,iBAAAh0B,KAAA06I,kBACA,gBACA,QACA,gBACA,QACA,aACA,SAGA16I,KAAA46I,mBACA,SACApnH,EAAAI,eAAA5zB,KAAAu6I,uBACA,WACA/mH,EAAAI,eAAA5zB,KAAA26I,0BAGA36I,KAAA66I,sBACA,OACArnH,EAAAM,iBACA,OACA,QACA,WACA,QACA,QACA,SACA,WACA,UACA,cACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,SACA,UACA,YACAN,EAAAQ,iBAAAh0B,KAAA06I,mBAGA16I,KAAA86I,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAtnH,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAA+6I,sBACA,OACAvnH,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAg7I,oBACA,UACAxnH,EAAAI,eAAA5zB,KAAA86I,gBACA,UACAtnH,EAAAI,eAAA5zB,KAAA+6I,uBAGA/6I,KAAAi7I,qBACA,OACAznH,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAk7I,mBAAA,eAAA1nH,EAAAI,eAAA5zB,KAAAi7I,sBAEAj7I,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAm7I,yBAAA,QAAA3nH,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAo7I,wBAAA,UAAA5nH,EAAAI,eAAA5zB,KAAAm7I,0BAEAn7I,KAAAq7I,uBAAA,SAAA,QAAA,YAAA,UAEAr7I,KAAAs7I,yBACA,WACA,SACA,eACA,SACA,aACA,SACA,aACA,UAGAt7I,KAAAu7I,mBACA,gBACA,SACA,OACA,UACA,UACA,UACA,kBACA,UACA,QACA,UACA,eACA,UACA,SACA,UACA,OACA,UACA,OACAv7I,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,SACAJ,EAAAI,eAAA5zB,KAAAo7I,wBACA,YACA5nH,EAAAI,eAAA5zB,KAAAq7I,uBACA,kBACA7nH,EAAAI,eAAA5zB,KAAAs7I,yBACA,kBACA9nH,EAAAI,eAAA5zB,KAAAs7I,yBACA,cACA9nH,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,YACA,SACA,gBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,mBACAJ,EAAAI,eAAA,UACA,kBACA,SACA,QACA,QACA,YACA,SAGA5zB,KAAAw7I,yBACA,OACAhoH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAAy7I,uBACA,OACAjoH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,WACAJ,EAAAQ,iBAAAh0B,KAAAy6I,0BACA,MACA,UACA,YACA,UACA,WACA,SACA,WACA,SACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,UACA,WACA,UACA,WACA,UACA,kBACA,QACA,kBACA,KAAA,UAAA,GACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGAz6I,KAAA07I,uBACA,OACAloH,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAA27I,uBACA,UACAnoH,EAAAI,eAAA5zB,KAAAw7I,yBACA,QACAhoH,EAAAI,eAAA5zB,KAAAy7I,uBACA,QACAjoH,EAAAI,eAAA5zB,KAAA07I,wBAGA17I,KAAA47I,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACApoH,EAAAM,kBAGA9zB,KAAA67I,wBACA,QACAroH,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAA47I,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGA57I,KAAA87I,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACAtoH,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA+7I,wBACA,OACAvoH,EAAAM,iBACA,eACA,KAAA,UAA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CA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,OACAjqH,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAs9I,uBACA,qBACA,SACA,QACA,SACA,WACA9pH,EAAAQ,iBAAAh0B,KAAAu9I,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA/pH,EAAAQ,iBAAAh0B,KAAAs9I,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,YACA9pH,EAAAQ,iBAAAh0B,KAAAw9I,kBACA,gBACA,QACA,gBACA,QACA,aACA,SAGAx9I,KAAA09I,mBACA,SACAlqH,EAAAI,eAAA5zB,KAAAq9I,uBACA,WACA7pH,EAAAI,eAAA5zB,KAAAy9I,0BAGAz9I,KAAA29I,sBACA,OACAnqH,EAAAM,iBACA,OACA,QACA,WACA,QACA,QACA,SACA,WACA,UACA,cACA,UACA,SACA,UACA,QACA,UACA,SACA,UACA,SACA,UACA,YACAN,EAAAQ,iBAAAh0B,KAAAw9I,mBAGAx9I,KAAA49I,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACApqH,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAA69I,sBACA,OACArqH,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAA89I,oBACA,UACAtqH,EAAAI,eAAA5zB,KAAA49I,gBACA,UACApqH,EAAAI,eAAA5zB,KAAA69I,uBAGA79I,KAAA+9I,qBACA,OACAvqH,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAg+I,mBAAA,eAAAxqH,EAAAI,eAAA5zB,KAAA+9I,sBAEA/9I,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAi+I,yBAAA,QAAAzqH,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAk+I,wBAAA,UAAA1qH,EAAAI,eAAA5zB,KAAAi+I,0BAEAj+I,KAAAm+I,uBAAA,SAAA,QAAA,YAAA,UAEAn+I,KAAAo+I,yBACA,WACA,SACA,eACA,SACA,aACA,SACA,aACA,UAGAp+I,KAAAq+I,mBACA,gBACA,SACA,OACA,UACA,UACA,UACA,kBACA,UACA,QACA,UACA,eACA,UACA,SACA,UACA,OACA,UACA,OACAr+I,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,SACAJ,EAAAI,eAAA5zB,KAAAk+I,wBACA,YACA1qH,EAAAI,eAAA5zB,KAAAm+I,uBACA,kBACA3qH,EAAAI,eAAA5zB,KAAAo+I,yBACA,kBACA5qH,EAAAI,eAAA5zB,KAAAo+I,yBACA,cACA5qH,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,YACA,SACA,kBACA,SACA,QACA,QACA,YACA,SAGA5zB,KAAAs+I,yBACA,OACA9qH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAAu+I,uBACA,OACA/qH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAw+I,uBACA,OACAhrH,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAAy+I,uBACA,UACAjrH,EAAAI,eAAA5zB,KAAAs+I,yBACA,QACA9qH,EAAAI,eAAA5zB,KAAAu+I,uBACA,QACA/qH,EAAAI,eAAA5zB,KAAAw+I,wBAGAx+I,KAAA0+I,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAlrH,EAAAM,kBAGA9zB,KAAA2+I,wBACA,QACAnrH,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAA0+I,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGA1+I,KAAA4+I,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACAprH,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA6+I,wBACA,OACArrH,EAAAM,iBACA,eACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,qBACA,MAAA,KAAA,UAAA,GAAA,IAGA9zB,KAAA8+I,yBACA,OACAtrH,EAAAM,iBACA,aACAN,EAAAM,iBACA,eACA,KAAA,UAAA,IAGA9zB,KAAAy1B,OAAAz1B,KAAA++I,kBACA,eACAvrH,EAAAI,eAAA5zB,KAAAw8I,yBACA,SACAhpH,EAAA6qB,kBAAA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UACA,kBACA,UACA,QACA,UACA,eACA,UACA,SACA,UACA,OACA,UACA,OACAhkJ,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,SACAJ,EAAAI,eAAA5zB,KAAA6jJ,wBACA,YACArwH,EAAAI,eAAA5zB,KAAA8jJ,uBACA,kBACAtwH,EAAAI,eAAA5zB,KAAA+jJ,yBACA,kBACAvwH,EAAAI,eAAA5zB,KAAA+jJ,yBACA,cACAvwH,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,UACA,YACA,SACA,kBACA,SACA,QACA,QACA,YACA,SAGA5zB,KAAAikJ,yBACA,OACAzwH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAAkkJ,uBACA,OACA1wH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAmkJ,uBACA,OACA3wH,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAAokJ,uBACA,UACA5wH,EAAAI,eAAA5zB,KAAAikJ,yBACA,QACAzwH,EAAAI,eAAA5zB,KAAAkkJ,uBACA,QACA1wH,EAAAI,eAAA5zB,KAAAmkJ,wBAGAnkJ,KAAAqkJ,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACA7wH,EAAAM,kBAGA9zB,KAAAskJ,wBACA,QACA9wH,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UAC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A,kBACA,SACA,QACA,QACA,YACA,SAGA5zB,KAAA8mJ,yBACA,OACAtzH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAA+mJ,uBACA,OACAvzH,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAgnJ,uBACA,OACAxzH,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAAinJ,uBACA,UACAzzH,EAAAI,eAAA5zB,KAAA8mJ,yBACA,QACAtzH,EAAAI,eAAA5zB,KAAA+mJ,uBACA,QACAvzH,EAAAI,eAAA5zB,KAAAgnJ,wBAGAhnJ,KAAAknJ,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACA1zH,EAAAM,kBAGA9zB,KAAAmnJ,wBACA,QACA3zH,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAAknJ,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGAlnJ,KAAAonJ,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACA5zH,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,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CA34H,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAosJ,wBAGApsJ,KAAAssJ,yBACA,OACA94H,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,MACA,SACA,gBACA,UAGA5zB,KAAAusJ,uBACA,OACA/4H,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAwsJ,uBACA,OACAh5H,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,UACA,KAAA,UAAA,GACA,QACA,QACA,YACA,WAGA5zB,KAAAysJ,uBACA,UACAj5H,EAAAI,eAAA5zB,KAAAssJ,yBACA,QACA94H,EAAAI,eAAA5zB,KAAAusJ,uBACA,QACA/4H,EAAAI,eAAA5zB,KAAAwsJ,wBAGAxsJ,KAAA0sJ,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAl5H,EAAAM,kBAGA9zB,KAAA2sJ,wBACA,QACAn5H,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAA0sJ,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGA1sJ,KAAA4sJ,sBACA,gBACA,SACA,QACA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AAAkzJ,mBACA,UACA,KAAA,UAAA,GACA,SACA,WAGAlzJ,KAAAozJ,sBACA,KACA5/H,EAAAM,iBACA,OACA,SACA,aACA,SACA,OACA,UACA,MACAN,EAAAM,iBACA,SACAN,EAAAoB,qBAGA50B,KAAAqzJ,uBACA,gBACA,KAAA,UAAA,GACA,OACA7/H,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,MACA,SACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,UACA,YACA,KAAA,UAAA,IAGA5zB,KAAAszJ,uBAAA,YAAA,QAAA,OAAA9/H,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAuzJ,0BACA,UACA,QACA,QACA,QACA,MACA,UACA,OACA,QACA,QACA,SAGAvzJ,KAAAwzJ,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACAhgI,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAszJ,uBACA,qBACA,SACA,QACA,SACA,WACA9/H,EAAAQ,iBAAAh0B,KAAAuzJ,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA//H,EAAAQ,iBAAAh0B,KAAAszJ,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGAtzJ,KAAAyzJ,mBACA,SACAjgI,EAAAI,eAAA5zB,KAAAqzJ,uBACA,WACA7/H,EAAAI,eAAA5zB,KAAAwzJ,0BAGAxzJ,KAAA0zJ,sBACA,OACAlgI,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAA2zJ,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAngI,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAA4zJ,sBACA,OACApgI,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAA6zJ,oBACA,UACArgI,EAAAI,eAAA5zB,KAAA2zJ,gBACA,UACAngI,EAAAI,eAAA5zB,KAAA4zJ,uBAGA5zJ,KAAA8zJ,qBACA,OACAtgI,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAA+zJ,mBAAA,eAAAvgI,EAAAI,eAAA5zB,KAAA8zJ,sBAEA9zJ,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAg0J,yBAAA,QAAAxgI,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAi0J,wBAAA,UAAAzgI,EAAAI,eAAA5zB,KAAAg0J,0BAEAh0J,KAAAk0J,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEAl0J,KAAAm0J,uBAAA,OAAA3gI,EAAAM,iBAAA,OAAA,SAEA9zB,KAAAo0J,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACAp0J,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAi0J,wBACA,YACAzgI,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAAk0J,yBACA,kBACA1gI,EAAAI,eAAA5zB,KAAAk0J,yBACA,kBACA,SACA,cACA1gI,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAm0J,wBAGAn0J,KAAAq0J,yBACA,OACA7gI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAAs0J,uBACA,OACA9gI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAu0J,uBACA,OACA/gI,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAAw0J,uBACA,UACAhhI,EAAAI,eAAA5zB,KAAAq0J,yBACA,QACA7gI,EAAAI,eAAA5zB,KAAAs0J,uBACA,QACA9gI,EAAAI,eAAA5zB,KAAAu0J,wBAGAv0J,KAAAy0J,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAjhI,EAAAM,kBAGA9zB,KAAA00J,wBACA,QACAlhI,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAAy0J,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGAz0J,KAAA20J,sBACA,gBACA,SACA,QACA,SACA,YA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AAA,YAAA79G,EAAAI,eAAA,UAEA5zB,KAAA41J,mBAAA,YAAA51J,KAAAqxI,wBAAA,QAAA79G,EAAAM,kBAEA9zB,KAAA61J,mBACA,OACAriI,EAAAk4D,kBACA,WACAl4D,EAAAQ,iBAAAh0B,KAAA01J,sBACA,mBACA11J,KAAAw1J,sBACA,eACAhiI,EAAAI,eAAA5zB,KAAA21J,yBACA,oBACAniI,EAAAQ,iBAAA,SACA,sBACAR,EAAAQ,iBAAA,SACA,YACAR,EAAAI,eAAA,UACA,eACAJ,EAAAI,eAAA,UACA,aACAJ,EAAAI,eAAA5zB,KAAA41J,mBACA,UACA,KAAA,UAAA,GACA,SACA,WAGA51J,KAAA81J,sBACA,KACAtiI,EAAAM,iBACA,OACA,SACA,aACA,SACA,OACA,UACA,MACAN,EAAAM,iBACA,SACAN,EAAAoB,qBAGA50B,KAAA+1J,uBACA,gBACA,KAAA,UAAA,GACA,OACAviI,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,MACA,SACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,UACA,YACA,KAAA,UAAA,IAGA5zB,KAAAg2J,uBAAA,YAAA,QAAA,OAAAxiI,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAi2J,0BACA,UACA,QACA,QACA,QACA,MACA,UACA,OACA,QACA,QACA,SAGAj2J,KAAAk2J,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACA1iI,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAg2J,uBACA,qBACA,SACA,QACA,SACA,WACAxiI,EAAAQ,iBAAAh0B,KAAAi2J,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAziI,EAAAQ,iBAAAh0B,KAAAg2J,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGAh2J,KAAAm2J,mBACA,SACA3iI,EAAAI,eAAA5zB,KAAA+1J,uBACA,WACAviI,EAAAI,eAAA5zB,KAAAk2J,0BAGAl2J,KAAAo2J,sBACA,OACA5iI,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAAq2J,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACA7iI,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAs2J,sBACA,OACA9iI,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAu2J,oBACA,UACA/iI,EAAAI,eAAA5zB,KAAAq2J,gBACA,UACA7iI,EAAAI,eAAA5zB,KAAAs2J,uBAGAt2J,KAAAw2J,qBACA,OACAhjI,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAy2J,mBAAA,eAAAjjI,EAAAI,eAAA5zB,KAAAw2J,sBAEAx2J,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAA02J,yBAAA,QAAAljI,EAAAM,iBAAA,SAAA,SAEA9zB,KAAA22J,wBAAA,UAAAnjI,EAAAI,eAAA5zB,KAAA02J,0BAEA12J,KAAA42J,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEA52J,KAAA62J,uBAAA,OAAArjI,EAAAM,iBAAA,OAAA,SAEA9zB,KAAA82J,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACA92J,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAA22J,wBACA,YACAnjI,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAA42J,yBACA,kBACApjI,EAAAI,eAAA5zB,KAAA42J,yBACA,kBACA,SACA,cACApjI,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA62J,wBAGA72J,KAAA+2J,yBACA,OACAvjI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAAg3J,uBACA,OACAxjI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAi3J,uBACA,OACAzjI,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAAk3J,uBACA,UACA1jI,EAAAI,eAAA5zB,KAAA+2J,yBACA,QACAvjI,EAAAI,eAAA5zB,KAAAg3J,uBACA,QACAxjI,EAAAI,eAAA5zB,KAAAi3J,wBAGAj3J,KAAAm3J,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACA3jI,EAAAM,kBAGA9zB,KAAAo3J,wBACA,QACA5j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qBACA,SACA,QACA,SACA,WACAjlI,EAAAQ,iBAAAh0B,KAAA04J,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAllI,EAAAQ,iBAAAh0B,KAAAy4J,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGAz4J,KAAA44J,mBACA,SACAplI,EAAAI,eAAA5zB,KAAAw4J,uBACA,WACAhlI,EAAAI,eAAA5zB,KAAA24J,0BAGA34J,KAAA64J,sBACA,OACArlI,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAA84J,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAtlI,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAA+4J,sBACA,OACAvlI,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAg5J,oBACA,UACAxlI,EAAAI,eAAA5zB,KAAA84J,gBACA,UACAtlI,EAAAI,eAAA5zB,KAAA+4J,uBAGA/4J,KAAAi5J,qBACA,OACAzlI,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAk5J,mBAAA,eAAA1lI,EAAAI,eAAA5zB,KAAAi5J,sBAEAj5J,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAm5J,yBAAA,QAAA3lI,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAo5J,wBAAA,UAAA5lI,EAAAI,eAAA5zB,KAAAm5J,0BAEAn5J,KAAAq5J,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEAr5J,KAAAs5J,uBAAA,OAAA9lI,EAAAM,iBAAA,OAAA,SAEA9zB,KAAAu5J,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACAv5J,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAo5J,wBACA,YACA5lI,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAAq5J,yBACA,kBACA7lI,EAAAI,eAAA5zB,KAAAq5J,yBACA,kBACA,SACA,cACA7lI,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAs5J,wBAGAt5J,KAAAw5J,yBACA,OACAhmI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAAy5J,uBACA,OACAjmI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAA05J,uBACA,OACAlmI,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAA25J,uBACA,UACAnmI,EAAAI,eAAA5zB,KAAAw5J,yBACA,QACAhmI,EAAAI,eAAA5zB,KAAAy5J,uBACA,QACAjmI,EAAAI,eAAA5zB,KAAA05J,wBAGA15J,KAAA45J,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACApmI,EAAAM,kBAGA9zB,KAAA65J,wBACA,QACArmI,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAA45J,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGA55J,KAAA85J,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACAtmI,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAy1B,OAAAz1B,KAAA+5J,kBACA,YACAvmI,EAAA6qB,kBAAAr+C,KAAA43J,sBACA,SACApkI,EAAA6qB,kBAAAr+C,KAAAg4J,kBACA,QACAxkI,EAAAQ,iBAAAh0B,KAAAs4J,mBACA,aACA9kI,EAAAI,eAAA5zB,KAAAu4J,sBACA,YACA/kI,EAAAQ,iBAAAh0B,KAAA44J,mBACA,YACAplI,EAAAI,eAAA5zB,KAAA64J,sBACA,aACArlI,EAAAQ,iBAAAh0B,KAAAg5J,oBACA,YACAxlI,EAAAQ,iBAAAh0B,KAAAk5J,mBACA,YACA1lI,EAAAI,eAAA5zB,KAAAu5J,mBACA,oBACA/lI,EAAAI,eAAAJ,EAAAM,kBACA,gBACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,eACA,KAAA,UAAA,GACA,cACAJ,EAAAoB,oBACA,gBACApB,EAAAQ,iBAAAh0B,KAAA25J,uBACA,kBACAnmI,EAAAI,eAAA5zB,KAAA65J,wBACA,eACArmI,EAAAI,eAAA5zB,KAAA85J,wBAKAh6C,GAAA,WACA9/G,KAAAg6J,qBACA,WACAxmI,EAAAoB,oBACA,e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CA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAi7J,uBACA,qBACA,SACA,QACA,SACA,WACAznI,EAAAQ,iBAAAh0B,KAAAk7J,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA1nI,EAAAQ,iBAAAh0B,KAAAi7J,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGAj7J,KAAAo7J,mBACA,SACA5nI,EAAAI,eAAA5zB,KAAAg7J,uBACA,WACAxnI,EAAAI,eAAA5zB,KAAAm7J,0BAGAn7J,KAAAq7J,sBACA,OACA7nI,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAAs7J,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACA9nI,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAu7J,sBACA,OACA/nI,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAw7J,oBACA,UACAhoI,EAAAI,eAAA5zB,KAAAs7J,gBACA,UACA9nI,EAAAI,eAAA5zB,KAAAu7J,uBAGAv7J,KAAAy7J,qBACA,OACAjoI,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAA07J,mBAAA,eAAAloI,EAAAI,eAAA5zB,KAAAy7J,sBAEAz7J,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAA27J,yBAAA,QAAAnoI,EAAAM,iBAAA,SAAA,SAEA9zB,KAAA47J,wBAAA,UAAApoI,EAAAI,eAAA5zB,KAAA27J,0BAEA37J,KAAA67J,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEA77J,KAAA87J,uBAAA,OAAAtoI,EAAAM,iBAAA,OAAA,SAEA9zB,KAAA+7J,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACA/7J,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAA47J,wBACA,YACApoI,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAA67J,yBACA,kBACAroI,EAAAI,eAAA5zB,KAAA67J,yBACA,kBACA,SACA,cACAroI,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA87J,wBAGA97J,KAAAg8J,yBACA,OACAxoI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAAi8J,uBACA,OACAzoI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAk8J,uBACA,OACA1oI,EAAAM,iBACA,kBACAN,EAAAI,eA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9J,KAAA29J,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACAnqI,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAy9J,uBACA,qBACA,SACA,QACA,SACA,WACAjqI,EAAAQ,iBAAAh0B,KAAA09J,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAlqI,EAAAQ,iBAAAh0B,KAAAy9J,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGAz9J,KAAA49J,mBACA,SACApqI,EAAAI,eAAA5zB,KAAAw9J,uBACA,WACAhqI,EAAAI,eAAA5zB,KAAA29J,0BAGA39J,KAAA69J,sBACA,OACArqI,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAA89J,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAtqI,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAA+9J,sBACA,OACAvqI,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAg+J,oBACA,UACAxqI,EAAAI,eAAA5zB,KAAA89J,gBACA,UACAtqI,EAAAI,eAAA5zB,KAAA+9J,uBAGA/9J,KAAAi+J,qBACA,OACAzqI,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAk+J,mBAAA,eAAA1qI,EAAAI,eAAA5zB,KAAAi+J,sBAEAj+J,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAm+J,yBAAA,QAAA3qI,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAo+J,wBAAA,UAAA5qI,EAAAI,eAAA5zB,KAAAm+J,0BAEAn+J,KAAAq+J,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEAr+J,KAAAs+J,uBAAA,OAAA9qI,EAAAM,iBAAA,OAAA,SAEA9zB,KAAAu+J,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACAv+J,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAo+J,wBACA,YACA5qI,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAAq+J,yBACA,kBACA7qI,EAAAI,eAAA5zB,KAAAq+J,yBACA,kBACA,SACA,cACA7qI,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAs+J,wBAGAt+J,KAAAw+J,yBACA,OACAhrI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAAy+J,uBACA,OACAjrI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAA0+J,uBACA,OACAlrI,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAA2+J,uBACA,UACAnrI,EAAAI,eAAA5zB,KAAAw+J,yBACA,QACAhrI,EAAAI,eAAA5zB,KAAAy+J,uBACA,QACAjrI,EAAAI,eAAA5zB,KAAA0+J,wBAGA1+J,KAAA4+J,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAprI,EAAAM,kBAGA9zB,KAAA6+J,wBACA,QACArrI,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAA4+J,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGA5+J,KAAA8+J,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACAtrI,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAy1B,OAAAz1B,KAAA++J,kBACA,YACAvrI,EAAA6qB,kBAAAr+C,KAAA68J,sBACA,SACArpI,EAAA6qB,kBAAAr+C,KAAAg9J,kBACA,QACAxpI,EAAAQ,iBAAAh0B,KAAAs9J,mBACA,aACA9pI,EAAAI,eAAA5zB,KAAAu9J,sBACA,YACA/pI,EAAAQ,iBAAAh0B,KAAA49J,mBACA,YACApqI,EAAAI,eAAA5zB,KAAA69J,sBACA,aACArqI,EAAAQ,iBAAAh0B,KAAAg+J,oBACA,YACAxqI,EAAAQ,iBAAAh0B,KAAAk+J,mBACA,YACA1qI,EAAAI,eAAA5zB,KAAA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SAGAjgK,KAAAkgK,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACA1sI,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAggK,uBACA,qBACA,SACA,QACA,SACA,WACAxsI,EAAAQ,iBAAAh0B,KAAAigK,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAzsI,EAAAQ,iBAAAh0B,KAAAggK,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGAhgK,KAAAmgK,mBACA,SACA3sI,EAAAI,eAAA5zB,KAAA+/J,uBACA,WACAvsI,EAAAI,eAAA5zB,KAAAkgK,0BAGAlgK,KAAAogK,sBACA,OACA5sI,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAAqgK,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACA7sI,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAsgK,sBACA,OACA9sI,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAugK,oBACA,UACA/sI,EAAAI,eAAA5zB,KAAAqgK,gBACA,UACA7sI,EAAAI,eAAA5zB,KAAAsgK,uBAGAtgK,KAAAwgK,qBACA,OACAhtI,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAygK,mBAAA,eAAAjtI,EAAAI,eAAA5zB,KAAAwgK,sBAEAxgK,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAA0gK,yBAAA,QAAAltI,EAAAM,iBAAA,SAAA,SAEA9zB,KAAA2gK,wBAAA,UAAAntI,EAAAI,eAAA5zB,KAAA0gK,0BAEA1gK,KAAA4gK,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEA5gK,KAAA6gK,uBAAA,OAAArtI,EAAAM,iBAAA,OAAA,SAEA9zB,KAAA8gK,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACA9gK,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAA2gK,wBACA,YACAntI,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAA4gK,yBACA,kBACAptI,EAAAI,eAAA5zB,KAAA4gK,yBACA,kBACA,SACA,cACAptI,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA6gK,wBAGA7gK,KAAA+gK,yBACA,OACAvtI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAAghK,uBACA,OACAxtI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAihK,uBACA,OACAztI,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAAkhK,uBACA,UACA1tI,EAAAI,eAAA5zB,KAAA+gK,yBACA,QACAvtI,EAAAI,eAAA5zB,KAAAghK,uBACA,QACAxtI,EAAAI,eAAA5zB,KAAAihK,wBAGAjhK,KAAAmhK,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACA3tI,EAAAM,kBAGA9zB,KAAAohK,wBACA,QACA5tI,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAAmhK,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGAnhK,KAAAqhK,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACA7tI,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAy1B,OAAAz1B,KAAAshK,kBACA,YACA9tI,EAAA6qB,kBAAAr+C,KAAAo/J,sBACA,SACA5rI,EAAA6qB,kBAAAr+C,KAAAu/J,kBACA,QACA/rI,EAAAQ,iBAAAh0B,KAAA6/J,mBACA,aACArsI,EAAAI,eAAA5zB,KAAA8/J,sBACA,YACAtsI,EAAAQ,iBAAAh0B,KAAAmgK,mBACA,YACA3sI,EAAAI,eAAA5zB,KAAAogK,sBACA,aACA5sI,EAAAQ,iBAAAh0B,KAAAugK,oBACA,YACA/sI,EAAAQ,iBAAAh0B,KAAAygK,mBACA,YACAjtI,EAAAI,eAAA5zB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QACA,SAGAxiK,KAAAyiK,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACAjvI,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAuiK,uBACA,qBACA,SACA,QACA,SACA,WACA/uI,EAAAQ,iBAAAh0B,KAAAwiK,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAhvI,EAAAQ,iBAAAh0B,KAAAuiK,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGAviK,KAAA0iK,mBACA,SACAlvI,EAAAI,eAAA5zB,KAAAsiK,uBACA,WACA9uI,EAAAI,eAAA5zB,KAAAyiK,0BAGAziK,KAAA2iK,sBACA,OACAnvI,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAA4iK,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACApvI,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAA6iK,sBACA,OACArvI,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAA8iK,oBACA,UACAtvI,EAAAI,eAAA5zB,KAAA4iK,gBACA,UACApvI,EAAAI,eAAA5zB,KAAA6iK,uBAGA7iK,KAAA+iK,qBACA,OACAvvI,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAgjK,mBAAA,eAAAxvI,EAAAI,eAAA5zB,KAAA+iK,sBAEA/iK,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAijK,yBAAA,QAAAzvI,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAkjK,wBAAA,UAAA1vI,EAAAI,eAAA5zB,KAAAijK,0BAEAjjK,KAAAmjK,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEAnjK,KAAAojK,uBAAA,OAAA5vI,EAAAM,iBAAA,OAAA,SAEA9zB,KAAAqjK,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACArjK,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAkjK,wBACA,YACA1vI,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAAmjK,yBACA,kBACA3vI,EAAAI,eAAA5zB,KAAAmjK,yBACA,kBACA,SACA,cACA3vI,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAojK,wBAGApjK,KAAAsjK,yBACA,OACA9vI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAAujK,uBACA,OACA/vI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAwjK,uBACA,OACAhwI,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAAyjK,uBACA,UACAjwI,EAAAI,eAAA5zB,KAAAsjK,yBACA,QACA9vI,EAAAI,eAAA5zB,KAAAujK,uBACA,QACA/vI,EAAAI,eAAA5zB,KAAAwjK,wBAGAxjK,KAAA0jK,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAlwI,EAAAM,kBAGA9zB,KAAA2jK,wBACA,QACAnwI,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAA0jK,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGA1jK,KAAA4jK,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACApwI,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAy1B,OAAAz1B,KAAA6jK,kBACA,YACArwI,EAAA6qB,kBAAAr+C,KAAA2hK,sBACA,SACAnuI,EAAA6qB,kBAAAr+C,KAAA8hK,kBACA,QACAtuI,EAAAQ,iBAAAh0B,KAAAoiK,mBACA,aACA5uI,EAAAI,eAAA5zB,KAAAqiK,sBACA,YACA7uI,EAAAQ,iBAAAh0B,KAAA0iK,mBACA,YACAlvI,EAAAI,eAAA5zB,KAAA2iK,sBACA,aACAnvI,EAAAQ,iBAAAh0B,KAAA8iK,oBACA,YACAtvI,EAAAQ,iBAAAh0B,KAAAgjK,mBACA,YACAxvI,EAAAI,eAAA5zB,KAAAqjK,mBACA,oBACA7vI,EAAAI,eAAAJ,EAAAM,kBACA,gBACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,eACA,KAAA,UAAA,GACA,cACAJ,EAAAoB,oBACA,gBACApB,EAAAQ,iBAAAh0B,KAAAyjK,uBACA,kBACAjwI,EAAAI,eAAA5zB,KAAA2jK,wBACA,eACAnwI,EAAAI,eAAA5zB,KAAA4jK,wBAKAv+C,GAAA,WACArlH,KAAA8jK,qBACA,WACAtwI,EAAAoB,oBACA,eACA,SACA,QACApB,EAAAM,iBACA,SACAN,EAAAM,iBACA,WACA,SACA,iBACA,SAGA9zB,KAAA+jK,sBAAA,OAAA,SAAA,SAAA,KAAA,UAAA,GAAA,gBAAA,UAEA/jK,KAAAgkK,sBAAA,YAAAxwI,EAAAM,iBAAA,gBAAA,UAEA9zB,KAAAikK,qBAAA,YAAAzwI,EAAAM,iBAAA,WAAA,SAAA,OAAA,SAEA9zB,KAAAkkK,sBACA,WACA1wI,EAAAoB,oBACA,gBACA,SACA,YACA,SACA,gBACA,QACA,WACApB,EAAAI,eAAA5zB,KAAA8jK,qBACA,YACAtwI,EAAAI,eAAA5zB,KAAA+jK,sBACA,gBACAvwI,EAAAI,eAAA5zB,KAAAgkK,sBACA,eACAxwI,EAAAI,eAAA5zB,KAAAikK,sBAGAjkK,KAAAmkK,qBAAA,UAAA3wI,EAAAI,eAAA,WAEA5zB,KAAAokK,yBACA,kBACA5wI,EAAAI,eAAA,UACA,YACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,gBACAJ,EAAAI,eAAA,UACA,UACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,WACAJ,EAAAk4D,mBAGA1rF,KAAAypI,oBAAA,OAAAj2G,EAAAI,eAAA,UAEA5zB,KAAAqkK,kBACA,UACA7wI,EAAAM,iBACA,OACAN,EAAAI,eAAA5zB,KAAAmkK,qBACA,eACA3wI,EAAAI,eAAA5zB,KAAAokK,yBACA,OACApkK,KAAAypI,mBACA,QACA,SACA,kBACAj2G,EAAAI,eAAA,UACA,WACAJ,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,IAGA9zB,KAAAskK,uBACA,QACA,SACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,cACA,MAAA,KAAA,UAAA,GAAA,IAGAtkK,KAAAukK,kBACA,OACA/wI,EAAAk4D,kBACA,cACA,SACA,iBACA1rF,KAAAskK,sBACA,mBACA,MAAA,KAAA,UAAA,GAAA,GACA,WACA,UACA,oBACA9wI,EAAAQ,iBAAA,SACA,sBACAR,EAAAQ,iBAAA,UAGAh0B,KAAAwkK,sBACA,OACAhxI,EAAAk4D,kBACA,QACAl4D,EAAAI,eAAA5zB,KAAAukK,kBACA,UACA,UAGAvkK,KAAAykK,yBAAA,OAAAjxI,EAAAQ,iBAAA,UAEAh0B,KAAAqxI,yBAAA,YAAA79G,EAAAI,eAAA,UAEA5zB,KAAA0kK,mBAAA,YAAA1kK,KAAAqxI,wBAAA,QAAA79G,EAAAM,kBAEA9zB,KAAA2kK,mBACA,OACAnxI,EAAAk4D,kBACA,WACAl4D,EAAAQ,iBAAAh0B,KAAAwkK,sBACA,mBACAxkK,KAAAskK,sBACA,eACA9wI,EAAAI,eAAA5zB,KAAAykK,yBACA,YACAjxI,EAAAI,eAAA,UACA,eACAJ,EAAAI,eAAA,UACA,aACAJ,EAAAI,eAAA5zB,KAAA0kK,mBACA,UACA,KAAA,UAAA,GACA,SACA,WAGA1kK,KAAA4kK,sBACA,KACApxI,EAAAM,iBACA,OACA,SACA,aACA,SACA,OACA,UACA,MACAN,EAAAM,iBACA,SACAN,EAAAoB,qBAGA50B,KAAA6kK,uBACA,gBACA,KAAA,UAAA,GACA,OACArxI,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,MACA,SACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,UACA,YACA,KAAA,UAAA,IAGA5zB,KAAA8kK,uBAAA,YAAA,QAAA,OAAAtxI,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAA+kK,0BACA,UACA,QACA,QACA,QACA,MACA,UACA,OACA,QACA,QACA,SAGA/kK,KAAAglK,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACAxxI,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAA8kK,uBACA,qBACA,SACA,QACA,SACA,WACAtxI,EAAAQ,iBAAAh0B,KAAA+kK,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAvxI,EAAAQ,iBAAAh0B,KAAA8kK,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGA9kK,KAAAilK,mBACA,SACAzxI,EAAAI,eAAA5zB,KAAA6kK,uBACA,WACArxI,EAAAI,eAAA5zB,KAAAglK,0BAGAhlK,KAAAklK,sBACA,OACA1xI,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAAmlK,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACA3xI,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAolK,sBACA,OACA5xI,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAqlK,oBACA,UACA7xI,EAAAI,eAAA5zB,KAAAmlK,gBACA,UACA3xI,EAAAI,eAAA5zB,KAAAolK,uBAGAplK,KAAAslK,qBACA,OACA9xI,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAulK,mBAAA,eAAA/xI,EAAAI,eAAA5zB,KAAAslK,sBAEAtlK,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAwlK,yBAAA,QAAAhyI,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAylK,wBAAA,UAAAjyI,EAAAI,eAAA5zB,KAAAwlK,0BAEAxlK,KAAA0lK,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEA1lK,KAAA2lK,uBAAA,OAAAnyI,EAAAM,iBAAA,OAAA,SAEA9zB,KAAA4lK,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACA5lK,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAylK,wBACA,YACAjyI,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAA0lK,yBACA,kBACAlyI,EAAAI,eAAA5zB,KAAA0lK,yBACA,kBACA,SACA,cACAlyI,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA2lK,wBAGA3lK,KAAA6lK,yBACA,OACAryI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAA8lK,uBACA,OACAtyI,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAA+lK,uBACA,OACAvyI,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAAgmK,uBACA,UACAxyI,EAAAI,eAAA5zB,KAAA6lK,yBACA,QACAryI,EAAAI,eAAA5zB,KAAA8lK,uBACA,QACAtyI,EAAAI,eAAA5zB,KAAA+lK,wBAGA/lK,KAAAimK,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAzyI,EAAAM,kBAGA9zB,KAAAkmK,wBACA,QACA1yI,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAAimK,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGAjmK,KAAAmmK,sBACA,gBACA,SACA,QACA,SACA,YACA,SACA,YACA3yI,EAAAI,eAAA,SACA,UACAJ,EAAAI,eAAA,UACA,QACAJ,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAy1B,OAAAz1B,KAAAomK,kBACA,YACA5yI,EAAA6qB,kBAAAr+C,KAAAkkK,sBACA,SACA1wI,EAAA6qB,kBAAAr+C,KAAAqkK,kBACA,QACA7wI,EAAAQ,iBAAAh0B,KAAA2kK,mBACA,aACAnxI,EAAAI,eAAA5zB,KAAA4kK,sBACA,YACApxI,EAAAQ,iBAAAh0B,KAAAilK,mBACA,YACAzxI,EAAAI,eAAA5zB,KAAAklK,sBACA,aACA1xI,EAAAQ,iBAAAh0B,KAAAqlK,oBACA,YACA7xI,EAAAQ,iBAAAh0B,KAAAulK,mBACA,YACA/xI,EAAAI,eAAA5zB,KAAA4lK,mBACA,oBACApyI,EAAAI,eAAAJ,EAAAM,kBACA,gBACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,eACA,KAAA,UAAA,GACA,cACAJ,EAAAoB,oBACA,gBACApB,EAAAQ,iBAAAh0B,KAAAgmK,uBACA,kBACAxyI,EAAAI,eAAA5zB,KAAAkmK,wBACA,eACA1yI,EAAAI,eAAA5zB,KAAAmmK,wBAKAz/C,GAAA,WACA1mH,KAAAqmK,qBACA,WACA7yI,EAAAoB,oBACA,eACA,SACA,QACApB,EAAAM,iBACA,SACAN,EAAAM,iBACA,WACA,SACA,iBACA,SAGA9zB,KAAAsmK,sBAAA,OAAA,SAAA,SAAA,KAAA,UAAA,GAAA,gBAAA,UAEAtmK,KAAAumK,sBAAA,YAAA/yI,EAAAM,iBAAA,gBAAA,UAEA9zB,KAAAwmK,qBAAA,YAAAhzI,EAAAM,iBAAA,WAAA,SAAA,OAAA,SAEA9zB,KAAAymK,sBACA,WACAjzI,EAAAoB,oBACA,gBACA,SACA,YACA,SACA,gBACA,QACA,WACApB,EAAAI,eAAA5zB,KAAAqmK,qBACA,YACA7yI,EAAAI,eAAA5zB,KAAAsmK,sBACA,gBACA9yI,EAAAI,eAAA5zB,KAAAumK,sBACA,eACA/yI,EAAAI,eAAA5zB,KAAAwmK,sBAGAxmK,KAAA0mK,qBAAA,UAAAlzI,EAAAI,eAAA,WAEA5zB,KAAA2mK,yBACA,kBACAnzI,EAAAI,eAAA,UACA,YACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,gBACAJ,EAAAI,eAAA,UACA,UACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,WACAJ,EAAAk4D,mBAGA1rF,KAAAypI,oBAAA,OAAAj2G,EAAAI,eAAA,UAEA5zB,KAAA4mK,kBACA,UACApzI,EAAAM,iBACA,OACAN,EAAAI,eAAA5zB,KAAA0mK,qBACA,eACAlzI,EAAAI,eAAA5zB,KAAA2mK,yBACA,OACA3mK,KAAAypI,mBACA,QACA,SACA,kBACAj2G,EAAAI,eAAA,UACA,WACAJ,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,IAGA9zB,KAAA6mK,uBACA,QACA,SACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,cACA,MAAA,KAAA,UAAA,GAAA,IAGA7mK,KAAA8mK,kBACA,OACAtzI,EAAAk4D,kBACA,cACA,SACA,iBACA1rF,KAAA6mK,sBACA,mBACA,MAAA,KAAA,UAAA,GAAA,GACA,WACA,UACA,oBACArzI,EAAAQ,iBAAA,SACA,sBACAR,EAAAQ,iBAAA,UAGAh0B,KAAA+mK,sBACA,OACAvzI,EAAAk4D,kBACA,QACAl4D,EAAAI,eAAA5zB,KAAA8mK,kBACA,UACA,UAGA9mK,KAAAgnK,yBAAA,OAAAxzI,EAAAQ,iBAAA,UAEAh0B,KAAAqxI,yBAAA,YAAA79G,EAAAI,eAAA,UAEA5zB,KAAAinK,mBAAA,YAAAjnK,KAAAqxI,wBAAA,QAAA79G,EAAAM,kBAEA9zB,KAAAknK,mBACA,OACA1zI,EAAAk4D,kBACA,WACAl4D,EAAAQ,iBAAAh0B,KAAA+mK,sBACA,mBACA/mK,KAAA6mK,sBACA,eACArzI,EAAAI,eAAA5zB,KAAAgnK,yBACA,YACAxzI,EAAAI,eAAA,UACA,eACAJ,EAAAI,eAAA,UACA,aACAJ,EAAAI,eAAA5zB,KAAAinK,mBACA,UACA,KAAA,UAAA,GACA,SACA,WAGAjnK,KAAAmnK,sBACA,KACA3zI,EAAAM,iBACA,OACA,SACA,aACA,SACA,OACA,UACA,MACAN,EAAAM,iBACA,SACAN,EAAAoB,qBAGA50B,KAAAonK,uBACA,gBACA,KAAA,UAAA,GACA,OACA5zI,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,MACA,SACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,UACA,YACA,KAAA,UAAA,IAGA5zB,KAAAqnK,uBAAA,YAAA,QAAA,OAAA7zI,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAsnK,0BACA,UACA,QACA,QACA,QACA,MACA,UACA,OACA,QACA,QACA,SAGAtnK,KAAAunK,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACA/zI,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,SACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAqnK,uBACA,qBACA,SACA,QACA,SACA,WACA7zI,EAAAQ,iBAAAh0B,KAAAsnK,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA9zI,EAAAQ,iBAAAh0B,KAAAqnK,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGArnK,KAAAwnK,mBACA,SACAh0I,EAAAI,eAAA5zB,KAAAonK,uBACA,WACA5zI,EAAAI,eAAA5zB,KAAAunK,0BAGAvnK,KAAAynK,sBACA,OACAj0I,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAA0nK,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAl0I,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAA2nK,sBACA,OACAn0I,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAA4nK,oBACA,UACAp0I,EAAAI,eAAA5zB,KAAA0nK,gBACA,UACAl0I,EAAAI,eAAA5zB,KAAA2nK,uBAGA3nK,KAAA6nK,qBACA,OACAr0I,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA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A,QACA,SACA,WACAp2I,EAAAQ,iBAAAh0B,KAAA6pK,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAr2I,EAAAQ,iBAAAh0B,KAAA4pK,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGA5pK,KAAA+pK,mBACA,SACAv2I,EAAAI,eAAA5zB,KAAA2pK,uBACA,WACAn2I,EAAAI,eAAA5zB,KAAA8pK,0BAGA9pK,KAAAgqK,sBACA,OACAx2I,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAAiqK,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACAz2I,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAkqK,sBACA,OACA12I,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAmqK,oBACA,UACA32I,EAAAI,eAAA5zB,KAAAiqK,gBACA,UACAz2I,EAAAI,eAAA5zB,KAAAkqK,uBAGAlqK,KAAAoqK,qBACA,OACA52I,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAAqqK,mBAAA,eAAA72I,EAAAI,eAAA5zB,KAAAoqK,sBAEApqK,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EA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B,KAAA+rK,mBACA,OACAv4I,EAAAk4D,kBACA,WACAl4D,EAAAQ,iBAAAh0B,KAAA4rK,sBACA,mBACA5rK,KAAA0rK,sBACA,eACAl4I,EAAAI,eAAA5zB,KAAA6rK,yBACA,YACAr4I,EAAAI,eAAA,UACA,eACAJ,EAAAI,eAAA,UACA,aACAJ,EAAAI,eAAA5zB,KAAA8rK,mBACA,UACA,KAAA,UAAA,GACA,SACA,WAGA9rK,KAAAgsK,sBACA,KACAx4I,EAAAM,iBACA,OACA,SACA,aACA,SACA,OACA,UACA,MACAN,EAAAM,iBACA,SACAN,EAAAoB,qBAGA50B,KAAAisK,uBACA,gBACA,KAAA,UAAA,GACA,OACAz4I,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,UACA,YACA,KAAA,UAAA,IAGA5zB,KAAAksK,uBAAA,YAAA,QAAA,OAAA14I,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAmsK,0BACA,UACA,QACA,QACA,QACA,MACA,UACA,OACA,QACA,QACA,SAGAnsK,KAAAosK,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACA54I,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,eACAN,EAAAQ,iBAAAh0B,KAAAksK,uBACA,qBACA,SACA,QACA,SACA,WACA14I,EAAAQ,iBAAAh0B,KAAAmsK,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA34I,EAAAQ,iBAAAh0B,KAAAksK,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGAlsK,KAAAqsK,mBACA,SACA74I,EAAAI,eAAA5zB,KAAAisK,uBACA,WACAz4I,EAAAI,eAAA5zB,KAAAosK,0BAGApsK,KAAAssK,sBACA,OACA94I,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAAusK,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACA/4I,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAwsK,sBACA,OACAh5I,EAAAM,iBACA,aACA,SACA,WACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAysK,oBACA,UACAj5I,EAAAI,eAAA5zB,KAAAusK,gBACA,UACA/4I,EAAAI,eAAA5zB,KAAAwsK,uBAGAxsK,KAAA0sK,qBACA,OACAl5I,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,WAGA9zB,KAAA2sK,mBAAA,eAAAn5I,EAAAI,eAAA5zB,KAAA0sK,sBAEA1sK,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAA4sK,yBAAA,QAAAp5I,EAAAM,iBAAA,SAAA,SAEA9zB,KAAA6sK,wBAAA,UAAAr5I,EAAAI,eAAA5zB,KAAA4sK,0BAEA5sK,KAAA8sK,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEA9sK,KAAA+sK,uBAAA,OAAAv5I,EAAAM,iBAAA,OAAA,SAEA9zB,KAAAgtK,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACAhtK,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAA6sK,wBACA,YACAr5I,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAA8sK,yBACA,kBACAt5I,EAAAI,eAAA5zB,KAAA8sK,yBACA,kBACA,SACA,cACAt5I,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAA+sK,wBAGA/sK,KAAAitK,yBACA,cACAz5I,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAAktK,uBACA,OACA15I,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAmtK,uBACA,OACA35I,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAAotK,uBACA,UACA55I,EAAAI,eAAA5zB,KAAAitK,yBACA,QACAz5I,EAAAI,eAAA5zB,KAAAktK,uBACA,QACA15I,EAAAI,eAAA5zB,KAAAmtK,wBAGAntK,KAAAqtK,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACA75I,EAAAM,kBAGA9zB,KAAAstK,wBACA,QACA95I,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA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ACA,QACA,SACA,gBACA,UAGA5zB,KAAAwvK,uBACA,OACAh8I,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAAyvK,uBACA,OACAj8I,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAA0vK,uBACA,UACAl8I,EAAAI,eAAA5zB,KAAAuvK,yBACA,QACA/7I,EAAAI,eAAA5zB,KAAAwvK,uBACA,QACAh8I,EAAAI,eAAA5zB,KAAAyvK,wBAGAzvK,KAAA2vK,4BACA,QACA,UACA,UACA,UACA,YACA,KAAA,UAAA,GACA,QACAn8I,EAAAM,kBAGA9zB,KAAA4vK,wBACA,QACAp8I,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,UACA,OACA,UACA,eACA,UACA,UACA,UACA,kBACA,UACA,OACA,UACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,QACAN,EAAAI,eAAA5zB,KAAA2vK,4BACA,iBACA,KAAA,UAAA,GACA,wBACA,UACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,UACA,YACA,SAGA3vK,KAAAy1B,OAAAz1B,KAAA6vK,kBACA,YACAr8I,EAAA6qB,kBAAAr+C,KAAA4tK,sBACA,SACAp6I,EAAA6qB,kBAAAr+C,KAAA+tK,kBACA,QACAv6I,EAAAQ,iBAAAh0B,KAAAquK,mBACA,aACA76I,EAAAI,eAAA5zB,KAAAsuK,sBACA,YACA96I,EAAAQ,iBAAAh0B,KAAA2uK,mBACA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,KAAAgxK,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACAx9I,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,eACAN,EAAAQ,iBAAAh0B,KAAA8wK,uBACA,qBACA,SACA,QACA,SACA,WACAt9I,EAAAQ,iBAAAh0B,KAAA+wK,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAv9I,EAAAQ,iBAAAh0B,KAAA8wK,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,gBACA,SAGA9wK,KAAAixK,mBACA,SACAz9I,EAAAI,eAAA5zB,KAAA6wK,uBACA,WACAr9I,EAAAI,eAAA5zB,KAAAgxK,0BAGAhxK,KAAAkxK,sBACA,OACA19I,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAAmxK,gBACA,gBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,gBACA39I,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,OACA,WAGA9zB,KAAAoxK,sBACA,OACA59I,EAAAM,iBACA,QACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAAqxK,oBACA,UACA7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,eAAA5zB,KAAAq2K,wBACA,YACA7iJ,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAAs2K,yBACA,kBACA9iJ,EAAAI,eAAA5zB,KAAAs2K,yBACA,kBACA,SACA,cACA9iJ,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,UACA,YACAJ,EAAAI,eAAA5zB,KAAAu2K,wBAGAv2K,KAAAy2K,yBACA,cACAjjJ,EAAAI,eAAA,UACA,QACA,SACA,gBACA,UAGA5zB,KAAA02K,uBACA,OACAljJ,EAAAM,iBACA,cACAN,EAAAI,eAAA,UACA,cACA,KAAA,SAAA,GACA,YACA,KAAA,SAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,QACA,SACA,MACA,UACA,cACA,UACA,YACA,KAAA,UAAA,GACA,cACA,SACA,WACA,KAAA,UAAA,GACA,gBACA,QACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,UACA,kBACA,QACA,OACA,QACA,WACA,UACA,iBACA,QACA,QACA,WAGA5zB,KAAA22K,uBACA,OACAnjJ,EAAAM,iBACA,kBACAN,EAAAI,eAAA,UACA,QACA,SACA,cACA,UACA,SACA,UACA,QACA,QACA,YACA,WAGA5zB,KAAA42K,uBACA,UACApjJ,EAAAI,eAAA5zB,KAAAy2K,yBACA,QACAjjJ,EAAAI,eAAA5zB,KAAA02K,uBACA,QACAljJ,EAAAI,eAAA5zB,KAAA22K,wBAGA32K,KAAA62K,wBACA,QACArjJ,EAAAM,iBACA,QACA,SACA,cACA,UACA,YACA,QACA,OACA,QACA,eACA,UACA,UACA,QACA,kBACA,UACA,OACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,QACA,oBACA,QACA,iBACA,KAAA,UAAA,GACA,wBACA,QACA,oBACA,QACA,SACA,KAAA,UAAA,GACA,gBACA,QACA,YACA,SAGA9zB,KAAAy1B,OAAAz1B,KAAA82K,kBACA,YACAtjJ,EAAA6qB,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A,SACA,QACA,SACA,WACA5mJ,EAAAQ,iBAAAh0B,KAAAq6K,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA7mJ,EAAAQ,iBAAAh0B,KAAAo6K,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,SACA,gBACA,SAGAp6K,KAAAu6K,mBACA,SACA/mJ,EAAAI,eAAA5zB,KAAAm6K,uBACA,WACA3mJ,EAAAI,eAAA5zB,KAAAs6K,0BAGAt6K,KAAAw6K,sBACA,OACAhnJ,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAAy6K,gBACA,gBACA,KAAA,UAAA,GACA,gBACAjnJ,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,WACA,UACA,eACA,SACA,OACA,WAGA9zB,KAAA06K,sBACA,OACAlnJ,EAAAM,iBACA,QACA,SACA,UACA,UACA,WACA,UACA,QACA,SACA,OACA,WAGA9zB,KAAA26K,oBACA,UACAnnJ,EAAAI,eAAA5zB,KAAAy6K,gBACA,UACAjnJ,EAAAI,eAAA5zB,KAAA06K,uBAGA16K,KAAA46K,qBACA,OACApnJ,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,UACA,eACA,UAGA9zB,KAAA66K,mBAAA,eAAArnJ,EAAAI,eAAA5zB,KAAA46K,sBAEA56K,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eA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,KAAAmoL,sBACA,KACA30J,EAAAM,iBACA,OACA,SACA,aACA,SACA,MACAN,EAAAM,iBACA,SACAN,EAAAoB,qBAGA50B,KAAAooL,uBACA,gBACA,KAAA,UAAA,GACA,OACA50J,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,UACA,YACA,KAAA,UAAA,IAGA5zB,KAAAqoL,uBAAA,YAAA,QAAA,OAAA70J,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAsoL,0BACA,UACA,QACA,QACA,QACA,MACA,UACA,OACA,QACA,QACA,SAGAtoL,KAAAuoL,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACA/0J,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,eACAN,EAAAQ,iBAAAh0B,KAAAqoL,uBACA,qBACA,SACA,QACA,SACA,WACA70J,EAAAQ,iBAAAh0B,KAAAsoL,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA90J,EAAAQ,iBAAAh0B,KAAAqoL,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,SACA,gBACA,SAGAroL,KAAAwoL,mBACA,SACAh1J,EAAAI,eAAA5zB,KAAAooL,uBACA,WACA50J,EAAAI,eAAA5zB,KAAAuoL,0BAGAv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A,OACA72J,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACA,SACA,eACAN,EAAAQ,iBAAAh0B,KAAAmqL,uBACA,qBACA,SACA,QACA,SACA,WACA32J,EAAAQ,iBAAAh0B,KAAAoqL,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA52J,EAAAQ,iBAAAh0B,KAAAmqL,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,SACA,gBACA,SAGAnqL,KAAAsqL,mBACA,SACA92J,EAAAI,eAAA5zB,KAAAkqL,uBACA,WACA12J,EAAAI,eAAA5zB,KAAAqqL,0BAGArqL,KAAAuqL,sBACA,OACA/2J,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAAwqL,gBACA,gBACA,KAAA,UAAA,GACA,gBACAh3J,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,SACA,UACA,gBACA,SACA,QACA,UACA,YACA,UACA,cACA,UACA,WACA,UACA,eACA,SACA,OACA,WAGA9zB,KAAAyqL,sBACA,OACAj3J,EAAAM,iBACA,QACA,SACA,UACA,UACA,WACA,WAGA9zB,KAAA0qL,oBACA,UACAl3J,EAAAI,eAAA5zB,KAAAwqL,gBACA,UACAh3J,EAAAI,eAAA5zB,KAAAyqL,uBAGAzqL,KAAA2qL,qBACA,OACAn3J,EAAAM,iBACA,SACA,KAAA,QAAA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,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,SACA,gBACA,SAGAjsL,KAAAosL,mBACA,SACA54J,EAAAI,eAAA5zB,KAAAgsL,uBACA,WACAx4J,EAAAI,eAAA5zB,KAAAmsL,0BAGAnsL,KAAAqsL,sBACA,OACA74J,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAAssL,gBACA,gBACA,KAAA,UAAA,GACA,gBACA94J,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,gBACA,SACA,QACA,UACA,YACA,UACA,cACA,UACA,WACA,UACA,eACA,SACA,OACA,WAGA9zB,KAAAusL,sBACA,OACA/4J,EAAAM,iBACA,QACA,SACA,UACA,UACA,WACA,WAGA9zB,KAAAwsL,oBACA,UACAh5J,EAAAI,eAAA5zB,KAAAssL,gBACA,UACA94J,EAAAI,eAAA5zB,KAAAusL,uBAGAvsL,KAAAysL,qBACA,OACAj5J,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,UACA,eACA,UAGA9zB,KAAA0sL,mBAAA,eAAAl5J,EAAAI,eAAA5zB,KAAAysL,sBAEAzsL,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAA2sL,yBAAA,QAAAn5J,EAAAM,iBAAA,SAAA,SAEA9zB,KAAA4sL,wBAAA,UAAAp5J,EAAAI,eAAA5zB,KAAA2sL,0BAEA3sL,KAAA6sL,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEA7sL,KAAA8sL,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACA9sL,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAA4sL,wBACA,YACAp5J,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA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AA,UAAA,KAEA5zB,KAAAguL,0BACA,UACA,QACA,QACA,QACA,MACA,SACA,OACA,QACA,QACA,SAGAhuL,KAAAiuL,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACAz6J,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAA+tL,uBACA,qBACA,SACA,QACA,SACA,WACAv6J,EAAAQ,iBAAAh0B,KAAAguL,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAx6J,EAAAQ,iBAAAh0B,KAAA+tL,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,SACA,gBACA,SAGA/tL,KAAAkuL,mBACA,SACA16J,EAAAI,eAAA5zB,KAAA8tL,uBACA,WACAt6J,EAAAI,eAAA5zB,KAAAiuL,0BAGAjuL,KAAAmuL,sBACA,OACA36J,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAAouL,gBACA,gBACA,KAAA,UAAA,GACA,gBACA56J,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,gBACA,SACA,QACA,UACA,YACA,UACA,cACA,UACA,WACA,UACA,eACA,SACA,OACA,WAGA9zB,KAAAquL,sBACA,OACA76J,EAAAM,iBACA,QACA,SACA,UACA,UACA,WACA,WAGA9zB,KAAAsuL,oBACA,UACA96J,EAAAI,eAAA5zB,KAAAouL,gBACA,UACA56J,EAAAI,eAAA5zB,KAAAquL,uBAGAruL,KAAAuuL,qBACA,OACA/6J,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,UACA,eACA,UAGA9zB,KAAAwuL,mBAAA,eAAAh7J,EAAAI,eAAA5zB,KAAAuuL,sBAEAvuL,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAyuL,yBAAA,QAAAj7J,EAAAM,iBAAA,SAAA,SAEA9zB,KAAA0uL,wBAAA,UAAAl7J,EAAAI,eAAA5zB,KAAAyuL,0BAEAzuL,KAAA2uL,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEA3uL,KAAA4uL,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACA5uL,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAA0uL,wBACA,YACAl7J,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAA2uL,yBACA,kBACAn7J,EAAAI,eAAA5zB,KAAA2uL,yBACA,kBACA,SACA,cACAn7J,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,WAGA5zB,KAAAy1B,OAAAz1B,KAAA6uL,kBACA,YACAr7J,EAAA6qB,kBAAAr+C,KAAAktL,sBACA,SACA15J,EAAA6qB,kBAAAr+C,KAAAqtL,kBACA,QACA75J,EAAAQ,iBAAAh0B,KAAA2tL,mBACA,aACAn6J,EAAAQ,iBAAAh0B,KAAA6tL,sBACA,YACAr6J,EAAAQ,iBAAAh0B,KAAAkuL,mBACA,YACA16J,EAAAI,eAAA5zB,KAAAmuL,sBACA,aACA36J,EAAAQ,iBAAAh0B,KAAAsuL,oBACA,YACA96J,EAAAQ,iBAAAh0B,KAAAwuL,mBACA,YACAh7J,EAAAI,eAAA5zB,KAAA4uL,mBACA,oBACAp7J,EAAAI,eAAAJ,EAAAM,kBACA,gBACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,eACA,KAAA,UAAA,GACA,cACAJ,EAAAoB,sBAKAqK,GAAA,WACAj/B,KAAA8uL,qBACA,WACAt7J,EAAAoB,oBACA,eACA,SACA,QACApB,EAAAM,iBACA,SACAN,EAAAM,iBACA,WACA,QACA,iBACA,SAGA9zB,KAAA+uL,sBAAA,OAAA,SAAA,SAAA,KAAA,UAAA,GAAA,gBAAA,UAEA/uL,KAAAgvL,sBACA,WACAx7J,EAAAoB,oBACA,gBACA,SACA,YACA,SACA,gBACA,QACA,WACApB,EAAAI,eAAA5zB,KAAA8uL,qBACA,YACAt7J,EAAAI,eAAA5zB,KAAA+uL,uBAGA/uL,KAAAivL,qBAAA,UAAAz7J,EAAAI,eAAA,WAEA5zB,KAAAkvL,yBACA,kBACA17J,EAAAI,eAAA,UACA,YACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,gBACAJ,EAAAI,eAAA,UACA,UACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,WACAJ,EAAAk4D,mBAGA1rF,KAAAypI,oBAAA,OAAAj2G,EAAAI,eAAA,UAEA5zB,KAAAmvL,kBACA,OACA37J,EAAAI,eAAA5zB,KAAAivL,qBACA,eACAz7J,EAAAI,eAAA5zB,KAAAkvL,yBACA,OACAlvL,KAAAypI,mBACA,QACA,SACA,iBACAj2G,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,WAGA5zB,KAAAovL,uBACA,QACA,SACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,cACA,MAAA,KAAA,UAAA,GAAA,IAGApvL,KAAAqvL,kBACA,OACA77J,EAAAk4D,kBACA,cACA,SACA,iBACA1rF,KAAAovL,sBACA,mBACA,MAAA,KAAA,UAAA,GAAA,GACA,WACA,UACA,oBACA57J,EAAAQ,iBAAA,SACA,sBACAR,EAAAQ,iBAAA,UAGAh0B,KAAAsvL,sBACA,OACA97J,EAAAk4D,kBACA,QACAl4D,EAAAI,eAAA5zB,KAAAqvL,kBACA,UACA,UAGArvL,KAAAuvL,yBAAA,OAAA/7J,EAAAQ,iBAAA,UAEAh0B,KAAAqxI,yBAAA,YAAA79G,EAAAI,eAAA,UAEA5zB,KAAAwvL,mBAAA,YAAAxvL,KAAAqxI,wBAAA,QAAA79G,EAAAM,kBAEA9zB,KAAAyvL,mBACA,OACAj8J,EAAAk4D,kBACA,WACAl4D,EAAAQ,iBAAAh0B,KAAAsvL,sBACA,mBACAtvL,KAAAovL,sBACA,eACA57J,EAAAI,eAAA5zB,KAAAuvL,yBACA,YACA/7J,EAAAI,eAAA,UACA,eACAJ,EAAAI,eAAA,UACA,aACAJ,EAAAI,eAAA5zB,KAAAwvL,mBACA,eACAh8J,EAAAI,eAAA,UAGA5zB,KAAA0vL,2BAAA,QAAAl8J,EAAAM,iBAAA,QAAA,WAEA9zB,KAAA2vL,sBACA,aACAn8J,EAAAI,eAAAJ,EAAAM,kBACA,cACAN,EAAAI,eAAA5zB,KAAA0vL,4BAGA1vL,KAAA4vL,uBACA,gBACA,KAAA,UAAA,GACA,OACAp8J,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,UACA,YACA,KAAA,UAAA,IAGA5zB,KAAA6vL,uBAAA,YAAA,QAAA,OAAAr8J,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAA8vL,0BACA,UACA,QACA,QACA,QACA,MACA,SACA,OACA,QACA,QACA,SAGA9vL,KAAA+vL,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACAv8J,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAA6vL,uBACA,qBACA,SACA,QACA,SACA,WACAr8J,EAAAQ,iBAAAh0B,KAAA8vL,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAt8J,EAAAQ,iBAAAh0B,KAAA6vL,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,SACA,gBACA,SAGA7vL,KAAAgwL,0BACA,OACAx8J,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAAiwL,mBACA,SACAz8J,EAAAI,eAAA5zB,KAAA4vL,uBACA,WACAp8J,EAAAI,eAAA5zB,KAAA+vL,yBACA,YACAv8J,EAAAI,eAAA5zB,KAAAgwL,2BAGAhwL,KAAAkwL,gBACA,gBACA,KAAA,UAAA,GACA,gBACA18J,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,gBACA,SACA,QACA,UACA,YACA,UACA,cACA,UACA,WACA,UACA,eACA,SACA,OACA,WAGA9zB,KAAAmwL,sBACA,OACA38J,EAAAM,iBACA,QACA,SACA,UACA,UACA,WACA,WAGA9zB,KAAAowL,oBACA,UACA58J,EAAAI,eAAA5zB,KAAAkwL,gBACA,UACA18J,EAAAI,eAAA5zB,KAAAmwL,uBAGAnwL,KAAAqwL,qBACA,OACA78J,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,UACA,eACA,UAGA9zB,KAAAswL,mBAAA,eAAA98J,EAAAI,eAAA5zB,KAAAqwL,sBAEArwL,KAAAg6H,gBAAA,MAAA,SAAA,WAAAxmG,EAAAI,eAAA,UAEA5zB,KAAAuwL,yBAAA,QAAA/8J,EAAAM,iBAAA,SAAA,SAEA9zB,KAAAwwL,wBAAA,UAAAh9J,EAAAI,eAAA5zB,KAAAuwL,0BAEAvwL,KAAAywL,yBAAA,aAAA,SAAA,aAAA,SAAA,WAAA,WAEAzwL,KAAA0wL,mBACA,gBACA,SACA,QACA,QACA,UACA,UACA,SACA,UACA,OACA,UACA,YACA,QACA,OACA1wL,KAAAg6H,eACA,UACAxmG,EAAAI,eAAA,UACA,YACA,SACA,SACAJ,EAAAI,eAAA5zB,KAAAwwL,wBACA,YACAh9J,EAAAI,eAAA,SACA,kBACAJ,EAAAI,eAAA5zB,KAAAywL,yBACA,kBACAj9J,EAAAI,eAAA5zB,KAAAywL,yBACA,kBACA,SACA,cACAj9J,EAAAI,eAAA,UACA,oBACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,qBACAJ,EAAAI,eAAA,WAGA5zB,KAAAy1B,OAAAz1B,KAAA2wL,kBACA,YACAn9J,EAAA6qB,kBAAAr+C,KAAAgvL,sBACA,SACAx7J,EAAA6qB,kBAAAr+C,KAAAmvL,kBACA,QACA37J,EAAAQ,iBAAAh0B,KAAAyvL,mBACA,aACAj8J,EAAAQ,iBAAAh0B,KAAA2vL,sBACA,YACAn8J,EAAAQ,iBAAAh0B,KAAAiwL,mBACA,aACAz8J,EAAAQ,iBAAAh0B,KAAAowL,oBACA,YACA58J,EAAAQ,iBAAAh0B,KAAAswL,mBACA,YACA98J,EAAAI,eAAA5zB,KAAA0wL,mBACA,oBACAl9J,EAAAI,eAAAJ,EAAAM,kBACA,gBACAN,EAAAI,gBAAA,KAAA,UAAA,IACA,eACA,KAAA,UAAA,GACA,cACAJ,EAAAoB,sBAKA6L,GAAA,WACAzgC,KAAA4wL,qBACA,WACAp9J,EAAAoB,oBACA,eACA,SACA,QACApB,EAAAM,iBACA,SACAN,EAAAM,iBACA,WACA,QACA,iBACA,SAGA9zB,KAAA6wL,sBAAA,OAAA,SAAA,SAAA,KAAA,UAAA,GAAA,gBAAA,UAEA7wL,KAAA8wL,sBACA,WACAt9J,EAAAoB,oBACA,gBACA,SACA,YACA,SACA,gBACA,QACA,WACApB,EAAAI,eAAA5zB,KAAA4wL,qBACA,YACAp9J,EAAAI,eAAA5zB,KAAA6wL,uBAGA7wL,KAAA+wL,qBAAA,UAAAv9J,EAAAI,eAAA,WAEA5zB,KAAAgxL,yBACA,kBACAx9J,EAAAI,eAAA,UACA,YACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,gBACAJ,EAAAI,eAAA,UACA,UACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,WACAJ,EAAAk4D,mBAGA1rF,KAAAypI,oBAAA,OAAAj2G,EAAAI,eAAA,UAEA5zB,KAAAixL,kBACA,OACAz9J,EAAAI,eAAA5zB,KAAA+wL,qBACA,eACAv9J,EAAAI,eAAA5zB,KAAAgxL,yBACA,OACAhxL,KAAAypI,mBACA,QACA,SACA,iBACAj2G,EAAAI,eAAA,UACA,kBACAJ,EAAAI,eAAA,WAGA5zB,KAAAkxL,uBACA,QACA,SACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,cACA,MAAA,KAAA,UAAA,GAAA,IAGAlxL,KAAAmxL,kBACA,OACA39J,EAAAk4D,kBACA,cACA,SACA,iBACA1rF,KAAAkxL,sBACA,mBACA,MAAA,KAAA,UAAA,GAAA,GACA,WACA,UACA,oBACA19J,EAAAQ,iBAAA,SACA,sBACAR,EAAAQ,iBAAA,UAGAh0B,KAAAoxL,sBACA,OACA59J,EAAAk4D,kBACA,QACAl4D,EAAAI,eAAA5zB,KAAAmxL,kBACA,UACA,UAGAnxL,KAAAqxL,yBAAA,OAAA79J,EAAAQ,iBAAA,UAEAh0B,KAAAqxI,yBAAA,YAAA79G,EAAAI,eAAA,UAEA5zB,KAAAsxL,mBAAA,YAAAtxL,KAAAqxI,wBAAA,QAAA79G,EAAAM,kBAEA9zB,KAAAuxL,mBACA,OACA/9J,EAAAk4D,kBACA,WACAl4D,EAAAQ,iBAAAh0B,KAAAoxL,sBACA,mBACApxL,KAAAkxL,sBACA,eACA19J,EAAAI,eAAA5zB,KAAAqxL,yBACA,YACA79J,EAAAI,eAAA,UACA,eACAJ,EAAAI,eAAA,UACA,aACAJ,EAAAI,eAAA5zB,KAAAsxL,mBACA,eACA99J,EAAAI,eAAA,UAGA5zB,KAAAwxL,2BAAA,QAAAh+J,EAAAM,iBAAA,QAAA,WAEA9zB,KAAAyxL,sBACA,aACAj+J,EAAAI,eAAAJ,EAAAM,kBACA,cACAN,EAAAI,eAAA5zB,KAAAwxL,4BAGAxxL,KAAA0xL,uBACA,gBACA,KAAA,UAAA,GACA,OACAl+J,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,UACA,YACA,KAAA,UAAA,IAGA5zB,KAAA2xL,uBAAA,YAAA,QAAA,OAAAn+J,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAA4xL,0BACA,UACA,QACA,QACA,QACA,MACA,SACA,OACA,QACA,QACA,SAGA5xL,KAAA6xL,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,gBACA,QACA,gBACA,KAAA,UAAA,GACA,OACAr+J,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,cACA,UACA,gBACA,KAAA,UAAA,GACA,OACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAA2xL,uBACA,qBACA,SACA,QACA,SACA,WACAn+J,EAAAQ,iBAAAh0B,KAAA4xL,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAp+J,EAAAQ,iBAAAh0B,KAAA2xL,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,SACA,gBACA,SAGA3xL,KAAA8xL,0BACA,OACAt+J,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAA+xL,mBACA,SACAv+J,EAAAI,eAAA5zB,KAAA0xL,uBACA,WACAl+J,EAAAI,eAAA5zB,KAAA6xL,yBACA,YACAr+J,EAAAI,eAAA5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KAAAs1L,uBACA,gBACA,KAAA,UAAA,GACA,OACA9hK,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,WAGA5zB,KAAAu1L,uBAAA,YAAA,QAAA,OAAA/hK,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAw1L,0BACA,UACA,QACA,QACA,QACA,QACA,QACA,MACA,SACA,OACA,QACA,QACA,SAGAx1L,KAAAy1L,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,OACAjiK,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,eACA,UACA,OACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAu1L,uBACA,qBACA,SACA,QACA,SACA,WACA/hK,EAAAQ,iBAAAh0B,KAAAw1L,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAhiK,EAAAQ,iBAAAh0B,KAAAu1L,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,UAGAv1L,KAAA01L,0BACA,OACAliK,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAA21L,mBACA,SACAniK,EAAAI,eAAA5zB,KAAAs1L,uBACA,WACA9hK,EAAAI,eAAA5zB,KAAAy1L,yBACA,YACAjiK,EAAAI,eAAA5zB,KAAA01L,2BAGA11L,KAA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AAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA9jK,EAAAQ,iBAAAh0B,KAAAq3L,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,UAGAr3L,KAAAw3L,0BACA,OACAhkK,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAAy3L,mBACA,SACAjkK,EAAAI,eAAA5zB,KAAAo3L,uBACA,WACA5jK,EAAAI,eAAA5zB,KAAAu3L,yBACA,YACA/jK,EAAAI,eAAA5zB,KAAAw3L,2BAGAx3L,KAAA03L,gBACA,gBACAlkK,EAAAI,eAAA,UACA,OACAJ,EAAAM,iBACA,QACA,SACA,gBACA,SACA,YACA,UACA,cACA,UACA,WACA,UACA,eACA,UAGA9zB,KAAA23L,sBACA,OACAnkK,EAAAM,iBACA,QACA,SACA,UACA,UACA,WACA,WAGA9zB,KAAA43L,oBACA,UACApkK,EAAAI,eAAA5zB,KAAA03L,gBACA,UACAlkK,EAAAI,eAAA5zB,KAAA23L,uBAGA33L,KAAA63L,qBACA,OACArkK,EAAAM,iBACA,SACA,KAAA,QAAA,GACA,cACA,UACA,YACA,UACA,eACA,UACA,eACA,UAGA9zB,KAAA83L,mBAAA,eAAAtkK,EAAAI,eAAA5zB,KAAA63L,sBAEA73L,KAAAy1B,OAAAz1B,KAAA+3L,kBACA,YACAvkK,EAAA6qB,kBAAAr+C,KAAAw2L,sBACA,SACAhjK,EAAA6qB,kBAAAr+C,KAAA22L,kBACA,QACAnjK,EAAAQ,iBAAAh0B,KAAAi3L,mBACA,aACAzjK,EAAAQ,iBAAAh0B,KAAAm3L,sBACA,YACA3jK,EAAAQ,iBAAAh0B,KAAAy3L,mBACA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AA,GACA,OACA7mK,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,WAGA5zB,KAAAs6L,uBAAA,YAAA,QAAA,OAAA9mK,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAu6L,0BACA,UACA,QACA,QACA,QACA,QACA,QACA,MACA,SACA,OACA,QACA,QACA,SAGAv6L,KAAAw6L,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,OACAhnK,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,eACA,UACA,OACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAAs6L,uBACA,qBACA,SACA,QACA,SACA,WACA9mK,EAAAQ,iBAAAh0B,KAAAu6L,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACA/mK,EAAAQ,iBAAAh0B,KAAAs6L,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,UAGAt6L,KAAAy6L,0BACA,OACAjnK,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAA06L,mBACA,SACAlnK,EAAAI,eAAA5zB,KAAAq6L,uBACA,WACA7mK,EAAAI,eAAA5zB,KAAAw6L,yBACA,YACAhnK,EAAAI,eAAA5zB,KAAAy6L,2BAGAz6L,KAAA26L,gBACA,gBACAnnK,EAAAI,e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EAAAI,eAAAJ,EAAAM,kBACA,cACAN,EAAAI,eAAA5zB,KAAA4/L,4BAGA5/L,KAAA8/L,uBACA,gBACA,KAAA,UAAA,GACA,OACAtsK,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,QACA,SACA,gBACA,SACA,kBACAJ,EAAAI,eAAA,WAGA5zB,KAAA+/L,uBAAA,YAAA,QAAA,OAAAvsK,EAAAI,gBAAA,KAAA,UAAA,KAEA5zB,KAAAggM,0BACA,UACA,QACA,QACA,QACA,QACA,QACA,MACA,SACA,OACA,QACA,QACA,SAGAhgM,KAAAigM,yBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,yBACA,KAAA,UAAA,GACA,yBACA,KAAA,UAAA,GACA,OACAzsK,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,eACA,UACA,OACA,UACA,eACAN,EAAAQ,iBAAAh0B,KAAA+/L,uBACA,qBACA,SACA,QACA,SACA,WACAvsK,EAAAQ,iBAAAh0B,KAAAggM,0BACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,eACA,UACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,aACAxsK,EAAAQ,iBAAAh0B,KAAA+/L,uBACA,mBACA,SACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,iBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,gBACA,KAAA,UAAA,GACA,eACA,UAGA//L,KAAAkgM,0BACA,OACA1sK,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAAmgM,mBACA,SACA3sK,EAAAI,eAAA5zB,KAAA8/L,uBACA,WACAtsK,EAAAI,eAA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,KAAA+nM,yBAAA,SAAAv0K,EAAAI,eAAAJ,EAAAM,mBAEA9zB,KAAAgoM,sBACA,SACAx0K,EAAAI,eAAA5zB,KAAA2nM,sBACA,SACAn0K,EAAAI,eAAA5zB,KAAA4nM,uBACA,QACAp0K,EAAAI,eAAA5zB,KAAA6nM,sBACA,UACAr0K,EAAAI,eAAA5zB,KAAA8nM,wBACA,WACAt0K,EAAAI,eAAA5zB,KAAA+nM,0BAGA/nM,KAAAioM,yBACA,UACA,QACA,QACA,QACA,QACA,QACA,MACA,SACA,OACA,QACA,QACA,SAGAjoM,KAAAkoM,sBACA,gBACA,KAAA,UAAA,GACA,OACA10K,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,QACA,SACA,WACAJ,EAAAI,eAAA5zB,KAAAioM,yBACA,gBACA,SACA,kBACAz0K,EAAAI,eAAA,UACA,mBACA,QACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,iBACA,QACA,YACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAmoM,wBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,OACA30K,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,QACA,eACA,UAGA9zB,KAAAooM,yBACA,OACA50K,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,QACA,eACA,UAGA9zB,KAAAqoM,kBACA,SACA70K,EAAAI,eAAA5zB,KAAAkoM,sBACA,WACA10K,EAAAI,eAAA5zB,KAAAmoM,wBACA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UAAA,IACA,UACA,SAGA5zB,KAAA+tM,yBAAA,SAAAv6K,EAAAI,eAAAJ,EAAAM,mBAEA9zB,KAAAguM,sBACA,SACAx6K,EAAAI,eAAA5zB,KAAA6tM,sBACA,SACAr6K,EAAAI,eAAA5zB,KAAA8tM,uBACA,WACAt6K,EAAAI,eAAA5zB,KAAA+tM,0BAGA/tM,KAAAiuM,yBACA,UACA,QACA,QACA,QACA,QACA,QACA,MACA,SACA,OACA,QACA,QACA,SAGAjuM,KAAAkuM,sBACA,gBACA,KAAA,UAAA,GACA,OACA16K,EAAAM,iBACA,OACA,UACA,iBACAN,EAAAI,eAAA,UACA,WACAJ,EAAAI,eAAA5zB,KAAAiuM,yBACA,gBACA,SACA,kBACAz6K,EAAAI,eAAA,UACA,mBACA,QACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,iBACA,QACA,YACAJ,EAAAI,gBAAA,KAAA,UAAA,KAGA5zB,KAAAmuM,wBACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,OACA36K,EAAAM,iBACA,cACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,eACA,KAAA,UAAA,GACA,QACA,SACA,YACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,mBACA,KAAA,UAAA,GACA,eACA,MAAA,KAAA,UAAA,GAAA,GACA,gBACA,MAAA,KAAA,UAAA,GAAA,GACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,qBACA,KAAA,UAAA,GACA,qBACA,KAAA,UAAA,GACA,kBACA,KAAA,UAAA,GACA,cACA,UACA,mBACA,UACA,eACA,KAAA,UAAA,GACA,aACA,SAGA9zB,KAAAouM,yBACA,OACA56K,EAAAM,iBACA,WACA,UACA,QACA,SACA,WACA,KAAA,UAAA,GACA,cACA,UACA,WACA,QACA,OACA,SAGA9zB,KAAAquM,kBACA,SACA76K,EAAAI,eAAA5zB,KAAAkuM,sBACA,WACA16K,EAAAI,eAAA5zB,KAAAmuM,wBACA,YACA36K,EAAAI,eAAA5zB,KAAAouM,0BAGApuM,KAAAy1B,OAAAz1B,KAAAsuM,iBACA,YACA96K,EA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SAGA9zB,KAAAy7M,0BACA,WACAjoL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,YACApB,EAAAI,eAAA5zB,KAAAu7M,wBACA,OACA/nL,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,WACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAA07M,yBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA17M,KAAA27M,2BACA,WACAnoL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,YACApB,EAAAI,eAAA5zB,KAAAu7M,wBACA,OACA/nL,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,WACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,aACAN,EAAAI,eAAA5zB,KAAA07M,yBACA,gBACAloL,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA47M,uBACA,OACApoL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA67M,uBACA,WACAroL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,YACApB,EAAAI,eAAA5zB,KAAAu7M,wBACA,OACA/nL,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,WACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAA87M,yBACA,OACAtoL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAA+7M,gBACA,YACAvoL,EAAAI,eAAA5zB,KAAAw7M,mBACA,gBACAhoL,EAAAI,eAAA5zB,KAAAy7M,0BACA,oBACAjoL,EAAAI,eAAA5zB,KAAA27M,2BACA,gBACAnoL,EAAAI,eAAA5zB,KAAA47M,uBACA,gBACApoL,EAAAI,eAAA5zB,KAAA67M,uBACA,kBACAroL,EAAAI,eAAA5zB,KAAA87M,yBACA,WACAtoL,EAAA2B,oBACA,aACAn1B,KAAAohI,mBACA,cACA,WAKAn/F,GAAA,WACAjiC,KAAAg8M,wBAAA,QAAA,SAAA,YAAA,KAAA,UAAA,GAAA,WAAA,UAEAh8M,KAAAi8M,mBACA,WACAzoL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,YACApB,EAAAI,eAAA5zB,KAAAg8M,wBACA,OACAxoL,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,SAGA9zB,KAAAk8M,0BACA,WACA1oL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,YACApB,EAAAI,eAAA5zB,KAAAg8M,wBACA,OACAxoL,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAm8M,yBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGAn8M,KAAAo8M,2BACA,WACA5oL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,YACApB,EAAAI,eAAA5zB,KAAAg8M,wBACA,OACAxoL,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,aACAN,EAAAI,eAAA5zB,KAAAm8M,yBACA,gBACA3oL,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAq8M,uBACA,OACA7oL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAs8M,uBACA,WACA9oL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,YACApB,EAAAI,eAAA5zB,KAAAg8M,wBACA,OACAxoL,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAAu8M,yBACA,OACA/oL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAw8M,gBACA,YACAhpL,EAAAI,eAAA5zB,KAAAi8M,mBACA,gBACAzoL,EAAAI,eAAA5zB,KAAAk8M,0BACA,oBACA1oL,EAAAI,eAAA5zB,KAAAo8M,2BACA,gBACA5oL,EAAAI,eAAA5zB,KAAAq8M,uBACA,gBACA7oL,EAAAI,eAAA5zB,KAAAs8M,uBACA,kBACA9oL,EAAAI,eAAA5zB,KAAAu8M,yBACA,aACAv8M,KAAAohI,mBACA,cACA,WAKA79F,GAAA,WACAvjC,KAAAy8M,mBACA,WACAjpL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,cACApB,EAAAI,eAAA,UACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,SAGA9zB,KAAA08M,0BACA,WACAlpL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,cACApB,EAAAI,eAAA,UACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAA28M,yBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA38M,KAAA48M,2BACA,WACAppL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,cACApB,EAAAI,eAAA,UACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,aACAN,EAAAI,eAAA5zB,KAAA28M,yBACA,gBACAnpL,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA68M,uBACA,OACArpL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA88M,uBACA,WACAtpL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,cACApB,EAAAI,eAAA,UACA,cACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,OACAJ,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAA+8M,yBACA,OACAvpL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAg9M,gBACA,YACAxpL,EAAAI,eAAA5zB,KAAAy8M,mBACA,gBACAjpL,EAAAI,eAAA5zB,KAAA08M,0BACA,oBACAlpL,EAAAI,eAAA5zB,KAAA48M,2BACA,gBACAppL,EAAAI,eAAA5zB,KAAA68M,uBACA,gBACArpL,EAAAI,eAAA5zB,KAAA88M,uBACA,kBACAtpL,EAAAI,eAAA5zB,KAAA+8M,yBACA,aACA/8M,KAAAohI,mBACA,cACA,WAKAv8F,GAAA,WACA7kC,KAAAi9M,mBACA,WACAzpL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,SAGA9zB,KAAAk9M,0BACA,WACA1pL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAm9M,yBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGAn9M,KAAAo9M,2BACA,WACA5pL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,aACAN,EAAAI,eAAA5zB,KAAAm9M,yBACA,gBACA3pL,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAq9M,uBACA,OACA7pL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAs9M,uBACA,WACA9pL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAAu9M,yBACA,OACA/pL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAw9M,gBACA,YACAhqL,EAAAI,eAAA5zB,KAAAi9M,mBACA,gBACAzpL,EAAAI,eAAA5zB,KAAAk9M,0BACA,oBACA1pL,EAAAI,eAAA5zB,KAAAo9M,2BACA,gBACA5pL,EAAAI,eAAA5zB,KAAAq9M,uBACA,gBACA7pL,EAAAI,eAAA5zB,KAAAs9M,uBACA,kBACA9pL,EAAAI,eAAA5zB,KAAAu9M,yBACA,aACAv9M,KAAAohI,mBACA,cACA,WAKAj7F,GAAA,WACAnmC,KAAAy9M,mBACA,WACAjqL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,SAGA9zB,KAAA09M,0BACA,WACAlqL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAA29M,yBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA39M,KAAA49M,2BACA,WACApqL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,aACAN,EAAAI,eAAA5zB,KAAA29M,yBACA,gBACAnqL,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA69M,uBACA,OACArqL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA89M,uBACA,WACAtqL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAA+9M,yBACA,OACAvqL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAg+M,gBACA,YACAxqL,EAAAI,eAAA5zB,KAAAy9M,mBACA,gBACAjqL,EAAAI,eAAA5zB,KAAA09M,0BACA,oBACAlqL,EAAAI,eAAA5zB,KAAA49M,2BACA,gBACApqL,EAAAI,eAAA5zB,KAAA69M,uBACA,gBACArqL,EAAAI,eAAA5zB,KAAA89M,uBACA,kBACAtqL,EAAAI,eAAA5zB,KAAA+9M,yBACA,aACA/9M,KAAAohI,mBACA,cACA,WAKA35F,GAAA,WACAznC,KAAAi+M,mBACA,WACAzqL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,SAGA9zB,KAAAk+M,0BACA,WACA1qL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAm+M,yBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGAn+M,KAAAo+M,2BACA,WACA5qL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,aACAN,EAAAI,eAAA5zB,KAAAm+M,yBACA,gBACA3qL,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAq+M,uBACA,OACA7qL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAs+M,uBACA,WACA9qL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,cACAN,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAAu+M,yBACA,OACA/qL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAw+M,gBACA,YACAhrL,EAAAI,eAAA5zB,KAAAi+M,mBACA,gBACAzqL,EAAAI,eAAA5zB,KAAAk+M,0BACA,oBACA1qL,EAAAI,eAAA5zB,KAAAo+M,2BACA,gBACA5qL,EAAAI,eAAA5zB,KAAAq+M,uBACA,gBACA7qL,EAAAI,eAAA5zB,KAAAs+M,uBACA,kBACA9qL,EAAAI,eAAA5zB,KAAAu+M,yBACA,aACAv+M,KAAAohI,mBACA,cACA,WAKAr4F,GAAA,WACA/oC,KAAAy+M,mBACA,WACAjrL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,SAGA9zB,KAAA0+M,0BACA,WACAlrL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAA2+M,yBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA3+M,KAAA4+M,2BACA,WACAprL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,aACAN,EAAAI,eAAA5zB,KAAA2+M,yBACA,gBACAnrL,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA6+M,uBACA,OACArrL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA8+M,uBACA,WACAtrL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,UACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAA++M,yBACA,OACAvrL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAg/M,gBACA,YACAxrL,EAAAI,eAAA5zB,KAAAy+M,mBACA,gBACAjrL,EAAAI,eAAA5zB,KAAA0+M,0BACA,oBACAlrL,EAAAI,eAAA5zB,KAAA4+M,2BACA,gBACAprL,EAAAI,eAAA5zB,KAAA6+M,uBACA,gBACArrL,EAAAI,eAAA5zB,KAAA8+M,uBACA,kBACAtrL,EAAAI,eAAA5zB,KAAA++M,yBACA,aACA/+M,KAAAohI,mBACA,cACA,WAKA/2F,GAAA,WACArqC,KAAAi/M,mBACA,WACAzrL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,SAGA9zB,KAAAk/M,0BACA,WACA1rL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAm/M,uBACA,OACA3rL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAAo/M,uBACA,WACA5rL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,WACA,SACA,OACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAAq/M,yBACA,OACA7rL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAs/M,gBACA,YACA9rL,EAAAI,eAAA5zB,KAAAi/M,mBACA,gBACAzrL,EAAAI,eAAA5zB,KAAAk/M,0BACA,gBACA1rL,EAAAI,eAAA5zB,KAAAm/M,uBACA,gBACA3rL,EAAAI,eAAA5zB,KAAAo/M,uBACA,kBACA5rL,EAAAI,eAAA5zB,KAAAq/M,yBACA,aACAr/M,KAAAohI,mBACA,cACA,WAKAz1F,GAAA,WACA3rC,KAAAu/M,mBACA,WACA/rL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,OACA,SAGA9zB,KAAAw/M,0BACA,WACAhsL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAy/M,uBACA,OACAjsL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,mBAGA9zB,KAAA0/M,uBACA,WACAlsL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,OACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAA2/M,yBACA,OACAnsL,EAAAM,iBACA,YACA,SACA,WACA,QACA,WACAN,EAAAI,eAAAJ,EAAAM,kBACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAA4/M,gBACA,YACApsL,EAAAI,eAAA5zB,KAAAu/M,mBACA,gBACA/rL,EAAAI,eAAA5zB,KAAAw/M,0BACA,gBACAhsL,EAAAI,eAAA5zB,KAAAy/M,uBACA,gBACAjsL,EAAAI,eAAA5zB,KAAA0/M,uBACA,kBACAlsL,EAAAI,eAAA5zB,KAAA2/M,yBACA,aACA3/M,KAAAohI,mBACA,cACA,WAKAn0F,GAAA,WACAjtC,KAAA6/M,mBACA,WACArsL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,OACA,SAGA9zB,KAAA8/M,0BACA,WACAtsL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAA+/M,uBAAA,OAAAvsL,EAAAM,iBAAA,YAAA,SAAA,WAAA,SAEA9zB,KAAAggN,uBACA,WACAxsL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,OACA,QACA,YACA,SACA,WACA,QACA,SACAN,EAAAM,iBACA,cACA,KAAA,UAAA,IAGA9zB,KAAAigN,yBACA,OACAzsL,EAAAM,iBACA,YACA,SACA,WACA,QACA,iBACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,WAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAkgN,gBACA,YACA1sL,EAAAI,eAAA5zB,KAAA6/M,mBACA,gBACArsL,EAAAI,eAAA5zB,KAAA8/M,0BACA,gBACAtsL,EAAAI,eAAA5zB,KAAA+/M,uBACA,gBACAvsL,EAAAI,eAAA5zB,KAAAggN,uBACA,kBACAxsL,EAAAI,eAAA5zB,KAAAigN,yBACA,aACAjgN,KAAAohI,mBACA,cACA,WAKA7yF,GAAA,WACAvuC,KAAAmgN,mBACA,WACA3sL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,OACA,SAGA9zB,KAAAogN,0BACA,WACA5sL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAqgN,uBACA,OACA7sL,EAAAM,iBACA,YACA,SACA,cACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,eACAN,EAAAM,iBACA,WACA,SAGA9zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAsgN,gBACA,YACA9sL,EAAAI,eAAA5zB,KAAAmgN,mBACA,gBACA3sL,EAAAI,eAAA5zB,KAAAogN,0BACA,gBACA5sL,EAAAI,eAAA5zB,KAAAqgN,uBACA,aACArgN,KAAAohI,mBACA,cACA,WAKAvxF,GAAA,WACA7vC,KAAAugN,mBACA,WACA/sL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,SAGA9zB,KAAAwgN,0BACA,WACAhtL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAygN,uBACA,OACAjtL,EAAAM,iBACA,YACA,SACA,cACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,eACAN,EAAAM,iBACA,WACA,SAGA9zB,KAAAy1B,OAAAz1B,KAAA0gN,gBACA,YACAltL,EAAAI,eAAA5zB,KAAAugN,mBACA,gBACA/sL,EAAAI,eAAA5zB,KAAAwgN,0BACA,gBACAhtL,EAAAI,eAAA5zB,KAAAygN,yBAKAtvK,EAAA,WACAnxC,KAAA2gN,kBACA,WACAntL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,SAGA9zB,KAAA4gN,yBACA,WACAptL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAA6gN,sBACA,OACArtL,EAAAM,iBACA,YACA,SACA,cACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,eACAN,EAAAM,iBACA,WACA,SAGA9zB,KAAAy1B,OAAAz1B,KAAA8gN,eACA,YACAttL,EAAAI,eAAA5zB,KAAA2gN,kBACA,gBACAntL,EAAAI,eAAA5zB,KAAA4gN,yBACA,gBACAptL,EAAAI,eAAA5zB,KAAA6gN,wBAKApuK,EAAA,WACAzyC,KAAA+gN,kBACA,WACAvtL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,SAGA9zB,KAAAghN,yBACA,WACAxtL,EAAAoB,oBACA,eACApB,EAAAI,eAAAJ,EAAAoB,qBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAihN,sBACA,OACAztL,EAAAM,iBACA,YACA,SACA,cACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,eACAN,EAAAM,iBACA,WACA,SAGA9zB,KAAAy1B,OAAAz1B,KAAAkhN,eACA,YACA1tL,EAAAI,eAAA5zB,KAAA+gN,kBACA,gBACAvtL,EAAAI,eAAA5zB,KAAAghN,yBACA,gBACAxtL,EAAAI,eAAA5zB,KAAAihN,wBAKAltK,EAAA,WACA/zC,KAAAmhN,kBACA,WACA3tL,EAAAoB,oBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,SAGA9zB,KAAAohN,yBACA,WACA5tL,EAAAoB,oBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,SACA,KAAA,QAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAqhN,sBACA,OACA7tL,EAAAM,iBACA,YACA,SACA,cACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,eACAN,EAAAM,iBACA,WACA,SAGA9zB,KAAAy1B,OAAAz1B,KAAAshN,eACA,YACA9tL,EAAAI,eAAA5zB,KAAAmhN,kBACA,gBACA3tL,EAAAI,eAAA5zB,KAAAohN,yBACA,gBACA5tL,EAAAI,eAAA5zB,KAAAqhN,wBAKAjsK,EAAA,WACAp1C,KAAAuhN,kBACA,WACA/tL,EAAAoB,oBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,SAGA9zB,KAAAwhN,yBACA,WACAhuL,EAAAoB,oBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,UACA,OACA,UACA,OACA,UACA,QACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAAyhN,sBACA,OACAjuL,EAAAM,iBACA,YACA,SACA,cACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,eACAN,EAAAM,iBACA,WACA,SAGA9zB,KAAAy1B,OAAAz1B,KAAA0hN,eACA,YACAluL,EAAAI,eAAA5zB,KAAAuhN,kBACA,gBACA/tL,EAAAI,eAAA5zB,KAAAwhN,yBACA,gBACAhuL,EAAAI,eAAA5zB,KAAAyhN,wBAKAjrK,EAAA,WACAx2C,KAAA2hN,kBACA,WACAnuL,EAAAoB,oBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,UACA,OACA,SACA,OACA,SACA,QACA,SACA,OACA,SAGA9zB,KAAA4hN,yBACA,WACApuL,EAAAoB,oBACA,OACApB,EAAAM,iBACA,YACA,KAAA,UAAA,GACA,YACA,KAAA,UAAA,GACA,QACA,UACA,OACA,SACA,OACA,SACA,QACA,SACA,OACA,QACA,eACAN,EAAAM,kBAGA9zB,KAAA6hN,sBACA,OACAruL,EAAAM,iBACA,YACA,SACA,cACA,KAAA,UAAA,GACA,iBACA,KAAA,UAAA,GACA,eACAN,EAAAM,iBACA,WACA,SAGA9zB,KAAAy1B,OAAAz1B,KAAA8hN,eACA,YACAtuL,EAAAI,eAAA5zB,KAAA2hN,kBACA,gBACAnuL,EAAAI,eAAA5zB,KAAA4hN,yBACA,gBACApuL,EAAAI,eAAA5zB,KAAA6hN,wBAKAlqK,EAAA,WACA33C,KAAA+hN,kBACA,WACAvuL,EAAAoB,oBACA,OACApB,EAAAM,iBACA,YACA,KAAA,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EAAAI,eAAA5zB,KAAAw1N,gBACA,aACAx1N,KAAAohI,mBACA,aACA,WAKAr4F,GAAA,WACA/oC,KAAA01N,qBACA,WACAliM,EAAAoB,oBACA,cACA,UACA,QACA,SACA,aACA,KAAA,UAAA,IAGA50B,KAAA21N,wBACA,OACA,QACA,SACA,QACA,QACA,QACA,eACA,QACA,YACA,QACA,SACA,QACA,cACA,KAAA,UAAA,GACA,cACA,UACA,aACA,KAAA,UAAA,GACA,YACA,MAAA,KAAA,UAAA,GAAA,GACA,QACA,QACA,aACA,SACA,aACAniM,EAAAI,eAAA5zB,KAAA01N,qBACA,WACAliM,EAAAQ,iBAAAh0B,KAAA01N,sBAGA11N,KAAA41N,mBACA,QACApiM,EAAAI,eAAA,SACA,cACA,KAAA,SAAA,GACA,OACA,QACA,aACAJ,EAAAI,eAAA,WAGA5zB,KAAA61N,wBAAA,YAAAriM,EAAAI,eAAA5zB,KAAA41N,mBAAA,QAAA,UAEA51N,KAAA81N,mBACA,cACAtiM,EAAAoB,oBACA,QACA,SACA,gBACApB,EAAAI,eAAA5zB,KAAA21N,wBACA,YACAniM,EAAAM,iBACA,YACAN,EAAAQ,iBAAAh0B,KAAA61N,yBAGA71N,KAAA+1N,4BAAA,QAAA,SAAA,SAAA,SAEA/1N,KAAAg2N,2BAAA,UAAA,UAAA,UAAA,UAAA,OAAA,WAEAh2N,KAAAi2N,gBACA,YACA,SACA,YACA,KAAA,SAAA,GACA,cACA,UACA,OACA,QACA,WACA,SACA,SACA,KAAA,UAAA,GACA,OACA,UACA,QACAziM,EAAAI,eAAA,SACA,aACAJ,EAAAI,eAAA5zB,KAAA+1N,4BACA,cACAviM,EAAAI,eAAA5zB,KAAAg2N,2BACA,aACAxiM,EAAAI,eAAA,UACA,WACAJ,EAAAI,gBAAA,KAAA,UAAA,IACA,UACA,UAGA5zB,KAAAohI,oBAAA,iBAAA5tG,EAAAI,eAAA,UAEA5zB,KAAAy1B,OAAAz1B,KAAAk2N,iBACA,eACA1iM,EAAAI,eAAA5zB,KAAA81N,mBACA,YACAtiM,EAAAI,eAAA5zB,KAAAi2N,gBACA,aACAj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","file":"T3D.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports={\n  \"name\": \"t3d-lib\",\n  \"version\": \"2.2.0\",\n  \"scripts\": {\n    \"build\": \"gulp\",\n    \"version\": \"npm run build; git add build\",\n    \"lint\": \"eslint src\",\n    \"format\": \"prettier --write 'src/**/*.js'\",\n    \"format:check\": \"prettier --check 'src/**/*.js'\"\n  },\n  \"dependencies\": {\n    \"DataStream.js\": \"github:kig/DataStream.js\"\n  },\n  \"devDependencies\": {\n    \"browserify\": \"^16.5.1\",\n    \"eslint\": \"^7.9.0\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-sourcemaps\": \"^2.6.5\",\n    \"gulp-uglify\": \"^3.0.2\",\n    \"gulplog\": \"^1.0.0\",\n    \"prettier\": \"^2.1.2\",\n    \"uglify-es\": \"^3.3.9\",\n    \"vinyl-buffer\": \"^1.0.1\",\n    \"vinyl-source-stream\": \"^2.0.0\"\n  },\n  \"main\": \"src/T3DLib.js\",\n  \"prettier\": {\n    \"useTabs\": false,\n    \"trailingComma\": \"es5\",\n    \"tabWidth\": 2,\n    \"printWidth\": 120\n  }\n}","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst MathUtils = require(\"../util/MathUtils\");\n\n/**\n * @file The ArchiveParser module is a set of helper tools to correctly read the Archive.\n * @namespace ArchiveParser\n */\n\n/**\n *    All in one function to read a GW2.dat file and parse all the needed informations to work with it\n *\n * @memberof ArchiveParser\n * @param {File} file\n * @returns {Promise<{archiveHeader: ArchiveHeader, metaTable: MetaTable, indexTable: IndexTable}>}\n */\nasync function readArchive(file) {\n  let archiveHeader = parseANDatHeader((await getFilePart(file, 0, 40)).ds);\n  let mftData = parseMFTTable((await getFilePart(file, archiveHeader.mftOffset, archiveHeader.mftSize)).ds);\n  let { ds, len } = await getFilePart(file, mftData.mftIndexOffset, mftData.mftIndexSize);\n  let indexTable = parseMFTIndex(ds, len);\n\n  return {\n    archiveHeader: archiveHeader,\n    metaTable: mftData.table,\n    indexTable: indexTable,\n  };\n}\n\n/**\n * The header of the archive.\n * @typedef {Object} ArchiveHeader\n * @property {number} version\n * @property {number} magic\n * @property {number} headerSize\n * @property {number} chunkSize\n * @property {number} crc\n * @property {number} mftOffset\n * @property {number} mftSize\n * @property {number} flags\n */\n\n/**\n *   Parse the main information about the archive like format version, positions of information tables, crc etc...\n *\n * @memberof ArchiveParser\n * @param {DataStream} ds\n * @returns {ArchiveIndex} Returns undefined if the header couldn't be parsed\n */\nfunction parseANDatHeader(ds) {\n  let header = {};\n\n  // Header parsing\n  header.version = ds.readUint8();\n  header.magic = ds.readString(3);\n  header.headerSize = ds.readUint32();\n  ds.seek(ds.position + 4); // Skip uint32\n  header.chunkSize = ds.readUint32();\n  header.crc = ds.readUint32();\n  ds.seek(ds.position + 4); // Skip uint32\n  header.mftOffset = MathUtils.arr32To64([ds.readUint32(), ds.readUint32()]);\n  header.mftSize = ds.readUint32();\n  header.flags = ds.readUint32();\n  // End header parsing\n\n  // Check MAGIC\n  if (header.magic !== \"AN\\u001A\") {\n    T3D.Logger.log(T3D.Logger.TYPE_ERROR, \"ANDat header is not valid\", header.magic);\n    return undefined;\n  }\n\n  T3D.Logger.log(T3D.Logger.TYPE_DEBUG, \"Loaded Main .dat header\");\n\n  return header;\n}\n\n/**\n * The array containing all the meta information concerning the contained files\n * @typedef {Array<{offset: number, size: number, compressed: number, crc: number}>} MetaTable\n */\n\n/**\n *   Parse the main information table that contains the offset, size, compression flags and crc\n *\n * @memberof ArchiveParser\n * @param {Datastream}  ds\n * @returns {{header: {magic: String, nbOfEntries: number}, table: MetaTable, mftIndexOffset: number, mftIndexSize: number}|undefined}\n *   Returns undefined if it couldn't parse the table\n */\nfunction parseMFTTable(ds) {\n  // Parse the table header\n  let header = {};\n  header.magic = ds.readString(4);\n  ds.seek(ds.position + 8); // Skip uint64\n  header.nbOfEntries = ds.readUint32();\n  ds.seek(ds.position + 4 + 4); // Skip uint32 * 2\n\n  // check MAGIC\n  if (header.magic !== \"Mft\\u001A\") {\n    T3D.Logger.log(T3D.Logger.TYPE_ERROR, \"MFTTable header is not valid\", header.magic);\n    return undefined;\n  }\n\n  // Where we put all the parsed data\n  // We don't pre-alloc anymore since not having the data aligned together procs too many\n  // cache misses during a fullscan\n  let fullTable = [];\n\n  // Go through the table\n  for (let i = 1; i < header.nbOfEntries; i++) {\n    let item = {};\n    item[\"offset\"] = MathUtils.arr32To64([ds.readUint32(), ds.readUint32()]);\n    item[\"size\"] = ds.readUint32();\n    item[\"compressed\"] = ds.readUint16();\n    ds.seek(ds.position + 4 + 2); // Skip uint16 + uint32\n    item[\"crc\"] = ds.readUint32();\n    fullTable[i] = item;\n  }\n\n  T3D.Logger.log(T3D.Logger.TYPE_DEBUG, \"Loaded MFTTable\");\n\n  return {\n    header: header,\n    table: fullTable,\n    // Register the MFTIndex table position and size\n    mftIndexOffset: fullTable[2].offset,\n    mftIndexSize: fullTable[2].size,\n  };\n}\n\n/**\n * The array linking all the file indexes to their respective files\n * @typedef {Array<number>} IndexTable\n */\n\n/**\n *   This function used to be much more complex with the use of\n *   a \"fileId\" which in the end was just the equivalent of\n *   MFTbaseIds[mftId].sort().reverse()[0] (aka the bigger baseId found)\n *\n * @memberof ArchiveParser\n * @param {DataStream} ds\n * @param {number} size\n * @returns {IndexTable}\n */\nfunction parseMFTIndex(ds, size) {\n  let length = size / 8;\n\n  let indexTable = [];\n\n  for (let i = 0; i < length; i++) {\n    // Parse table\n    let id = ds.readUint32();\n    let mftIndex = ds.readUint32();\n    // Store the values\n    indexTable[id] = mftIndex;\n  }\n\n  T3D.Logger.log(T3D.Logger.TYPE_DEBUG, \"Finished indexing MFT\");\n\n  return indexTable;\n}\n\n/**\n *   Get a chunk of the specified file. Used mainly to take parts of the Archive before parsing.\n *\n * @memberof ArchiveParser\n * @param {File} file\n * @param {number} offset\n * @param {number} length\n * @returns {Promise<{ds: DataStream, len: number}>}\n */\nfunction getFilePart(file, offset, length) {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n\n    reader.onerror = reject;\n\n    reader.onload = function (fileEvent) {\n      let buffer = fileEvent.target.result;\n      let ds = new DataStream(buffer);\n      ds.endianness = DataStream.LITTLE_ENDIAN;\n      // Pass data stream and data length to callback function\n      resolve({ ds: ds, len: length });\n    };\n\n    // Slicing a File is just reducing the scope of the ArrayBuffer, but doesn't load anything in memory.\n    reader.readAsArrayBuffer(file.slice(offset, offset + length));\n  });\n}\n\nmodule.exports = {\n  readArchive: readArchive,\n  parseANDatHeader: parseANDatHeader,\n  parseMFTTable: parseMFTTable,\n  parseMFTIndex: parseMFTIndex,\n  getFilePart: getFilePart,\n};\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Organized thread pool of extractors\n * @class DataReader\n */\nclass DataReader {\n  /**\n   * @constructor\n   * @param {Object} settings\n   * @param {number} settings.workersNb Amount of concurrent spawned workers\n   * @param {string} settings.workerPath Path to the worker script\n   */\n  constructor(settings) {\n    this._settings = settings;\n    this._workerPool = [];\n    this._workerLoad = [];\n    this._inflateCallbacks = [];\n    for (let i = 0; i < settings.workersNb; i++) {\n      this._startWorker(settings.workerPath);\n    }\n  }\n\n  /**\n   * @param {DataStream} ds\n   * @param {number} size\n   * @param {number} mftId\n   * @param {boolean} [isImage] Parses the output as a dxt texture\n   * @param {number} [capLength] Output size\n   * @returns {Promise<{buffer: ArrayBuffer, dxtType: number, imageWidth: number, imageHeight: number}>}\n   */\n  inflate(ds, size, mftId, isImage, capLength) {\n    return new Promise((resolve, reject) => {\n      let arrayBuffer = ds.buffer;\n\n      // If no capLength then inflate the whole file\n      if (!capLength || capLength < 0) {\n        capLength = 0;\n      }\n\n      // Buffer length size check\n      if (arrayBuffer.byteLength < 12) {\n        T3D.Logger.log(\n          T3D.Logger.TYPE_WARNING,\n          `not inflating, length is too short (${arrayBuffer.byteLength})`,\n          mftId\n        );\n        reject(new Error(\"Couldn't inflate \" + mftId + \" (mftId)\"));\n        return;\n      }\n\n      // Register the callback\n      if (this._inflateCallbacks[mftId]) {\n        this._inflateCallbacks[mftId].push({\n          resolve: resolve,\n          reject: reject,\n        });\n\n        /// No need to make another call, just wait for callback event to fire.\n        return;\n      } else {\n        this._inflateCallbacks[mftId] = [{ resolve: resolve, reject: reject }];\n      }\n\n      // Add the load to the worker\n      let workerId = this._getBestWorkerIndex();\n      this._workerLoad[workerId] += 1;\n      this._workerPool[workerId].postMessage([mftId, arrayBuffer, isImage === true, capLength]);\n    });\n  }\n\n  // Initialization function for creating a new worker (thread)\n  _startWorker(path) {\n    let self = this;\n    let worker = new Worker(path);\n    let selfWorkerId = this._workerPool.push(worker) - 1;\n    if (this._workerLoad.push(0) !== selfWorkerId + 1) {\n      throw new Error(\"WorkerLoad and WorkerPool don't have the same length\");\n    }\n\n    worker.onmessage = function (message_event) {\n      let mftId;\n      // Remove load\n      self._workerLoad[selfWorkerId] -= 1;\n\n      // If error\n      if (typeof message_event.data === \"string\") {\n        T3D.Logger.log(T3D.Logger.TYPE_WARNING, \"Inflater threw an error\", message_event.data);\n        mftId = message_event.data.split(\":\")[0];\n        for (let callback of self._inflateCallbacks[mftId]) {\n          callback.reject();\n        }\n      } else {\n        mftId = message_event.data[0];\n        // On success\n        if (self._inflateCallbacks[mftId]) {\n          for (let callback of self._inflateCallbacks[mftId]) {\n            let data = message_event.data;\n            // Array buffer, dxtType, imageWidth, imageHeight\n            callback.resolve({\n              buffer: data[1],\n              dxtType: data[2],\n              imageWidth: data[3],\n              imageHeight: data[4],\n            });\n          }\n          // Remove triggered listeners\n          self._inflateCallbacks[mftId] = null;\n        }\n\n        // Unknown error\n        else {\n          T3D.Logger.log(T3D.Logger.TYPE_ERROR, \"Inflater threw an error\", message_event.data);\n        }\n      }\n    };\n  }\n\n  // Get the worker with the less load\n  _getBestWorkerIndex() {\n    return this._workerLoad.indexOf(Math.min(...this._workerLoad));\n  }\n}\n\nmodule.exports = DataReader;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst GW2File = require(\"../format/file/GW2File.js\");\n\n/**\n * @namespace FileTypes\n */\n\nlet FileTypes = {};\n\n/**\n * Parse the beginning of a file to find its type\n *\n * @memberof FileTypes\n * @param {DataStream} ds\n * @return {number}\n */\nFileTypes.getFileType = function (ds) {\n  let first4 = ds.readCString(4);\n\n  // Parse textures\n  switch (first4) {\n    case \"ATEC\":\n      return \"TEXTURE_ATEC\";\n    case \"ATEP\":\n      return \"TEXTURE_ATEP\";\n    case \"ATET\":\n      return \"TEXTURE_ATET\";\n    case \"ATEU\":\n      return \"TEXTURE_ATEU\";\n    case \"ATEX\":\n      return \"TEXTURE_ATEX\";\n    case \"ATTX\":\n      return \"TEXTURE_ATTX\";\n  }\n\n  if (first4.indexOf(\"DDS\") === 0) return \"TEXTURE_DDS\";\n\n  if (first4.indexOf(\"PNG\") === 1) return \"TEXTURE_PNG\";\n\n  if (first4.indexOf(\"RIFF\") === 0) return \"TEXTURE_RIFF\";\n\n  if (first4.indexOf(\"YUI\") === 0) return \"TEXT_YUI\";\n\n  // PackFiles\n  if (first4.indexOf(\"PF\") === 0) {\n    let file = new GW2File(ds, 0, true); /// true for \"plz no load chunkz\"\n    return \"PF_\" + file.header.type;\n  }\n\n  // Binaries\n  if (first4.indexOf(\"MZ\") === 0) return \"BINARIES\";\n\n  // Strings\n  if (first4.indexOf(\"strs\") === 0) return \"STRINGS\";\n\n  // Raw asnd chunk (without pack file)\n  if (first4.indexOf(\"asnd\") === 0) return \"CHUNK_ASND\";\n\n  // TODO: parse all datastream and if all bytes are valid unicode symbols then\n  // return TEXT_UNKNOWN;\n\n  // Unknown\n  return \"UNKNOWN\";\n};\n\nmodule.exports = FileTypes;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst ArchiveParser = require(\"./ArchiveParser\");\nconst PersistantStore = require(\"./PersistantStore\");\nconst DataReader = require(\"./DataReader\");\nconst MapFileList = require(\"../MapFileList\");\nconst FileTypes = require(\"./FileTypes\");\n\n/**\n * A statefull class that handles reading and inflating data from a local GW2 dat file.\n *\n * @param {{workerPath: String, workersNb: number, noIndexedDB: boolean}} settings\n *   * workerPath: the path to the t3dtools worker script file.\n *   * workersNb: amount of threads spawned for decompression.\n *   * noIndexedDB: Do not use indexedDB (persistant storage, default is true)\n */\nclass LocalReader {\n  constructor(settings) {\n    this._settings = settings;\n\n    /**\n     * @private\n     * @type {DataReader}\n     */\n    this._dataReader = new DataReader(settings);\n\n    /**\n     * @private\n     * @type {PersistantStore}\n     */\n    this._persistantStore;\n\n    /**\n     * @private\n     * @type {File}\n     */\n    this._file = undefined;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this._indexTable = [];\n\n    /**\n     * @private\n     * @type {Array<{offset: number, size: number, compressed: number, crc: number}>}\n     */\n    this._fileMetaTable = [];\n\n    if (settings.noIndexedDB !== false) {\n      this._persistantStore = new PersistantStore();\n    }\n  }\n\n  /**\n   *   Asynchronously loads the archive by parsing its file index and header.\n   *\n   * @param {File} file\n   * @returns {Promise}\n   */\n  async openArchive(file) {\n    let { metaTable, indexTable } = await ArchiveParser.readArchive(file);\n    this._fileMetaTable = metaTable;\n    this._indexTable = indexTable;\n    this._file = file;\n  }\n\n  /**\n   *   Gets MFT index by baseId\n   *\n   * @param  {Number} baseId   A base Id\n   * @return {Number}          MFT index\n   */\n  getFileIndex(baseId) {\n    return this._indexTable[baseId];\n  }\n\n  /**\n   *   \"Meta\" informations to deal with files in the archive.\n   * @typedef     {Object}    FileMetaData\n   * @property    {number}    offset\n   * @property    {number}    size\n   * @property    {number}    compressed\n   * @property    {number}    crc\n   */\n\n  /**\n   *   Returns the metadata of a file stored in the archive\n   *\n   * @param {number} mftId Mft index of the file\n   * @returns {FileMetaData} Metadata informations\n   */\n  getFileMeta(mftId) {\n    return this._fileMetaTable[mftId];\n  }\n\n  /**\n   *   Fetch a file and uncompress it if needed / required.\n   *\n   * @param {number} mftId File's archive ID\n   * @param {boolean} [isImage] Try to read the data as a Dxt texture.\n   * @param {boolean} [raw] Force no decompression.\n   * @param {number} [fileLength] Slice the uncompressed file.\n   * @param {number} [extractLength] Slice the decompression.\n   * @returns {Promise<{buffer: ArrayBuffer, dxtType: number|undefined, imageWidth: number|undefined, imageHeight: number|undefined}>}\n   */\n  async readFile(mftId, isImage, raw, fileLength, extractLength) {\n    //let buffer, dxtType, imageWidth, imageHeight;\n    let meta = this.getFileMeta(mftId);\n    if (!meta) throw new Error(\"Unexistant file\");\n\n    // Slice up the data\n    let { ds, len } = await ArchiveParser.getFilePart(this._file, meta.offset, fileLength || meta.size);\n\n    // If needed we decompress, if not we keep raw\n    if (meta.compressed || raw !== false) {\n      let data;\n      await this._dataReader\n        .inflate(ds, len, mftId, isImage, extractLength || 0)\n        .then((result) => {\n          data = result;\n        })\n        .catch(() => {\n          data = {\n            buffer: undefined,\n            dxtType: undefined,\n            imageWidth: undefined,\n            imageHeight: undefined,\n          };\n        });\n      return data;\n    } else return { buffer: ds.buffer };\n  }\n\n  /**\n   *   Scans asynchronously the types of all the files listed in the archive.\n   *   Uses persistant store to cache and speed up a rescan.\n   *\n   * @param {Array<{baseId: number, size: number, crc: number, fileType: string}>|undefined} oldFileList\n   *   Way for platform not supporting indexDB to provide their own persistant storage.\n   * @returns {Promise<Array<FileItem>>}\n   */\n  async readFileList(oldFileList) {\n    let self = this;\n\n    let persistantList = oldFileList || [];\n    let persistantId;\n\n    // Load previously saved data\n    if (this._persistantStore) {\n      let lastListing = await this._persistantStore.getLastListing(this._file.name);\n      persistantList = lastListing.array;\n      // If the last scan was not completed then we will just update it..\n      if (!lastListing.complete) {\n        persistantId = lastListing.key;\n      }\n    }\n\n    // Create a list of all the baseIds we need to inspect\n    let iterateList = Object.keys(self._indexTable).map((i) => Number(i));\n    for (let index in persistantList) {\n      if (!(index in self._indexTable)) iterateList.push(index);\n    }\n\n    // Helps us to know when we need to update the persistant store\n    // let updatePersistant = false;\n\n    // Spawn the decompression tasks\n    let taskArray = [];\n    for (let i = 0; i < 1; i++) {\n      taskArray[i] = Promise.resolve({ task: i });\n    }\n\n    let persistantNeedsUpdate = false;\n\n    // Iterate through the array\n    for (let index in iterateList) {\n      let baseId = iterateList[index];\n\n      // First use a synchronous function to know if we need to scan the file\n      let result = this._needsScan(baseId, persistantList);\n      if (result.scan === true) {\n        let taskId = (await Promise.race(taskArray)).task;\n        taskArray[taskId] = this._readFileType(baseId).then((scanResult) => {\n          // Put the result into our persistant storage\n          persistantList[baseId] = {\n            baseId: baseId,\n            size: scanResult.size,\n            crc: scanResult.crc,\n            fileType: scanResult.fileType,\n          };\n          return { task: taskId };\n        });\n      }\n      if (result.change === \"removed\") {\n        // Update the persistant storage\n        delete persistantList[baseId];\n      }\n\n      // Handle persistant storage update\n      if (result.change !== \"none\") persistantNeedsUpdate = true;\n\n      // Tasks to do only every %\n      if (index % Math.floor(iterateList.length / 100) === 0) {\n        // Print progress\n        T3D.Logger.log(T3D.Logger.TYPE_PROGRESS, \"Finding types\", index / Math.floor(iterateList.length / 100));\n\n        // Update the persistant storage if needed\n        if (self._persistantStore && persistantNeedsUpdate) {\n          persistantNeedsUpdate = false;\n          self._persistantStore\n            .putListing(persistantId, persistantList, self._file.name, false)\n            .then((res) => (persistantId = res));\n        }\n      }\n    }\n\n    await Promise.all(taskArray).then(() => {\n      // Finally update the listing as complete\n      if (self._persistantStore) {\n        self._persistantStore.putListing(persistantId, persistantList, self._file.name, true);\n      }\n    });\n    this._persistantData = persistantList;\n    return this.getFileList();\n  }\n\n  /**\n   * @typedef {Object} MapItem\n   * @property {string} name\n   * @property {string} category\n   * @property {number} baseId\n   */\n\n  /**\n   *   Returns a list of all the maps with their name and category.\n   *   Uncategorized maps are available only if readFileList have been used before.\n   *\n   * @returns {Array<MapItem>}\n   */\n  getMapList() {\n    let self = this;\n    let mapArray = [];\n    // If the archive have been scanned for all its file we iterate through the results\n    if (this._persistantData) {\n      // Filter the maps out of all our files\n      let reversedIndex = this.getReverseIndex();\n      let maps = this._persistantData\n        .filter((file) => file.fileType === \"PF_mapc\")\n        .filter((id) => id.baseId === reversedIndex[self.getFileIndex(id.baseId)][0]);\n\n      for (let map of maps) {\n        let found = false;\n        // Try to see if we already have some informations on this map\n        for (let category of MapFileList.maps) {\n          let fileMap = category.maps.find((item) => Number(item.fileName.split(\".data\")[0]) === map.baseId);\n          if (fileMap) {\n            mapArray.push({\n              name: fileMap.name,\n              category: category.name,\n              baseId: map.baseId,\n            });\n            found = true;\n            break;\n          }\n        }\n        // If not we register it as Uncategorized\n        if (!found) {\n          mapArray.push({\n            name: map.baseId.toString(),\n            category: \"Uncategorized\",\n            baseId: map.baseId,\n          });\n        }\n      }\n    }\n    // If not then we check only known maps\n    else {\n      for (let category of MapFileList.maps) {\n        for (let mapEntry of category.maps) {\n          if (Number(mapEntry.fileName.split(\".data\")[0]) in this._indexTable) {\n            mapArray.push({\n              name: mapEntry.name,\n              category: category.name,\n              baseId: Number(mapEntry.fileName.split(\".data\")[0]),\n            });\n          }\n        }\n      }\n    }\n    return mapArray;\n  }\n\n  /**\n   * @typedef {Object} FileItem\n   * @property {number} mftId\n   * @property {Array<number>} baseIdList\n   * @property {number} size\n   * @property {number} crc\n   * @property {string} fileType\n   **/\n\n  /**\n   *   Return the meta table with extra information such as an array of baseIds and the file types.\n   *   The filetype is available only if readFileList have been used before of course.\n   *\n   * @returns {Array<FileItem>}\n   */\n  getFileList() {\n    let typeList = this._persistantData ? this._persistantData.map((i) => i.fileType) : [];\n    let reverseBaseIdList = this.getReverseIndex();\n\n    let fileList = this._fileMetaTable.map((meta, mftId) => {\n      let baseIds = reverseBaseIdList[mftId] ? reverseBaseIdList[mftId] : [];\n      let type = reverseBaseIdList[mftId] ? typeList[baseIds[0]] : \"Non-Registered\";\n      return {\n        mftId: mftId,\n        baseIdList: baseIds,\n        size: meta.size,\n        crc: meta.crc,\n        fileType: type,\n      };\n    });\n    fileList[0] = {\n      mftId: 0,\n      baseIdList: [],\n      size: 0,\n      crc: 0,\n      fileType: \"Non-Registered\",\n    };\n    return fileList;\n  }\n\n  /**\n   * @returns {Array<Array<number>>}\n   */\n  getReverseIndex() {\n    return this._indexTable.reduce((reversed, mftId, baseId) => {\n      if (mftId in reversed) reversed[mftId].push(baseId);\n      else reversed[mftId] = [baseId];\n      return reversed;\n    }, []);\n  }\n\n  // Callback wrapper\n\n  /**\n   * Reads data from a file in the dat.\n   *\n   * @param  {Number}   baseId   Base or File id of the texture to load\n   * @param  {Function} callback Fires when the inflater has read the data.\n   *\n   * The passed arguments are\n   * -ArrayBuffer raw data\n   * -Number DXT Type if applicable\n   * -Number image width if applicable\n   * -Number image height if applicable\n   *\n   *\n   * @param  {boolean}  isImage\n   * @param  {boolean}   raw      If true, any infation is skipped and raw data is returned.\n   */\n  loadFile(baseId, callback, isImage, raw) {\n    let mftId = this.getFileIndex(baseId);\n    if (mftId <= 0) return callback(null);\n    this.readFile(mftId, isImage, raw).then((result) => {\n      if (result.buffer === undefined) return callback(null);\n      callback(result.buffer, result.dxtType, result.imageWidth, result.imageHeight);\n    });\n  }\n\n  // Private\n\n  /**\n   * @private\n   * @param {number} baseId\n   * @param {Array<{baseId: number, crc: number, size: number, fileType: string}>} persistantData\n   * @returns {{scan: boolean, change: string }}\n   */\n  _needsScan(baseId, persistantData) {\n    if (baseId <= 0) return { change: \"none\", scan: false };\n\n    let mftId = this.getFileIndex(baseId);\n    let metaData = this.getFileMeta(mftId);\n\n    // Nothing interesting\n    if (metaData === undefined && !(baseId in persistantData)) {\n      return { change: \"none\", scan: false };\n    }\n    // If the file have been deleted\n    else if (metaData === undefined) {\n      return { change: \"removed\", scan: false };\n    }\n    // If the file is new\n    else if (!(baseId in persistantData)) {\n      return { change: \"added\", scan: true };\n    }\n    // If the size or crc don't match\n    else if (metaData.size !== persistantData[baseId].size || metaData.crc !== persistantData[baseId].crc) {\n      return { change: \"modified\", scan: true };\n    }\n    // If everything is the same\n    else {\n      return { change: \"none\", scan: false };\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} baseId\n   * @param {Array<{baseId: number, crc: number, size: number, fileType: string}>} persistantData\n   * @returns {Promise<{fileType: string, crc: number, size: number}>}\n   */\n  async _readFileType(baseId) {\n    if (!this._fileTypeCache) this._fileTypeCache = [];\n\n    let mftId = this.getFileIndex(baseId);\n    let metaData = this.getFileMeta(mftId);\n\n    let fileType;\n    if (this._fileTypeCache[baseId] !== undefined) {\n      fileType = this._fileTypeCache[baseId];\n    } else {\n      let fileBuffer = (await this.readFile(mftId, false, false, Math.min(metaData.size, 1000), 32)).buffer;\n      if (fileBuffer === undefined) return undefined;\n      fileType = FileTypes.getFileType(new DataStream(fileBuffer));\n    }\n    return { fileType: fileType, crc: metaData.crc, size: metaData.size };\n  }\n}\n\nmodule.exports = LocalReader;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/// Indexed DB versioning\nconst DB_VERSION = 4;\n\n/**\n * This class handles offline storage of the .dat indexes and files metadata\n * @class PersistantStore\n */\nclass PersistantStore {\n  constructor() {\n    // They may be multiple connection request issued at the same time, but it's actually okay since\n    // as soon as they are registered, the not-used ones will get garbage collected\n    this._dbConnection = undefined;\n    this._getConnection(() => {});\n  }\n\n  /**\n   *   Initialize the IndexedDB connection and manages version changes.\n   *\n   * @async\n   * @private\n   * @returns {Promise<IDBDatabase>} Promise to the Database connection\n   */\n  _getConnection() {\n    let self = this;\n    return new Promise((resolve, reject) => {\n      if (self._dbConnection) resolve(self._dbConnection);\n\n      // Let us open our database\n      let request = window.indexedDB.open(\"Tyria3DLibrary\", DB_VERSION);\n\n      /// onblocked is fired when the db needs an upgrade but an older version is opened in another tab\n      request.onblocked = () => {\n        T3D.Logger.log(\n          T3D.Logger.TYPE_ERROR,\n          \"The T3D persistant database cannot be upgraded while the app is opened somewhere else.\"\n        );\n      };\n\n      /// fired when the database needs to be upgraded (or the first time)\n      request.onupgradeneeded = (event) => {\n        /** @type {IDBDatabase} */\n        let db = event.target.result;\n        let currentVersion = event.oldVersion;\n\n        if (currentVersion < 2) {\n          db.createObjectStore(\"listings\", {\n            autoIncrement: true,\n          });\n        }\n\n        if (currentVersion < 3) {\n          let storeListing = event.currentTarget.transaction.objectStore(\"listings\");\n          storeListing.createIndex(\"filename\", \"filename\", { unique: false });\n        }\n      };\n\n      request.onsuccess = (event) => {\n        self._dbConnection = event.target.result;\n        self.isReady = true;\n        resolve(self._dbConnection);\n      };\n\n      request.onerror = () => {\n        T3D.Logger.log(T3D.Logger.TYPE_ERROR, \"The T3D persistant database could not be opened.\");\n        reject();\n      };\n    });\n  }\n\n  /**\n   *   Add or update a listing into the database\n   *\n   * @async\n   * @param {number|undefined} id This ID doesn't really matter, it's just the index of the object in the database, can be undefined\n   * @param {Array} listing\n   * @param {string} fileName .dat file name, allows to have multiple listings for different .dat files.\n   * @param {boolean} isComplete Keep back the information if that was the last update on the current scan or not.\n   * @returns {Promise<number>} On success, the number is the object key in the database\n   */\n  putListing(id, listing, fileName, isComplete) {\n    let self = this;\n    return new Promise((resolve, reject) => {\n      self._getConnection().then((db) => {\n        let store = db.transaction([\"listings\"], \"readwrite\").objectStore(\"listings\");\n\n        let request = id\n          ? store.put({ array: listing, filename: fileName, complete: isComplete }, id)\n          : store.put({ array: listing, name: fileName });\n\n        request.onsuccess = () => {\n          resolve(request.result);\n        };\n        request.onerror = () => {\n          reject();\n        };\n      });\n    });\n  }\n\n  /**\n   * Returns the last valid listing in the database\n   *\n   * @async\n   * @param {string} fileName .dat file name, allows to have multiple listings for different .dat files.\n   * @returns {Promise<{array: Array, key: number, complete: boolean}>}\n   *      array: the last listing\n   *      key: the index of the last listing in the database\n   */\n  getLastListing(fileName) {\n    let self = this;\n    return new Promise((resolve) => {\n      self._getConnection().then((db) => {\n        let listingsStore = db.transaction([\"listings\"], \"readonly\").objectStore(\"listings\").index(\"filename\");\n\n        listingsStore.openCursor(IDBKeyRange.only(fileName), \"prev\").onsuccess = (event) => {\n          let cursor = event.target.result;\n          if (!cursor) resolve({ array: [], key: undefined, complete: true });\n          else {\n            resolve({\n              array: cursor.value.array,\n              key: cursor.primaryKey,\n              complete: cursor.value.complete,\n            });\n          }\n        };\n      });\n    });\n  }\n}\n\nmodule.exports = PersistantStore;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * A Logger class for T3D\n *\n * This satic class defines severity levels of messages and provides\n * basic logging functionality. Replacing the reference to\n *\n * @namespace\n * @static\n */\nlet Logger = {};\n\n/**\n * @readonly\n * @property {number} TYPE_ERROR\n */\nLogger.TYPE_ERROR = 4;\n\n/**\n * @readonly\n * @property {number} TYPE_WARNING\n */\nLogger.TYPE_WARNING = 3;\n\n/**\n * @readonly\n * @property {number} TYPE_MESSAGE\n */\nLogger.TYPE_MESSAGE = 2;\n\n/**\n * @readonly\n * @property {number} TYPE_PROGRESS\n */\nLogger.TYPE_PROGRESS = 1;\n\n/**\n * @readonly\n * @property {number} TYPE_DEBUG\n */\nLogger.TYPE_DEBUG = 0;\n\n/**\n * The logging functions, indexed by severity/type.\n *\n * @property logFunctions\n * @type Function[]\n */\nLogger.logFunctions = new Array(5);\n\n/**\n * Main logging method. Takes 1 to N arguments. If there are more than 1 arguments\n * the first argument is interpreted as severity. If there is only one argument\n * severity defaults to\n * {{#crossLink \"Logger/TYPE_MESSAGE:property\"}}{{/crossLink}}.\n *\n * The following arguments are passed to a logging function matching the\n * severity.\n *\n\n *\n */\nLogger.log = function () {\n  /// Require at least 1 argument\n  if (arguments.length === 0) {\n    return;\n  }\n\n  /// Parse arguments to an actual array\n  let argArr = Logger.argsToArr(arguments);\n\n  /// Default to message if just one argument was passed\n  if (argArr.length === 1) {\n    argArr.unshift(Logger.TYPE_MESSAGE);\n  }\n\n  /// Otherwise 1st arg is severity, log/warn/error\n  let severity = Math.max(0, Math.min(Logger.logFunctions.length, argArr.shift()));\n  let logFunc = Logger.logFunctions[severity];\n\n  /// Ouput the rest of the arguments\n  logFunc.apply(this, argArr);\n};\n\nLogger.argsToArr = function (args) {\n  let argArr = new Array(args.length);\n  for (let i = 0; i < argArr.length; ++i) {\n    argArr[i] = args[i];\n  }\n  return argArr;\n};\n\nLogger.logFunctions[Logger.TYPE_ERROR] = function () {\n  console.error.apply(console, arguments);\n};\n\nLogger.logFunctions[Logger.TYPE_WARNING] = function () {\n  console.warn.apply(console, arguments);\n};\n\nLogger.logFunctions[Logger.TYPE_MESSAGE] = function () {\n  console.log.apply(console, arguments);\n};\n\nLogger.logFunctions[Logger.TYPE_PROGRESS] = function () {\n  let argArr = Logger.argsToArr(arguments);\n  argArr.unshift(\"Progress: \");\n  console.log.apply(console, argArr);\n};\n\nLogger.logFunctions[Logger.TYPE_DEBUG] = function () {\n  let argArr = Logger.argsToArr(arguments);\n  console.debug.apply(console, argArr);\n};\n\nmodule.exports = Logger;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = {\n  /**\n   * @property maps\n   * @type {Array.<{name: String, maps: Array.<{fileName: String, name: String}>}>}\n   */\n  maps: [\n    {\n      name: \"01. Shiverpeaks\",\n      maps: [\n        { fileName: \"125199.data\", name: \"Wayfarer Foothills (0)\" },\n        { fileName: \"187611.data\", name: \"Wayfarer Foothills (1)\" },\n        { fileName: \"568778.data\", name: \"Cragstead\" },\n        { fileName: \"132434.data\", name: \"Hoelbrak (0)\" },\n        { fileName: \"197122.data\", name: \"Hoelbrak (1)\" },\n        { fileName: \"1966018.data\", name: \"Hoelbrak (2)\" },\n        { fileName: \"124093.data\", name: \"Snowden Drifts (0)\" },\n        { fileName: \"186397.data\", name: \"Snowden Drifts (1)\" },\n        { fileName: \"275155.data\", name: \"Dredgehaunt Cliffs\" },\n        { fileName: \"276252.data\", name: \"Frostgorge Sound\" },\n        { fileName: \"277587.data\", name: \"Lornar's Pass\" },\n        { fileName: \"278717.data\", name: \"Timberline Falls (0)\" },\n        { fileName: \"846866.data\", name: \"Timberline Falls (1)\" },\n        { fileName: \"1018612.data\", name: \"Timberline Falls (2)\" },\n        { fileName: \"295282.data\", name: \"Eye of the North\" },\n      ],\n    },\n    {\n      name: \"02. Ascalon\",\n      maps: [\n        { fileName: \"126118.data\", name: \"Plains of Ashford (0)\" },\n        { fileName: \"188591.data\", name: \"Plains of Ashford (1)\" },\n        { fileName: \"127888.data\", name: \"Diessa Plateau (0)\" },\n        { fileName: \"190490.data\", name: \"Diessa Plateau (1)\" },\n        { fileName: \"131944.data\", name: \"Black Citadel (0)\" },\n        { fileName: \"196585.data\", name: \"Black Citadel (1)\" },\n        { fileName: \"1968107.data\", name: \"Black Citadel (2)\" },\n        { fileName: \"280025.data\", name: \"Blazeridge Steppes\" },\n        { fileName: \"281313.data\", name: \"Fireheart Rise\" },\n        { fileName: \"282668.data\", name: \"Iron Marches\" },\n        { fileName: \"283574.data\", name: \"Fields of Ruin\" },\n      ],\n    },\n    {\n      name: \"03. Kryta\",\n      maps: [\n        { fileName: \"191000.data\", name: \"Lion's Arch (0)\" },\n        { fileName: \"814803.data\", name: \"Lion's Arch (1)\" },\n        { fileName: \"1019669.data\", name: \"Lion's Arch (Legacy)\" },\n        { fileName: \"1796999.data\", name: \"Lion's Arch (2)\" },\n        { fileName: \"1869665.data\", name: \"Lion's Arch (3)\" },\n        { fileName: \"1968576.data\", name: \"Lion's Arch (4)\" },\n        { fileName: \"128151.data\", name: \"Divinity's Reach (0)\" },\n        { fileName: \"191265.data\", name: \"Divinity's Reach (1)\" },\n        { fileName: \"705746.data\", name: \"Divinity's Reach (2)\" },\n        { fileName: \"1968748.data\", name: \"Divinity's Reach (3)\" },\n        { fileName: \"129834.data\", name: \"North of Divinity's Reach (0)\" },\n        { fileName: \"193081.data\", name: \"North of Divinity's Reach (1)\" },\n        { fileName: \"129524.data\", name: \"Queensdale (0)\" },\n        { fileName: \"192711.data\", name: \"Queensdale (1)\" },\n        { fileName: \"130970.data\", name: \"Kessex Hills (0)\" },\n        { fileName: \"194288.data\", name: \"Kessex Hills (1)\" },\n        { fileName: \"672138.data\", name: \"Kessex Hills (2)\" },\n        { fileName: \"861815.data\", name: \"Kessex Hills (3)\" },\n        { fileName: \"286945.data\", name: \"Bloodtide Coast\" },\n        { fileName: \"287870.data\", name: \"Harathi Hinterlands\" },\n        { fileName: \"289176.data\", name: \"Gendarran Fields\" },\n        { fileName: \"295005.data\", name: \"Chantry of Secrets\" },\n        { fileName: \"294938.data\", name: \"Claw Island\" },\n      ],\n    },\n    {\n      name: \"04. Maguuma Jungle\",\n      maps: [\n        { fileName: \"195149.data\", name: \"Caledon Forest\" },\n        { fileName: \"195493.data\", name: \"Metrica Province\" },\n        { fileName: \"922320.data\", name: \"Metrica Province Instance\" },\n        { fileName: \"198076.data\", name: \"The Grove (0)\" },\n        { fileName: \"1969341.data\", name: \"The Grove (1)\" },\n        { fileName: \"198272.data\", name: \"Rata Sum (0)\" },\n        { fileName: \"1968896.data\", name: \"Rata Sum (1)\" },\n        { fileName: \"291064.data\", name: \"Mount Maelstrom\" },\n        { fileName: \"292254.data\", name: \"Sparkfly Fen\" },\n        { fileName: \"293307.data\", name: \"Brisban Wildlands\" },\n      ],\n    },\n    {\n      name: \"05. Ruins of Orr\",\n      maps: [\n        { fileName: \"284829.data\", name: \"Straits of Devastation\" },\n        { fileName: \"285089.data\", name: \"Malchor's Leap\" },\n        { fileName: \"285634.data\", name: \"Cursed Shore\" },\n        { fileName: \"295179.data\", name: \"Cathedral of Hidden Depths\" },\n        { fileName: \"295962.data\", name: \"A Light in the Darkness\" },\n      ],\n    },\n    {\n      name: \"06. Living World S1\",\n      maps: [\n        { fileName: \"520479.data\", name: \"Southsun Cove\" },\n        { fileName: \"679089.data\", name: \"Tower of Nightmares\" },\n      ],\n    },\n    {\n      name: \"07. Living World S2\",\n      maps: [\n        { fileName: \"836211.data\", name: \"Dry top (0)\" },\n        { fileName: \"861770.data\", name: \"Dry top (1)\" },\n        { fileName: \"909361.data\", name: \"The Silverwastes (0)\" },\n        { fileName: \"996202.data\", name: \"The Silverwastes (1)\" },\n        { fileName: \"908730.data\", name: \"Glint's Lair\" },\n      ],\n    },\n    {\n      name: \"08. Heart of Maguuma\",\n      maps: [\n        { fileName: \"969663.data\", name: \"Verdant Brink\" },\n        { fileName: \"1262460.data\", name: \"Hearts and Minds\" },\n        { fileName: \"969964.data\", name: \"Unknown Airship in tree\" },\n        { fileName: \"1262310.data\", name: \"Dragon Stand\" },\n        { fileName: \"1263739.data\", name: \"Tarir\" },\n        { fileName: \"1264291.data\", name: \"Tangled Depths\" },\n      ],\n    },\n    {\n      name: \"09. Living World S3\",\n      maps: [\n        { fileName: \"1472635.data\", name: \"(E1) Bloodstone Fen\" },\n        { fileName: \"1498071.data\", name: \"(E2) Taimi Simulator\" },\n        { fileName: \"1498578.data\", name: \"(E2) Ring of Fire\" },\n        { fileName: \"1605211.data\", name: \"(E3) Bitterfrost Frontier\" },\n        { fileName: \"1645474.data\", name: \"(E4) Caudecus Manor\" },\n        { fileName: \"1646520.data\", name: \"(E4) Lake Doric\" },\n        { fileName: \"1682493.data\", name: \"(E5) Draconis Mons\" },\n        { fileName: \"1682763.data\", name: \"(E5) Titan's Throat\" },\n        { fileName: \"1734839.data\", name: \"(E6) White Mantle Fortress\" },\n        { fileName: \"1735346.data\", name: \"(E6) Siren's Landing\" },\n        { fileName: \"1735440.data\", name: \"(E6) Shining Blade Headquarters\" },\n      ],\n    },\n    {\n      name: \"10. Crystal Desert\",\n      maps: [\n        { fileName: \"1794574.data\", name: \"Crystal Oasis\" },\n        { fileName: \"1833034.data\", name: \"Desert Highlands\" },\n        { fileName: \"1833726.data\", name: \"PoF story instances\" },\n        { fileName: \"1839188.data\", name: \"Domain of Vabbi\" },\n        { fileName: \"1840103.data\", name: \"Elon Riverlands\" },\n        { fileName: \"1840368.data\", name: \"Kormir Sanctuary\" },\n        { fileName: \"1842533.data\", name: \"The Desolation\" },\n      ],\n    },\n    {\n      name: \"11. Living World S4\",\n      maps: [\n        { fileName: \"1901428.data\", name: \"(E1) Fahranur\" },\n        { fileName: \"1902235.data\", name: \"(E1) Istan\" },\n        { fileName: \"1903523.data\", name: \"(E1) Crystal Oasis\" },\n        { fileName: \"1954984.data\", name: \"(E2) Desert Highlands\" },\n        { fileName: \"1955224.data\", name: \"(E2) Inquest Lab Tower\" },\n        { fileName: \"1955471.data\", name: \"(E2) Rata Primus\" },\n        { fileName: \"1955642.data\", name: \"(E2) Divinity's Reach\" },\n        { fileName: \"1955915.data\", name: \"(E2) Mount Maelstrom\" },\n        { fileName: \"1956140.data\", name: \"(E2) Frostgorge Sound\" },\n        { fileName: \"1956245.data\", name: \"(E2) Void\" },\n        { fileName: \"1956299.data\", name: \"(E2) Hided Inquest Lab\" },\n        { fileName: \"1957526.data\", name: \"(E2) Sandswept Isles\" },\n        { fileName: \"2004704.data\", name: \"(E3) Domain of Kourna\" },\n        { fileName: \"2005467.data\", name: \"(E3) Crystal Oasis\" },\n        { fileName: \"2044320.data\", name: \"(E4) Jahai Bluffs\" },\n        { fileName: \"2044502.data\", name: \"(E4) The Mists\" },\n        { fileName: \"2124612.data\", name: \"Mists Rift\" },\n        { fileName: \"2092435.data\", name: \"(E5) Thunderhead Peaks\" },\n        { fileName: \"2092812.data\", name: \"(E5) The Auditorium (0)\" },\n        { fileName: \"2093450.data\", name: \"(E5) The Auditorium (1)\" },\n        { fileName: \"2093791.data\", name: \"(E5) Glint's Trials\" },\n        { fileName: \"2146125.data\", name: \"(E6) Dragonfall\" },\n        { fileName: \"2146312.data\", name: \"(E6) The Auditorium\" },\n        { fileName: \"2146346.data\", name: \"(E6) Dragonflight\" },\n        { fileName: \"2146376.data\", name: \"(E6) Sayida's Airship\" },\n        { fileName: \"2146510.data\", name: \"(E6) Descent\" },\n      ],\n    },\n    {\n      name: \"12. The Icebrood Saga\",\n      maps: [\n        { fileName: \"2203371.data\", name: \"Grothmar Valley\" },\n        {\n          fileName: \"2204239.data\",\n          name: \"Grothmar Valley (Blood Keep instances)\",\n        },\n        { fileName: \"2251232.data\", name: \"Bjora Marches\" },\n        { fileName: \"2249817.data\", name: \"Voice in the Deep (story)\" },\n        { fileName: \"2251447.data\", name: \"Eye of the North\" },\n        { fileName: \"2273128.data\", name: \"Darkrime Delves\" },\n        { fileName: \"2298865.data\", name: \"(E3) Drizzlewood Coast\" },\n        {\n          fileName: \"2299088.data\",\n          name: \"Drizzlewood Coast (Turnabout instance)\",\n        },\n        { fileName: \"2318029.data\", name: \"(E4) Drizzlewood Coast\" },\n        { fileName: \"2364032.data\", name: \"(Champions) MapAlpineKeepS5E5\" },\n        { fileName: \"2365787.data\", name: \"(Champions) MapAlpinePowderS5E5\" },\n        { fileName: \"2366368.data\", name: \"(Champions) MapRegrownFlameS5E5\" },\n        { fileName: \"2366776.data\", name: \"(Champions) MapRegrownHawkeS5E5\" },\n        { fileName: \"2367211.data\", name: \"(Champions) MapValleyCoastS5E5\" },\n        { fileName: \"2368400.data\", name: \"(Champions) MapValleyPortS5E5\" },\n        { fileName: \"2369116.data\", name: \"(Champions) MapValleySettlementS5E5\" },\n        { fileName: \"2369398.data\", name: \"(Champions) MapWetlandBayouS5E5\" },\n        { fileName: \"2369582.data\", name: \"(Champions) MapWetlandComplexE5Story\" },\n        { fileName: \"2370017.data\", name: \"(Champions) MapWetlandGrottoS5E5\" },\n        { fileName: \"2370614.data\", name: \"(Champions) MapWetlandRiversideS5E5\" },\n      ],\n    },\n    {\n      name: \"13. Seasonal Activities\",\n      maps: [\n        { fileName: \"506592.data\", name: \"Ascent to Madness\" },\n        { fileName: \"506670.data\", name: \"Mad King's Labyrinth (Past)\" },\n        { fileName: \"662436.data\", name: \"Mad King's Labyrinth (Present)\" },\n        { fileName: \"506739.data\", name: \"Mad King's Clock Tower\" },\n        { fileName: \"622681.data\", name: \"The Crown Pavilion\" },\n        { fileName: \"569756.data\", name: \"SAB Hub (0)\" },\n        { fileName: \"636133.data\", name: \"SAB Hub (1)\" },\n        { fileName: \"635555.data\", name: \"SAB World 1\" },\n        { fileName: \"635960.data\", name: \"SAB World 2\" },\n        { fileName: \"606255.data\", name: \"Zephyr Sanctum\" },\n        { fileName: \"529896.data\", name: \"Tixx's Infinirarium\" },\n        { fileName: \"529945.data\", name: \"Winter Wonderland\" },\n        { fileName: \"2076921.data\", name: \"Secret Lair of the Snowmen\" },\n        { fileName: \"2164993.data\", name: \"Dragon Bash Arena\" },\n      ],\n    },\n    {\n      name: \"14. Activites\",\n      maps: [\n        { fileName: \"605983.data\", name: \"Sanctum Sprint\" },\n        { fileName: \"606030.data\", name: \"Basket Brawl\" },\n      ],\n    },\n    {\n      name: \"15. Dungeons\",\n      maps: [\n        { fileName: \"126840.data\", name: \"Ascalonian Catacombs (0)\" },\n        { fileName: \"189364.data\", name: \"Ascalonian Catacombs (1)\" },\n        { fileName: \"275474.data\", name: \"Sorrow's Embrace\" },\n        { fileName: \"276520.data\", name: \"Honor of the Waves\" },\n        { fileName: \"284039.data\", name: \"Citadel of Flame\" },\n        { fileName: \"287214.data\", name: \"Caudecus's Manor\" },\n        { fileName: \"291284.data\", name: \"Twilight Arbor (0)\" },\n        { fileName: \"645968.data\", name: \"Twilight Arbor (1)\" },\n        { fileName: \"293606.data\", name: \"Crucible of Eternity\" },\n        { fileName: \"473930.data\", name: \"The Ruined City of Arah\" },\n        { fileName: \"473765.data\", name: \"Arah - Story\" },\n        { fileName: \"580061.data\", name: \"Molten Facility\" },\n        { fileName: \"595722.data\", name: \"Aetherblade Retreat\" },\n      ],\n    },\n    {\n      name: \"16. Fractals\",\n      maps: [\n        { fileName: \"519839.data\", name: \"Fractals of the Mists\" },\n        { fileName: \"697450.data\", name: \"Thaumanova Reactor\" },\n        { fileName: \"1426653.data\", name: \"Cliffside Fractal\" },\n        { fileName: \"1472361.data\", name: \"Chaos Isle Fractal\" },\n        { fileName: \"1472382.data\", name: \"Snowblind Fractal\" },\n        { fileName: \"1472406.data\", name: \"Swampland Fractal\" },\n        { fileName: \"1498016.data\", name: \"Mistlock Observatory\" },\n        { fileName: \"1498798.data\", name: \"Aetherblade/Mai Trin Fractal\" },\n        { fileName: \"1605344.data\", name: \"Nightmare Fractal\" },\n        { fileName: \"1733857.data\", name: \"Shattered Observatory Fractal\" },\n        { fileName: \"1733961.data\", name: \"Mistlock Sanctuary\" },\n        { fileName: \"1905739.data\", name: \"Molten Boss Fractal\" },\n        { fileName: \"1905889.data\", name: \"Twilight Oasis Fractal\" },\n        { fileName: \"2005713.data\", name: \"Deepstone Fractal\" },\n        { fileName: \"2094098.data\", name: \"Siren's Reef Fractal\" },\n        { fileName: \"2187042.data\", name: \"Aquatic Ruins Fractal\" },\n        { fileName: \"2333932.data\", name: \"Sunqua Peak\" },\n      ],\n    },\n    {\n      name: \"17. Raid\",\n      maps: [\n        { fileName: \"1151420.data\", name: \"(W1) Spirit Vale\" },\n        { fileName: \"1383309.data\", name: \"(W2) Salvation Pass\" },\n        { fileName: \"1427048.data\", name: \"Special Forces Training Area\" },\n        { fileName: \"1454070.data\", name: \"(W3) Stronghold of the Faithful\" },\n        { fileName: \"1645215.data\", name: \"(W4) Bastion of the Penitent\" },\n        { fileName: \"1906329.data\", name: \"(W5) Hall of Chains\" },\n        { fileName: \"2045250.data\", name: \"(W6) Mythwright Gambit\" },\n        { fileName: \"2157962.data\", name: \"(W7) The Key of Ahdashim\" },\n      ],\n    },\n    {\n      name: \"18. Strike Missions\",\n      maps: [\n        {\n          fileName: \"2224355.data\",\n          name: \"Raven's Sanctum - Voice and Claw of the Fallen\",\n        },\n        {\n          fileName: \"2224381.data\",\n          name: \"Raven's Sanctum - Fraenir of Jormag\",\n        },\n        { fileName: \"2224406.data\", name: \"Raven's Sanctum - Boneskinner\" },\n        { fileName: \"2251486.data\", name: \"Voice in the Frozen Deep\" },\n        { fileName: \"2272807.data\", name: \"Forging Steel\" },\n      ],\n    },\n    {\n      name: \"19. Structured PvP\",\n      maps: [\n        { fileName: \"871093.data\", name: \"Original Stronghold\" },\n        { fileName: \"870987.data\", name: \"Battle of Champion's Dusk (0)\" },\n        { fileName: \"1666233.data\", name: \"Battle of Champion's Dusk (1)\" },\n        { fileName: \"132570.data\", name: \"Heart of the Mists (0)\" },\n        { fileName: \"197249.data\", name: \"Heart of the Mists (1)\" },\n        { fileName: \"1734729.data\", name: \"Heart of the Mists (2)\" },\n        { fileName: \"2129692.data\", name: \"Heart of the Mists (4)\" },\n        { fileName: \"1712986.data\", name: \"Hall of the Mists\" },\n        { fileName: \"132710.data\", name: \"The Battle of Khylo (0)\" },\n        { fileName: \"197402.data\", name: \"The Battle of Khylo (1)\" },\n        { fileName: \"132837.data\", name: \"Forest of Niflhel (0)\" },\n        { fileName: \"197545.data\", name: \"Forest of Niflhel (1)\" },\n        { fileName: \"376916.data\", name: \"Legacy of the Foefire\" },\n        { fileName: \"467374.data\", name: \"Raid on the Capricorn\" },\n        { fileName: \"520609.data\", name: \"Temple of the Silent Storm\" },\n        { fileName: \"579383.data\", name: \"Skyhammer (0)\" },\n        { fileName: \"677968.data\", name: \"Skyhammer (1)\" },\n        { fileName: \"1934470.data\", name: \"Skyhammer (2)\" },\n        { fileName: \"791564.data\", name: \"Courtyard (0)\" },\n        { fileName: \"1713054.data\", name: \"Courtyard (1)\" },\n        { fileName: \"556199.data\", name: \"Spirit Watch (0)\" },\n        { fileName: \"1473061.data\", name: \"Spirit Watch (1)\" },\n        { fileName: \"506539.data\", name: \"Reaper's Rumble\" },\n        { fileName: \"529718.data\", name: \"Snowball Mayhem\" },\n        { fileName: \"595582.data\", name: \"Dragon Ball Arena\" },\n        { fileName: \"617120.data\", name: \"Aspect Arena\" },\n        { fileName: \"1644624.data\", name: \"Revenge of the Capricorn\" },\n        { fileName: \"1704155.data\", name: \"Eternal Coliseum\" },\n        { fileName: \"2128880.data\", name: \"Eternal Coliseum (1)\" },\n        { fileName: \"2128938.data\", name: \"Djinn's Dominion\" },\n        { fileName: \"2175965.data\", name: \"Djinn's Dominion (1)\" },\n        { fileName: \"2187125.data\", name: \"Auric Span\" },\n      ],\n    },\n    {\n      name: \"20. World vs World\",\n      maps: [\n        { fileName: \"131235.data\", name: \"Eternal Battlegrounds (0)\" },\n        { fileName: \"195806.data\", name: \"Eternal Battlegrounds (1)\" },\n        { fileName: \"1885693.data\", name: \"Eternal Battlegrounds (2)\" },\n        { fileName: \"1918037.data\", name: \"Eternal Battlegrounds (3)\" },\n        { fileName: \"2263889.data\", name: \"Eternal Battlegrounds (4)\" },\n        { fileName: \"131574.data\", name: \"Alpine Borderlands (0)\" },\n        { fileName: \"641501.data\", name: \"Alpine Borderlands (1)\" },\n        { fileName: \"1799855.data\", name: \"Alpine Borderlands (2)\" },\n        { fileName: \"1647236.data\", name: \"Desert Borderlands (0)\" },\n        { fileName: \"1799442.data\", name: \"Desert Borderlands (1)\" },\n        { fileName: \"2112733.data\", name: \"Desert Borderlands (3)\" },\n        { fileName: \"736241.data\", name: \"Edge of the Mists\" },\n        { fileName: \"2113077.data\", name: \"Armistice Bastion\" },\n      ],\n    },\n    {\n      name: \"19. Guild Halls\",\n      maps: [\n        { fileName: \"1255378.data\", name: \"Gilded Hollow\" },\n        { fileName: \"1256064.data\", name: \"Lost Precipice\" },\n        { fileName: \"1843274.data\", name: \"Windswept Haven\" },\n      ],\n    },\n    {\n      name: \"21. Concept and not released\",\n      maps: [\n        { fileName: \"122695.data\", name: \"Empty Plane\" },\n        { fileName: \"184799.data\", name: \"Empty Plane v1\" },\n        { fileName: \"197562.data\", name: \"Empty Plane v2\" },\n        { fileName: \"2224624.data\", name: \"Empty Plane v3\" },\n        { fileName: \"2257438.data\", name: \"Empty Plane v4\" },\n        { fileName: \"875614.data\", name: \"Unknown Mists Platforms\" },\n        { fileName: \"132853.data\", name: \"Empty Box\" },\n        { fileName: \"1255516.data\", name: \"Guild Coliseum\" },\n        { fileName: \"1498193.data\", name: \"Concept sPVP Map 1\" },\n        { fileName: \"1513556.data\", name: \"Concept sPVP Map 2\" },\n        { fileName: \"1513607.data\", name: \"Concept sPVP Map 3\" },\n        { fileName: \"1513620.data\", name: \"Concept sPVP Map 4\" },\n        { fileName: \"1513675.data\", name: \"Concept sPVP Map 5\" },\n        { fileName: \"1712945.data\", name: \"Concept sPVP Map 6\" },\n        { fileName: \"2224545.data\", name: \"Norrhart Domains prototype\" },\n      ],\n    },\n  ],\n};\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/* INCLUDES */\nlet LocalReader = require(\"./LocalReader/LocalReader\");\n\n/* PRIVATE VARS */\nlet _version = require(\"../package.json\").version;\nlet _settings = {\n  t3dtoolsWorker: \"modules/t3dtools/t3dworker.js\",\n  concurrentTasks: typeof navigator !== \"undefined\" ? navigator.hardwareConcurrency : 1,\n};\n\nlet T3D;\n\n/* PUBLIC PROPERTIES */\n\n/**\n * Tyria 3D Library main module.\n *\n * Use this static class to access file parsers- and data renderer classes.\n *\n * This class also works as a factory for creating\n * LocalReader instances that looks up and inflates files from the Guild Wars 2 .dat.\n * @module T3D\n */\nT3D = module.exports = {\n  /**\n   * The current library version. Used to make sure local storage caches are not\n   * shared between different releases.\n   *\n   * @property version\n   * @type String\n   */\n  version: _version,\n\n  /* FILES */\n\n  /**\n   * A static reference to the GW2File class, the preferred way of\n   * accessing this class.\n   *\n   * @memberof T3D\n   * @property GW2File\n   * @type Class\n   */\n  GW2File: require(\"./format/file/GW2File\"),\n\n  /**\n   * A static reference to the GW2Chunk class, the preferred way of\n   * accessing this class.\n   *\n   * @memberOf T3D\n   * @property GW2Chunk\n   * @type Class\n   */\n  GW2Chunk: require(\"./format/file/GW2Chunk\"),\n\n  /* RENDERERS */\n\n  /**\n   * A static reference to the DataRenderer class, the preferred way of\n   * accessing this class.\n   *\n   * @readonly\n   * @property DataRenderer\n   * @type Class\n   */\n  DataRenderer: require(\"./dataRenderer/DataRenderer\"),\n\n  /**\n   * A static reference to the EnvironmentRenderer class, the preferred way of\n   * accessing this class.\n   *\n   * @readonly\n   * @property EnvironmentRenderer\n   * @type Class\n   */\n  EnvironmentRenderer: require(\"./dataRenderer/EnvironmentRenderer\"),\n\n  /**\n   * A static reference to the HavokRenderer class, the preferred way of\n   * accessing this class.\n   *\n   * @readonly\n   * @property HavokRenderer\n   * @type Class\n   */\n  HavokRenderer: require(\"./dataRenderer/HavokRenderer\"),\n\n  /**\n   * A static reference to the PropertiesRenderer class, the preferred way of\n   * accessing this class.\n   *\n   * @readonly\n   * @property PropertiesRenderer\n   * @type Class\n   */\n  PropertiesRenderer: require(\"./dataRenderer/PropertiesRenderer\"),\n\n  /**\n   * A static reference to the SingleModelRenderer class, the preferred way of\n   * accessing this class.\n   *\n   * @readonly\n   * @property SingleModelRenderer\n   * @type Class\n   */\n  SingleModelRenderer: require(\"./dataRenderer/SingleModelRenderer\"),\n\n  /**\n   * A static reference to the TerrainRenderer class, the preferred way of\n   * accessing this class.\n   *\n   * @readonly\n   * @property TerrainRenderer\n   * @type Class\n   */\n  TerrainRenderer: require(\"./dataRenderer/TerrainRenderer\"),\n\n  /**\n   * A static reference to the ZoneRenderer class, the preferred way of\n   * accessing this class.\n   *\n   * @readonly\n   * @property ZoneRenderer\n   * @type Class\n   */\n  ZoneRenderer: require(\"./dataRenderer/ZoneRenderer\"),\n\n  /**\n   * A static reference to the StringRenderer class, the preferred way of\n   * accessing this class.\n   *\n   * @readonly\n   * @property StringRenderer\n   * @type Class\n   */\n  StringRenderer: require(\"./dataRenderer/StringRenderer\"),\n\n  /* LOGGING */\n\n  /**\n   * A static reference to the static Logger object, the preferred way of\n   * accessing this object. A simple way of providing your own logging methods\n   * is to simply overwrite any or all of the logging methods specified in\n   * {{#crossLink \"Logger/logFunctions:property\"}}{{/crossLink}}\n   *\n   * @property Logger\n   * @type Object\n   */\n  Logger: require(\"./Logger\"),\n\n  /* SETTINGS */\n\n  /**\n   * Contains a list of known map fileID:s and their names. Used in order to quickly\n   * look up what maps are in a .dat file. Note that this property is hard coded and\n   * has high probablity of being outdated. Also note that the names are just guesses\n   * by RequestTimeout.\n   *\n   * The format of this list objects is\n   *\n   *\n   *   {\n   *    maps : [\n   *        {\n   *           name:\"World Area Name\",\n   *             maps:[\n   *               { fileName :\"[numeric fileId].data\", name:\"Map Name One\" },\n   *                 { fileName :\"[numeric fileId].data\", name:\"Map Name Two\" },\n   *                 { fileName :\"[numeric fileId].data\", name:\"Map Name Three\" }\n   *                ]\n   *           },\n   *           {\n   *          name:\"Another World Area Name\",\n   *            maps:[\n   *              { fileName :\"[numeric fileId].data\", name:\"Map Name 408\" }\n   *          ]\n   *         }\n   *     ]\n   *   }\n   *\n   * @readonly\n   * @property MapFileList\n   * @type Object\n   */\n  MapFileList: require(\"./MapFileList\"),\n\n  /* UTILS */\n\n  /**\n   * A static reference to the MaterialUtils class.\n   *\n   * @readonly\n   * @property MaterialUtils\n   * @type Object\n   */\n  MaterialUtils: require(\"./util/MaterialUtils.js\"),\n\n  /**\n   * A static reference to the MathUtils class.\n   *\n   * @readonly\n   * @property MathUtils\n   * @type Object\n   */\n  MathUtils: require(\"./util/MathUtils.js\"),\n\n  /**\n   * A static reference to the ParserUtils class.\n   *\n   * @readonly\n   * @property ParserUtils\n   * @type Object\n   */\n  ParserUtils: require(\"./util/ParserUtils.js\"),\n\n  /**\n   * A static reference to the RenderUtils class.\n   *\n   * @readonly\n   * @property RenderUtils\n   * @type Object\n   */\n  RenderUtils: require(\"./util/RenderUtils.js\"),\n\n  /**\n   * A static reference to the PersistantStore class.\n   *\n   * @readonly\n   * @property PersistantStore\n   * @type Class\n   */\n  PersistantStore: require(\"./LocalReader/PersistantStore\"),\n\n  /**\n   * A static reference to the FileTypes tools and list.\n   *\n   * @readonly\n   * @property FileTypes\n   * @type Object\n   */\n  FileTypes: require(\"./LocalReader/FileTypes\"),\n\n  /* PUBLIC METHODS */\n\n  /**\n   * Creates a new instance of LocalReader with an pNaCl inflater connected to it.\n   *\n   * @async\n   * @param  {File}     file    Core JS File instance, must refer to a GW2 .dat file\n   * @param  {Function}  callback  Callback function, fired when the file index is fully\n   *                                 constructed. Takes no arguments.\n   *\n   * @param  {String}   t3dtoolsWorker URL to the inflater file. If omitted\n   *                                 _settings.t3dtoolsWorker will be used instead.\n   *\n   * @return {LocalReader}      The contructed LocalReader, note that this object\n   *                                 will not be fully initialized until the callback\n   *                                 is fired.\n   */\n  getLocalReader: function (file, callback, t3dtoolsWorker) {\n    let path = t3dtoolsWorker || _settings.t3dtoolsWorker;\n\n    // Create the instance and init the threads\n    let lrInstance = new LocalReader({\n      workerPath: path,\n      workersNb: _settings.concurrentTasks,\n    });\n\n    /// Callback with the lrInstance\n    lrInstance.openArchive(file).then(() => {\n      callback(lrInstance);\n    });\n\n    return lrInstance;\n  },\n\n  /**\n   * Utility method for acceccing a list containing information about all files\n   * in the .dat connected to the provided LocalReader instance. This method first\n   * tries to read a local indexing list from the client's localstorage and\n   * fallbacks to generating the list by scanning the MFT indices of the .dat\n   * and peeking each file in order to find out what filetype it has.\n   *\n   * Note that peeking the files is the time consuming task, so if you don't want\n   * yout application to spend time indexing the .dat and have a priori knowledge\n   * about the required file Id's you should not use this method.\n   *\n   * @async\n   * @param  {LocalReader}  localReader A fully initialized LocalReader instance\n   * @param  {Function}    callback    Fires when the index has been loaded\n   *                                     from the localstorage or after it has\n   *                                     been built and stored in localstorage.\n   *                                     Takes the generated object list of\n   *                                     files as an argument. This list groups\n   *                                     arrays of MFT indices per file type,\n   *                                     for exmample:\n   *\n   *\n   *   {\n   *      \"Unknown\"  : [444, 555, 333],\n   *      \"MODL\"    : [444, 555, 333],\n   *       \"String\"  : [666, 777, 888]\n   *   }\n   *\n   * For more details see\n   * {{#crossLink \"LocalReader/listFiles:method\"}}{{/crossLink}}\n   */\n  getFileListAsync: function (localReader, callback) {\n    localReader.readFileList().then((result) => {\n      let returnObj = {};\n      for (let fileEntry of result) {\n        if (returnObj[fileEntry.fileType] === undefined) {\n          returnObj[fileEntry.fileType] = [];\n        }\n        returnObj[fileEntry.fileType].push(fileEntry.mftId);\n      }\n      callback(returnObj);\n    });\n  },\n\n  /**\n   * Utility method for acceccing a list containing information about all map files\n   * in the .dat connected to the provided LocalReader instance. This method first\n   * tries to read a local indexing list from the client's localstorage and\n   * fallbacks to generating the list by scanning the MFT indices of the .dat\n   * and peeking each file in order to find out what filetype it has.\n   *\n   * If the searchAll flag is not set to true, this process will only scan files\n   * from the {{#crossLink \"T3D/MapFileList:property\"}}{{/crossLink}}\n   *\n   * @async\n   * @param {LocalReader}  localReader  A fully initialized LocalReader instance\n   * @param {Function}  callback  Fires when the index has been loaded\n   *                                   from the localstorage or after it has\n   *                                   been built and stored in localstorage.\n   *                                   Takes the generated object list of\n   *                                   files as an argument. This list groups\n   *                                   arrays of MFT indices per file type,\n   *                                   for exmample:\n   *\n   *     {\n   *       maps:[\n   *         {\n   *           name: 'Heart of Maguuma',\n   *           maps: [\n   *             {fileName:1151420, name:'HoT BWE3 Raid'},\n   *             {fileName:969663, name:'Verdant Brink}\n   *           ]\n   *         },\n   *         {\n   *           name: 'Unknown maps',\n   *           maps: [\n   *             {fileName:12345678, name:'Unknown map 12345678'}\n   *           ]\n   *         }\n   *       ]\n\n  *      };\n  * @param {boolean} searchAll if true forces re-indexing of entire dat.\n  */\n  getMapListAsync: function (localReader, callback, searchAll) {\n    function restoreOuput(array) {\n      let returnArray = [];\n      for (let elt of array) {\n        let category = returnArray.findIndex((i) => i.name === elt.category);\n        if (category === -1) {\n          category = returnArray.push({ name: elt.category, maps: [] }) - 1;\n        }\n        returnArray[category].maps.push({\n          fileName: elt.baseId,\n          name: elt.name,\n        });\n      }\n      // And resort it in order\n      returnArray.sort((i, j) => {\n        if (i.name < j.name) return -1;\n        if (i.name > j.name) return 1;\n        return 0;\n      });\n      return { maps: returnArray };\n    }\n\n    /// If seachAll flag is true, force a deep search\n    if (searchAll) {\n      localReader.readFileList().then(() => {\n        callback(restoreOuput(localReader.getMapList()));\n      });\n      return;\n    } else {\n      callback(restoreOuput(localReader.getMapList()));\n    }\n  },\n\n  /**\n   * Utility method used for rendering map files. Loads a map file and applies\n   * the provided renderers to it.\n   *\n   * @async\n   * @param  {LocalReader}  localReader A fully initialized LocalReader instance\n   * @param  {Number}       fileName  The File Id of a mapc file.\n   * @param  {Array}       renderers  An array of renderer classes. Each\n   *                                   class should extend\n   *                                   {{#crossLink \"DataRenderer\"}}{{/crossLink}}\n   * @param  {Function}    callback    Callback function, takes the shared\n   *                                     renderer context as an argument.\n   * @param  {Class}      logger      A logger class of the same type as\n   *                                   {{#crossLink \"Logger\"}}{{/crossLink}}\n   */\n  renderMapContentsAsync: function (localReader, fileName, renderers, callback, logger) {\n    /// VO for storing result from renderers\n    let context = {};\n\n    let runAllRenderers;\n\n    /// Make sure we got an actuall ID number\n    if (parseInt(fileName)) {\n      /// File name is baseId, load using local reader.\n      localReader.loadFile(fileName, function (arrayBuffer) {\n        /// Set up datastream\n        let ds = new DataStream(arrayBuffer, 0, DataStream.LITTLE_ENDIAN);\n\n        /// Initiate Map file object. Connect callback\n        let mapFile = new T3D.GW2File(ds, 0);\n\n        /// Populate VO by running the renderers\n        runAllRenderers = function (i) {\n          /// Run each renderer\n          if (i < renderers.length) {\n            T3D.runRenderer(\n              renderers[i].renderClass,\n              localReader,\n              Object.assign(renderers[i].settings, { mapFile: mapFile }),\n              context,\n              runAllRenderers.bind(this, i + 1)\n            );\n          }\n\n          /// Fire callback with VO when done\n          else {\n            callback(context);\n          }\n        };\n\n        /// Starting point for running each renderer\n        runAllRenderers(0);\n      });\n    }\n\n    /// Primitive error message...\n    else {\n      let outputLogger = logger || T3D.Logger;\n      outputLogger.log(T3D.Logger.TYPE_ERROR, \"Map id must be an integer!, was:\", fileName);\n    }\n  },\n\n  /**\n   * Utility method for applying a single renderer to a LocalReader insatnce.\n   *\n   * @async\n   *\n   * @param  {Class}    renderClass  A class extending\n   *                                  {{#crossLink \"DataRenderer\"}}{{/crossLink}}\n   * @param  {LocalReader}localReader A fully initialized LocalReader instance\n   * @param  {Object}    settings    Settings passed to the renderer. Often\n   *                                 specifies thinks like what file ID should\n   *                                 be loaded.\n   * @param  {Object}    context     The shared renderer context value object.\n   * @param  {Function}   cb          Callback method passed to the renderAsync\n   *                                   method of the renderer.\n   */\n  runRenderer: function (renderClass, localReader, settings, context, cb) {\n    let r = new renderClass(localReader, settings, context, undefined, renderClass.rendererName);\n\n    r.renderAsync(cb);\n  },\n\n  /**\n   * @param  {Object} context        A shared renderer context value object.\n   * @param  {Class}   clazz         A class extending\n   *                                  {{#crossLink \"DataRenderer\"}}{{/crossLink}}.\n   *                                  Specifies for renderer class you want to read\n   *                                  output.\n   * @param  {String} propName       The name of the property written by the\n   *                                  renderer that should retrtieved.\n   * @param  {any}   defaultValue   This value is passed back if no data could\n   *                                be found.\n   * @return {any}            The specified value from the conext if any,\n   *                              otherwise defaultValue.\n   */\n  getContextValue: function (context, clazz, propName, defaultValue) {\n    let output = context[clazz.rendererName];\n    if (output) {\n      return output[propName] ? output[propName] : defaultValue;\n    }\n    return defaultValue;\n  },\n\n  /**\n   * Check if the client web browser can render WebGL 3D content.\n   *\n   * @private\n   * @param  {boolean} return_context flag making this method return the canvas object instead of true\n   * @return {boolean} true if the client is WebGL enabled, false otherwise\n   */\n  hasWebGL: function (return_context) {\n    if (window.WebGLRenderingContext) {\n      let canvas = document.createElement(\"canvas\");\n      let names = [\"webgl\", \"experimental-webgl\", \"moz-webgl\", \"webkit-3d\"];\n      let context = false;\n\n      for (let i = 0; i < 4; i++) {\n        try {\n          context = canvas.getContext(names[i]);\n          if (context && typeof context.getParameter === \"function\") {\n            // WebGL is enabled\n            if (return_context) {\n              // return WebGL object if the function's argument is present\n              return { name: names[i], gl: context };\n            }\n            // else, return just true\n            return true;\n          }\n        } catch (e) {\n          //continue\n        }\n      }\n\n      // WebGL is supported, but disabled\n      return false;\n    }\n\n    // WebGL not supported\n    return false;\n  },\n\n  formats: require(\"./format/chunks/AllFormats\"),\n};\n\n/* PRIVATE METHODS */\n\n/**\n * Performs checks for required browser capabilities and required third party libraries.\n * Loggs any warnings or error messages.\n *\n * @private\n * @return {Number} The ammount of errors and warnings generated.\n */\nfunction checkRequirements() {\n  let numErrors = 0;\n\n  if (!global.window || !window.indexedDB) {\n    T3D.Logger.log(T3D.Logger.TYPE_ERROR, \"T3D persistant storing and loading requires indexedDB support.\");\n    numErrors++;\n  }\n\n  if (typeof DataStream === \"undefined\") {\n    T3D.Logger.log(T3D.Logger.TYPE_ERROR, \"T3D core functionality requires DataStream library.\");\n    numErrors++;\n  }\n\n  if (typeof THREE === \"undefined\") {\n    T3D.Logger.log(T3D.Logger.TYPE_WARNING, \"T3D mesh generation requires three.js library.\");\n    numErrors++;\n  }\n\n  if (numErrors < 1) {\n    T3D.Logger.log(T3D.Logger.TYPE_MESSAGE, \"Tyria 3D API v\" + T3D.version + \" initialized.\");\n  }\n\n  return numErrors;\n}\n\n/**\n * Performs a quick and dirty check to find what chunk name definitions\n * appear multiple times in th formats array. Note that anything that\n * appears more than 2 times wil get a too hight value due to the\n * algorithm being... incorrect.\n *\n * @private\n * @return {Object} An object mapping duplicate chunk definition names.\n * to the number of apperances.\n */\n// eslint-disable-next-line no-unused-vars\nfunction findDuplicateChunkDefs() {\n  let dups = {};\n  T3D.formats.forEach(function (f1) {\n    T3D.formats.forEach(function (f2) {\n      if (f2.name === f1.name && f2 !== f1) {\n        if (dups[f1.name]) {\n          dups[f1.name]++;\n        } else {\n          dups[f1.name] = 1;\n        }\n      }\n    });\n  });\n  return dups;\n}\n\n/// Library checks requirements on startup\ncheckRequirements();\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst GW2File = require(\"../format/file/GW2File\");\n\n/**\n * Base class for data interpretors a.k.a. 'Renderers'\n *\n * Renderers are classes that collect and interpret data from the dat file.\n *\n * A {{#crossLink \"LocalReader\"}}{{/crossLink}} instance is used for accessing data from the dat.\n *\n * A {{#crossLink \"Logger\"}}{{/crossLink}} is used for posting progress output or error messages.\n *\n * Most Renderers use one or more\n * {{#crossLink \"GW2Chunk\"}}GW2Chunks{{/crossLink}}, typed data structures that can be read from\n * {{#crossLink \"GW2File\"}}GW2Files{{/crossLink}}.\n *\n * The generated data, be it strings, numbers or meshes are put into a value object structure called\n * the 'context'. The context can store data generated by multiple renderers and makes sure each\n * renderer type, or class has it's own value object within the context. This enables one renderer\n * to read data written by another renderer wihtout having to worry about overwriting existing data\n * within the context. Keep in mind that you will have to manually pass and clean the conext object!\n *\n * A clean context object should just be the empty javasript object : {}.\n *\n * When a Renderer is done it will fire the callback and any view interrested in retrieving the generated\n * data from the context can read it using\n * {{#crossLink \"T3D/getContextValue:method\"}}{{/crossLink}}.\n *\n *\n *\n *\n * @class DataRenderer\n * @constructor\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nclass DataRenderer {\n  constructor(localReader, settings, context, logger, rendererName = \"DataRenderer\") {\n    this.rendererName = rendererName;\n    /// Just storing parameters\n    this.localReader = localReader;\n    this.settings = settings;\n    if (!settings) {\n      settings = {};\n    }\n    this.context = context;\n    this.context[rendererName] = {};\n\n    if (logger) this.logger = logger;\n    else this.logger = T3D.Logger;\n  }\n\n  /**\n   * Gets the output value object for a specified class within the context.\n   *\n   * @param  {Class} otherClass The class to fetch the output value object for.\n   * If not specified the class of this instance will be used.\n   * @return {Object}            The output value object for this class within the context.\n   */\n  getOutput(otherClass) {\n    return this.context[otherClass ? otherClass.rendererName : this.rendererName];\n  }\n\n  /**\n   * Basic rendering of unknown files. Output fileds generated:\n   *\n   * - *fileId* The fileId passed in the settings parameter when constructing this instance.\n   *\n   * - *rawData* An ArrayBuffer containg the infalted binary data of the loaded file.\n   *\n   * - *rawString* A string representation of the rawData\n   *\n   * - *image* A value object witht he fields 'width', 'height' and 'data' describing a RGBA bitmap\n   * image. Only set if the loaded file was a texture.\n   *\n   * - *file* A GW2File representation of the loaded file. Only set if the loaded file was a Pack File.\n   *\n   * @async\n   * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n   */\n  renderAsync(callback) {\n    let self = this;\n\n    this.localReader.loadFile(this.settings.id, function (inflatedData) {\n      /// Set fileId so callers can identify this VO\n      self.getOutput().fileId = self.settings.id;\n\n      /// Share inflated data\n      self.getOutput().rawData = inflatedData;\n\n      /// Construct raw string\n      let uarr = new Uint8Array(inflatedData);\n      let rawStrings = [];\n      let chunksize = 0xffff;\n      let len = Math.min(uarr.length, 10000);\n\n      // There is a maximum stack size. We cannot call String.fromCharCode with as many arguments as we want\n      for (let i = 0; i * chunksize < len; i++) {\n        rawStrings.push(String.fromCharCode.apply(null, uarr.subarray(i * chunksize, (i + 1) * chunksize)));\n      }\n\n      if (len < uarr.length) {\n        rawStrings.push(\"T3D Ignored the last \" + (uarr.length - len) + \" bytes when generating this raw output\");\n      }\n\n      self.getOutput().rawString = rawStrings.join();\n\n      /// Check if this is an PF or ATEX file\n      // Binareis are MZ\n      let ds = new DataStream(inflatedData);\n      let first4 = ds.readCString(4);\n\n      /// Do special stuff for different fcc signatures\n      ///\n      /// fourcc != fcc::ATEX && fourcc != fcc::ATEC && fourcc != fcc::ATEP &&\n      /// fourcc != fcc::ATET && fourcc != fcc::ATEU && fourcc != fcc::ATTX)\n      ///\n      if (\n        first4 === \"ATEX\" ||\n        first4 === \"ATEC\" ||\n        first4 === \"ATEP\" ||\n        first4 === \"ATET\" ||\n        first4 === \"ATEU\" ||\n        first4 === \"ATTX\"\n      ) {\n        /// TODO: MOVE TO GW2 texture file!!\n        /// Load file using LocalReader.\n        self.localReader.loadFile(\n          self.settings.id,\n          function (inflatedData, dxtType, imageWidth, imageHeigth) {\n            /// Create image using returned data.\n            let image = {\n              data: new Uint8Array(inflatedData),\n              width: imageWidth,\n              height: imageHeigth,\n            };\n\n            self.getOutput().image = image;\n            callback();\n          },\n          true\n        );\n      } else if (first4.indexOf(\"PF\") === 0) {\n        self.getOutput().file = new GW2File(ds, 0);\n        callback();\n      } else {\n        self.getOutput().file = null;\n        callback();\n      }\n    });\n  }\n}\n\nDataRenderer.rendererName = \"DataRenderer\";\nmodule.exports = DataRenderer;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst MaterialUtils = require(\"../util/MaterialUtils\");\nconst DataRenderer = require(\"./DataRenderer\");\n\n/**\n *\n * A renderer that generates some of the environment objects of a map.\n *\n * @class EnvironmentRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nclass EnvironmentRenderer extends DataRenderer {\n  constructor(localReader, settings, context, logger) {\n    super(localReader, settings, context, logger, \"EnvironmentRenderer\");\n\n    this.mapFile = this.settings.mapFile;\n  }\n\n  getMat(tex) {\n    return new THREE.MeshBasicMaterial({\n      map: tex,\n      side: THREE.BackSide,\n      fog: false,\n      depthWrite: false,\n    });\n  }\n\n  loadTextureWithFallback(targetMatIndices, materialArray, filename, fallbackFilename, hazeColorAsInt) {\n    let self = this;\n\n    function writeMat(mat) {\n      targetMatIndices.forEach(function (i) {\n        materialArray[i] = mat;\n      });\n    }\n\n    function loadFallback() {\n      let mat = self.getMat(new THREE.TextureLoader().load(fallbackFilename));\n\n      writeMat(mat);\n    }\n\n    function errorCallback() {\n      setTimeout(loadFallback, 1);\n    }\n\n    let mat = self.getMat(\n      MaterialUtils.loadLocalTexture(this.localReader, filename, null, hazeColorAsInt, errorCallback)\n    );\n\n    writeMat(mat);\n  }\n\n  getHazeColor(environmentChunkData) {\n    let hazes = environmentChunkData && environmentChunkData.dataGlobal.haze;\n\n    if (!hazes || hazes.length <= 0) {\n      return [190, 160, 60];\n    } else {\n      return hazes[0].farColor;\n    }\n  }\n\n  parseLights(environmentChunkData) {\n    let self = this;\n\n    /// Set up output array\n    self.getOutput().lights = [];\n\n    let lights = environmentChunkData\n      ? environmentChunkData.dataGlobal.lighting\n      : [\n          {\n            lights: [],\n            backlightIntensity: 1.0,\n            backlightColor: [255, 255, 255],\n          },\n        ];\n\n    let ambientLight;\n\n    // var light = lights[0];\n    //\n    let hasLight = false;\n    lights.forEach(function (light /*, idx*/) {\n      if (hasLight) return;\n\n      /// Directional lights\n      /* eslint-disable-next-line no-unused-vars */\n      let sumDirLightIntensity = 0;\n\n      light.lights.forEach(function (dirLightData /*, idx*/) {\n        hasLight = true;\n\n        let color = new THREE.Color(\n          dirLightData.color[2] / 255.0,\n          dirLightData.color[1] / 255.0,\n          dirLightData.color[0] / 255.0\n        );\n\n        let directionalLight = new THREE.DirectionalLight(color.getHex(), dirLightData.intensity);\n\n        directionalLight.position\n          .set(-dirLightData.direction[0], dirLightData.direction[2], dirLightData.direction[1])\n          .normalize();\n\n        sumDirLightIntensity += dirLightData.intensity;\n\n        self.getOutput().lights.push(directionalLight);\n      }); // END for each directional light in light\n\n      /// Add some random directional lighting if there was no, in order to se SOME depth on models\n      if (!light.lights || light.lights.length === 0) {\n        let directions = [\n          [0, 1, 0, 0.3],\n          [1, 2, 1, 0.3],\n          [-1, -2, -1, 0.3],\n        ];\n\n        directions.forEach(function (lightDir) {\n          let color = new THREE.Color(1, 1, 1);\n          let intensity = lightDir[3];\n          let directionalLight = new THREE.DirectionalLight(color.getHex(), intensity);\n\n          directionalLight.position.set(lightDir[0], lightDir[1], lightDir[2]).normalize();\n\n          // eslint-disable-next-line no-unused-vars\n          sumDirLightIntensity += intensity;\n\n          self.getOutput().lights.push(directionalLight);\n        });\n      }\n\n      /// Ambient light\n      // light.backlightIntensity /= sumDirLightIntensity +light.backlightIntensity;\n      // light.backlightIntensity = light.backlightIntensity;\n      let color = new THREE.Color(\n        (light.backlightIntensity * (255.0 - light.backlightColor[2])) / 255.0,\n        (light.backlightIntensity * (255.0 - light.backlightColor[1])) / 255.0,\n        (light.backlightIntensity * (255.0 - light.backlightColor[0])) / 255.0\n      );\n\n      ambientLight = new THREE.AmbientLight(color);\n    }); // END for each light in lighting\n\n    let ambientTotal = 0;\n    if (ambientLight) {\n      ambientTotal = ambientLight.color.r + ambientLight.color.g + ambientLight.color.b;\n      this.getOutput().lights.push(ambientLight);\n    }\n\n    /// Parsing done, set hasLight flag and return\n    this.getOutput().hasLight = hasLight || ambientTotal > 0;\n  }\n\n  parseSkybox(environmentChunkData, parameterChunkData, hazeColorAsInt) {\n    /// set up output array\n    this.getOutput().skyElements = [];\n\n    /// Grab sky texture.\n    /// index 0 and 1 day\n    /// index 2 and 3 evening\n    let skyModeTex = this.environmentChunkData && this.environmentChunkData.dataGlobal.skyModeTex[0];\n\n    /// Fallback skyboxfrom dat.\n    if (!skyModeTex) {\n      skyModeTex = {\n        texPathNE: 1930687,\n        texPathSW: 193069,\n        texPathT: 193071,\n      };\n    }\n\n    /// Calculate bounds\n    let bounds = parameterChunkData.rect;\n    let mapW = Math.abs(bounds.x1 - bounds.x2);\n    let mapD = Math.abs(bounds.y1 - bounds.y2);\n    // eslint-disable-next-line no-unused-vars\n    let boundSide = Math.max(mapW, mapD);\n\n    let materialArray = [];\n\n    /// Load skybox textures, fallback to hosted png files.\n    this.loadTextureWithFallback([1, 4], materialArray, skyModeTex.texPathNE + 1, \"img/193068.png\", hazeColorAsInt);\n    this.loadTextureWithFallback([0, 5], materialArray, skyModeTex.texPathSW + 1, \"img/193070.png\", hazeColorAsInt);\n    this.loadTextureWithFallback([2], materialArray, skyModeTex.texPathT + 1, \"img/193072.png\", hazeColorAsInt);\n    materialArray[3] = new THREE.MeshBasicMaterial({ visible: false });\n\n    /// Create skybox geometry\n    let boxSize = 1024;\n    let skyGeometry = new THREE.BoxGeometry(boxSize, boxSize / 2, boxSize); // Width Height Depth\n\n    /// Ugly way of fixing UV maps for the skybox (I think)\n    skyGeometry.faceVertexUvs[0].forEach(function (vecs, idx) {\n      let face = Math.floor(idx / 2);\n\n      // PX NX\n      // PY NY\n      // PZ NZ\n\n      /// PX - WEST   NX - EAST\n      if (face === 0 || face === 1) {\n        vecs.forEach(function (vec2) {\n          vec2.x = 1 - vec2.x;\n          vec2.y /= 2.0;\n          vec2.y += 0.5;\n        });\n      }\n\n      /// NZ - SOUTH   PZ - NORTH\n      else if (face === 5 || face === 4) {\n        vecs.forEach(function (vec2) {\n          vec2.y /= -2.0;\n          vec2.y += 0.5;\n        });\n      } else {\n        vecs.forEach(function (vec2) {\n          vec2.x = 1 - vec2.x;\n        });\n      }\n    });\n\n    skyGeometry.uvsNeedUpdate = true;\n\n    /// Generate final skybox\n    let skyBox = new THREE.Mesh(skyGeometry, materialArray);\n\n    /// Put horizon in camera center\n    skyBox.translateY(boxSize / 4);\n    // skyBox.translateY( -environmentChunk.data.dataGlobal.sky.verticalOffset );\n\n    /// Write to output\n    this.getOutput().skyElements.push(skyBox);\n  }\n\n  /**\n   * Output fileds generated:\n   *\n   * - *hazeColor* Array of RGBA values describing the global haze color of the map.\n   * - *lights* An array of THREE.DirectionalLight and  THREE.AmbientLight objects.\n   * - *hasLight* Boolean is false if no directional lights were added to \"lights\".\n   * - *skyElements* A textured THREE.Mesh skybox.\n   *\n   * @async\n   * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n   */\n  renderAsync(callback) {\n    let environmentChunkData = this.mapFile.getChunk(\"env\").data;\n    let parameterChunkData = this.mapFile.getChunk(\"parm\").data;\n\n    /// Set renderer clear color from environment haze\n    let hazeColor = this.getHazeColor(environmentChunkData);\n    let hazeColorAsInt = hazeColor[2] * 256 * 256 + hazeColor[1] * 256 + hazeColor[0];\n    this.getOutput().hazeColor = hazeColor;\n\n    /// Add directional lights to output. Also write hasLight flag\n    this.parseLights(environmentChunkData);\n\n    /// Generate skybox\n    this.parseSkybox(environmentChunkData, parameterChunkData, hazeColorAsInt);\n\n    /// All parsing is synchronous, just fire callback\n    callback();\n  }\n}\n\nEnvironmentRenderer.rendererName = \"EnvironmentRenderer\";\nmodule.exports = EnvironmentRenderer;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst DataRenderer = require(\"./DataRenderer\");\n\n/**\n *\n * A renderer that generates meshes describing the collisions of a map.\n *\n * @class HavokRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File. If \"visible\" is specified and true, the generated meshes will be textured\n * with a MeshNormalMaterial, otherwise they will not be visible.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nclass HavokRenderer extends DataRenderer {\n  constructor(localReader, settings, context, logger) {\n    super(localReader, settings, context, logger, \"HavokRenderer\");\n\n    this.mapFile = this.settings.mapFile;\n\n    this.lastP = -1;\n    this.seed = 1;\n    this.meshes = [];\n  }\n\n  /**\n   * TODO\n   *\n   * @param  {Function} callback         [description]\n   * @async\n   */\n  renderModels(models, title, callback) {\n    let mat;\n    if (this.settings && this.settings.visible) {\n      mat = new THREE.MeshNormalMaterial({ side: THREE.DoubleSide });\n    } else {\n      mat = new THREE.MeshBasicMaterial({ visible: false });\n    }\n\n    this.parseAllModels(models, mat, title, 200, 0, callback);\n  }\n\n  /**\n   * TODO\n   *\n   * @param  {*} animation  [description]\n   * @param  {*} collisions [description]\n   * @return {*}            [description]\n   */\n  getCollisionsForAnimation(animation, collisions) {\n    let ret = [];\n\n    for (let i = 0; i < animation.collisionIndices.length; i++) {\n      let index = animation.collisionIndices[i];\n      let collision = collisions[index];\n      collision.index = index;\n      ret.push(collision);\n    }\n\n    return ret;\n  }\n\n  /**\n   * TODO\n   *\n   * @param  {*} models       [description]\n   * @param  {*} mat       [description]\n   * @param  {*} title     [description]\n   * @param  {*} chunkSize [description]\n   * @param  {*} offset    [description]\n   * @return {*} callback          [description]\n   * @async\n   */\n  parseAllModels(models, mat, title, chunkSize, offset, callback) {\n    let i = offset;\n\n    for (; i < offset + chunkSize && i < models.length; i++) {\n      let p = Math.round((i * 100) / models.length);\n      if (p !== this.lastP) {\n        this.logger.log(T3D.Logger.TYPE_PROGRESS, \"Loading Collision Models (\" + title + \")\", p);\n        this.lastP = p;\n      }\n\n      /// Get animation object\n      let animation = this.animationFromGeomIndex(models[i].geometryIndex, this.geometries, this.animations);\n\n      let collisions = this.getCollisionsForAnimation(animation, this.havokChunkData.collisions);\n\n      for (let j = 0; j < collisions.length; j++) {\n        let collision = collisions[j];\n        this.renderMesh(collision, models[i], mat);\n      }\n    }\n\n    if (i < models.length) {\n      window.setTimeout(\n        this.parseAllModels.bind(this, models, mat, title, chunkSize, offset + chunkSize, callback),\n        10 /* time in ms to next call */\n      );\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * TODO\n   *\n   * @param  {*} propGeomIndex [description]\n   * @param  {*} geometries    [description]\n   * @param  {*} animations    [description]\n   * @return {*}               [description]\n   */\n  animationFromGeomIndex(propGeomIndex, geometries, animations) {\n    // geometries is just list of all geometries.animations[end] for now\n    let l = geometries[propGeomIndex].animations.length;\n\n    return animations[geometries[propGeomIndex].animations[l - 1]];\n    // return animations[ geometries[propGeomIndex].animations[0] ];\n  }\n\n  /**\n   * TODO\n   *\n   * @param  {*} collision [description]\n   * @param  {*} model     [description]\n   * @param  {*} mat       [description]\n   * @return {*}           [description]\n   */\n  renderMesh(collision, model, mat) {\n    let pos = model.translate;\n    let rot = model.rotate;\n    let scale = 32 * model.scale;\n\n    /// Generate mesh\n    let mesh = this.parseHavokMesh(collision, mat);\n\n    /// Position mesh\n    /// \"x\",\"float32\",\"z\",\"float32\",\"y\",\"float32\"\n    mesh.position.set(pos[0], -pos[2], -pos[1]);\n\n    /// Scale mesh\n    if (scale) mesh.scale.set(scale, scale, scale);\n\n    /// Rotate mesh\n    if (rot) {\n      mesh.rotation.order = \"ZXY\";\n\n      // [\"x\",\"float32\",\"z\",\"float32\",\"y\",\"float32\"],\n      mesh.rotation.set(rot[0], -rot[2], -rot[1]);\n    }\n\n    /// Add mesh to scene and collisions\n    this.getOutput().meshes.push(mesh);\n  }\n\n  /**\n   * TODO\n   *\n   * @return {*} [description]\n   */\n  seedRandom() {\n    let x = Math.sin(this.seed++) * 10000;\n    return x - Math.floor(x);\n  }\n\n  /**\n   * TODO\n   *\n   * @param  {*} collision [description]\n   * @param  {*} mat       [description]\n   * @return {*}           [description]\n   */\n  parseHavokMesh(collision, mat) {\n    let index = collision.index;\n\n    if (!this.meshes[index]) {\n      let geom = new THREE.Geometry();\n\n      /// Pass vertices\n      for (let i = 0; i < collision.vertices.length; i++) {\n        let v = collision.vertices[i];\n        // \"x\",\"float32\",\"z\",\"float32\",\"y\",\"float32\"]\n        geom.vertices.push(new THREE.Vector3(v[0], v[2], -v[1]));\n      }\n\n      /// Pass faces\n      for (let i = 0; i < collision.indices.length; i += 3) {\n        let f1 = collision.indices[i];\n        let f2 = collision.indices[i + 1];\n        let f3 = collision.indices[i + 2];\n\n        if (f1 <= collision.vertices.length && f2 <= collision.vertices.length && f3 <= collision.vertices.length) {\n          geom.faces.push(new THREE.Face3(f1, f2, f3));\n        } else {\n          this.logger.log(T3D.Logger.TYPE_ERROR, \"Errorus index in havok model geometry.\");\n        }\n      }\n\n      /// Prepare geometry and pass new mesh\n      geom.computeFaceNormals();\n      // geom.computeVertexNormals();\n\n      this.meshes[index] = new THREE.Mesh(geom, mat);\n\n      return this.meshes[index];\n    } else {\n      return this.meshes[index].clone();\n    }\n  }\n\n  /**\n   * Output fileds generated:\n   *\n   * - *boundingBox* Array of values describing the bounding box of all collision.\n   * - *meshes* An array of THREE.Mesh objects visualizing all collision in the map.\n   *\n   * @async\n   * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n   */\n  renderAsync(callback) {\n    let self = this;\n\n    // TODO:The design of this method pretty much requires one instance\n    // of the class per parallel async render. Should probably fix this\n    // at some point...\n\n    /// Get required chunks\n    this.havokChunkData = this.mapFile.getChunk(\"havk\").data;\n\n    /// Set static bounds to the bounds of the havk models\n    this.getOutput().boundingBox = this.havokChunkData.boundsMax;\n\n    /// Clear old meshes\n    this.meshes = [];\n\n    /// Set up output array\n    this.getOutput().meshes = [];\n\n    /// Grab model raw data from the chunk.\n    /// Add missing scale value to obs models.\n    let propModels = this.havokChunkData.propModels;\n    let zoneModels = this.havokChunkData.zoneModels;\n    let obsModels = this.havokChunkData.obsModels;\n    obsModels.forEach(function (mdl) {\n      mdl.scale = 1;\n    });\n\n    /// Store geoms and animations from the file in hte instance so we don't\n    /// have to pass them arround too much. (fix this later)\n    this.geometries = this.havokChunkData.geometries;\n    this.animations = this.havokChunkData.animations;\n\n    /// Render \"prop\", \"zone\" and \"obs\" models in that order.\n    let renderZoneModelsCB = function () {\n      self.renderModels(obsModels, \"obs\", callback);\n    };\n    let renderPropModelsCB = function () {\n      self.renderModels(zoneModels, \"zone\", renderZoneModelsCB);\n    };\n    self.renderModels(propModels, \"prop\", renderPropModelsCB);\n  }\n}\n\nHavokRenderer.rendererName = \"HavokRenderer\";\nmodule.exports = HavokRenderer;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RenderUtils = require(\"../util/RenderUtils\");\nconst DataRenderer = require(\"./DataRenderer\");\n\n/**\n *\n * A renderer that generates property models for a map.\n *\n * @class PropertiesRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nclass PropertiesRenderer extends DataRenderer {\n  constructor(localReader, settings, context, logger) {\n    super(localReader, settings, context, logger, \"PropertiesRenderer\");\n    this.mapFile = this.settings.mapFile;\n    this.showUnmaterialized = this.settings.showUnmaterialized || false;\n  }\n\n  /**\n   * Renders all property meshes in a GW2 map described by the map's PROP chunk.\n   * Output fileds generated:\n   *\n   * - *meshes* An array of THREE.Mesh objects visualizing all property models refered by this map.\n   *\n   * @async\n   * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n   */\n  renderAsync(callback) {\n    let self = this;\n\n    self.getOutput().meshes = [];\n\n    let propertiesChunkData = this.mapFile.getChunk(\"prp2\").data;\n\n    if (!propertiesChunkData) {\n      callback();\n      return;\n    }\n\n    let props = propertiesChunkData.propArray;\n    let animProps = propertiesChunkData.propAnimArray;\n    let instanceProps = propertiesChunkData.propInstanceArray;\n    let metaProps = propertiesChunkData.propMetaArray;\n\n    /// Concat all prop types\n    props = props.concat(animProps).concat(instanceProps).concat(metaProps);\n\n    /// Create mesh cache\n    self.meshCache = {};\n    self.textureCache = {};\n\n    // For now, we'll do all load in serial\n    // TODO: load unique meshes and textures in parallell (asynch), then render!\n    let lastPct = -1;\n\n    let renderIndex = function (idx) {\n      if (idx >= props.length) {\n        /// Empty mesh cache\n        self.meshCache = {};\n        self.textureCache = {};\n        callback();\n        return;\n      }\n\n      let pct = Math.round((1000.0 * idx) / props.length);\n      pct /= 10.0;\n\n      /// Log progress\n      if (lastPct !== pct) {\n        let pctStr = pct + (pct.toString().indexOf(\".\") < 0 ? \".0\" : \"\");\n\n        self.logger.log(T3D.Logger.TYPE_PROGRESS, \"Loading 3D Models (Props)\", pctStr);\n        lastPct = pct;\n      }\n\n      /// Read prop at index.\n      let prop = props[idx];\n\n      /// Adds a single mesh to a group.\n      let addMeshToLOD = function (mesh, groups, lod, prop, needsClone) {\n        /// Read lod distance before overwriting mesh variable\n        let lodDist = prop.lod2 !== 0 ? prop.lod2 : mesh.lodOverride[1];\n\n        /// Read flags before overwriting mesh variable\n        let flags = mesh.flags;\n\n        /// Mesh flags are 0 1 4\n        /// For now, use flag 0 as the default level of detail\n        if (flags === 0) lodDist = 0;\n\n        /// Create new empty mesh if needed\n        if (needsClone) {\n          mesh = new THREE.Mesh(mesh.geometry, mesh.material);\n        }\n\n        mesh.updateMatrix();\n        mesh.matrixAutoUpdate = false;\n\n        // Find group for this LOD distance\n        if (groups[lodDist]) {\n          groups[lodDist].add(mesh);\n        }\n        // Or create LOD group and add to a level of detail\n        // WIP, needs some testing!\n        else {\n          let group = new THREE.Group();\n          group.updateMatrix();\n          group.matrixAutoUpdate = false;\n          group.add(mesh);\n          groups[lodDist] = group;\n          lod.addLevel(group, lodDist);\n        }\n\n        return lodDist;\n      };\n\n      /// Adds array of meshes to the scene, also adds transform clones\n      let addMeshesToScene = function (meshArray, needsClone, boundingSphere) {\n        /// Add original\n\n        /// Make LOD object and an array of groups for each LOD level\n        let groups = {};\n        let lod = new THREE.LOD();\n\n        /// Each mesh is added to a group corresponding to its LOD distane\n        let maxDist = 0;\n        meshArray.forEach(function (mesh) {\n          maxDist = Math.max(maxDist, addMeshToLOD(mesh, groups, lod, prop, needsClone));\n        });\n\n        /// Add invisible level (the raycaster crashes on lod without any levels)\n        lod.addLevel(new THREE.Group(), 100000);\n\n        /// Set position, scale and rotation of the LOD object\n        if (prop.rotation) {\n          lod.rotation.order = \"ZXY\";\n          // [\"x\",\"float32\",\"z\",\"float32\",\"y\",\"float32\"],\n          lod.rotation.set(prop.rotation[0], -prop.rotation[2], -prop.rotation[1]);\n        }\n        lod.scale.set(prop.scale, prop.scale, prop.scale);\n        lod.position.set(prop.position[0], -prop.position[2], -prop.position[1]);\n\n        lod.boundingSphereRadius = (boundingSphere && boundingSphere.radius ? boundingSphere.radius : 1.0) * prop.scale;\n\n        lod.updateMatrix();\n        lod.matrixAutoUpdate = false;\n\n        /// Show highest level always\n        lod.update(lod);\n\n        // Add LOD containing mesh instances to scene\n        self.getOutput().meshes.push(lod);\n\n        // Add one copy per transform, needs to be within it's own LOD\n        if (prop.transforms) {\n          prop.transforms.forEach(function (transform) {\n            /// Make LOD object and an array of groups for each LOD level\n            let groups = {};\n            let lod = new THREE.LOD();\n\n            /// Each mesh is added to a group corresponding to its LOD distane\n            let maxDist = 0;\n            meshArray.forEach(function (mesh) {\n              maxDist = Math.max(maxDist, addMeshToLOD(mesh, groups, lod, prop, true));\n            });\n\n            /// Add invisible level\n            // lod.addLevel(new THREE.Group(),10000);\n\n            /// Set position, scale and rotation of the LOD object\n            if (transform.rotation) {\n              lod.rotation.order = \"ZXY\";\n              lod.rotation.set(transform.rotation[0], -transform.rotation[2], -transform.rotation[1]);\n            }\n            lod.scale.set(transform.scale, transform.scale, transform.scale);\n            lod.position.set(transform.position[0], -transform.position[2], -transform.position[1]);\n\n            lod.updateMatrix();\n            lod.matrixAutoUpdate = false;\n\n            lod.boundingSphereRadius =\n              (boundingSphere && boundingSphere.radius ? boundingSphere.radius : 1.0) * prop.scale;\n\n            /// Show highest level always\n            lod.update(lod);\n\n            /// Add LOD containing mesh instances to scenerender: function(propertiesChunkHeader, map, localReader, renderCallback){\n            self.getOutput().meshes.push(lod);\n          });\n        }\n      };\n\n      /// Get meshes\n      RenderUtils.getMeshesForFilename(\n        prop.filename,\n        prop.color,\n        self.localReader,\n        self.meshCache,\n        self.textureCache,\n        self.showUnmaterialized,\n        function (meshes, isCached, boundingSphere) {\n          if (meshes) {\n            addMeshesToScene(meshes, isCached, boundingSphere);\n          }\n\n          /// Render next prop\n          renderIndex(idx + 1);\n        }\n      );\n    };\n\n    /// Start serial loading and redering. (to allow re-using meshes and textures)\n    renderIndex(0);\n  }\n\n  /**\n   * TODO: write description. Used for export feature\n   * @param  {Function} callback [description]\n   * @return {*}            [description]\n   */\n  getFileIdsAsync(callback) {\n    let fileIds = [];\n\n    let propertiesChunkData = this.mapFile.getChunk(\"prp2\").data;\n\n    let props = propertiesChunkData.propArray;\n    let animProps = propertiesChunkData.propAnimArray;\n    let instanceProps = propertiesChunkData.propInstanceArray;\n    let metaProps = propertiesChunkData.propMetaArray;\n\n    props = props.concat(animProps).concat(instanceProps).concat(metaProps);\n\n    let getIdsForProp = function (idx) {\n      if (idx >= props.length) {\n        callback(fileIds);\n        return;\n      }\n\n      if (idx % 100 === 0) {\n        this.logger.log(T3D.Logger.TYPE_MESSAGE, \"getting ids for entry\", idx, \"of\", props.length);\n      }\n\n      let prop = props[idx];\n      RenderUtils.getFilesUsedByModel(\n        prop.filename,\n        {\n          /* broken, needs localReader */\n        },\n        function (propFileIds) {\n          fileIds = fileIds.concat(propFileIds);\n          getIdsForProp(idx + 1);\n        }\n      );\n    };\n\n    getIdsForProp(0);\n  }\n}\n\nPropertiesRenderer.rendererName = \"PropertiesRenderer\";\nmodule.exports = PropertiesRenderer;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RenderUtils = require(\"../util/RenderUtils\");\nconst DataRenderer = require(\"./DataRenderer\");\n\n/**\n *\n * A renderer that generates meshes for a single model file.\n *\n * @class SingleModelRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"id\" the base ID or file ID of the model to generate meshes for.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nclass SingleModelRenderer extends DataRenderer {\n  constructor(localReader, settings, context, logger) {\n    super(localReader, settings, context, logger, \"SingleModelRenderer\");\n  }\n\n  /**\n   * Output fileds generated:\n   *\n   * - *meshes* An array of THREE.Mesh objects visualizing this model file.\n   *\n   * @async\n   * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n   */\n  renderAsync(callback) {\n    let self = this;\n\n    /// Get file id\n    let fileId = this.settings.id;\n    let showUnmaterialed = true;\n\n    /// Load the model file\n    let meshCache = {};\n    let textureCache = {};\n\n    /// Set up output array\n    self.getOutput().meshes = [];\n\n    RenderUtils.getMeshesForFilename(\n      fileId,\n      0x00ff00,\n      self.localReader,\n      meshCache,\n      textureCache,\n      showUnmaterialed,\n      function (meshes, isCached, boundingSphere) {\n        if (meshes) {\n          meshes.forEach(function (mesh) {\n            mesh.boundingSphere = boundingSphere;\n            self.getOutput().meshes.push(mesh);\n          });\n        }\n\n        /// Fire callback after all meshes have been added.\n        meshCache = {};\n        callback();\n      }\n    );\n  }\n}\n\nSingleModelRenderer.rendererName = \"SingleModelRenderer\";\nmodule.exports = SingleModelRenderer;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst DataRenderer = require(\"./DataRenderer\");\n\n/**\n *\n * A renderer that generates a list of readable strings from a \"strs\" file.\n *\n * @class StringRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"id\" the base ID or file ID of the string file to read strings from.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nclass StringRenderer extends DataRenderer {\n  constructor(localReader, settings, context, logger) {\n    super(localReader, settings, context, logger, \"StringRenderer\");\n  }\n\n  /**\n   * Output fileds generated:\n   *\n   * - *strings* An array of objects. Each object has a \"recid\"-property specifing on what index within the file\n   * a given string was found, and a \"value\"-property specigying the string value.\n   *\n   * - *language* An integer specifing the language of the loaded file.\n   *\n   * @async\n   * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n   */\n  renderAsync(callback) {\n    let self = this;\n\n    /// Get file id\n    // eslint-disable-next-line no-unused-vars\n    let fileId = this.settings.id;\n    // eslint-disable-next-line no-unused-vars\n    let showUnmaterialed = true;\n\n    /// Load the string file\n\n    /// Set up output array\n    this.getOutput().strings = [];\n\n    this.localReader.loadFile(this.settings.id, function (inflatedData) {\n      let ds = new DataStream(inflatedData);\n      let end = ds.byteLength - 2;\n\n      /// skip past fcc\n      ds.seek(4);\n\n      let entryHeaderDef = [\"size\", \"uint16\", \"decryptionOffset\", \"uint16\", \"bitsPerSymbol\", \"uint16\"];\n\n      let entryIndex = 0;\n\n      while (end - ds.position > 6) {\n        let entry = ds.readStruct(entryHeaderDef);\n        entry.size -= 6;\n\n        if (entry.size > 0) {\n          let isEncrypted = entry.decryptionOffset !== 0 || entry.bitsPerSymbol !== 0x10;\n\n          /// UTF-16\n          if (!isEncrypted) {\n            let value = ds.readUCS2String(entry.size / 2);\n            self.getOutput().strings.push({\n              value: value,\n              recid: entryIndex,\n            });\n          }\n\n          /// Other... ignored\n          else {\n            //continue\n          }\n        }\n\n        entryIndex++;\n      }\n\n      ds.seek(ds.byteLength - 2);\n      self.getOutput().language = ds.readUint16();\n      callback();\n    });\n  }\n}\n\nStringRenderer.rendererName = \"StringRenderer\";\nmodule.exports = StringRenderer;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RenderUtils = require(\"../util/RenderUtils\");\nconst MaterialUtils = require(\"../util/MaterialUtils\");\nconst DataRenderer = require(\"./DataRenderer\");\nconst GW2File = require(\"../format/file/GW2File.js\");\n\nconst TerrainShader = require(\"../util/TerrainShader.js\");\n\n/**\n *\n * A renderer that generates the meshes for the terrain of a map.\n *\n *\n * Requires a context previously populated by a\n * {{#crossLink \"EnvironmentRenderer\"}}{{/crossLink}}.\n *\n * @class TerrainRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nclass TerrainRenderer extends DataRenderer {\n  constructor(localReader, mapFile, settings, context, logger) {\n    super(localReader, mapFile, settings, context, logger, \"TerrainRenderer\");\n    this.mapFile = this.settings.mapFile;\n  }\n\n  drawWater(rect) {\n    /// Add Water\n    let material = new THREE.MeshBasicMaterial({\n      color: 0x5bb1e8,\n      wireframe: false,\n      opacity: 0.35,\n    });\n\n    material.transparent = true;\n    return RenderUtils.renderRect(rect, 0, material);\n  }\n\n  parseNumChunks(terrainData) {\n    terrainData.numChunksD_1 = Math.sqrt((terrainData.dims[0] * terrainData.chunkArray.length) / terrainData.dims[1]);\n    terrainData.numChunksD_2 = terrainData.chunkArray.length / terrainData.numChunksD_1;\n  }\n\n  loadPagedImageCallback(callback, infaltedBuffer) {\n    let self = this;\n\n    // Prep output array\n    self.getOutput().terrainTiles = [];\n\n    let pimgDS = new DataStream(infaltedBuffer);\n    let pimgFile = new GW2File(pimgDS, 0);\n    let pimgTableDataChunk = pimgFile.getChunk(\"pgtb\");\n    let pimgData = pimgTableDataChunk && pimgTableDataChunk.data;\n\n    this.mapRect = null;\n\n    /// Fetch chunks\n    let terrainData = this.mapFile.getChunk(\"trn\").data;\n    let parameterData = this.mapFile.getChunk(\"parm\").data;\n\n    /// Read settings\n    let maxAnisotropy = this.settings.anisotropy ? this.settings.anisotropy : 1;\n\n    //let chunks = [];\n    let chunkW = 35;\n\n    /// Calculate numChunksD_1 and _2\n    this.parseNumChunks(terrainData);\n\n    let xChunks = terrainData.numChunksD_1;\n    let yChunks = terrainData.numChunksD_2;\n\n    let allMaterials = terrainData.materials.materials;\n    let allTextures = terrainData.materials.texFileArray;\n\n    // Total map dx and dy\n    /*\n    old parameter data definition:\n    \"x1\", \"float32\",\n    \"y1\", \"float32\",\n    \"x2\", \"float32\",\n    \"y2\", \"float32\"\n    */\n    // var dx = parameterData.rect.x2 - parameterData.rect.x1;\n    // var dy = parameterData.rect.y2 - parameterData.rect.y1;\n    let dx = parameterData.rect[2] - parameterData.rect[0];\n    let dy = parameterData.rect[3] - parameterData.rect[1];\n\n    // Each chunk dx and dy\n    let cdx = (dx / terrainData.numChunksD_1) * 1; //  35/33;\n    let cdy = (dy / terrainData.numChunksD_2) * 1; // 35/33;\n    let n = 0;\n    let allMats = [];\n    let customMaterial = new THREE.MeshLambertMaterial({\n      side: THREE.DoubleSide,\n      color: 0x666666,\n      flatShading: true,\n    });\n    //let texMats = {};\n\n    /// Load textures from PIMG and inject as material maps (textures)\n    let chunkTextures = {};\n\n    /// Load textures\n    if (pimgData) {\n      let strippedPages = pimgData.strippedPages;\n\n      /// Only use layer 0\n      strippedPages.forEach(function (page) {\n        /// Only load layer 0 and 1\n        if (page.layer <= 1) {\n          let filename = page.filename;\n          //let color = page.solidColor;\n          let coord = page.coord;\n\n          let matName = coord[0] + \",\" + coord[1];\n          if (page.layer === 1) matName += \"-2\";\n\n          /// Add texture to list, note that coord name is used, not actual file name\n          if (!chunkTextures[matName]) {\n            /// Load local texture, here we use file name!\n            let chunkTex = MaterialUtils.loadLocalTexture(self.localReader, filename);\n\n            if (chunkTex) {\n              /// Set repeat, antistropy and repeat Y\n              chunkTex.anisotropy = maxAnisotropy;\n              chunkTex.wrapS = THREE.RepeatWrapping;\n              chunkTex.wrapT = THREE.RepeatWrapping;\n            }\n\n            /// ...But store in coord name\n            chunkTextures[matName] = chunkTex;\n          }\n        }\n      }); /// end for each stripped page in pimgData\n    }\n\n    /// Render Each chunk\n    /// We'll make this async in order for the screen to be able to update\n\n    let renderChunk = function (cx, cy) {\n      let chunkIndex = cy * xChunks + cx;\n\n      let pageX = Math.floor(cx / 4);\n      let pageY = Math.floor(cy / 4);\n\n      // TODO: Terrain texture LOD ?\n      let chunkTextureIndices = allMaterials[chunkIndex].loResMaterial.texIndexArray;\n      // let matFileName = allMaterials[chunkIndex].loResMaterial.materialFile;\n      // let chunkTextureIndices = allMaterials[chunkIndex].hiResMaterial.texIndexArray;\n      // let matFileName = allMaterials[chunkIndex].hiResMaterial.materialFile;\n      // let chunkData = terrainData.chunkArray[chunkIndex];\n      // let mainTex = allTextures[chunkTextureIndices[0]];\n      let mat = customMaterial;\n\n      /// TODO: just tick invert y = false...?\n      let pageOffetX = (cx % 4) / 4.0;\n      let pageOffetY = 0.75 - (cy % 4) / 4.0;\n\n      // offset 0 -> 0.75\n\n      // Make sure we have shared textures\n\n      /// Load and store all tiled textures\n      let fileNames = [];\n      for (let gi = 0; gi < chunkTextureIndices.length / 2; gi++) {\n        let textureFileName = allTextures[chunkTextureIndices[gi]].filename;\n\n        fileNames.push(textureFileName);\n\n        /// If the texture is not already loaded, read it from the .dat!\n        if (!chunkTextures[textureFileName]) {\n          /// Load local texture\n          let chunkTex = MaterialUtils.loadLocalTexture(self.localReader, textureFileName);\n\n          if (chunkTex) {\n            /// Set repeat, antistropy and repeat Y\n            chunkTex.anisotropy = maxAnisotropy;\n            chunkTex.wrapS = THREE.RepeatWrapping;\n            chunkTex.wrapT = THREE.RepeatWrapping;\n          }\n\n          chunkTextures[textureFileName] = chunkTex;\n        }\n      } /// End for each chunkTextureIndices\n\n      /// Create Composite texture material, refering the shared textures\n      let pageTexName = pageX + \",\" + pageY;\n      let pageTexName2 = pageX + \",\" + pageY + \"-2\";\n\n      /// TODO USe mapData (Chunk: env -> haze)\n      // var fog = SceneUtils.getScene().fog;\n      let fog = {\n        color: { r: 1, g: 1, b: 1 },\n        near: 0,\n        far: 0,\n      };\n\n      /// Get haze color from environment rednerer\n      let envOutput = self.getOutput(T3D.EnvironmentRenderer);\n      if (envOutput.hazeColor) {\n        fog.color.r = envOutput.hazeColor[2] / 255.0;\n        fog.color.g = envOutput.hazeColor[1] / 255.0;\n        fog.color.b = envOutput.hazeColor[0] / 255.0;\n      }\n\n      let uniforms = THREE.UniformsUtils.merge([THREE.UniformsLib[\"lights\"]]);\n\n      /// TODO: READ FROM VO, don't default to hard coded scale\n      uniforms.uvScale = { type: \"v2\", value: new THREE.Vector2(8.0, 8.0) };\n      uniforms.offset = {\n        type: \"v2\",\n        value: new THREE.Vector2(pageOffetX, pageOffetY),\n      };\n\n      uniforms.texturePicker = {\n        type: \"t\",\n        value: chunkTextures[pageTexName],\n      };\n      uniforms.texturePicker2 = {\n        type: \"t\",\n        value: chunkTextures[pageTexName2],\n      };\n\n      uniforms.texture1 = { type: \"t\", value: chunkTextures[fileNames[0]] };\n      uniforms.texture2 = { type: \"t\", value: chunkTextures[fileNames[1]] };\n      uniforms.texture3 = { type: \"t\", value: chunkTextures[fileNames[2]] };\n      uniforms.texture4 = { type: \"t\", value: chunkTextures[fileNames[3]] };\n\n      mat = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        fragmentShader: TerrainShader.getFragmentShader(),\n        vertexShader: TerrainShader.getVertexShader(),\n      });\n\n      /// Store referenceto each material\n      allMats.push(mat);\n\n      /// -1 for faces -> vertices , -2 for ignoring outer faces\n      let chunkGeo = new THREE.PlaneBufferGeometry(cdx, cdy, chunkW - 3, chunkW - 3);\n\n      let cn = 0;\n\n      /// Render chunk\n\n      /// Each chunk vertex\n      for (let y = 0; y < chunkW; y++) {\n        for (let x = 0; x < chunkW; x++) {\n          if (x !== 0 && x !== chunkW - 1 && y !== 0 && y !== chunkW - 1) {\n            chunkGeo.getAttribute(\"position\").array[cn * 3 + 2] = terrainData.heightMapArray[n];\n            cn++;\n          }\n\n          n++;\n        }\n      } // End each chunk vertex\n\n      /// Flip the plane to fit wonky THREE js world axes\n      let mS = new THREE.Matrix4().identity();\n      mS.elements[5] = -1;\n      chunkGeo.applyMatrix(mS);\n\n      /// Compute face normals for lighting, not used when textured\n      chunkGeo.computeFaceNormals();\n      // chunkGeo.computeVertexNormals();\n\n      /// Build chunk mesh!\n      let chunk;\n      chunk = new THREE.Mesh(chunkGeo, customMaterial);\n      if (mat.length) {\n        chunk = THREE.SceneUtils.createMultiMaterialObject(chunkGeo, mat);\n      } else {\n        chunk = new THREE.Mesh(chunkGeo, mat);\n      }\n\n      /// Move and rotate Mesh to fit in place\n      chunk.rotation.set(Math.PI / 2, 0, 0);\n\n      /// Last term is the new one: -cdx*(2/35)\n      let globalOffsetX = parameterData.rect[0] + cdx / 2;\n      let chunkOffsetX = cx * cdx;\n\n      chunk.position.x = globalOffsetX + chunkOffsetX;\n\n      /// Adjust for odd / even number of chunks\n      if (terrainData.numChunksD_2 % 2 === 0) {\n        /// Last term is the new one: -cdx*(2/35)\n        let globalOffsetY = parameterData.rect[1] + cdy / 2 - 0; // -cdy*(1/35);\n        let chunkOffsetY = cy * cdy * 1; // 33/35;\n\n        chunk.position.z = chunkOffsetY + globalOffsetY;\n      } else {\n        let globalOffsetY = parameterData.rect[1] - cdy / 2 + 0; // cdy*(1/35);\n        let chunkOffsetY = cy * cdy * 1; // 33/35;\n\n        chunk.position.z = globalOffsetY + chunkOffsetY;\n      }\n\n      let px = chunk.position.x;\n      let py = chunk.position.z;\n\n      if (!self.mapRect) {\n        self.mapRect = {\n          x1: px - cdx / 2,\n          x2: px + cdx / 2,\n          y1: py - cdy / 2,\n          y2: py + cdy / 2,\n        };\n      }\n\n      self.mapRect.x1 = Math.min(self.mapRect.x1, px - cdx / 2);\n      self.mapRect.x2 = Math.max(self.mapRect.x2, px + cdx / 2);\n\n      self.mapRect.y1 = Math.min(self.mapRect.y1, py - cdy / 2);\n      self.mapRect.y2 = Math.max(self.mapRect.y2, py + cdy / 2);\n\n      chunk.updateMatrix();\n      chunk.updateMatrixWorld();\n\n      /// Add to list of stuff to render\n      /// TODO: Perhaps use some kind of props for each entry instead?\n      self.getOutput().terrainTiles.push(chunk);\n    }; /// End render chunk function\n\n    let stepChunk = function (cx, cy) {\n      if (cx >= xChunks) {\n        cx = 0;\n        cy++;\n      }\n\n      if (cy >= yChunks) {\n        /// Draw water surface using map bounds\n        self.getOutput().water = self.drawWater(self.mapRect);\n\n        /// Set bounds in output VO\n        self.getOutput().bounds = self.mapRect;\n\n        /// Fire call back, we're done rendering.\n        callback();\n        return;\n      }\n\n      let pct = Math.floor((100 * (cy * xChunks + cx)) / (xChunks * yChunks));\n\n      self.logger.log(T3D.Logger.TYPE_PROGRESS, \"Loading Terrain\", pct);\n\n      renderChunk(cx, cy);\n      setTimeout(stepChunk, 1, cx + 1, cy);\n    };\n\n    stepChunk(0, 0);\n  }\n\n  /**\n   * Output fileds generated:\n   *\n   * - *terrainTiles* An array of THREE.Mesh objects visualizing terrain of the map.\n   *\n   * - *water* A THREE.Mesh object visualizing the bounds of the map.\n   *\n   * - *bounds* An object wiht x1, x2, y1, and y2 properties specifying the bounds of the map.\n   *\n   * @async\n   * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n   */\n  renderAsync(callback) {\n    /// Load all paged Images, requires inflation of other pack files!\n    let pagedImageId = this.mapFile.getChunk(\"trn\").data.materials.pagedImage;\n    this.localReader.loadFile(pagedImageId, this.loadPagedImageCallback.bind(this, callback));\n  }\n\n  /**\n   * TODO: write description. Used for export feature\n   *\n   * @param  {Function} callback [description]\n   * @return {*}            [description]\n   */\n  getFileIdsAsync(/* callback */) {\n    let terrainChunk = this.mapFile.getChunk(\"trn\");\n    let pimgTableDataChunk = this.mapFile.getChunk(\"pimg\");\n    let fileIds = [];\n\n    /// ------------ SPLASH TEXTURES ------------\n    let pimgData = pimgTableDataChunk && pimgTableDataChunk.data;\n    let strippedPages = pimgData.strippedPages;\n\n    /// Only use layer 0\n    strippedPages.forEach(function (page) {\n      /// Only load layer 0 and 1\n      if (page.layer <= 1 && page.filename > 0) {\n        fileIds.push(page.filename);\n      }\n    });\n    /// ------------ END SPLASH TEXTURES ------------\n\n    /// ------------ TILED IMAGES ------------\n    let terrainData = terrainChunk.data;\n    let allTextures = terrainData.materials.texFileArray;\n    allTextures.forEach(function (texture) {\n      if (texture.filename > 0) fileIds.push(texture.filename);\n    });\n    /// ------------ END TILED IMAGES ------------\n\n    return fileIds;\n  }\n}\n\nTerrainRenderer.rendererName = \"TerrainRenderer\";\nmodule.exports = TerrainRenderer;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RenderUtils = require(\"../util/RenderUtils\");\nconst DataRenderer = require(\"./DataRenderer\");\n\n/**\n *\n * A renderer that generates zone models for a map.\n *\n * @class ZoneRenderer\n * @constructor\n * @extends DataRenderer\n * @param  {LocalReader} localReader  The LocalReader instance to read data from.\n * @param  {Object} settings     Any settings used by this renderer.\n * *Must* specify \"mapFile\", a GW2File.\n * @param  {Object} context      Shared value object between renderers.\n * @param  {Logger} logger       The logging class to use for progress, warnings, errors et cetera.\n */\nclass ZoneRenderer extends DataRenderer {\n  constructor(localReader, settings, context, logger) {\n    super(localReader, settings, context, logger, \"ZoneRenderer\");\n    this.mapFile = this.settings.mapFile;\n  }\n  /**\n   * TODO\n   *\n   * @param  {*} zone               [description]\n   * @param  {*} zoneDefs           [description]\n   * @param  {*} mapRect            [description]\n   * @param  {*} renderZoneCallback [description]\n   * @return {*}                    [description]\n   */\n  renderZone(zone, zoneDefs, mapRect, renderZoneCallback) {\n    let self = this;\n\n    /// Get Zone Definition\n    let zoneDef = null;\n    zoneDefs.forEach(function (zd) {\n      if (!zoneDef && zd.token === zone.defToken) zoneDef = zd;\n    });\n\n    /// Create array of all models to add:\n    // let models = []\n    let modelGroups = this.getModelGroups(zone, zoneDef, mapRect);\n\n    /// Create empty mesh cache\n    self.meshCache = {};\n    self.textureCache = {};\n\n    /*\n     * ---Keeping this out of the doc for now---\n     * Steps trough each model and renders it to the scene, allowing for efficient caching.\n     * @param  {Number} i - Current index within the models array\n     */\n    // var lastPct = -1;\n    let groupKeys = Object.keys(modelGroups);\n    function stepModels(i) {\n      /* var pct = Math.round(100.0*i / groupKeys.length);\n      if(lastPct!=pct){\n        console.log(\"Rendering ZONE models \"+pct);\n        lastPct = pct;\n      } */\n\n      if (i >= groupKeys.length) {\n        /// Empty mesh cache\n        self.meshCache = {};\n        self.textureCache = {};\n\n        /// Tell caller this zone is done loading\n        renderZoneCallback();\n        return;\n      }\n\n      /// Read model at index\n      /// var model = models[i];\n      let key = groupKeys[i]; /// key is model filename\n      let group = modelGroups[key];\n\n      let meshGroups = [];\n\n      /// Get model just once for this group\n      let showUnmaterialed = false;\n      RenderUtils.getMeshesForFilename(\n        key,\n        null,\n        self.localReader,\n        self.meshCache,\n        self.textureCache,\n        showUnmaterialed,\n\n        function (meshes /*, isCached*/) {\n          /// If there were meshes, add them to the scene with correct scaling rotation etc.\n          if (meshes /* && meshes.length == 3 */) {\n            /// Add one copy per model instance\n            /// TODO: add rotation!\n            /// TODO: fine tune position?\n            /// TODO: POTIMIZE!\n\n            group.forEach(function (model, instanceIdx) {\n              //let isCached = true;\n              //let scale = 1.0;\n\n              /// For each Mesh in the model\n              meshes.forEach(function (mesh, meshIdx) {\n                if (mesh.materialFlags === 525 /* || mesh.materialFlags == 520 || mesh.materialFlags == 521 */) {\n                  // console.log(\"Skipping lod\");\n                  return;\n                }\n\n                let move = { x: 0, y: 0, z: 0 };\n\n                /// Add to big mesh\n                if (!meshGroups[meshIdx]) {\n                  let mg = mesh.geometry.clone();\n                  meshGroups[meshIdx] = {\n                    readVerts: mg.getAttribute(\"position\").array,\n                    verts: new Float32Array(group.length * mg.getAttribute(\"position\").array.length),\n\n                    readIndices: mg.getIndex().array,\n                    indices: new Uint32Array(group.length * mg.getIndex().array.length),\n\n                    readUVs: mg.getAttribute(\"uv\").array,\n                    uvs: new Float32Array(group.length * mg.getAttribute(\"uv\").array.length),\n\n                    readNormals: mg.getAttribute(\"normal\").array,\n                    normals: new Float32Array(group.length * mg.getAttribute(\"normal\").array.length),\n\n                    material: mesh.material,\n                    // material:new THREE.MeshBasicMaterial( {color: 0xffcccc, wireframe:true} ),\n                    /* material : new THREE.PointCloudMaterial ({\n                        color: 0xFF0000,\n                        size: 20\n                      }), */\n                    position: { x: model.x, y: model.y, z: model.z },\n                  };\n                } else {\n                  /// Translate\n                  move.x = model.x - meshGroups[meshIdx].position.x;\n                  move.y = model.z - meshGroups[meshIdx].position.z;\n                  move.z = model.y - meshGroups[meshIdx].position.y;\n                }\n\n                /// Add geom verts\n                let readVerts = meshGroups[meshIdx].readVerts;\n                let writeVerts = meshGroups[meshIdx].verts;\n                let stride = readVerts.length;\n\n                for (let i = 0, j = instanceIdx * stride; i < stride; i += 3, j += 3) {\n                  writeVerts[j + 0] = readVerts[i + 0] + move.x;\n                  writeVerts[j + 1] = readVerts[i + 1] + move.y;\n                  writeVerts[j + 2] = readVerts[i + 2] + move.z;\n                }\n\n                let readIndices = meshGroups[meshIdx].readIndices;\n                let writeIndices = meshGroups[meshIdx].indices;\n                let strideIndices = readIndices.length;\n                let shift = (stride * instanceIdx) / 3;\n\n                for (let i = 0, j = instanceIdx * strideIndices; i < strideIndices; i++, j++) {\n                  writeIndices[j] = readIndices[i] + shift;\n                }\n\n                let readUVs = meshGroups[meshIdx].readUVs;\n                let writeUvs = meshGroups[meshIdx].uvs;\n                let uvStride = readUVs.length;\n                for (let i = 0, j = instanceIdx * uvStride; i < uvStride; i++, j++) {\n                  writeUvs[j] = readUVs[i];\n                }\n\n                let readNormals = meshGroups[meshIdx].readNormals;\n                let writeNormals = meshGroups[meshIdx].normals;\n                let normalStride = readNormals.length;\n                for (let i = 0, j = instanceIdx * normalStride; i < normalStride; i++, j++) {\n                  writeNormals[j] = readNormals[i];\n                }\n              });\n            }); // End for each model in group\n          } /// End if meshes\n\n          /// Add each cluster of merged meshes to scene\n          meshGroups.forEach(function (meshGroup) {\n            let mergedGeom = new THREE.BufferGeometry();\n\n            mergedGeom.addAttribute(\"position\", new THREE.BufferAttribute(meshGroup.verts, 3));\n            // mergedGeom.addAttribute( 'index', new THREE.BufferAttribute( meshGroup.indices, 1) );\n            mergedGeom.setIndex(new THREE.BufferAttribute(meshGroup.indices, 1));\n            mergedGeom.addAttribute(\"normal\", new THREE.BufferAttribute(meshGroup.normals, 3));\n            mergedGeom.addAttribute(\"uv\", new THREE.BufferAttribute(meshGroup.uvs, 2));\n\n            mergedGeom.buffersNeedUpdate = true;\n\n            let mesh = new THREE.Mesh(mergedGeom, meshGroup.material);\n            mesh.position.set(meshGroup.position.x, meshGroup.position.z, meshGroup.position.y);\n\n            self.getOutput().meshes.push(mesh);\n          }); // End for each meshgroup\n\n          /// Rendering is done, render next.\n          stepModels(i + 1);\n        }\n      );\n    } /// End function stepModels\n\n    /// Begin stepping trough the models, rendering them.\n    stepModels(0);\n  }\n\n  /**\n   * TODO\n   *\n   * @param  {*} zone    [description]\n   * @param  {*} zoneDef [description]\n   * @param  {*} mapRect [description]\n   * @return {*}         [description]\n   */\n  getModelGroups(zone, zoneDef, mapRect) {\n    /// Calculate rect in global coordinates\n    // let zPos = zone.zPos;\n\n    let mapX = mapRect[0];\n    let mapY = mapRect[1];\n    let c = 32 + 16;\n\n    // [\"x1\",\"uint32\",\"y1\",\"uint32\",\"x2\",\"uint32\", \"y2\", \"uint32\"]\n    let zoneRect = {\n      x1: zone.vertRect[0] * c + mapX,\n      x2: zone.vertRect[2] * c + mapX,\n      y1: zone.vertRect[1] * -c - mapY,\n      y2: zone.vertRect[3] * -c - mapY,\n    };\n\n    /// Zone width and depth in local corrdinates\n    /* var zdx = zone.vertRect.x1-zone.vertRect.x2;\n    var zdy = zone.vertRect.y1-zone.vertRect.y2; */\n\n    /// These zones seems to overflow :/\n    if (zone.encodeData.length === 0) {\n      return {};\n    }\n\n    // console.log(\"Get mdl groups\", zone);\n    /// Testing: Render Zone Vert Rect\n    // RenderUtils.renderRect(zoneRect, -zPos);\n\n    let zdx = zone.vertRect[0] - zone.vertRect[2];\n    // let zdy = zone.vertRect[1] - zone.vertRect[3];\n\n    /// Zone Flags increases a linear position, used to step trough the Zone.\n    let linearPos = 0;\n\n    let modelGroups = {};\n\n    let terrainTiles = this.getOutput(T3D.TerrainRenderer).terrainTiles;\n\n    for (let i = 0; i < zone.flags.length; i += 2) {\n      /// Step forward\n      linearPos += zone.flags[i];\n\n      /// Check if a model should be placed\n      let flag = zone.flags[i + 1];\n      if (flag !== 0) {\n        /// Extract flag data\n        /// Layer is written in the last 4 bytes\n        let zoneDefLayer = flag >> 4;\n\n        /// Get Zone Definition Layer\n        let layer = zoneDef.layerDefArray[zoneDefLayer - 1];\n\n        /// TESTING Only show layers with height >= 3\n        if (layer /* && layer.height >= 0 */) {\n          /// Get X and Y from linear position\n          let modelX = (linearPos % zdx) * c + zoneRect.x1;\n          let modelY = Math.floor(linearPos / zdx) * c + zoneRect.y1;\n\n          /// Get Z from intersection with terrain\n          let modelZ = null;\n\n          let startZ = 100000;\n\n          let raycaster = new THREE.Raycaster(new THREE.Vector3(modelX, startZ, modelY), new THREE.Vector3(0, -1, 0));\n\n          /// TODO: OPT?\n          terrainTiles.forEach(function (chunk) {\n            if (modelZ === null) {\n              let intersections = raycaster.intersectObject(chunk);\n              if (intersections.length > 0) {\n                modelZ = startZ - intersections[0].distance;\n              }\n            }\n          });\n\n          /// Get model id\n          /// TODO: check with modelIdx = flag & 0xf;\n          let modelIdx = 0;\n          let model = layer.modelArray[modelIdx];\n          let modelFilename = model.filename;\n          // let zOffsets = model.zOffsets;\n\n          // let layerFlags = layer.layerFlags; // NOrmaly 128, 128\n\n          // TODO: flip z,y?\n          let rotRangeX = layer.rotRangeX; // max min\n          let rotRangeY = layer.rotRangeY; // max min\n          let rotRangeZ = layer.rotRangeZ; // max min\n          let scaleRange = layer.scaleRange; // max min\n          let fadeRange = layer.fadeRange; // max min\n\n          // Unused\n          // tiling: 3\n          // type: 1\n          // width: 2\n          // radiusGround: 2\n\n          /// Create modelGroup (this zone only)\n          if (!modelGroups[modelFilename]) {\n            modelGroups[modelFilename] = [];\n          }\n\n          /// Add entry to model group\n          modelGroups[modelFilename].push({\n            x: modelX,\n            y: modelY,\n            z: modelZ,\n            rotRangeX: rotRangeX,\n            rotRangeY: rotRangeY,\n            rotRangeZ: rotRangeZ,\n            scaleRange: scaleRange,\n            fadeRange: fadeRange,\n          });\n        } /// End if layer\n      } /// End if flag != 0\n    } /// End for each flag\n\n    return modelGroups;\n  }\n\n  /**\n   * Renders all zone meshes in a GW2 map described by the map's \"zon2\" chunk.\n   * Output fileds generated:\n   *\n   * - *meshes* An array of THREE.Mesh objects visualizing all zone models refered by this map.\n   *\n   * @async\n   * @param  {Function} callback Fires when renderer is finished, does not take arguments.\n   */\n  renderAsync(callback) {\n    let self = this;\n\n    /// Set up output array\n    self.getOutput().meshes = [];\n\n    let zoneChunkData = this.mapFile.getChunk(\"zon2\").data;\n    let parameterChunkData = this.mapFile.getChunk(\"parm\").data;\n    // let terrainChunkData = this.mapFile.getChunk(\"trn\").data;\n    let mapRect = parameterChunkData.rect;\n\n    /// Zone data\n    let zones = zoneChunkData.zoneArray;\n    let zoneDefs = zoneChunkData.zoneDefArray;\n\n    /// Render each zone\n    let lastPct = -1;\n\n    /// Main render loop, render each zone\n    function stepZone(i) {\n      let pct = Math.round((100.0 * i) / zones.length);\n      if (lastPct !== pct) {\n        self.logger.log(T3D.Logger.TYPE_PROGRESS, \"Loading 3D Models (Zone)\", pct);\n        lastPct = pct;\n      }\n\n      if (i >= zones.length) {\n        callback();\n        return;\n      }\n\n      /// Main zone render function call\n      self.renderZone(zones[i], zoneDefs, mapRect, stepZone.bind(self, i + 1));\n    }\n\n    stepZone(0);\n  }\n}\n\nZoneRenderer.rendererName = \"ZoneRenderer\";\nmodule.exports = ZoneRenderer;\n\n/// NOT USED??\n// eslint-disable-next-line no-unused-vars\nfunction addZoneMeshesToScene(meshes, isCached, position, scale, rotation) {\n  /// Called for each mesh in the zone\n  /// TODO: Opt opt opt...\n\n  meshes.forEach(function (mesh) {\n    /// Create new mesh if we got back a cached original.\n    if (isCached) mesh = new THREE.Mesh(mesh.geometry, mesh.material);\n\n    /// Scale, position and rotate.\n    mesh.scale.set(scale, scale, scale);\n    if (rotation) {\n      mesh.rotation.order = \"ZXY\";\n      mesh.rotation.set(rotation.x, rotation.y, rotation.z);\n    }\n    mesh.position.set(position.x, position.y, position.z);\n\n    /// Add to export\n    this.getOutput().meshes.push(mesh);\n  });\n}\n\n/// / Not used: zone defintion per chunk data \"images\" 32*32 points\n/*\n//Total map dx and dy\nvar d = terrainChunkHeader.data;\nvar pd = parameterChunkHeader.data;\nvar dx = (pd.rect.x2-pd.rect.x1);\nvar dy = (pd.rect.y2-pd.rect.y1);\n\n//Each chunk dx and dy\n\nvar c =1;\nvar cdx = c*dx/d.dims.dim1;\n\nvar cdy = c*dy/d.dims.dim2;\n\nvar cdx = dx/(d.numChunksD_1*2);\nvar cdy =dy/(d.numChunksD_2*2);\n\nfor(var i=0; i<zoneDefs.length; i++){\n  var zoneDef = zoneDefs[i];\n\n  //TODO: opt!\n  zoneDef.layerDefs.forEach(function(layer){\n\n    layer.modelArray.forEach(function(model){\n\n    });\n\n  });\n\n  var chunkMat = new THREE.MeshBasicMaterial(\n    {\n      color: 0x00ff00,\n      wireframe:true,\n       opacity: 1.0,\n    }\n  );\n\n  //TODO: opt!\n\n  if(\n    zoneDef.token == 597  ||\n    zoneDef.token == 1369  ||\n    zoneDef.token == 903\n  ){\n\n    zoneDef.pageTable.pageArray.forEach(function(page){\n      var flags = page.flags;\n      var coord = page.chunkCoord;\n\n      //Hightlight this coord\n      var rect = {};\n\n      //var globalOffsetX = pd.rect.x2 - cdx;\n      var globalOffsetX = pd.rect.x1 + cdx/2;\n      var chunkOffsetX = coord[0] * cdx;\n\n      rect.x1  = globalOffsetX + chunkOffsetX;\n\n      ///Adjust for odd / even number of chunks\n      if(d.numChunksD_2 % 2 == 0){\n\n        var globalOffsetY = -pd.rect.y1;\n        var chunkOffsetY = -coord[1] * cdy;\n\n        rect.y1  =  chunkOffsetY + globalOffsetY;\n      }\n      else{\n\n        var globalOffsetY =  -pd.rect.y1;\n        var chunkOffsetY = -coord[1] * cdy;\n\n        rect.y1 = globalOffsetY +  chunkOffsetY;\n      }\n\n      rect.x2 = rect.x1+cdx;\n      rect.y2 = rect.y1+cdy;\n\n      RenderUtils.renderRect(rect, 4000,chunkMat, 4000);\n\n      //for(var j=0; j<flags.length; j++){\n      //  if(flags[j]>0){\n      //    console.log(\"Found flag\",flags[j],\"@ zoneDef\",zoneDef.token,\"coord\",coord,\"index\",j);\n      //  }\n      //}\n    });\n\n  }\n\n} */\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * An auto-generated structure of arrays describing Chunk formats\n * in the GW2 dat. The main contents of this file is generated\n * using the IDA script file 'IDA_generator_script.idc'\n * located in the IDA folder.\n *\n * @for T3D\n * @property formats\n * @type {Array<{name: string, versions: {Object}>}\n */\n\nlet definitionArray = [];\n\n// Definition for chunks GRMT:\nlet GRMT = require(\"./grmt.js\");\ndefinitionArray = definitionArray.concat(GRMT);\n\n// Definition for chunks DX9S:\nlet DX9S = require(\"./dx9s.js\");\ndefinitionArray = definitionArray.concat(DX9S);\n\n// Definition for chunks TOOL:\nlet TOOL = require(\"./tool.js\");\ndefinitionArray = definitionArray.concat(TOOL);\n\n// Definition for chunks XBXS:\nlet XBXS = require(\"./xbxs.js\");\ndefinitionArray = definitionArray.concat(XBXS);\n\n// Definition for chunks UPDB:\nlet UPDB = require(\"./updb.js\");\ndefinitionArray = definitionArray.concat(UPDB);\n\n// Definition for chunks PS3S:\nlet PS3S = require(\"./ps3s.js\");\ndefinitionArray = definitionArray.concat(PS3S);\n\n// Definition for chunks UPDA:\nlet UPDA = require(\"./upda.js\");\ndefinitionArray = definitionArray.concat(UPDA);\n\n// Definition for chunks MRAS:\nlet MRAS = require(\"./mras.js\");\ndefinitionArray = definitionArray.concat(MRAS);\n\n// Definition for chunks XSHD:\nlet XSHD = require(\"./xshd.js\");\ndefinitionArray = definitionArray.concat(XSHD);\n\n// Definition for chunks PPSH:\nlet PPSH = require(\"./ppsh.js\");\ndefinitionArray = definitionArray.concat(PPSH);\n\n// Definition for chunks PVSH:\nlet PVSH = require(\"./pvsh.js\");\ndefinitionArray = definitionArray.concat(PVSH);\n\n// Definition for chunks SPPA:\nlet SPPA = require(\"./sppa.js\");\ndefinitionArray = definitionArray.concat(SPPA);\n\n// Definition for chunks CDHS:\nlet CDHS = require(\"./cdhs.js\");\ndefinitionArray = definitionArray.concat(CDHS);\n\n// Definition for chunks PGTB:\nlet PGTB = require(\"./pgtb.js\");\ndefinitionArray = definitionArray.concat(PGTB);\n\n// Definition for chunks DATA:\nlet DATA = require(\"./data.js\");\ndefinitionArray = definitionArray.concat(DATA);\n\n// Definition for chunks txtm:\nlet txtm = require(\"./txtm.js\");\ndefinitionArray = definitionArray.concat(txtm);\n\n// Definition for chunks txtp:\nlet txtp = require(\"./txtp.js\");\ndefinitionArray = definitionArray.concat(txtp);\n\n// Definition for chunks txtv:\nlet txtv = require(\"./txtv.js\");\ndefinitionArray = definitionArray.concat(txtv);\n\n// Definition for chunks vari:\nlet vari = require(\"./vari.js\");\ndefinitionArray = definitionArray.concat(vari);\n\n// Definition for chunks AMSP:\nlet AMSP = require(\"./amsp.js\");\ndefinitionArray = definitionArray.concat(AMSP);\n\n// Definition for chunks BKCK:\nlet BKCK = require(\"./bkck.js\");\ndefinitionArray = definitionArray.concat(BKCK);\n\n// Definition for chunks BIDX:\nlet BIDX = require(\"./bidx.js\");\ndefinitionArray = definitionArray.concat(BIDX);\n\n// Definition for chunks ASND:\nlet ASND = require(\"./asnd.js\");\ndefinitionArray = definitionArray.concat(ASND);\n\n// Definition for chunks CSCN:\nlet CSCN = require(\"./cscn.js\");\ndefinitionArray = definitionArray.concat(CSCN);\n\n// Definition for chunks havk:\nlet havk = require(\"./havk.js\");\ndefinitionArray = definitionArray.concat(havk);\n\n// Definition for chunks shad:\nlet shad = require(\"./shad.js\");\ndefinitionArray = definitionArray.concat(shad);\n\n// Definition for chunks area:\nlet area = require(\"./area.js\");\ndefinitionArray = definitionArray.concat(area);\n\n// Definition for chunks audi:\nlet audi = require(\"./audi.js\");\ndefinitionArray = definitionArray.concat(audi);\n\n// Definition for chunks bloc:\nlet bloc = require(\"./bloc.js\");\ndefinitionArray = definitionArray.concat(bloc);\n\n// Definition for chunks cg15:\nlet cg15 = require(\"./cg15.js\");\ndefinitionArray = definitionArray.concat(cg15);\n\n// Definition for chunks cube:\nlet cube = require(\"./cube.js\");\ndefinitionArray = definitionArray.concat(cube);\n\n// Definition for chunks env:\nlet env = require(\"./env.js\");\ndefinitionArray = definitionArray.concat(env);\n\n// Definition for chunks laye:\nlet laye = require(\"./laye.js\");\ndefinitionArray = definitionArray.concat(laye);\n\n// Definition for chunks lght:\nlet lght = require(\"./lght.js\");\ndefinitionArray = definitionArray.concat(lght);\n\n// Definition for chunks msn:\nlet msn = require(\"./msn.js\");\ndefinitionArray = definitionArray.concat(msn);\n\n// Definition for chunks nm15:\nlet nm15 = require(\"./nm15.js\");\ndefinitionArray = definitionArray.concat(nm15);\n\n// Definition for chunks nmex:\nlet nmex = require(\"./nmex.js\");\ndefinitionArray = definitionArray.concat(nmex);\n\n// Definition for chunks obs:\nlet obs = require(\"./obs.js\");\ndefinitionArray = definitionArray.concat(obs);\n\n// Definition for chunks occ:\nlet occ = require(\"./occ.js\");\ndefinitionArray = definitionArray.concat(occ);\n\n// Definition for chunks octm:\nlet octm = require(\"./octm.js\");\ndefinitionArray = definitionArray.concat(octm);\n\n// Definition for chunks parm:\nlet parm = require(\"./parm.js\");\ndefinitionArray = definitionArray.concat(parm);\n\n// Definition for chunks phys:\nlet phys = require(\"./phys-0.js\");\ndefinitionArray = definitionArray.concat(phys);\n\n// Definition for chunks pnvm:\nlet pnvm = require(\"./pnvm.js\");\ndefinitionArray = definitionArray.concat(pnvm);\n\n// Definition for chunks prp2:\nlet prp2 = require(\"./prp2.js\");\ndefinitionArray = definitionArray.concat(prp2);\n\n// Definition for chunks reso:\nlet reso = require(\"./reso.js\");\ndefinitionArray = definitionArray.concat(reso);\n\n// Definition for chunks rive:\nlet rive = require(\"./rive.js\");\ndefinitionArray = definitionArray.concat(rive);\n\n// Definition for chunks tlfs:\nlet tlfs = require(\"./tlfs.js\");\ndefinitionArray = definitionArray.concat(tlfs);\n\n// Definition for chunks shex:\nlet shex = require(\"./shex.js\");\ndefinitionArray = definitionArray.concat(shex);\n\n// Definition for chunks shor:\nlet shor = require(\"./shor.js\");\ndefinitionArray = definitionArray.concat(shor);\n\n// Definition for chunks snd:\nlet snd = require(\"./snd.js\");\ndefinitionArray = definitionArray.concat(snd);\n\n// Definition for chunks surf:\nlet surf = require(\"./surf.js\");\ndefinitionArray = definitionArray.concat(surf);\n\n// Definition for chunks zon2:\nlet zon2 = require(\"./zon2.js\");\ndefinitionArray = definitionArray.concat(zon2);\n\n// Definition for chunks trn:\nlet trn = require(\"./trn.js\");\ndefinitionArray = definitionArray.concat(trn);\n\n// Definition for chunks trni:\nlet trni = require(\"./trni.js\");\ndefinitionArray = definitionArray.concat(trni);\n\n// Definition for chunks watr:\nlet watr = require(\"./watr.js\");\ndefinitionArray = definitionArray.concat(watr);\n\n// Definition for chunks edit:\nlet edit = require(\"./edit.js\");\ndefinitionArray = definitionArray.concat(edit);\n\n// Definition for chunks dcal:\nlet dcal = require(\"./dcal.js\");\ndefinitionArray = definitionArray.concat(dcal);\n\n// Definition for chunks exp:\nlet exp = require(\"./exp.js\");\ndefinitionArray = definitionArray.concat(exp);\n\n// Definition for chunks pack:\nlet pack = require(\"./pack.js\");\ndefinitionArray = definitionArray.concat(pack);\n\n// Definition for chunks MODL:\nlet MODL = require(\"./modl.js\");\ndefinitionArray = definitionArray.concat(MODL);\n\n// Definition for chunks ANIM:\nlet ANIM = require(\"./anim-0.js\");\ndefinitionArray = definitionArray.concat(ANIM);\n\n// Definition for chunks COLL:\nlet COLL = require(\"./coll.js\");\ndefinitionArray = definitionArray.concat(COLL);\n\n// Definition for chunks GR2S:\nlet GR2S = require(\"./gr2s.js\");\ndefinitionArray = definitionArray.concat(GR2S);\n\n// Definition for chunks ROOT:\nlet ROOT = require(\"./root.js\");\ndefinitionArray = definitionArray.concat(ROOT);\n\n// Definition for chunks GAME:\nlet GAME = require(\"./game.js\");\ndefinitionArray = definitionArray.concat(GAME);\n\n// Definition for chunks ICON:\nlet ICON = require(\"./icon.js\");\ndefinitionArray = definitionArray.concat(ICON);\n\n// Definition for chunks SKEL:\nlet SKEL = require(\"./skel.js\");\ndefinitionArray = definitionArray.concat(SKEL);\n\n// Definition for chunks PRPS:\nlet PRPS = require(\"./prps.js\");\ndefinitionArray = definitionArray.concat(PRPS);\n\n// Definition for chunks GEOM:\nlet GEOM = require(\"./geom.js\");\ndefinitionArray = definitionArray.concat(GEOM);\n\n// Definition for chunks EXPA:\nlet EXPA = require(\"./expa.js\");\ndefinitionArray = definitionArray.concat(EXPA);\n\n// Definition for chunks PHYS:\nlet PHYS = require(\"./phys-1.js\");\ndefinitionArray = definitionArray.concat(PHYS);\n\n// Definition for chunks MFST:\nlet MFST = require(\"./mfst-0.js\");\ndefinitionArray = definitionArray.concat(MFST);\n\n// Definition for chunks ARMF:\nlet ARMF = require(\"./armf.js\");\ndefinitionArray = definitionArray.concat(ARMF);\n\n// Definition for chunks TKAC:\nlet TKAC = require(\"./tkac.js\");\ndefinitionArray = definitionArray.concat(TKAC);\n\n// Definition for chunks main:\nlet main = require(\"./main-0.js\");\ndefinitionArray = definitionArray.concat(main);\n\n// Definition for chunks comp:\nlet comp = require(\"./comp.js\");\ndefinitionArray = definitionArray.concat(comp);\n\n// Definition for chunks Main:\nlet Main = require(\"./main-1.js\");\ndefinitionArray = definitionArray.concat(Main);\n\n// Definition for chunks anim:\nlet anim = require(\"./anim-1.js\");\ndefinitionArray = definitionArray.concat(anim);\n\n// Definition for chunks eula:\nlet eula = require(\"./eula.js\");\ndefinitionArray = definitionArray.concat(eula);\n\n// Definition for chunks mach:\nlet mach = require(\"./mach.js\");\ndefinitionArray = definitionArray.concat(mach);\n\n// Definition for chunks fall:\nlet fall = require(\"./fall.js\");\ndefinitionArray = definitionArray.concat(fall);\n\n// Definition for chunks seqn:\nlet seqn = require(\"./seqn.js\");\ndefinitionArray = definitionArray.concat(seqn);\n\n// Definition for chunks cnfg:\nlet cnfg = require(\"./cnfg.js\");\ndefinitionArray = definitionArray.concat(cnfg);\n\n// Definition for chunks mfst:\nlet mfst = require(\"./mfst-1.js\");\ndefinitionArray = definitionArray.concat(mfst);\n\nmodule.exports = definitionArray;\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: AMSP, versions: 30, strucTab: 0x16CF138\n  /// ==================================================\n\n  {\n    name: \"AMSP\",\n    versions: {\n      // => Version: 29\n      29: function () {\n        this.DspDataV29 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV29),\n        ];\n\n        this.BussDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"output\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"normalizeFadeTime\",\n          \"float32\",\n          \"normalizeThreshold\",\n          \"float32\",\n          \"normalizeMaxAmp\",\n          \"float32\",\n          \"compressorThreshold\",\n          \"float32\",\n          \"compressorAttack\",\n          \"float32\",\n          \"compressorRelease\",\n          \"float32\",\n          \"compressorGainMakeup\",\n          \"float32\",\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV29),\n        ];\n\n        this.EnvelopePointDataV29 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV29 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV29),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV29 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV29 = [\"time\", this.RangeDataV29, \"value\", this.RangeDataV29];\n\n        this.DynamicParamDataV29 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV29),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV29),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV29 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV29,\n          \"highPass\",\n          this.DynamicParamDataV29,\n          \"pan3D\",\n          this.DynamicParamDataV29,\n          \"reverb\",\n          this.DynamicParamDataV29,\n          \"spread3D\",\n          this.DynamicParamDataV29,\n          \"volumeA\",\n          this.DynamicParamDataV29,\n          \"volumeB\",\n          this.DynamicParamDataV29,\n          \"lfe\",\n          this.DynamicParamDataV29,\n        ];\n\n        this.CategoryDynamicDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"highPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"minAudible\",\n          \"uint32\",\n          \"maxAudibleLQ\",\n          \"uint32\",\n          \"maxAudibleHG\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV29),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV29),\n          \"focusReserve\",\n          \"float32\",\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.MaterialDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"absorptionLF\",\n          \"float32\",\n          \"absorptionMF\",\n          \"float32\",\n          \"absorptionHF\",\n          \"float32\",\n          \"occlusion\",\n          \"float32\",\n        ];\n\n        this.MusicConditionDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV29 = [\n          \"condition\",\n          Utils.getQWordReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n          \"noteBase\",\n          \"uint8\",\n          \"noteMin\",\n          \"uint8\",\n          \"noteMax\",\n          \"uint8\",\n        ];\n\n        this.MusicPlaylistDataV29 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"primaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"secondaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV29),\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"initialSilence\",\n          this.RangeDataV29,\n          \"intervalSilence\",\n          this.RangeDataV29,\n          \"maxPlayLength\",\n          this.RangeDataV29,\n          \"volume\",\n          this.DynamicParamDataV29,\n          \"fileIterateMode\",\n          \"uint8\",\n        ];\n\n        this.PropertyDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"tokenValue\",\n          Utils.getQWordReader(),\n          \"floatValue\",\n          \"float32\",\n        ];\n\n        this.ReverbDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.ScriptRefDataV29 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.SnapshotDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV29),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV29),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.MusicExternalDataV29 = [\"name\", Utils.getQWordReader(), \"externalPlaylist\", Utils.getString16Reader()];\n\n        this.AudioSettingsDataV29 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"echoLevel\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"memoryPool\",\n          \"float32\",\n          \"reverbLevel\",\n          \"float32\",\n          \"minChannelsLQ\",\n          \"uint32\",\n          \"maxChannelsLQ\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV29),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV29),\n          \"material\",\n          Utils.getArrayReader(this.MaterialDataV29),\n          \"musicCondition\",\n          Utils.getArrayReader(this.MusicConditionDataV29),\n          \"musicPlaylist\",\n          Utils.getArrayReader(this.MusicPlaylistDataV29),\n          \"property\",\n          Utils.getArrayReader(this.PropertyDataV29),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV29),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV29),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV29),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicExternal\",\n          Utils.getArrayReader(this.MusicExternalDataV29),\n        ];\n\n        this.HandlerDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.MetaSoundDataV29 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV29),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV29),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV29),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV29,\n          \"pan\",\n          this.DynamicParamDataV29,\n          \"pitch\",\n          this.DynamicParamDataV29,\n          \"pitchMS\",\n          this.DynamicParamDataV29,\n          \"volume\",\n          this.DynamicParamDataV29,\n          \"volumeMS\",\n          this.DynamicParamDataV29,\n          \"initialDelay\",\n          this.RangeDataV29,\n          \"playLength\",\n          this.RangeDataV29,\n          \"positionOffsetAngle\",\n          this.RangeDataV29,\n          \"positionRange\",\n          this.RangeDataV29,\n          \"repeatCount\",\n          this.RangeDataV29,\n          \"repeatTime\",\n          this.RangeDataV29,\n          \"replayDelay\",\n          this.RangeDataV29,\n          \"startTimeOffset\",\n          this.RangeDataV29,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.TriggerMarkerDataV29 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV29),\n        ];\n\n        this.__root = this.ScriptFileDataV29 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV29),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV29),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV29),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV29),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV29),\n          \"property\",\n          Utils.getArrayReader(this.PropertyDataV29),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n          \"musicMutePriority\",\n          \"uint8\",\n          \"soundPoolMode\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 28\n      28: function () {\n        this.DspDataV28 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV28),\n        ];\n\n        this.BussDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"output\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"normalizeFadeTime\",\n          \"float32\",\n          \"normalizeThreshold\",\n          \"float32\",\n          \"normalizeMaxAmp\",\n          \"float32\",\n          \"compressorThreshold\",\n          \"float32\",\n          \"compressorAttack\",\n          \"float32\",\n          \"compressorRelease\",\n          \"float32\",\n          \"compressorGainMakeup\",\n          \"float32\",\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV28),\n        ];\n\n        this.EnvelopePointDataV28 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV28 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV28),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV28 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV28 = [\"time\", this.RangeDataV28, \"value\", this.RangeDataV28];\n\n        this.DynamicParamDataV28 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV28),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV28),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV28 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV28,\n          \"highPass\",\n          this.DynamicParamDataV28,\n          \"pan3D\",\n          this.DynamicParamDataV28,\n          \"reverb\",\n          this.DynamicParamDataV28,\n          \"spread3D\",\n          this.DynamicParamDataV28,\n          \"volumeA\",\n          this.DynamicParamDataV28,\n          \"volumeB\",\n          this.DynamicParamDataV28,\n          \"lfe\",\n          this.DynamicParamDataV28,\n        ];\n\n        this.CategoryDynamicDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"highPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"minAudible\",\n          \"uint32\",\n          \"maxAudibleLQ\",\n          \"uint32\",\n          \"maxAudibleHG\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV28),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV28),\n          \"focusReserve\",\n          \"float32\",\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.MaterialDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"absorptionLF\",\n          \"float32\",\n          \"absorptionMF\",\n          \"float32\",\n          \"absorptionHF\",\n          \"float32\",\n          \"occlusion\",\n          \"float32\",\n        ];\n\n        this.MusicConditionDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV28 = [\n          \"condition\",\n          Utils.getQWordReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n          \"noteBase\",\n          \"uint8\",\n          \"noteMin\",\n          \"uint8\",\n          \"noteMax\",\n          \"uint8\",\n        ];\n\n        this.MusicPlaylistDataV28 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"primaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"secondaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV28),\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"initialSilence\",\n          this.RangeDataV28,\n          \"intervalSilence\",\n          this.RangeDataV28,\n          \"maxPlayLength\",\n          this.RangeDataV28,\n          \"volume\",\n          this.DynamicParamDataV28,\n          \"fileIterateMode\",\n          \"uint8\",\n        ];\n\n        this.PropertyDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"tokenValue\",\n          Utils.getQWordReader(),\n          \"floatValue\",\n          \"float32\",\n        ];\n\n        this.ReverbDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.ScriptRefDataV28 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.SnapshotDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV28),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV28),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV28 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"echoLevel\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"memoryPool\",\n          \"float32\",\n          \"reverbLevel\",\n          \"float32\",\n          \"minChannelsLQ\",\n          \"uint32\",\n          \"maxChannelsLQ\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV28),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV28),\n          \"material\",\n          Utils.getArrayReader(this.MaterialDataV28),\n          \"musicCondition\",\n          Utils.getArrayReader(this.MusicConditionDataV28),\n          \"musicPlaylist\",\n          Utils.getArrayReader(this.MusicPlaylistDataV28),\n          \"property\",\n          Utils.getArrayReader(this.PropertyDataV28),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV28),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV28),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV28),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.MetaSoundDataV28 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV28),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV28),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV28),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV28,\n          \"pan\",\n          this.DynamicParamDataV28,\n          \"pitch\",\n          this.DynamicParamDataV28,\n          \"pitchMS\",\n          this.DynamicParamDataV28,\n          \"volume\",\n          this.DynamicParamDataV28,\n          \"volumeMS\",\n          this.DynamicParamDataV28,\n          \"initialDelay\",\n          this.RangeDataV28,\n          \"playLength\",\n          this.RangeDataV28,\n          \"positionOffsetAngle\",\n          this.RangeDataV28,\n          \"positionRange\",\n          this.RangeDataV28,\n          \"repeatCount\",\n          this.RangeDataV28,\n          \"repeatTime\",\n          this.RangeDataV28,\n          \"replayDelay\",\n          this.RangeDataV28,\n          \"startTimeOffset\",\n          this.RangeDataV28,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.TriggerMarkerDataV28 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV28),\n        ];\n\n        this.__root = this.ScriptFileDataV28 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV28),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV28),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV28),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV28),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV28),\n          \"property\",\n          Utils.getArrayReader(this.PropertyDataV28),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n          \"musicMutePriority\",\n          \"uint8\",\n          \"soundPoolMode\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 27\n      27: function () {\n        this.DspDataV27 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV27),\n        ];\n\n        this.BussDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"output\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"normalizeFadeTime\",\n          \"float32\",\n          \"normalizeThreshold\",\n          \"float32\",\n          \"normalizeMaxAmp\",\n          \"float32\",\n          \"compressorThreshold\",\n          \"float32\",\n          \"compressorAttack\",\n          \"float32\",\n          \"compressorRelease\",\n          \"float32\",\n          \"compressorGainMakeup\",\n          \"float32\",\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV27),\n        ];\n\n        this.EnvelopePointDataV27 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV27 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV27),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV27 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV27 = [\"time\", this.RangeDataV27, \"value\", this.RangeDataV27];\n\n        this.DynamicParamDataV27 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV27),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV27),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV27 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV27,\n          \"highPass\",\n          this.DynamicParamDataV27,\n          \"pan3D\",\n          this.DynamicParamDataV27,\n          \"reverb\",\n          this.DynamicParamDataV27,\n          \"spread3D\",\n          this.DynamicParamDataV27,\n          \"volumeA\",\n          this.DynamicParamDataV27,\n          \"volumeB\",\n          this.DynamicParamDataV27,\n          \"lfe\",\n          this.DynamicParamDataV27,\n        ];\n\n        this.CategoryDynamicDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"highPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"minAudible\",\n          \"uint32\",\n          \"maxAudibleLQ\",\n          \"uint32\",\n          \"maxAudibleHG\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV27),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV27),\n          \"focusReserve\",\n          \"float32\",\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.MaterialDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"absorptionLF\",\n          \"float32\",\n          \"absorptionMF\",\n          \"float32\",\n          \"absorptionHF\",\n          \"float32\",\n          \"occlusion\",\n          \"float32\",\n        ];\n\n        this.MusicConditionDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV27 = [\n          \"condition\",\n          Utils.getQWordReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n          \"noteBase\",\n          \"uint8\",\n          \"noteMin\",\n          \"uint8\",\n          \"noteMax\",\n          \"uint8\",\n        ];\n\n        this.MusicPlaylistDataV27 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"primaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"secondaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV27),\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"initialSilence\",\n          this.RangeDataV27,\n          \"intervalSilence\",\n          this.RangeDataV27,\n          \"maxPlayLength\",\n          this.RangeDataV27,\n          \"volume\",\n          this.DynamicParamDataV27,\n          \"fileIterateMode\",\n          \"uint8\",\n        ];\n\n        this.PropertyDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"tokenValue\",\n          Utils.getQWordReader(),\n          \"floatValue\",\n          \"float32\",\n        ];\n\n        this.ReverbDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.ScriptRefDataV27 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.SnapshotDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV27),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV27),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV27 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"echoLevel\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"memoryPool\",\n          \"float32\",\n          \"reverbLevel\",\n          \"float32\",\n          \"minChannelsLQ\",\n          \"uint32\",\n          \"maxChannelsLQ\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV27),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV27),\n          \"material\",\n          Utils.getArrayReader(this.MaterialDataV27),\n          \"musicCondition\",\n          Utils.getArrayReader(this.MusicConditionDataV27),\n          \"musicPlaylist\",\n          Utils.getArrayReader(this.MusicPlaylistDataV27),\n          \"property\",\n          Utils.getArrayReader(this.PropertyDataV27),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV27),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV27),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV27),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.MetaSoundDataV27 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV27),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV27),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV27),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV27,\n          \"pan\",\n          this.DynamicParamDataV27,\n          \"pitch\",\n          this.DynamicParamDataV27,\n          \"pitchMS\",\n          this.DynamicParamDataV27,\n          \"volume\",\n          this.DynamicParamDataV27,\n          \"volumeMS\",\n          this.DynamicParamDataV27,\n          \"initialDelay\",\n          this.RangeDataV27,\n          \"playLength\",\n          this.RangeDataV27,\n          \"positionOffsetAngle\",\n          this.RangeDataV27,\n          \"positionRange\",\n          this.RangeDataV27,\n          \"repeatCount\",\n          this.RangeDataV27,\n          \"repeatTime\",\n          this.RangeDataV27,\n          \"startTimeOffset\",\n          this.RangeDataV27,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.TriggerMarkerDataV27 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV27),\n        ];\n\n        this.__root = this.ScriptFileDataV27 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV27),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV27),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV27),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV27),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV27),\n          \"property\",\n          Utils.getArrayReader(this.PropertyDataV27),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n          \"musicMutePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 26\n      26: function () {\n        this.DspDataV26 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV26),\n        ];\n\n        this.BussDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"output\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"normalizeFadeTime\",\n          \"float32\",\n          \"normalizeThreshold\",\n          \"float32\",\n          \"normalizeMaxAmp\",\n          \"float32\",\n          \"compressorThreshold\",\n          \"float32\",\n          \"compressorAttack\",\n          \"float32\",\n          \"compressorRelease\",\n          \"float32\",\n          \"compressorGainMakeup\",\n          \"float32\",\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV26),\n        ];\n\n        this.EnvelopePointDataV26 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV26 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV26),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV26 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV26 = [\"time\", this.RangeDataV26, \"value\", this.RangeDataV26];\n\n        this.DynamicParamDataV26 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV26),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV26),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV26 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV26,\n          \"highPass\",\n          this.DynamicParamDataV26,\n          \"pan3D\",\n          this.DynamicParamDataV26,\n          \"reverb\",\n          this.DynamicParamDataV26,\n          \"spread3D\",\n          this.DynamicParamDataV26,\n          \"volumeA\",\n          this.DynamicParamDataV26,\n          \"volumeB\",\n          this.DynamicParamDataV26,\n          \"lfe\",\n          this.DynamicParamDataV26,\n        ];\n\n        this.CategoryDynamicDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"highPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"minAudible\",\n          \"uint32\",\n          \"maxAudibleLQ\",\n          \"uint32\",\n          \"maxAudibleHG\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV26),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV26),\n          \"focusReserve\",\n          \"float32\",\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.MaterialDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"absorptionLF\",\n          \"float32\",\n          \"absorptionMF\",\n          \"float32\",\n          \"absorptionHF\",\n          \"float32\",\n          \"occlusion\",\n          \"float32\",\n        ];\n\n        this.MusicConditionDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV26 = [\n          \"condition\",\n          Utils.getQWordReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n          \"noteBase\",\n          \"uint8\",\n          \"noteMin\",\n          \"uint8\",\n          \"noteMax\",\n          \"uint8\",\n        ];\n\n        this.MusicPlaylistDataV26 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"primaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"secondaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV26),\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"initialSilence\",\n          this.RangeDataV26,\n          \"intervalSilence\",\n          this.RangeDataV26,\n          \"maxPlayLength\",\n          this.RangeDataV26,\n          \"volume\",\n          this.DynamicParamDataV26,\n          \"fileIterateMode\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV26),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV26),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV26 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"memoryPool\",\n          \"float32\",\n          \"reverbLevel\",\n          \"float32\",\n          \"minChannelsLQ\",\n          \"uint32\",\n          \"maxChannelsLQ\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV26),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV26),\n          \"material\",\n          Utils.getArrayReader(this.MaterialDataV26),\n          \"musicCondition\",\n          Utils.getArrayReader(this.MusicConditionDataV26),\n          \"musicPlaylist\",\n          Utils.getArrayReader(this.MusicPlaylistDataV26),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV26),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV26),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.MetaSoundDataV26 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV26),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV26),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV26),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV26,\n          \"pan\",\n          this.DynamicParamDataV26,\n          \"pitch\",\n          this.DynamicParamDataV26,\n          \"pitchMS\",\n          this.DynamicParamDataV26,\n          \"volume\",\n          this.DynamicParamDataV26,\n          \"volumeMS\",\n          this.DynamicParamDataV26,\n          \"initialDelay\",\n          this.RangeDataV26,\n          \"playLength\",\n          this.RangeDataV26,\n          \"positionOffsetAngle\",\n          this.RangeDataV26,\n          \"positionRange\",\n          this.RangeDataV26,\n          \"repeatCount\",\n          this.RangeDataV26,\n          \"repeatTime\",\n          this.RangeDataV26,\n          \"startTimeOffset\",\n          this.RangeDataV26,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV26 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV26 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV26),\n        ];\n\n        this.__root = this.ScriptFileDataV26 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV26),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV26),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV26),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV26),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV26),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n          \"musicMutePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 25\n      25: function () {\n        this.DspDataV25 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV25),\n        ];\n\n        this.BussDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV25),\n        ];\n\n        this.EnvelopePointDataV25 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV25 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV25),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV25 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV25 = [\"time\", this.RangeDataV25, \"value\", this.RangeDataV25];\n\n        this.DynamicParamDataV25 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV25),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV25),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV25 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV25,\n          \"highPass\",\n          this.DynamicParamDataV25,\n          \"pan3D\",\n          this.DynamicParamDataV25,\n          \"reverb\",\n          this.DynamicParamDataV25,\n          \"spread3D\",\n          this.DynamicParamDataV25,\n          \"volumeA\",\n          this.DynamicParamDataV25,\n          \"volumeB\",\n          this.DynamicParamDataV25,\n        ];\n\n        this.CategoryDynamicDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"highPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV25),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV25),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.MaterialDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"absorptionLF\",\n          \"float32\",\n          \"absorptionMF\",\n          \"float32\",\n          \"absorptionHF\",\n          \"float32\",\n          \"occlusion\",\n          \"float32\",\n        ];\n\n        this.MusicConditionDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV25 = [\n          \"condition\",\n          Utils.getQWordReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n          \"noteBase\",\n          \"uint8\",\n          \"noteMin\",\n          \"uint8\",\n          \"noteMax\",\n          \"uint8\",\n        ];\n\n        this.MusicPlaylistDataV25 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"primaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"secondaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV25),\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"initialSilence\",\n          this.RangeDataV25,\n          \"intervalSilence\",\n          this.RangeDataV25,\n          \"maxPlayLength\",\n          this.RangeDataV25,\n          \"volume\",\n          this.DynamicParamDataV25,\n          \"fileIterateMode\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV25),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV25),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV25 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV25),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV25),\n          \"material\",\n          Utils.getArrayReader(this.MaterialDataV25),\n          \"musicCondition\",\n          Utils.getArrayReader(this.MusicConditionDataV25),\n          \"musicPlaylist\",\n          Utils.getArrayReader(this.MusicPlaylistDataV25),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV25),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV25),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.MetaSoundDataV25 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV25),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV25),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV25),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV25,\n          \"pan\",\n          this.DynamicParamDataV25,\n          \"pitch\",\n          this.DynamicParamDataV25,\n          \"pitchMS\",\n          this.DynamicParamDataV25,\n          \"volume\",\n          this.DynamicParamDataV25,\n          \"volumeMS\",\n          this.DynamicParamDataV25,\n          \"initialDelay\",\n          this.RangeDataV25,\n          \"playLength\",\n          this.RangeDataV25,\n          \"positionOffsetAngle\",\n          this.RangeDataV25,\n          \"positionRange\",\n          this.RangeDataV25,\n          \"repeatCount\",\n          this.RangeDataV25,\n          \"repeatTime\",\n          this.RangeDataV25,\n          \"startTimeOffset\",\n          this.RangeDataV25,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV25 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV25 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV25),\n        ];\n\n        this.__root = this.ScriptFileDataV25 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV25),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV25),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV25),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV25),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV25),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n          \"musicMutePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 24\n      24: function () {\n        this.DspDataV24 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV24),\n        ];\n\n        this.BussDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV24),\n        ];\n\n        this.EnvelopePointDataV24 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV24 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV24),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV24 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV24 = [\"time\", this.RangeDataV24, \"value\", this.RangeDataV24];\n\n        this.DynamicParamDataV24 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV24),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV24),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV24 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV24,\n          \"highPass\",\n          this.DynamicParamDataV24,\n          \"pan3D\",\n          this.DynamicParamDataV24,\n          \"reverb\",\n          this.DynamicParamDataV24,\n          \"spread3D\",\n          this.DynamicParamDataV24,\n          \"volumeA\",\n          this.DynamicParamDataV24,\n          \"volumeB\",\n          this.DynamicParamDataV24,\n        ];\n\n        this.CategoryDynamicDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"highPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV24),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV24),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.MusicConditionDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV24 = [\n          \"condition\",\n          Utils.getQWordReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n          \"noteBase\",\n          \"uint8\",\n          \"noteMin\",\n          \"uint8\",\n          \"noteMax\",\n          \"uint8\",\n        ];\n\n        this.MusicPlaylistDataV24 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"primaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"secondaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV24),\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"initialSilence\",\n          this.RangeDataV24,\n          \"intervalSilence\",\n          this.RangeDataV24,\n          \"maxPlayLength\",\n          this.RangeDataV24,\n          \"volume\",\n          this.DynamicParamDataV24,\n          \"fileIterateMode\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV24),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV24),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV24 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV24),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV24),\n          \"musicCondition\",\n          Utils.getArrayReader(this.MusicConditionDataV24),\n          \"musicPlaylist\",\n          Utils.getArrayReader(this.MusicPlaylistDataV24),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV24),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV24),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.MetaSoundDataV24 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV24),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV24),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV24),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV24,\n          \"pan\",\n          this.DynamicParamDataV24,\n          \"pitch\",\n          this.DynamicParamDataV24,\n          \"pitchMS\",\n          this.DynamicParamDataV24,\n          \"volume\",\n          this.DynamicParamDataV24,\n          \"volumeMS\",\n          this.DynamicParamDataV24,\n          \"initialDelay\",\n          this.RangeDataV24,\n          \"playLength\",\n          this.RangeDataV24,\n          \"positionOffsetAngle\",\n          this.RangeDataV24,\n          \"positionRange\",\n          this.RangeDataV24,\n          \"repeatCount\",\n          this.RangeDataV24,\n          \"repeatTime\",\n          this.RangeDataV24,\n          \"startTimeOffset\",\n          this.RangeDataV24,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV24 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV24 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV24),\n        ];\n\n        this.__root = this.ScriptFileDataV24 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV24),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV24),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV24),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV24),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV24),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n          \"musicMutePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 23\n      23: function () {\n        this.DspDataV23 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV23),\n        ];\n\n        this.BussDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV23),\n        ];\n\n        this.EnvelopePointDataV23 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV23 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV23),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV23 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV23 = [\"time\", this.RangeDataV23, \"value\", this.RangeDataV23];\n\n        this.DynamicParamDataV23 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV23),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV23),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV23 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV23,\n          \"highPass\",\n          this.DynamicParamDataV23,\n          \"pan3D\",\n          this.DynamicParamDataV23,\n          \"reverb\",\n          this.DynamicParamDataV23,\n          \"spread3D\",\n          this.DynamicParamDataV23,\n          \"volumeA\",\n          this.DynamicParamDataV23,\n          \"volumeB\",\n          this.DynamicParamDataV23,\n        ];\n\n        this.CategoryDynamicDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"highPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV23),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV23),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.MusicConditionDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV23 = [\n          \"condition\",\n          Utils.getQWordReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MusicPlaylistDataV23 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"primaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"secondaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV23),\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"initialSilence\",\n          this.RangeDataV23,\n          \"intervalSilence\",\n          this.RangeDataV23,\n          \"maxPlayLength\",\n          this.RangeDataV23,\n          \"volume\",\n          this.DynamicParamDataV23,\n          \"fileIterateMode\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV23),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV23),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV23 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV23),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV23),\n          \"musicCondition\",\n          Utils.getArrayReader(this.MusicConditionDataV23),\n          \"musicPlaylist\",\n          Utils.getArrayReader(this.MusicPlaylistDataV23),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV23),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV23),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.MetaSoundDataV23 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV23),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV23),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV23),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV23,\n          \"pan\",\n          this.DynamicParamDataV23,\n          \"pitch\",\n          this.DynamicParamDataV23,\n          \"pitchMS\",\n          this.DynamicParamDataV23,\n          \"volume\",\n          this.DynamicParamDataV23,\n          \"volumeMS\",\n          this.DynamicParamDataV23,\n          \"initialDelay\",\n          this.RangeDataV23,\n          \"playLength\",\n          this.RangeDataV23,\n          \"positionOffsetAngle\",\n          this.RangeDataV23,\n          \"positionRange\",\n          this.RangeDataV23,\n          \"repeatCount\",\n          this.RangeDataV23,\n          \"repeatTime\",\n          this.RangeDataV23,\n          \"startTimeOffset\",\n          this.RangeDataV23,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV23 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV23 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV23),\n        ];\n\n        this.__root = this.ScriptFileDataV23 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV23),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV23),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV23),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV23),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV23),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n          \"musicMutePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 22\n      22: function () {\n        this.DspDataV22 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV22),\n        ];\n\n        this.BussDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV22),\n        ];\n\n        this.EnvelopePointDataV22 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV22 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV22),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV22 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV22 = [\"time\", this.RangeDataV22, \"value\", this.RangeDataV22];\n\n        this.DynamicParamDataV22 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV22),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV22),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV22 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV22,\n          \"highPass\",\n          this.DynamicParamDataV22,\n          \"pan3D\",\n          this.DynamicParamDataV22,\n          \"reverb\",\n          this.DynamicParamDataV22,\n          \"spread3D\",\n          this.DynamicParamDataV22,\n          \"volumeA\",\n          this.DynamicParamDataV22,\n          \"volumeB\",\n          this.DynamicParamDataV22,\n        ];\n\n        this.CategoryDynamicDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"highPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV22),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV22),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.MusicConditionDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV22 = [\n          \"condition\",\n          Utils.getQWordReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MusicPlaylistDataV22 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"primaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"secondaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV22),\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"initialSilence\",\n          this.RangeDataV22,\n          \"intervalSilence\",\n          this.RangeDataV22,\n          \"maxPlayLength\",\n          this.RangeDataV22,\n          \"volume\",\n          this.DynamicParamDataV22,\n          \"fileIterateMode\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV22),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV22),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV22 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV22),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV22),\n          \"musicCondition\",\n          Utils.getArrayReader(this.MusicConditionDataV22),\n          \"musicPlaylist\",\n          Utils.getArrayReader(this.MusicPlaylistDataV22),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV22),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV22),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.MetaSoundDataV22 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV22),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV22),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV22),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV22,\n          \"pan\",\n          this.DynamicParamDataV22,\n          \"pitch\",\n          this.DynamicParamDataV22,\n          \"pitchMS\",\n          this.DynamicParamDataV22,\n          \"volume\",\n          this.DynamicParamDataV22,\n          \"volumeMS\",\n          this.DynamicParamDataV22,\n          \"initialDelay\",\n          this.RangeDataV22,\n          \"playLength\",\n          this.RangeDataV22,\n          \"positionOffsetAngle\",\n          this.RangeDataV22,\n          \"positionRange\",\n          this.RangeDataV22,\n          \"repeatCount\",\n          this.RangeDataV22,\n          \"repeatTime\",\n          this.RangeDataV22,\n          \"startTimeOffset\",\n          this.RangeDataV22,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV22 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV22 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV22),\n        ];\n\n        this.__root = this.ScriptFileDataV22 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV22),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV22),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV22),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV22),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV22),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 21\n      21: function () {\n        this.DspDataV21 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV21),\n        ];\n\n        this.BussDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV21),\n        ];\n\n        this.EnvelopePointDataV21 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV21 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV21),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV21 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV21 = [\"time\", this.RangeDataV21, \"value\", this.RangeDataV21];\n\n        this.DynamicParamDataV21 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV21),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV21),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV21 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV21,\n          \"pan3D\",\n          this.DynamicParamDataV21,\n          \"reverb\",\n          this.DynamicParamDataV21,\n          \"spread3D\",\n          this.DynamicParamDataV21,\n          \"volumeA\",\n          this.DynamicParamDataV21,\n          \"volumeB\",\n          this.DynamicParamDataV21,\n        ];\n\n        this.CategoryDynamicDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV21),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV21),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.MusicConditionDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV21 = [\n          \"condition\",\n          Utils.getQWordReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MusicPlaylistDataV21 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"primaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"secondaryPlaylistId\",\n          Utils.getQWordReader(),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV21),\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"initialSilence\",\n          this.RangeDataV21,\n          \"intervalSilence\",\n          this.RangeDataV21,\n          \"maxPlayLength\",\n          this.RangeDataV21,\n          \"volume\",\n          this.DynamicParamDataV21,\n          \"fileIterateMode\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV21),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV21),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV21 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV21),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV21),\n          \"musicCondition\",\n          Utils.getArrayReader(this.MusicConditionDataV21),\n          \"musicPlaylist\",\n          Utils.getArrayReader(this.MusicPlaylistDataV21),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV21),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV21),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.MetaSoundDataV21 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV21),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV21),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV21),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV21,\n          \"pan\",\n          this.DynamicParamDataV21,\n          \"pitch\",\n          this.DynamicParamDataV21,\n          \"pitchMS\",\n          this.DynamicParamDataV21,\n          \"volume\",\n          this.DynamicParamDataV21,\n          \"volumeMS\",\n          this.DynamicParamDataV21,\n          \"initialDelay\",\n          this.RangeDataV21,\n          \"playLength\",\n          this.RangeDataV21,\n          \"positionOffsetAngle\",\n          this.RangeDataV21,\n          \"positionRange\",\n          this.RangeDataV21,\n          \"repeatCount\",\n          this.RangeDataV21,\n          \"repeatTime\",\n          this.RangeDataV21,\n          \"startTimeOffset\",\n          this.RangeDataV21,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV21 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV21 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV21),\n        ];\n\n        this.__root = this.ScriptFileDataV21 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV21),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV21),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV21),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV21),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV21),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 20\n      20: function () {\n        this.DspDataV20 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV20),\n        ];\n\n        this.BussDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV20),\n        ];\n\n        this.EnvelopePointDataV20 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV20 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV20),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV20 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV20 = [\"time\", this.RangeDataV20, \"value\", this.RangeDataV20];\n\n        this.DynamicParamDataV20 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV20),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV20),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV20 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV20,\n          \"pan3D\",\n          this.DynamicParamDataV20,\n          \"reverb\",\n          this.DynamicParamDataV20,\n          \"spread3D\",\n          this.DynamicParamDataV20,\n          \"volumeA\",\n          this.DynamicParamDataV20,\n          \"volumeB\",\n          this.DynamicParamDataV20,\n        ];\n\n        this.CategoryDynamicDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV20),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV20),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV20),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV20),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV20 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV20),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV20),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV20),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV20),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV20 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV20 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV20),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV20),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV20),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV20,\n          \"pan\",\n          this.DynamicParamDataV20,\n          \"pitch\",\n          this.DynamicParamDataV20,\n          \"pitchMS\",\n          this.DynamicParamDataV20,\n          \"volume\",\n          this.DynamicParamDataV20,\n          \"volumeMS\",\n          this.DynamicParamDataV20,\n          \"initialDelay\",\n          this.RangeDataV20,\n          \"playLength\",\n          this.RangeDataV20,\n          \"positionOffsetAngle\",\n          this.RangeDataV20,\n          \"positionRange\",\n          this.RangeDataV20,\n          \"repeatCount\",\n          this.RangeDataV20,\n          \"repeatTime\",\n          this.RangeDataV20,\n          \"startTimeOffset\",\n          this.RangeDataV20,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV20 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV20 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV20),\n        ];\n\n        this.__root = this.ScriptFileDataV20 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"snapshot\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV20),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV20),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV20),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV20),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV20),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 19, ReferencedFunction: 0xE21080\n      19: function () {\n        this.DspDataV19 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV19),\n        ];\n\n        this.BussDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV19),\n        ];\n\n        this.EnvelopePointDataV19 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV19 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV19),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV19 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV19 = [\"time\", this.RangeDataV19, \"value\", this.RangeDataV19];\n\n        this.DynamicParamDataV19 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV19),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV19),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV19 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV19,\n          \"pan3D\",\n          this.DynamicParamDataV19,\n          \"reverb\",\n          this.DynamicParamDataV19,\n          \"spread3D\",\n          this.DynamicParamDataV19,\n          \"volumeA\",\n          this.DynamicParamDataV19,\n          \"volumeB\",\n          this.DynamicParamDataV19,\n        ];\n\n        this.CategoryDynamicDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV19),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV19),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV19),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV19),\n          \"priority\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV19 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV19),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV19),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV19),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV19),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV19 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV19 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV19),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV19),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV19),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV19,\n          \"pan\",\n          this.DynamicParamDataV19,\n          \"pitch\",\n          this.DynamicParamDataV19,\n          \"pitchMS\",\n          this.DynamicParamDataV19,\n          \"volume\",\n          this.DynamicParamDataV19,\n          \"volumeMS\",\n          this.DynamicParamDataV19,\n          \"initialDelay\",\n          this.RangeDataV19,\n          \"playLength\",\n          this.RangeDataV19,\n          \"positionOffsetAngle\",\n          this.RangeDataV19,\n          \"positionRange\",\n          this.RangeDataV19,\n          \"repeatCount\",\n          this.RangeDataV19,\n          \"repeatTime\",\n          this.RangeDataV19,\n          \"startTimeOffset\",\n          this.RangeDataV19,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV19 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV19 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV19),\n        ];\n\n        this.__root = this.ScriptFileDataV19 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV19),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV19),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV19),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV19),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV19),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 18, ReferencedFunction: 0xE20F40\n      18: function () {\n        this.DspDataV18 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV18),\n        ];\n\n        this.BussDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV18),\n        ];\n\n        this.EnvelopePointDataV18 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV18 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV18),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV18 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV18 = [\"time\", this.RangeDataV18, \"value\", this.RangeDataV18];\n\n        this.DynamicParamDataV18 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV18),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV18),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV18 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV18,\n          \"pan3D\",\n          this.DynamicParamDataV18,\n          \"reverb\",\n          this.DynamicParamDataV18,\n          \"spread3D\",\n          this.DynamicParamDataV18,\n          \"volumeA\",\n          this.DynamicParamDataV18,\n          \"volumeB\",\n          this.DynamicParamDataV18,\n        ];\n\n        this.CategoryDynamicDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV18),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV18),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV18),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV18),\n        ];\n\n        this.AudioSettingsDataV18 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV18),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV18),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV18),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV18),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV18 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV18 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV18),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV18),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV18),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV18,\n          \"pan\",\n          this.DynamicParamDataV18,\n          \"pitch\",\n          this.DynamicParamDataV18,\n          \"pitchMS\",\n          this.DynamicParamDataV18,\n          \"volume\",\n          this.DynamicParamDataV18,\n          \"volumeMS\",\n          this.DynamicParamDataV18,\n          \"initialDelay\",\n          this.RangeDataV18,\n          \"playLength\",\n          this.RangeDataV18,\n          \"positionOffsetAngle\",\n          this.RangeDataV18,\n          \"positionRange\",\n          this.RangeDataV18,\n          \"repeatCount\",\n          this.RangeDataV18,\n          \"repeatTime\",\n          this.RangeDataV18,\n          \"startTimeOffset\",\n          this.RangeDataV18,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV18 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV18 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV18),\n        ];\n\n        this.__root = this.ScriptFileDataV18 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV18),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV18),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV18),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV18),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV18),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 17\n      17: function () {\n        this.DspDataV17 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV17),\n        ];\n\n        this.BussDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV17),\n        ];\n\n        this.EnvelopePointDataV17 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV17 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV17),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV17 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV17 = [\"time\", this.RangeDataV17, \"value\", this.RangeDataV17];\n\n        this.DynamicParamDataV17 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV17),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV17),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV17 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV17,\n          \"pan3D\",\n          this.DynamicParamDataV17,\n          \"reverb\",\n          this.DynamicParamDataV17,\n          \"spread3D\",\n          this.DynamicParamDataV17,\n          \"volumeA\",\n          this.DynamicParamDataV17,\n          \"volumeB\",\n          this.DynamicParamDataV17,\n        ];\n\n        this.CategoryDynamicDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV17),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV17),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV17),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV17),\n        ];\n\n        this.AudioSettingsDataV17 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV17),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV17),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV17),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV17),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV17 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV17 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV17),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV17),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV17),\n          \"channelFadeIn\",\n          \"float32\",\n          \"channelFadeOut\",\n          \"float32\",\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"channelMax\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV17,\n          \"pan\",\n          this.DynamicParamDataV17,\n          \"pitch\",\n          this.DynamicParamDataV17,\n          \"pitchMS\",\n          this.DynamicParamDataV17,\n          \"volume\",\n          this.DynamicParamDataV17,\n          \"volumeMS\",\n          this.DynamicParamDataV17,\n          \"initialDelay\",\n          this.RangeDataV17,\n          \"playLength\",\n          this.RangeDataV17,\n          \"positionOffsetAngle\",\n          this.RangeDataV17,\n          \"positionRange\",\n          this.RangeDataV17,\n          \"repeatCount\",\n          this.RangeDataV17,\n          \"repeatTime\",\n          this.RangeDataV17,\n          \"startTimeOffset\",\n          this.RangeDataV17,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV17 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV17 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV17),\n        ];\n\n        this.__root = this.ScriptFileDataV17 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV17),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV17),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV17),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV17),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV17),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 16\n      16: function () {\n        this.DspDataV16 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV16),\n        ];\n\n        this.BussDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV16),\n        ];\n\n        this.EnvelopePointDataV16 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV16 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV16),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV16 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV16 = [\"time\", this.RangeDataV16, \"value\", this.RangeDataV16];\n\n        this.DynamicParamDataV16 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV16),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV16),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV16 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV16,\n          \"pan3D\",\n          this.DynamicParamDataV16,\n          \"reverb\",\n          this.DynamicParamDataV16,\n          \"spread3D\",\n          this.DynamicParamDataV16,\n          \"volumeA\",\n          this.DynamicParamDataV16,\n          \"volumeB\",\n          this.DynamicParamDataV16,\n        ];\n\n        this.CategoryDynamicDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV16),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV16),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"echoDelay\",\n          \"float32\",\n          \"echoDecayRatio\",\n          \"float32\",\n          \"echoWetMix\",\n          \"float32\",\n          \"echoDryMix\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV16),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV16),\n        ];\n\n        this.AudioSettingsDataV16 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV16),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV16),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV16),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV16),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV16 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV16 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV16),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV16),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV16),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV16,\n          \"pan\",\n          this.DynamicParamDataV16,\n          \"pitch\",\n          this.DynamicParamDataV16,\n          \"pitchMS\",\n          this.DynamicParamDataV16,\n          \"volume\",\n          this.DynamicParamDataV16,\n          \"volumeMS\",\n          this.DynamicParamDataV16,\n          \"initialDelay\",\n          this.RangeDataV16,\n          \"playLength\",\n          this.RangeDataV16,\n          \"positionOffsetAngle\",\n          this.RangeDataV16,\n          \"positionRange\",\n          this.RangeDataV16,\n          \"repeatCount\",\n          this.RangeDataV16,\n          \"repeatTime\",\n          this.RangeDataV16,\n          \"startTimeOffset\",\n          this.RangeDataV16,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV16 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV16 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV16),\n        ];\n\n        this.__root = this.ScriptFileDataV16 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV16),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV16),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV16),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV16),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV16),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 15\n      15: function () {\n        this.DspDataV15 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV15),\n        ];\n\n        this.BussDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV15),\n        ];\n\n        this.EnvelopePointDataV15 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV15 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV15),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV15 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV15 = [\"time\", this.RangeDataV15, \"value\", this.RangeDataV15];\n\n        this.DynamicParamDataV15 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV15),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV15),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV15 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV15,\n          \"pan3D\",\n          this.DynamicParamDataV15,\n          \"reverb\",\n          this.DynamicParamDataV15,\n          \"spread3D\",\n          this.DynamicParamDataV15,\n          \"volumeA\",\n          this.DynamicParamDataV15,\n          \"volumeB\",\n          this.DynamicParamDataV15,\n        ];\n\n        this.CategoryDynamicDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV15),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV15),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV15),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV15),\n        ];\n\n        this.AudioSettingsDataV15 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV15),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV15),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV15),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV15),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV15 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV15 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV15),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV15),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV15),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV15,\n          \"pan\",\n          this.DynamicParamDataV15,\n          \"pitch\",\n          this.DynamicParamDataV15,\n          \"pitchMS\",\n          this.DynamicParamDataV15,\n          \"volume\",\n          this.DynamicParamDataV15,\n          \"volumeMS\",\n          this.DynamicParamDataV15,\n          \"initialDelay\",\n          this.RangeDataV15,\n          \"playLength\",\n          this.RangeDataV15,\n          \"positionOffsetAngle\",\n          this.RangeDataV15,\n          \"positionRange\",\n          this.RangeDataV15,\n          \"repeatCount\",\n          this.RangeDataV15,\n          \"repeatTime\",\n          this.RangeDataV15,\n          \"startTimeOffset\",\n          this.RangeDataV15,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV15 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV15 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV15),\n        ];\n\n        this.__root = this.ScriptFileDataV15 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV15),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV15),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV15),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV15),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV15),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 14\n      14: function () {\n        this.DspDataV14 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV14),\n        ];\n\n        this.BussDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV14),\n        ];\n\n        this.EnvelopePointDataV14 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV14 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV14),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV14 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV14 = [\"time\", this.RangeDataV14, \"value\", this.RangeDataV14];\n\n        this.DynamicParamDataV14 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV14),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV14),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV14 = [\n          \"doppler\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV14,\n          \"pan3D\",\n          this.DynamicParamDataV14,\n          \"spread3D\",\n          this.DynamicParamDataV14,\n          \"volumeA\",\n          this.DynamicParamDataV14,\n          \"volumeB\",\n          this.DynamicParamDataV14,\n        ];\n\n        this.CategoryDynamicDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV14),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV14),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV14),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV14),\n        ];\n\n        this.AudioSettingsDataV14 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"dopplerScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV14),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV14),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV14),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV14),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV14 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV14 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV14),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV14),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV14),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV14,\n          \"pan\",\n          this.DynamicParamDataV14,\n          \"pitch\",\n          this.DynamicParamDataV14,\n          \"pitchMS\",\n          this.DynamicParamDataV14,\n          \"volume\",\n          this.DynamicParamDataV14,\n          \"volumeMS\",\n          this.DynamicParamDataV14,\n          \"initialDelay\",\n          this.RangeDataV14,\n          \"playLength\",\n          this.RangeDataV14,\n          \"positionOffsetAngle\",\n          this.RangeDataV14,\n          \"positionRange\",\n          this.RangeDataV14,\n          \"repeatCount\",\n          this.RangeDataV14,\n          \"repeatTime\",\n          this.RangeDataV14,\n          \"startTimeOffset\",\n          this.RangeDataV14,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV14 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV14 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV14),\n        ];\n\n        this.__root = this.ScriptFileDataV14 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV14),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV14),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV14),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV14),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV14),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 13\n      13: function () {\n        this.DspDataV13 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV13),\n        ];\n\n        this.BussDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV13),\n        ];\n\n        this.EnvelopePointDataV13 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV13 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV13),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV13 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV13 = [\"time\", this.RangeDataV13, \"value\", this.RangeDataV13];\n\n        this.DynamicParamDataV13 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV13),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV13),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV13 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV13,\n          \"pan3D\",\n          this.DynamicParamDataV13,\n          \"spread3D\",\n          this.DynamicParamDataV13,\n          \"volumeA\",\n          this.DynamicParamDataV13,\n          \"volumeB\",\n          this.DynamicParamDataV13,\n        ];\n\n        this.CategoryDynamicDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV13),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV13),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV13),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV13),\n        ];\n\n        this.AudioSettingsDataV13 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV13),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV13),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV13),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV13),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV13 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV13 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV13),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV13),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV13),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV13,\n          \"pan\",\n          this.DynamicParamDataV13,\n          \"pitch\",\n          this.DynamicParamDataV13,\n          \"pitchMS\",\n          this.DynamicParamDataV13,\n          \"volume\",\n          this.DynamicParamDataV13,\n          \"volumeMS\",\n          this.DynamicParamDataV13,\n          \"initialDelay\",\n          this.RangeDataV13,\n          \"playLength\",\n          this.RangeDataV13,\n          \"positionOffsetAngle\",\n          this.RangeDataV13,\n          \"positionRange\",\n          this.RangeDataV13,\n          \"repeatCount\",\n          this.RangeDataV13,\n          \"repeatTime\",\n          this.RangeDataV13,\n          \"startTimeOffset\",\n          this.RangeDataV13,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV13 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV13 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV13),\n        ];\n\n        this.__root = this.ScriptFileDataV13 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"reverbOverride\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV13),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV13),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV13),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV13),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV13),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 12, ReferencedFunction: 0xE20F20\n      12: function () {\n        this.DspDataV12 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV12),\n        ];\n\n        this.BussDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV12),\n        ];\n\n        this.EnvelopePointDataV12 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV12 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV12),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV12 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV12 = [\"time\", this.RangeDataV12, \"value\", this.RangeDataV12];\n\n        this.DynamicParamDataV12 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV12),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV12),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV12 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV12,\n          \"pan3D\",\n          this.DynamicParamDataV12,\n          \"spread3D\",\n          this.DynamicParamDataV12,\n          \"volumeA\",\n          this.DynamicParamDataV12,\n          \"volumeB\",\n          this.DynamicParamDataV12,\n        ];\n\n        this.CategoryDynamicDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV12),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV12),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV12),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV12),\n        ];\n\n        this.AudioSettingsDataV12 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV12),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV12),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV12),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV12),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV12 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV12 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV12),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV12),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV12),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV12,\n          \"pan\",\n          this.DynamicParamDataV12,\n          \"pitch\",\n          this.DynamicParamDataV12,\n          \"pitchMS\",\n          this.DynamicParamDataV12,\n          \"volume\",\n          this.DynamicParamDataV12,\n          \"volumeMS\",\n          this.DynamicParamDataV12,\n          \"initialDelay\",\n          this.RangeDataV12,\n          \"playLength\",\n          this.RangeDataV12,\n          \"positionOffsetAngle\",\n          this.RangeDataV12,\n          \"positionRange\",\n          this.RangeDataV12,\n          \"repeatCount\",\n          this.RangeDataV12,\n          \"repeatTime\",\n          this.RangeDataV12,\n          \"startTimeOffset\",\n          this.RangeDataV12,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV12 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV12 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV12),\n        ];\n\n        this.__root = this.ScriptFileDataV12 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV12),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV12),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV12),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV12),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV12),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n          \"musicCuePriority\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 11\n      11: function () {\n        this.DspDataV11 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV11),\n        ];\n\n        this.BussDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV11),\n        ];\n\n        this.EnvelopePointDataV11 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV11 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV11),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV11 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV11 = [\"time\", this.RangeDataV11, \"value\", this.RangeDataV11];\n\n        this.DynamicParamDataV11 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV11),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV11),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV11 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV11,\n          \"pan3D\",\n          this.DynamicParamDataV11,\n          \"spread3D\",\n          this.DynamicParamDataV11,\n          \"volumeA\",\n          this.DynamicParamDataV11,\n          \"volumeB\",\n          this.DynamicParamDataV11,\n        ];\n\n        this.CategoryDynamicDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV11),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV11),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV11),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV11),\n        ];\n\n        this.AudioSettingsDataV11 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV11),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV11),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV11),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV11),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n          \"musicScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV11 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV11 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV11),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV11),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV11),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV11,\n          \"pan\",\n          this.DynamicParamDataV11,\n          \"pitch\",\n          this.DynamicParamDataV11,\n          \"pitchMS\",\n          this.DynamicParamDataV11,\n          \"volume\",\n          this.DynamicParamDataV11,\n          \"volumeMS\",\n          this.DynamicParamDataV11,\n          \"initialDelay\",\n          this.RangeDataV11,\n          \"playLength\",\n          this.RangeDataV11,\n          \"positionOffsetAngle\",\n          this.RangeDataV11,\n          \"positionRange\",\n          this.RangeDataV11,\n          \"repeatCount\",\n          this.RangeDataV11,\n          \"repeatTime\",\n          this.RangeDataV11,\n          \"startTimeOffset\",\n          this.RangeDataV11,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV11 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV11 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV11),\n        ];\n\n        this.__root = this.ScriptFileDataV11 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV11),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV11),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV11),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV11),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV11),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 10\n      10: function () {\n        this.DspDataV10 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV10),\n        ];\n\n        this.BussDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV10),\n        ];\n\n        this.EnvelopePointDataV10 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV10 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV10),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV10 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV10 = [\"time\", this.RangeDataV10, \"value\", this.RangeDataV10];\n\n        this.DynamicParamDataV10 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV10),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV10),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV10 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV10,\n          \"pan3D\",\n          this.DynamicParamDataV10,\n          \"spread3D\",\n          this.DynamicParamDataV10,\n          \"volumeA\",\n          this.DynamicParamDataV10,\n          \"volumeB\",\n          this.DynamicParamDataV10,\n        ];\n\n        this.CategoryDynamicDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV10),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV10),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV10),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV10),\n        ];\n\n        this.AudioSettingsDataV10 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV10),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV10),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV10),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV10),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV10 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV10 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV10),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV10),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV10),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV10,\n          \"pan\",\n          this.DynamicParamDataV10,\n          \"pitch\",\n          this.DynamicParamDataV10,\n          \"pitchMS\",\n          this.DynamicParamDataV10,\n          \"volume\",\n          this.DynamicParamDataV10,\n          \"volumeMS\",\n          this.DynamicParamDataV10,\n          \"initialDelay\",\n          this.RangeDataV10,\n          \"playLength\",\n          this.RangeDataV10,\n          \"positionOffsetAngle\",\n          this.RangeDataV10,\n          \"positionRange\",\n          this.RangeDataV10,\n          \"repeatCount\",\n          this.RangeDataV10,\n          \"repeatTime\",\n          this.RangeDataV10,\n          \"startTimeOffset\",\n          this.RangeDataV10,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV10 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV10 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV10),\n        ];\n\n        this.__root = this.ScriptFileDataV10 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV10),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV10),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV10),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV10),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV10),\n          \"flags\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 9\n      9: function () {\n        this.DspDataV9 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV9),\n        ];\n\n        this.BussDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV9),\n        ];\n\n        this.EnvelopePointDataV9 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV9 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV9),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV9 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV9 = [\"time\", this.RangeDataV9, \"value\", this.RangeDataV9];\n\n        this.DynamicParamDataV9 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV9),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV9),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV9 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV9,\n          \"pan3D\",\n          this.DynamicParamDataV9,\n          \"spread3D\",\n          this.DynamicParamDataV9,\n          \"volumeA\",\n          this.DynamicParamDataV9,\n          \"volumeB\",\n          this.DynamicParamDataV9,\n        ];\n\n        this.CategoryDynamicDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"soundPoolCategory\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV9),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV9),\n          \"muteFadeTime\",\n          \"float32\",\n          \"soundPoolDelay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"soundPoolCount\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n          \"soundPoolCountBehavior\",\n          \"uint8\",\n          \"soundPoolMode\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV9),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV9),\n        ];\n\n        this.AudioSettingsDataV9 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV9),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV9),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV9),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV9),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV9 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV9 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV9),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV9),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV9),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV9,\n          \"pan\",\n          this.DynamicParamDataV9,\n          \"pitch\",\n          this.DynamicParamDataV9,\n          \"pitchMS\",\n          this.DynamicParamDataV9,\n          \"volume\",\n          this.DynamicParamDataV9,\n          \"volumeMS\",\n          this.DynamicParamDataV9,\n          \"initialDelay\",\n          this.RangeDataV9,\n          \"playLength\",\n          this.RangeDataV9,\n          \"positionOffsetAngle\",\n          this.RangeDataV9,\n          \"positionRange\",\n          this.RangeDataV9,\n          \"repeatCount\",\n          this.RangeDataV9,\n          \"repeatTime\",\n          this.RangeDataV9,\n          \"startTimeOffset\",\n          this.RangeDataV9,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV9 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV9 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV9),\n        ];\n\n        this.__root = this.ScriptFileDataV9 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV9),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV9),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV9),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV9),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV9),\n          \"flags\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 8\n      8: function () {\n        this.DspDataV8 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV8),\n        ];\n\n        this.BussDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV8),\n        ];\n\n        this.EnvelopePointDataV8 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV8 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV8),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV8 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV8 = [\"time\", this.RangeDataV8, \"value\", this.RangeDataV8];\n\n        this.DynamicParamDataV8 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV8),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV8),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV8 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV8,\n          \"pan3D\",\n          this.DynamicParamDataV8,\n          \"spread3D\",\n          this.DynamicParamDataV8,\n          \"volumeA\",\n          this.DynamicParamDataV8,\n          \"volumeB\",\n          this.DynamicParamDataV8,\n        ];\n\n        this.CategoryDynamicDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"reverbDirect\",\n          \"float32\",\n          \"reverbRoom\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV8),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV8),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.ReverbDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"room\",\n          \"float32\",\n          \"roomHF\",\n          \"float32\",\n          \"roomLF\",\n          \"float32\",\n          \"decayTime\",\n          \"float32\",\n          \"decayHFRatio\",\n          \"float32\",\n          \"reflections\",\n          \"float32\",\n          \"reflectionsDelay\",\n          \"float32\",\n          \"reverb\",\n          \"float32\",\n          \"reverbDelay\",\n          \"float32\",\n          \"referenceHF\",\n          \"float32\",\n          \"referenceLF\",\n          \"float32\",\n          \"diffusion\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV8),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV8),\n        ];\n\n        this.AudioSettingsDataV8 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV8),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV8),\n          \"reverb\",\n          Utils.getArrayReader(this.ReverbDataV8),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV8),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV8 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV8 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV8),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV8),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV8),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV8,\n          \"pan\",\n          this.DynamicParamDataV8,\n          \"pitch\",\n          this.DynamicParamDataV8,\n          \"pitchMS\",\n          this.DynamicParamDataV8,\n          \"volume\",\n          this.DynamicParamDataV8,\n          \"volumeMS\",\n          this.DynamicParamDataV8,\n          \"initialDelay\",\n          this.RangeDataV8,\n          \"playLength\",\n          this.RangeDataV8,\n          \"positionOffsetAngle\",\n          this.RangeDataV8,\n          \"positionRange\",\n          this.RangeDataV8,\n          \"repeatCount\",\n          this.RangeDataV8,\n          \"repeatTime\",\n          this.RangeDataV8,\n          \"startTimeOffset\",\n          this.RangeDataV8,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"musicPriority\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV8 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV8 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV8),\n        ];\n\n        this.__root = this.ScriptFileDataV8 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV8),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV8),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV8),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV8),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV8),\n          \"flags\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 7, ReferencedFunction: 0xE20EB0\n      7: function () {\n        this.DspDataV7 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV7),\n        ];\n\n        this.BussDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV7),\n        ];\n\n        this.EnvelopePointDataV7 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV7 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV7),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV7 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV7 = [\"time\", this.RangeDataV7, \"value\", this.RangeDataV7];\n\n        this.DynamicParamDataV7 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV7),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV7),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV7 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV7,\n          \"pan3D\",\n          this.DynamicParamDataV7,\n          \"spread3D\",\n          this.DynamicParamDataV7,\n          \"volumeA\",\n          this.DynamicParamDataV7,\n          \"volumeB\",\n          this.DynamicParamDataV7,\n        ];\n\n        this.CategoryDynamicDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n          \"nonFocusGain\",\n          \"float32\",\n          \"lowPass\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.CategoryDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV7),\n          \"dynamicData\",\n          Utils.getPointerReader(this.CategoryDynamicDataV7),\n          \"muteFadeTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.SnapshotDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV7),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDynamicDataV7),\n        ];\n\n        this.AudioSettingsDataV7 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"focusTransition\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV7),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV7),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV7),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV7 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV7 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"offsetBone\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV7),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV7),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV7),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV7,\n          \"pan\",\n          this.DynamicParamDataV7,\n          \"pitch\",\n          this.DynamicParamDataV7,\n          \"pitchMS\",\n          this.DynamicParamDataV7,\n          \"volume\",\n          this.DynamicParamDataV7,\n          \"volumeMS\",\n          this.DynamicParamDataV7,\n          \"initialDelay\",\n          this.RangeDataV7,\n          \"playLength\",\n          this.RangeDataV7,\n          \"positionOffsetAngle\",\n          this.RangeDataV7,\n          \"positionRange\",\n          this.RangeDataV7,\n          \"repeatCount\",\n          this.RangeDataV7,\n          \"repeatTime\",\n          this.RangeDataV7,\n          \"startTimeOffset\",\n          this.RangeDataV7,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV7 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV7 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV7),\n        ];\n\n        this.__root = this.ScriptFileDataV7 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV7),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV7),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV7),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV7),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV7),\n          \"flags\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 6\n      6: function () {\n        this.DspDataV6 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDynamicDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV6),\n        ];\n\n        this.BussDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"output\",\n          Utils.getQWordReader(),\n          \"dynamicData\",\n          Utils.getPointerReader(this.BussDynamicDataV6),\n        ];\n\n        this.EnvelopePointDataV6 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV6 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV6),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV6 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV6 = [\"time\", this.RangeDataV6, \"value\", this.RangeDataV6];\n\n        this.DynamicParamDataV6 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV6),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV6),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV6 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV6,\n          \"pan3D\",\n          this.DynamicParamDataV6,\n          \"spread3D\",\n          this.DynamicParamDataV6,\n          \"volumeA\",\n          this.DynamicParamDataV6,\n        ];\n\n        this.CategoryDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"outputBussName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV6),\n          \"muteFadeTime\",\n          \"float32\",\n          \"volumeA\",\n          \"float32\",\n          \"volumeAThreshold\",\n          \"float32\",\n          \"volumeB\",\n          \"float32\",\n          \"volumeBThreshold\",\n          \"float32\",\n          \"volumeChangeRate\",\n          \"float32\",\n          \"volumeDucking\",\n          \"float32\",\n          \"volumeDuckingTimeAttack\",\n          \"float32\",\n          \"volumeDuckingTimeRelease\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.SnapshotDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDynamicDataV6),\n        ];\n\n        this.AudioSettingsDataV6 = [\n          \"defaultSnapshot\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV6),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV6),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV6),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV6 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV6 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV6),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV6),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV6),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV6,\n          \"pan\",\n          this.DynamicParamDataV6,\n          \"pitch\",\n          this.DynamicParamDataV6,\n          \"pitchMS\",\n          this.DynamicParamDataV6,\n          \"volume\",\n          this.DynamicParamDataV6,\n          \"volumeMS\",\n          this.DynamicParamDataV6,\n          \"initialDelay\",\n          this.RangeDataV6,\n          \"playLength\",\n          this.RangeDataV6,\n          \"positionOffsetAngle\",\n          this.RangeDataV6,\n          \"positionRange\",\n          this.RangeDataV6,\n          \"repeatCount\",\n          this.RangeDataV6,\n          \"repeatTime\",\n          this.RangeDataV6,\n          \"startTimeOffset\",\n          this.RangeDataV6,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV6 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV6 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV6),\n        ];\n\n        this.__root = this.ScriptFileDataV6 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV6),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV6),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV6),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV6),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV6),\n          \"flags\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.EnvelopePointDataV5 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV5 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV5),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV5 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV5 = [\"time\", this.RangeDataV5, \"value\", this.RangeDataV5];\n\n        this.DynamicParamDataV5 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV5),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV5),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV5 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV5,\n          \"pan3D\",\n          this.DynamicParamDataV5,\n          \"spread3D\",\n          this.DynamicParamDataV5,\n          \"volumeA\",\n          this.DynamicParamDataV5,\n        ];\n\n        this.CategoryDataV5 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV5),\n          \"muteFadeTime\",\n          \"float32\",\n          \"volumeA\",\n          \"float32\",\n          \"volumeAThreshold\",\n          \"float32\",\n          \"volumeB\",\n          \"float32\",\n          \"volumeBThreshold\",\n          \"float32\",\n          \"volumeChangeRate\",\n          \"float32\",\n          \"volumeDucking\",\n          \"float32\",\n          \"volumeDuckingTimeAttack\",\n          \"float32\",\n          \"volumeDuckingTimeRelease\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.DspDataV5 = [\"type\", \"uint32\", \"flags\", \"uint32\", \"property\", Utils.getArrayReader(\"float32\")];\n\n        this.BussDataV5 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"output\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV5),\n          \"volume\",\n          \"float32\",\n        ];\n\n        this.SnapshotDataV5 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"buss\",\n          Utils.getArrayReader(this.BussDataV5),\n        ];\n\n        this.AudioSettingsDataV5 = [\n          \"defaultBuss\",\n          Utils.getQWordReader(),\n          \"effectsBuss\",\n          Utils.getQWordReader(),\n          \"distanceScale\",\n          \"float32\",\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV5),\n          \"snapshot\",\n          Utils.getArrayReader(this.SnapshotDataV5),\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV5 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.FileNameDataV5 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV5 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV5),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV5),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV5),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV5,\n          \"pan\",\n          this.DynamicParamDataV5,\n          \"pitch\",\n          this.DynamicParamDataV5,\n          \"pitchMS\",\n          this.DynamicParamDataV5,\n          \"volume\",\n          this.DynamicParamDataV5,\n          \"volumeMS\",\n          this.DynamicParamDataV5,\n          \"initialDelay\",\n          this.RangeDataV5,\n          \"playLength\",\n          this.RangeDataV5,\n          \"positionOffsetAngle\",\n          this.RangeDataV5,\n          \"positionRange\",\n          this.RangeDataV5,\n          \"repeatCount\",\n          this.RangeDataV5,\n          \"repeatTime\",\n          this.RangeDataV5,\n          \"startTimeOffset\",\n          this.RangeDataV5,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV5 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV5 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV5 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV5),\n        ];\n\n        this.__root = this.ScriptFileDataV5 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV5),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV5),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV5),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV5),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV5),\n          \"flags\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.VolumeGroupDataV4 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentName\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n        ];\n\n        this.EnvelopePointDataV4 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV4 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV4),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV4 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV4 = [\"time\", this.RangeDataV4, \"value\", this.RangeDataV4];\n\n        this.DynamicParamDataV4 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV4),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV4),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV4 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV4,\n          \"pan3D\",\n          this.DynamicParamDataV4,\n          \"spread3D\",\n          this.DynamicParamDataV4,\n          \"volumeA\",\n          this.DynamicParamDataV4,\n        ];\n\n        this.CategoryDataV4 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV4),\n          \"muteFadeTime\",\n          \"float32\",\n          \"volumeA\",\n          \"float32\",\n          \"volumeAThreshold\",\n          \"float32\",\n          \"volumeB\",\n          \"float32\",\n          \"volumeBThreshold\",\n          \"float32\",\n          \"volumeChangeRate\",\n          \"float32\",\n          \"volumeDucking\",\n          \"float32\",\n          \"volumeDuckingTimeAttack\",\n          \"float32\",\n          \"volumeDuckingTimeRelease\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV4 = [\n          \"volumeGroup\",\n          Utils.getArrayReader(this.VolumeGroupDataV4),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV4),\n          \"distanceScale\",\n          \"float32\",\n          \"bankIndexFileName\",\n          Utils.getFileNameReader(),\n          \"bankScriptFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV4 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.DspDataV4 = [\"param\", Utils.getArrayReader(this.DynamicParamDataV4), \"type\", \"uint8\"];\n\n        this.FileNameDataV4 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV4 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV4),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV4),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV4),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV4,\n          \"pan\",\n          this.DynamicParamDataV4,\n          \"pitch\",\n          this.DynamicParamDataV4,\n          \"pitchMS\",\n          this.DynamicParamDataV4,\n          \"volume\",\n          this.DynamicParamDataV4,\n          \"volumeMS\",\n          this.DynamicParamDataV4,\n          \"initialDelay\",\n          this.RangeDataV4,\n          \"playLength\",\n          this.RangeDataV4,\n          \"positionOffsetAngle\",\n          this.RangeDataV4,\n          \"positionRange\",\n          this.RangeDataV4,\n          \"repeatCount\",\n          this.RangeDataV4,\n          \"repeatTime\",\n          this.RangeDataV4,\n          \"startTimeOffset\",\n          this.RangeDataV4,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV4 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV4 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV4 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV4),\n        ];\n\n        this.__root = this.ScriptFileDataV4 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV4),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV4),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV4),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV4),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV4),\n          \"flags\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.VolumeGroupDataV3 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentName\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n        ];\n\n        this.EnvelopePointDataV3 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV3 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV3),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV3 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV3 = [\"time\", this.RangeDataV3, \"value\", this.RangeDataV3];\n\n        this.DynamicParamDataV3 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV3),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV3),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV3 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV3,\n          \"pan3D\",\n          this.DynamicParamDataV3,\n          \"spread3D\",\n          this.DynamicParamDataV3,\n          \"volumeA\",\n          this.DynamicParamDataV3,\n        ];\n\n        this.CategoryDataV3 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV3),\n          \"muteFadeTime\",\n          \"float32\",\n          \"volumeA\",\n          \"float32\",\n          \"volumeAThreshold\",\n          \"float32\",\n          \"volumeB\",\n          \"float32\",\n          \"volumeBThreshold\",\n          \"float32\",\n          \"volumeChangeRate\",\n          \"float32\",\n          \"volumeDucking\",\n          \"float32\",\n          \"volumeDuckingTimeAttack\",\n          \"float32\",\n          \"volumeDuckingTimeRelease\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV3 = [\n          \"volumeGroup\",\n          Utils.getArrayReader(this.VolumeGroupDataV3),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV3),\n          \"distanceScale\",\n          \"float32\",\n          \"voiceBankFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV3 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.DspDataV3 = [\"param\", Utils.getArrayReader(this.DynamicParamDataV3), \"type\", \"uint8\"];\n\n        this.FileNameDataV3 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV3 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV3),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV3),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV3),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV3,\n          \"pan\",\n          this.DynamicParamDataV3,\n          \"pitch\",\n          this.DynamicParamDataV3,\n          \"pitchMS\",\n          this.DynamicParamDataV3,\n          \"volume\",\n          this.DynamicParamDataV3,\n          \"volumeMS\",\n          this.DynamicParamDataV3,\n          \"initialDelay\",\n          this.RangeDataV3,\n          \"playLength\",\n          this.RangeDataV3,\n          \"positionOffsetAngle\",\n          this.RangeDataV3,\n          \"positionRange\",\n          this.RangeDataV3,\n          \"repeatCount\",\n          this.RangeDataV3,\n          \"repeatTime\",\n          this.RangeDataV3,\n          \"startTimeOffset\",\n          this.RangeDataV3,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV3 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV3 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV3 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV3),\n        ];\n\n        this.__root = this.ScriptFileDataV3 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV3),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV3),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV3),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV3),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV3),\n          \"flags\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.VolumeGroupDataV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentName\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"volume\",\n          \"float32\",\n        ];\n\n        this.EnvelopePointDataV2 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV2 = [\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV2),\n          \"offsetType\",\n          \"uint8\",\n        ];\n\n        this.RangeDataV2 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV2 = [\"time\", this.RangeDataV2, \"value\", this.RangeDataV2];\n\n        this.DynamicParamDataV2 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV2),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV2),\n          \"value\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.AttenuationDataV2 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV2,\n          \"pan3D\",\n          this.DynamicParamDataV2,\n          \"spread3D\",\n          this.DynamicParamDataV2,\n          \"volumeA\",\n          this.DynamicParamDataV2,\n        ];\n\n        this.CategoryDataV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV2),\n          \"muteFadeTime\",\n          \"float32\",\n          \"volumeA\",\n          \"float32\",\n          \"volumeAThreshold\",\n          \"float32\",\n          \"volumeB\",\n          \"float32\",\n          \"volumeBThreshold\",\n          \"float32\",\n          \"volumeChangeRate\",\n          \"float32\",\n          \"volumeDucking\",\n          \"float32\",\n          \"volumeDuckingTimeAttack\",\n          \"float32\",\n          \"volumeDuckingTimeRelease\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n        ];\n\n        this.AudioSettingsDataV2 = [\n          \"volumeGroup\",\n          Utils.getArrayReader(this.VolumeGroupDataV2),\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV2),\n          \"distanceScale\",\n          \"float32\",\n          \"voiceBankFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.HandlerDataV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.DspDataV2 = [\"param\", Utils.getArrayReader(this.DynamicParamDataV2), \"type\", \"uint8\"];\n\n        this.FileNameDataV2 = [\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"audioType\",\n          \"uint8\",\n        ];\n\n        this.MetaSoundDataV2 = [\n          \"category\",\n          Utils.getQWordReader(),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV2),\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV2),\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV2),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"loopCount\",\n          \"uint32\",\n          \"depth\",\n          this.DynamicParamDataV2,\n          \"pan\",\n          this.DynamicParamDataV2,\n          \"pitch\",\n          this.DynamicParamDataV2,\n          \"pitchMS\",\n          this.DynamicParamDataV2,\n          \"volume\",\n          this.DynamicParamDataV2,\n          \"volumeMS\",\n          this.DynamicParamDataV2,\n          \"initialDelay\",\n          this.RangeDataV2,\n          \"playLength\",\n          this.RangeDataV2,\n          \"positionOffsetAngle\",\n          this.RangeDataV2,\n          \"positionRange\",\n          this.RangeDataV2,\n          \"repeatCount\",\n          this.RangeDataV2,\n          \"repeatTime\",\n          this.RangeDataV2,\n          \"startTimeOffset\",\n          this.RangeDataV2,\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"loopMode\",\n          \"uint8\",\n          \"playbackMode\",\n          \"uint8\",\n          \"positionMode\",\n          \"uint8\",\n          \"repeatTimeFrom\",\n          \"uint8\",\n        ];\n\n        this.ScriptRefDataV2 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.TriggerMarkerDataV2 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV2),\n        ];\n\n        this.__root = this.ScriptFileDataV2 = [\n          \"musicCue\",\n          Utils.getQWordReader(),\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV2),\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV2),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV2),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV2),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV2),\n          \"flags\",\n          \"uint32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.EnvelopePointDataV1 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV1 = [\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV1),\n          \"offsetType\",\n          \"uint8\",\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n        ];\n\n        this.RangeDataV1 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV1 = [\"time\", this.RangeDataV1, \"value\", this.RangeDataV1];\n\n        this.DynamicParamDataV1 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV1),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV1),\n          \"type\",\n          \"uint8\",\n          \"value\",\n          \"float32\",\n        ];\n\n        this.AttenuationDataV1 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV1,\n          \"pan3D\",\n          this.DynamicParamDataV1,\n          \"spread3D\",\n          this.DynamicParamDataV1,\n          \"volumeA\",\n          this.DynamicParamDataV1,\n        ];\n\n        this.CategoryDataV1 = [\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV1),\n          \"flags\",\n          \"uint32\",\n          \"maxAudible\",\n          \"uint32\",\n          \"maxAudibleBehavior\",\n          \"uint8\",\n          \"muteFadeTime\",\n          \"float32\",\n          \"name\",\n          Utils.getQWordReader(),\n          \"volumeA\",\n          \"float32\",\n          \"volumeAThreshold\",\n          \"float32\",\n          \"volumeB\",\n          \"float32\",\n          \"volumeBThreshold\",\n          \"float32\",\n          \"volumeChangeRate\",\n          \"float32\",\n          \"volumeDucking\",\n          \"float32\",\n          \"volumeDuckingTimeAttack\",\n          \"float32\",\n          \"volumeDuckingTimeRelease\",\n          \"float32\",\n          \"volumeGroupName\",\n          Utils.getQWordReader(),\n        ];\n\n        this.VolumeGroupDataV1 = [\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentName\",\n          Utils.getQWordReader(),\n          \"volume\",\n          \"float32\",\n        ];\n\n        this.AudioSettingsDataV1 = [\n          \"category\",\n          Utils.getArrayReader(this.CategoryDataV1),\n          \"distanceScale\",\n          \"float32\",\n          \"voiceBankFileName\",\n          Utils.getFileNameReader(),\n          \"volumeGroup\",\n          Utils.getArrayReader(this.VolumeGroupDataV1),\n        ];\n\n        this.HandlerDataV1 = [\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.DspDataV1 = [\"param\", Utils.getArrayReader(this.DynamicParamDataV1), \"type\", \"uint8\"];\n\n        this.FileNameDataV1 = [\n          \"audioType\",\n          \"uint8\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n        ];\n\n        this.MetaSoundDataV1 = [\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV1),\n          \"category\",\n          Utils.getQWordReader(),\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"depth\",\n          this.DynamicParamDataV1,\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV1),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV1),\n          \"flags\",\n          \"uint32\",\n          \"initialDelay\",\n          this.RangeDataV1,\n          \"loopCount\",\n          \"uint32\",\n          \"loopMode\",\n          \"uint8\",\n          \"name\",\n          Utils.getQWordReader(),\n          \"pan\",\n          this.DynamicParamDataV1,\n          \"pitch\",\n          this.DynamicParamDataV1,\n          \"playbackMode\",\n          \"uint8\",\n          \"playLength\",\n          this.RangeDataV1,\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"positionMode\",\n          \"uint8\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"positionOffsetAngle\",\n          this.RangeDataV1,\n          \"positionRange\",\n          this.RangeDataV1,\n          \"repeatCount\",\n          this.RangeDataV1,\n          \"repeatTime\",\n          this.RangeDataV1,\n          \"startTimeOffset\",\n          this.RangeDataV1,\n          \"repeatTimeFrom\",\n          \"uint8\",\n          \"volume\",\n          this.DynamicParamDataV1,\n        ];\n\n        this.ScriptRefDataV1 = [\"fileName\", Utils.getFileNameReader(), \"name\", Utils.getQWordReader()];\n\n        this.TriggerMarkerDataV1 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV1 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV1),\n        ];\n\n        this.__root = this.ScriptFileDataV1 = [\n          \"audioSettings\",\n          Utils.getPointerReader(this.AudioSettingsDataV1),\n          \"fadeInTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV1),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV1),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV1),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV1),\n          \"volume\",\n          \"float32\",\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.HandlerDataV0 = [\n          \"byteCode\",\n          Utils.getArrayReader(\"uint8\"),\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.EnvelopePointDataV0 = [\"offset\", \"float32\", \"value\", \"float32\"];\n\n        this.EnvelopeDataV0 = [\n          \"envelopePoint\",\n          Utils.getArrayReader(this.EnvelopePointDataV0),\n          \"offsetType\",\n          \"uint8\",\n          \"offsetParameter\",\n          Utils.getQWordReader(),\n        ];\n\n        this.RangeDataV0 = [\"max\", \"float32\", \"min\", \"float32\", \"min\", \"uint8\"];\n\n        this.RandomParamDataV0 = [\"time\", this.RangeDataV0, \"value\", this.RangeDataV0];\n\n        this.DynamicParamDataV0 = [\n          \"envelopeData\",\n          Utils.getPointerReader(this.EnvelopeDataV0),\n          \"randomParamData\",\n          Utils.getPointerReader(this.RandomParamDataV0),\n          \"type\",\n          \"uint8\",\n          \"value\",\n          \"float32\",\n        ];\n\n        this.AttenuationDataV0 = [\n          \"coneInsideAngle\",\n          \"float32\",\n          \"coneOutsideAngle\",\n          \"float32\",\n          \"coneOutsideVolume\",\n          \"float32\",\n          \"lowPass\",\n          this.DynamicParamDataV0,\n          \"pan3D\",\n          this.DynamicParamDataV0,\n          \"spread3D\",\n          this.DynamicParamDataV0,\n          \"volumeA\",\n          this.DynamicParamDataV0,\n        ];\n\n        this.DspDataV0 = [\"param\", Utils.getArrayReader(this.DynamicParamDataV0), \"type\", \"uint8\"];\n\n        this.FileNameDataV0 = [\n          \"audioType\",\n          \"uint8\",\n          \"fileName\",\n          Utils.getFileNameReader(),\n          \"language\",\n          Utils.getQWordReader(),\n          \"weight\",\n          \"float32\",\n        ];\n\n        this.MetaSoundDataV0 = [\n          \"attenuation\",\n          Utils.getPointerReader(this.AttenuationDataV0),\n          \"category\",\n          Utils.getQWordReader(),\n          \"channelMode\",\n          \"uint8\",\n          \"channelPriority\",\n          \"uint8\",\n          \"depth\",\n          this.DynamicParamDataV0,\n          \"dsp\",\n          Utils.getArrayReader(this.DspDataV0),\n          \"endCue\",\n          Utils.getQWordReader(),\n          \"endCueOffset\",\n          \"float32\",\n          \"fadeInTime\",\n          \"float32\",\n          \"fadeOutTime\",\n          \"float32\",\n          \"fileIterateMode\",\n          \"uint8\",\n          \"fileName\",\n          Utils.getArrayReader(this.FileNameDataV0),\n          \"flags\",\n          \"uint32\",\n          \"initialDelay\",\n          this.RangeDataV0,\n          \"loopCount\",\n          \"uint32\",\n          \"loopMode\",\n          \"uint8\",\n          \"name\",\n          Utils.getQWordReader(),\n          \"pan\",\n          this.DynamicParamDataV0,\n          \"pitch\",\n          this.DynamicParamDataV0,\n          \"playbackMode\",\n          \"uint8\",\n          \"playLength\",\n          this.RangeDataV0,\n          \"playlistId\",\n          Utils.getQWordReader(),\n          \"positionMode\",\n          \"uint8\",\n          \"positionOffset\",\n          [\"[]\", \"float32\", 3],\n          \"positionOffsetAngle\",\n          this.RangeDataV0,\n          \"positionRange\",\n          this.RangeDataV0,\n          \"repeatCount\",\n          this.RangeDataV0,\n          \"repeatTime\",\n          this.RangeDataV0,\n          \"startTimeOffset\",\n          this.RangeDataV0,\n          \"repeatTimeFrom\",\n          \"uint8\",\n          \"volume\",\n          this.DynamicParamDataV0,\n        ];\n\n        this.ScriptRefDataV0 = [\"fileName\", Utils.getFileNameReader(), \"name\", Utils.getQWordReader()];\n\n        this.TriggerMarkerDataV0 = [\n          \"cue\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n          \"time\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TriggerKeyDataV0 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"triggerMarker\",\n          Utils.getArrayReader(this.TriggerMarkerDataV0),\n        ];\n\n        this.__root = this.ScriptFileDataV0 = [\n          \"fadeInTime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"handler\",\n          Utils.getArrayReader(this.HandlerDataV0),\n          \"metaSound\",\n          Utils.getArrayReader(this.MetaSoundDataV0),\n          \"scriptRef\",\n          Utils.getArrayReader(this.ScriptRefDataV0),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV0),\n          \"volume\",\n          \"float32\",\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: ANIM, versions: 26, strucTab: 0x1772EC8\n  /// ==================================================\n\n  {\n    name: \"ANIM\",\n    versions: {\n      // => Version: 25, ReferencedFunction: 0xF27630\n      25: function () {\n        this.PackGrannyAnimationTypeV1 = [\n          \"animation\",\n          Utils.getArrayReader(\"uint8\"),\n          \"pointers\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelAnimationLodV25 = [\"data\", this.PackGrannyAnimationTypeV1, \"fileFull\", Utils.getFileNameReader()];\n\n        this.ModelVisTrackDataV33 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV25 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV25 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV25),\n        ];\n\n        this.ModelCloudAnimV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV25),\n        ];\n\n        this.ModelMatConstAnimV25 = [\n          \"materialId\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV25),\n        ];\n\n        this.ModelAnimPropertyDataV25 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV25 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV25),\n        ];\n\n        this.ModelAnchorAnimV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV25),\n        ];\n\n        this.ModelStreakAnimV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV25),\n        ];\n\n        this.ModelLightningAnimV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightningTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV25),\n        ];\n\n        this.ModelWindAnimationV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"windTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV25),\n        ];\n\n        this.ModelAnimationDataV33 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV1,\n          \"animLod\",\n          Utils.getPointerReader(this.ModelAnimationLodV25),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV33),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV25),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV25),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV25),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV25),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV25),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV25),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV25),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV25),\n          \"lightningAnim\",\n          Utils.getArrayReader(this.ModelLightningAnimV25),\n          \"windAnimData\",\n          Utils.getArrayReader(this.ModelWindAnimationV25),\n        ];\n\n        this.ModelCompoundAnimationDataV25 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportSequenceV25 = [\"name\", Utils.getQWordReader(), \"duration\", \"float32\"];\n\n        this.ModelAnimationImportDataV33 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequences\",\n          Utils.getArrayReader(this.ModelAnimationImportSequenceV25),\n        ];\n\n        this.ModelFileAnimationBankV25 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV33),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV25),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV33),\n        ];\n\n        this.__root = this.ModelFileAnimationV25 = [\n          \"bank\",\n          Utils.getPointerReader(this.ModelFileAnimationBankV25),\n          \"anim\",\n          this.PackGrannyAnimationTypeV1,\n        ];\n      },\n\n      // => Version: 24, ReferencedFunction: 0xF27440\n      24: function () {\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelAnimationLodV24 = [\"data\", this.PackGrannyAnimationTypeV0, \"fileFull\", Utils.getFileNameReader()];\n\n        this.ModelVisTrackDataV32 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV24 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV24 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV24),\n        ];\n\n        this.ModelCloudAnimV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV24),\n        ];\n\n        this.ModelMatConstAnimV24 = [\n          \"materialId\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV24),\n        ];\n\n        this.ModelAnimPropertyDataV24 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV24 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV24),\n        ];\n\n        this.ModelAnchorAnimV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV24),\n        ];\n\n        this.ModelStreakAnimV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV24),\n        ];\n\n        this.ModelLightningAnimV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightningTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV24),\n        ];\n\n        this.ModelWindAnimationV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"windTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV24),\n        ];\n\n        this.ModelAnimationDataV32 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n          \"animLod\",\n          Utils.getPointerReader(this.ModelAnimationLodV24),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV32),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV24),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV24),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV24),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV24),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV24),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV24),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV24),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV24),\n          \"lightningAnim\",\n          Utils.getArrayReader(this.ModelLightningAnimV24),\n          \"windAnimData\",\n          Utils.getArrayReader(this.ModelWindAnimationV24),\n        ];\n\n        this.ModelCompoundAnimationDataV24 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportSequenceV24 = [\"name\", Utils.getQWordReader(), \"duration\", \"float32\"];\n\n        this.ModelAnimationImportDataV32 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequences\",\n          Utils.getArrayReader(this.ModelAnimationImportSequenceV24),\n        ];\n\n        this.ModelFileAnimationBankV24 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV32),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV24),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV32),\n        ];\n\n        this.__root = this.ModelFileAnimationV24 = [\n          \"bank\",\n          Utils.getPointerReader(this.ModelFileAnimationBankV24),\n          \"anim\",\n          this.PackGrannyAnimationTypeV0,\n        ];\n      },\n\n      // => Version: 23, ReferencedFunction: 0xF272A0\n      23: function () {\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV31 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV23 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV23 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV23),\n        ];\n\n        this.ModelCloudAnimV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV23),\n        ];\n\n        this.ModelMatConstAnimV23 = [\n          \"materialId\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV23),\n        ];\n\n        this.ModelAnimPropertyDataV23 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV23 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV23),\n        ];\n\n        this.ModelAnchorAnimV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV23),\n        ];\n\n        this.ModelStreakAnimV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV23),\n        ];\n\n        this.ModelLightningAnimV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightningTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV23),\n        ];\n\n        this.ModelWindAnimationV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"windTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV23),\n        ];\n\n        this.ModelAnimationDataV31 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV31),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV23),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV23),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV23),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV23),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV23),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV23),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV23),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV23),\n          \"lightningAnim\",\n          Utils.getArrayReader(this.ModelLightningAnimV23),\n          \"windAnimData\",\n          Utils.getArrayReader(this.ModelWindAnimationV23),\n        ];\n\n        this.ModelCompoundAnimationDataV23 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportSequenceV23 = [\"name\", Utils.getQWordReader(), \"duration\", \"float32\"];\n\n        this.ModelAnimationImportDataV31 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequences\",\n          Utils.getArrayReader(this.ModelAnimationImportSequenceV23),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV23 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV31),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV23),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV31),\n        ];\n      },\n\n      // => Version: 22\n      22: function () {\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV30 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV22 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV22 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV22),\n        ];\n\n        this.ModelCloudAnimV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV22),\n        ];\n\n        this.ModelMatConstAnimV22 = [\n          \"materialId\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV22),\n        ];\n\n        this.ModelAnimPropertyDataV22 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV22 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV22),\n        ];\n\n        this.ModelAnchorAnimV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV22),\n        ];\n\n        this.ModelStreakAnimV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV22),\n        ];\n\n        this.ModelLightningAnimV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightningTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV22),\n        ];\n\n        this.ModelWindAnimationV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"windTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV22),\n        ];\n\n        this.ModelAnimationDataV30 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV30),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV22),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV22),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV22),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV22),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV22),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV22),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV22),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV22),\n          \"lightningAnim\",\n          Utils.getArrayReader(this.ModelLightningAnimV22),\n          \"windAnimData\",\n          Utils.getArrayReader(this.ModelWindAnimationV22),\n        ];\n\n        this.ModelCompoundAnimationDataV22 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportSequenceV22 = [\"name\", Utils.getQWordReader(), \"duration\", \"float32\"];\n\n        this.ModelAnimationImportDataV30 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequences\",\n          Utils.getArrayReader(this.ModelAnimationImportSequenceV22),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV22 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV30),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV22),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV30),\n        ];\n      },\n\n      // => Version: 21\n      21: function () {\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV29 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV21 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV21 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV21),\n        ];\n\n        this.ModelCloudAnimV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV21),\n        ];\n\n        this.ModelMatConstAnimV21 = [\n          \"materialId\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV21),\n        ];\n\n        this.ModelAnimPropertyDataV21 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV21 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV21),\n        ];\n\n        this.ModelAnchorAnimV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV21),\n        ];\n\n        this.ModelStreakAnimV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV21),\n        ];\n\n        this.ModelLightningAnimV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightningTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV21),\n        ];\n\n        this.ModelWindAnimationV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"windTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV21),\n        ];\n\n        this.ModelAnimationDataV29 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV29),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV21),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV21),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV21),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV21),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV21),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV21),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV21),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV21),\n          \"lightningAnim\",\n          Utils.getArrayReader(this.ModelLightningAnimV21),\n          \"windAnimData\",\n          Utils.getArrayReader(this.ModelWindAnimationV21),\n        ];\n\n        this.ModelCompoundAnimationDataV21 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportSequenceV21 = [\"name\", Utils.getQWordReader(), \"duration\", \"float32\"];\n\n        this.ModelAnimationImportDataV29 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequences\",\n          Utils.getArrayReader(this.ModelAnimationImportSequenceV21),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV21 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV29),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV21),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV29),\n          \"modelReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 20\n      20: function () {\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV28 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV20 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV20 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV20),\n        ];\n\n        this.ModelCloudAnimV20 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV20),\n        ];\n\n        this.ModelMatConstAnimV20 = [\n          \"materialId\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV20 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV20),\n        ];\n\n        this.ModelAnimPropertyDataV20 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV20 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV20 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV20),\n        ];\n\n        this.ModelAnchorAnimV20 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV20),\n        ];\n\n        this.ModelStreakAnimV20 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV20),\n        ];\n\n        this.ModelLightningAnimV20 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightningTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV20),\n        ];\n\n        this.ModelAnimationDataV28 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV28),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV20),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV20),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV20),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV20),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV20),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV20),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV20),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV20),\n          \"lightningAnim\",\n          Utils.getArrayReader(this.ModelLightningAnimV20),\n        ];\n\n        this.ModelCompoundAnimationDataV20 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportSequenceV20 = [\"name\", Utils.getQWordReader(), \"duration\", \"float32\"];\n\n        this.ModelAnimationImportDataV28 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequences\",\n          Utils.getArrayReader(this.ModelAnimationImportSequenceV20),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV20 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV28),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV20),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV28),\n          \"modelReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 19\n      19: function () {\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV27 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV19 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV19 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV19),\n        ];\n\n        this.ModelCloudAnimV19 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV19),\n        ];\n\n        this.ModelMatConstAnimV19 = [\n          \"materialId\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV19 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV19),\n        ];\n\n        this.ModelAnimPropertyDataV19 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV19 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV19 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV19),\n        ];\n\n        this.ModelAnchorAnimV19 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV19),\n        ];\n\n        this.ModelStreakAnimV19 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV19),\n        ];\n\n        this.ModelAnimationDataV27 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV27),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV19),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV19),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV19),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV19),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV19),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV19),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV19),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV19),\n        ];\n\n        this.ModelCompoundAnimationDataV19 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportSequenceV19 = [\"name\", Utils.getQWordReader(), \"duration\", \"float32\"];\n\n        this.ModelAnimationImportDataV27 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequences\",\n          Utils.getArrayReader(this.ModelAnimationImportSequenceV19),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV19 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV27),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV19),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV27),\n          \"modelReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 18, ReferencedFunction: 0xF271F0\n      18: function () {\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV26 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV18 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV18 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV18),\n        ];\n\n        this.ModelCloudAnimV18 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV18),\n        ];\n\n        this.ModelMatConstAnimV18 = [\n          \"materialId\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV18 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV18),\n        ];\n\n        this.ModelAnimPropertyDataV18 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV18 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV18 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV18),\n        ];\n\n        this.ModelAnchorAnimV18 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV18),\n        ];\n\n        this.ModelStreakAnimV18 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV18),\n        ];\n\n        this.ModelAnimationDataV26 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV26),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV18),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV18),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV18),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV18),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV18),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV18),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV18),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV18),\n        ];\n\n        this.ModelCompoundAnimationDataV18 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportSequenceV18 = [\"name\", Utils.getQWordReader(), \"duration\", \"float32\"];\n\n        this.ModelAnimationImportDataV26 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequences\",\n          Utils.getArrayReader(this.ModelAnimationImportSequenceV18),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV18 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV26),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV18),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV26),\n        ];\n      },\n\n      // => Version: 17, ReferencedFunction: 0xF26BD0\n      17: function () {\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV25 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV17 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV17 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV17),\n        ];\n\n        this.ModelCloudAnimV17 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV17),\n        ];\n\n        this.ModelMatConstAnimV17 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV17 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV17),\n        ];\n\n        this.ModelAnimPropertyDataV17 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV17 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV17 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV17),\n        ];\n\n        this.ModelAnchorAnimV17 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV17),\n        ];\n\n        this.ModelStreakAnimV17 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV17),\n        ];\n\n        this.ModelAnimationDataV25 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV25),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV17),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV17),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV17),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV17),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV17),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV17),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV17),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV17),\n        ];\n\n        this.ModelCompoundAnimationDataV17 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportSequenceV17 = [\"name\", Utils.getQWordReader(), \"duration\", \"float32\"];\n\n        this.ModelAnimationImportDataV25 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequences\",\n          Utils.getArrayReader(this.ModelAnimationImportSequenceV17),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV17 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV25),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV17),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV25),\n        ];\n      },\n\n      // => Version: 16\n      16: function () {\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV24 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV16 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV16 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV16),\n        ];\n\n        this.ModelCloudAnimV16 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV16),\n        ];\n\n        this.ModelMatConstAnimV16 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV16 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV16),\n        ];\n\n        this.ModelAnimPropertyDataV16 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV16 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV16 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV16),\n        ];\n\n        this.ModelAnchorAnimV16 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV16),\n        ];\n\n        this.ModelStreakAnimV16 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"anchorAnim\",\n          Utils.getArrayReader(this.ModelAnchorAnimV16),\n        ];\n\n        this.ModelAnimationDataV24 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV24),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV16),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV16),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV16),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV16),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV16),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV16),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV16),\n          \"streakAnim\",\n          Utils.getArrayReader(this.ModelStreakAnimV16),\n        ];\n\n        this.ModelCompoundAnimationDataV16 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV24 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV16 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV24),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV16),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV24),\n        ];\n      },\n\n      // => Version: 15\n      15: function () {\n        this.ModelVisTrackDataV23 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV15 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV15 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV15),\n        ];\n\n        this.ModelCloudAnimV15 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV15),\n        ];\n\n        this.ModelMatConstAnimV15 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV15 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV15),\n        ];\n\n        this.ModelAnimPropertyDataV15 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV15 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelBoneConstraintAnimV15 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"bcTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV15),\n        ];\n\n        this.ModelAnimationDataV23 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV23),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV15),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV15),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV15),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV15),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV15),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV15),\n          \"bcAnim\",\n          Utils.getArrayReader(this.ModelBoneConstraintAnimV15),\n        ];\n\n        this.ModelCompoundAnimationDataV15 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV23 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV15 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV23),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV15),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV23),\n        ];\n      },\n\n      // => Version: 14, ReferencedFunction: 0xF26950\n      14: function () {\n        this.ModelVisTrackDataV22 = [\"boneToken\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV14 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV14 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV14),\n        ];\n\n        this.ModelCloudAnimV14 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV14),\n        ];\n\n        this.ModelMatConstAnimV14 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV14 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV14),\n        ];\n\n        this.ModelAnimPropertyDataV14 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV14 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelAnimationDataV22 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV22),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV14),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV14),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV14),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV14),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV14),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV14),\n        ];\n\n        this.ModelCompoundAnimationDataV14 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV22 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV14 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV22),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV14),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV22),\n        ];\n      },\n\n      // => Version: 13\n      13: function () {\n        this.ModelVisTrackDataV21 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV13 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV13 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV13),\n        ];\n\n        this.ModelCloudAnimV13 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV13),\n        ];\n\n        this.ModelMatConstAnimV13 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV13 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV13),\n        ];\n\n        this.ModelAnimPropertyDataV13 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV13 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelAnimationDataV21 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV21),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV13),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV13),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV13),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV13),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV13),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV13),\n        ];\n\n        this.ModelCompoundAnimationDataV13 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV21 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV13 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV21),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV13),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV21),\n        ];\n      },\n\n      // => Version: 12, ReferencedFunction: 0xF268A0\n      12: function () {\n        this.ModelVisTrackDataV20 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV12 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV12 = [\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV12),\n        ];\n\n        this.ModelCloudAnimV12 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV12),\n        ];\n\n        this.ModelMatConstAnimV12 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV12 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV12),\n        ];\n\n        this.ModelAnimPropertyDataV12 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelTokenMapAnimV12 = [\n          \"linkToken\",\n          Utils.getQWordReader(),\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelAnimationDataV20 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV20),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV12),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV12),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV12),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV12),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV12),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"tokenMapAnims\",\n          Utils.getArrayReader(this.ModelTokenMapAnimV12),\n        ];\n\n        this.ModelCompoundAnimationDataV12 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV20 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV12 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV20),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV12),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV20),\n        ];\n      },\n\n      // => Version: 11\n      11: function () {\n        this.ModelVisTrackDataV19 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV11 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV11 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV11),\n        ];\n\n        this.ModelCloudAnimV11 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV11),\n        ];\n\n        this.ModelMatConstAnimV11 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV11 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV11),\n        ];\n\n        this.ModelAnimPropertyDataV11 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelAnimationDataV19 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV19),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV11),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV11),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV11),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV11),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV11),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelCompoundAnimationDataV11 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV19 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV11 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV19),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV11),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV19),\n        ];\n      },\n\n      // => Version: 10\n      10: function () {\n        this.ModelVisTrackDataV18 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV10 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV10 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV10),\n        ];\n\n        this.ModelCloudAnimV10 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV10),\n        ];\n\n        this.ModelMatConstAnimV10 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV10 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV10),\n        ];\n\n        this.ModelAnimPropertyDataV10 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelAnimationDataV18 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV18),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV10),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV10),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV10),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV10),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n          \"properties\",\n          Utils.getArrayReader(this.ModelAnimPropertyDataV10),\n        ];\n\n        this.ModelCompoundAnimationDataV10 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV18 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV10 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV18),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV10),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV18),\n        ];\n      },\n\n      // => Version: 9\n      9: function () {\n        this.ModelVisTrackDataV17 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV9 = [\n          \"type\",\n          \"uint8\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelUVAnimationV9 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV9),\n        ];\n\n        this.ModelCloudAnimV9 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV9),\n        ];\n\n        this.ModelMatConstAnimV9 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n          \"initialValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelLightAnimationV9 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV9),\n        ];\n\n        this.ModelAnimationDataV17 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV17),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV9),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV9),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV9),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV9),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n        ];\n\n        this.ModelCompoundAnimationDataV9 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV17 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV9 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV17),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV9),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV17),\n        ];\n      },\n\n      // => Version: 8\n      8: function () {\n        this.ModelVisTrackDataV16 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV8 = [\"type\", \"uint8\", \"trackGroupIndex\", \"uint32\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelUVAnimationV8 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV8),\n        ];\n\n        this.ModelCloudAnimV8 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV8),\n        ];\n\n        this.ModelMatConstAnimV8 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightAnimationV8 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV8),\n        ];\n\n        this.ModelAnimationDataV16 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV16),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV8),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV8),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV8),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV8),\n          \"isAdditive\",\n          \"uint32\",\n          \"variantCount\",\n          \"uint32\",\n          \"variantIndices\",\n          [\"[]\", \"uint32\", 3],\n        ];\n\n        this.ModelCompoundAnimationDataV8 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV16 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV8 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV16),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV8),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV16),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.ModelVisTrackDataV15 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV7 = [\"type\", \"uint8\", \"trackGroupIndex\", \"uint32\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelUVAnimationV7 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV7),\n        ];\n\n        this.ModelCloudAnimV7 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV7),\n        ];\n\n        this.ModelMatConstAnimV7 = [\n          \"matIndex\",\n          \"uint32\",\n          \"constToken\",\n          \"uint32\",\n          \"trackGroupIndex\",\n          \"uint32\",\n          \"vectorTrackIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightAnimationV7 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV7),\n        ];\n\n        this.ModelAnimationDataV15 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV15),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV7),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV7),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV7),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV7),\n          \"isAdditive\",\n          \"uint32\",\n        ];\n\n        this.ModelCompoundAnimationDataV7 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV15 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV7 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV15),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV7),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV15),\n        ];\n      },\n\n      // => Version: 6\n      6: function () {\n        this.ModelVisTrackDataV14 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV6 = [\"type\", \"uint8\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelUVAnimationV6 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV6),\n        ];\n\n        this.ModelCloudAnimV6 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"cloudTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV6),\n        ];\n\n        this.ModelMatConstAnimV6 = [\"matIndex\", \"uint32\", \"constToken\", \"uint32\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelLightAnimationV6 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV6),\n        ];\n\n        this.ModelAnimationDataV14 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV14),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV6),\n          \"cloudAnim\",\n          Utils.getArrayReader(this.ModelCloudAnimV6),\n          \"matConstAnim\",\n          Utils.getArrayReader(this.ModelMatConstAnimV6),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV6),\n          \"isAdditive\",\n          \"uint32\",\n        ];\n\n        this.ModelCompoundAnimationDataV6 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV14 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV6 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV14),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV6),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV14),\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.ModelVisTrackDataV13 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV5 = [\"type\", \"uint8\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelUVAnimationV5 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV5),\n        ];\n\n        this.ModelLightAnimationV5 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV5),\n        ];\n\n        this.ModelAnimationDataV13 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV13),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV5),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV5),\n          \"isAdditive\",\n          \"uint32\",\n        ];\n\n        this.ModelCompoundAnimationDataV5 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV13 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV5 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV13),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV5),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV13),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.ModelVisTrackDataV12 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV4 = [\"type\", \"uint8\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelUVAnimationV4 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV4),\n        ];\n\n        this.ModelLightAnimationV4 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV4),\n        ];\n\n        this.ModelAnimationDataV12 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV12),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV4),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV4),\n          \"isAdditive\",\n          \"uint32\",\n        ];\n\n        this.ModelCompoundAnimationDataV4 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV12 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV4 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV12),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV4),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV12),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.ModelVisTrackDataV11 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelTrackTypeDataV3 = [\"type\", \"uint8\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelUVAnimationV3 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV3),\n        ];\n\n        this.ModelLightAnimationV3 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"lightTrackData\",\n          Utils.getArrayReader(this.ModelTrackTypeDataV3),\n        ];\n\n        this.ModelAnimationDataV11 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV11),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV3),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"lightAnimData\",\n          Utils.getArrayReader(this.ModelLightAnimationV3),\n        ];\n\n        this.ModelCompoundAnimationDataV3 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV11 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV3 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV11),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV3),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV11),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.ModelVisTrackDataV10 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelUVTransformV2 = [\"type\", \"uint8\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelUVAnimationV2 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelUVTransformV2),\n        ];\n\n        this.ModelAnimationDataV10 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV10),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV2),\n          \"morphTrackGroups\",\n          Utils.getArrayReader(\"uint16\"),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelCompoundAnimationDataV2 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV10 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationBankV2 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV10),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV2),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV10),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.ModelVisTrackDataV9 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelUVTransformV1 = [\"type\", \"uint8\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelUVAnimationV1 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelUVTransformV1),\n        ];\n\n        this.ModelAnimationDataV9 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV9),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV1),\n          \"triggerTimes\",\n          Utils.getArrayReader(\"float32\"),\n          \"triggerTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelCompoundAnimationDataV1 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV9 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationV1 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV9),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV1),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV9),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ModelVisTrackDataV8 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelUVTransformV0 = [\"type\", \"uint8\", \"vectorTrackIndex\", \"uint32\"];\n\n        this.ModelUVAnimationV0 = [\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvTransformData\",\n          Utils.getArrayReader(this.ModelUVTransformV0),\n        ];\n\n        this.ModelAnimationDataV8 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV8),\n          \"uvAnimData\",\n          Utils.getArrayReader(this.ModelUVAnimationV0),\n        ];\n\n        this.ModelCompoundAnimationDataV0 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"start\",\n          Utils.getQWordReader(),\n          \"loop\",\n          Utils.getQWordReader(),\n          \"end\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelAnimationImportDataV8 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileAnimationV0 = [\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV8),\n          \"compoundAnimations\",\n          Utils.getArrayReader(this.ModelCompoundAnimationDataV0),\n          \"fallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"imports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV8),\n        ];\n      },\n    },\n  },\n\n  /// ==================================================\n  /// Chunk: ANIM, versions: 3, strucTab: 0x18304E4\n  /// ==================================================\n\n  {\n    name: \"ANIM\",\n    versions: {\n      // => Version: 2\n      2: function () {\n        this.SceneKeyframeV2 = [\"time\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"rotation\", [\"[]\", \"float32\", 4]];\n\n        this.SceneMotionV2 = [\"keys\", Utils.getArrayReader(this.SceneKeyframeV2)];\n\n        this.SceneActionPointV2 = [\"name\", Utils.getQWordReader(), \"motion\", this.SceneMotionV2];\n\n        this.SceneAnimationEventV2 = [\"name\", Utils.getQWordReader(), \"time\", \"float32\"];\n\n        this.SceneAnimationV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"motion\",\n          this.SceneMotionV2,\n          \"actionPoints\",\n          Utils.getArrayReader(this.SceneActionPointV2),\n          \"events\",\n          Utils.getArrayReader(this.SceneAnimationEventV2),\n        ];\n\n        this.SceneTransformV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ScenePoseV2 = [\"name\", Utils.getQWordReader(), \"transforms\", Utils.getArrayReader(this.SceneTransformV2)];\n\n        this.SceneImportSequenceV2 = [\"name\", Utils.getQWordReader()];\n\n        this.SceneAnimationImportV2 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"animNames\",\n          Utils.getArrayReader(this.SceneImportSequenceV2),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.__root = this.SceneFileAnimationV2 = [\n          \"animations\",\n          Utils.getArrayReader(this.SceneAnimationV2),\n          \"poses\",\n          Utils.getArrayReader(this.ScenePoseV2),\n          \"imports\",\n          Utils.getArrayReader(this.SceneAnimationImportV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.SceneKeyframeV1 = [\"time\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"rotation\", [\"[]\", \"float32\", 4]];\n\n        this.SceneMotionV1 = [\"keys\", Utils.getArrayReader(this.SceneKeyframeV1)];\n\n        this.SceneActionPointV1 = [\"name\", Utils.getQWordReader(), \"motion\", this.SceneMotionV1];\n\n        this.SceneAnimationEventV1 = [\"name\", Utils.getQWordReader(), \"time\", \"float32\"];\n\n        this.SceneAnimationV1 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"motion\",\n          this.SceneMotionV1,\n          \"actionPoints\",\n          Utils.getArrayReader(this.SceneActionPointV1),\n          \"events\",\n          Utils.getArrayReader(this.SceneAnimationEventV1),\n        ];\n\n        this.SceneAnimationImportV1 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"animNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.SceneFileAnimationV1 = [\n          \"animations\",\n          Utils.getArrayReader(this.SceneAnimationV1),\n          \"imports\",\n          Utils.getArrayReader(this.SceneAnimationImportV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.SceneKeyframeV0 = [\"time\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"rotation\", [\"[]\", \"float32\", 4]];\n\n        this.SceneMotionV0 = [\"keys\", Utils.getArrayReader(this.SceneKeyframeV0)];\n\n        this.SceneActionPointV0 = [\"name\", Utils.getQWordReader(), \"motion\", this.SceneMotionV0];\n\n        this.SceneAnimationV0 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"motion\",\n          this.SceneMotionV0,\n          \"actionPoints\",\n          Utils.getArrayReader(this.SceneActionPointV0),\n        ];\n\n        this.SceneAnimationImportV0 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"animNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.SceneFileAnimationV0 = [\n          \"animations\",\n          Utils.getArrayReader(this.SceneAnimationV0),\n          \"imports\",\n          Utils.getArrayReader(this.SceneAnimationImportV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: anim, versions: 4, strucTab: 0x18843B0\n  /// ==================================================\n\n  {\n    name: \"anim\",\n    versions: {\n      // => Version: 3\n      3: function () {\n        this.PackEmoteTimingV3 = [\n          \"ModelFile\",\n          Utils.getFileNameReader(),\n          \"BlendIn\",\n          \"float32\",\n          \"BlendOut\",\n          \"float32\",\n          \"IntroDuration\",\n          \"uint32\",\n          \"LoopDuration\",\n          \"uint32\",\n          \"OutroDuration\",\n          \"uint32\",\n          \"StartOffset\",\n          \"uint32\",\n        ];\n\n        this.PackEmoteAnimationV3 = [\n          \"Token\",\n          Utils.getQWordReader(),\n          \"Timing\",\n          Utils.getArrayReader(this.PackEmoteTimingV3),\n        ];\n\n        this.__root = this.PackEmoteAnimationsV3 = [\"Animation\", Utils.getArrayReader(this.PackEmoteAnimationV3)];\n      },\n\n      // => Version: 2, ReferencedFunction: 0x1103330\n      2: function () {\n        this.PackEmoteTimingV2 = [\n          \"ModelFile\",\n          Utils.getFileNameReader(),\n          \"BlendIn\",\n          \"float32\",\n          \"BlendOut\",\n          \"float32\",\n          \"IntroDuration\",\n          \"uint32\",\n          \"LoopDuration\",\n          \"uint32\",\n          \"OutroDuration\",\n          \"uint32\",\n        ];\n\n        this.PackEmoteAnimationV2 = [\n          \"Token\",\n          Utils.getQWordReader(),\n          \"Timing\",\n          Utils.getArrayReader(this.PackEmoteTimingV2),\n        ];\n\n        this.__root = this.PackEmoteAnimationsV2 = [\"Animation\", Utils.getArrayReader(this.PackEmoteAnimationV2)];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PackEmoteTimingV1 = [\n          \"modelFileId\",\n          Utils.getFileNameReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"duration\",\n          \"uint32\",\n          \"loopDuration\",\n          \"uint32\",\n        ];\n\n        this.PackEmoteAnimationV1 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"timings\",\n          Utils.getArrayReader(this.PackEmoteTimingV1),\n        ];\n\n        this.__root = this.PackEmoteAnimationsV1 = [\"animations\", Utils.getArrayReader(this.PackEmoteAnimationV1)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackEmoteTimingV0 = [\n          \"modelFileId\",\n          Utils.getFileNameReader(),\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"duration\",\n          \"uint32\",\n        ];\n\n        this.PackEmoteAnimationV0 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"timings\",\n          Utils.getArrayReader(this.PackEmoteTimingV0),\n        ];\n\n        this.__root = this.PackEmoteAnimationsV0 = [\"animations\", Utils.getArrayReader(this.PackEmoteAnimationV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: area, versions: 5, strucTab: 0x1722F9C\n  /// ==================================================\n\n  {\n    name: \"area\",\n    versions: {\n      // => Version: 4, ReferencedFunction: 0xEBB040\n      4: function () {\n        this.PackMapAreaPolygonV4 = [\"points\", Utils.getArrayReader([\"[]\", \"float32\", 3]), \"height\", \"float32\"];\n\n        this.PackMapAreaPortalV4 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapAreaVolumeV4 = [\n          \"portals\",\n          Utils.getArrayReader(this.PackMapAreaPortalV4),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"pointInterior\",\n          [\"[]\", \"float32\", 3],\n          \"pointExterior\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapAreaV4 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"floor\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"polygon\",\n          this.PackMapAreaPolygonV4,\n          \"volume\",\n          this.PackMapAreaVolumeV4,\n        ];\n\n        this.PackMapAreaToolV4 = [\"annotation\", Utils.getString16Reader(), \"renderOffset\", \"float32\"];\n\n        this.__root = this.PackMapAreasV4 = [\n          \"areas\",\n          Utils.getArrayReader(this.PackMapAreaV4),\n          \"areaTools\",\n          Utils.getArrayReader(this.PackMapAreaToolV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.PackMapAreaPolygonV3 = [\"points\", Utils.getArrayReader([\"[]\", \"float32\", 3]), \"height\", \"float32\"];\n\n        this.PackMapAreaPortalV3 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapAreaVolumeV3 = [\n          \"portals\",\n          Utils.getArrayReader(this.PackMapAreaPortalV3),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"pointInterior\",\n          [\"[]\", \"float32\", 3],\n          \"pointExterior\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapAreaV3 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"floor\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"polygon\",\n          this.PackMapAreaPolygonV3,\n          \"volume\",\n          this.PackMapAreaVolumeV3,\n        ];\n\n        this.PackMapAreaToolV3 = [\"annotation\", Utils.getString16Reader(), \"renderOffset\", \"float32\"];\n\n        this.__root = this.PackMapAreasV3 = [\n          \"areas\",\n          Utils.getArrayReader(this.PackMapAreaV3),\n          \"areaTools\",\n          Utils.getArrayReader(this.PackMapAreaToolV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PackMapAreaPolygonV2 = [\"points\", Utils.getArrayReader([\"[]\", \"float32\", 3]), \"height\", \"float32\"];\n\n        this.PackMapAreaPortalV2 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapAreaVolumeV2 = [\n          \"portals\",\n          Utils.getArrayReader(this.PackMapAreaPortalV2),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"pointInterior\",\n          [\"[]\", \"float32\", 3],\n          \"pointExterior\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapAreaV2 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"floor\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"polygon\",\n          this.PackMapAreaPolygonV2,\n          \"volume\",\n          this.PackMapAreaVolumeV2,\n        ];\n\n        this.PackMapAreaToolV2 = [\"annotation\", Utils.getString16Reader()];\n\n        this.__root = this.PackMapAreasV2 = [\n          \"areas\",\n          Utils.getArrayReader(this.PackMapAreaV2),\n          \"areaTools\",\n          Utils.getArrayReader(this.PackMapAreaToolV2),\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0xE2EE00\n      1: function () {\n        this.PackMapAreaPolygonV1 = [\"points\", Utils.getArrayReader([\"[]\", \"float32\", 3]), \"height\", \"float32\"];\n\n        this.PackMapAreaPortalV1 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapAreaVolumeV1 = [\n          \"portals\",\n          Utils.getArrayReader(this.PackMapAreaPortalV1),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"pointInterior\",\n          [\"[]\", \"float32\", 3],\n          \"pointExterior\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapAreaV1 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"floor\",\n          \"uint8\",\n          \"polygon\",\n          this.PackMapAreaPolygonV1,\n          \"volume\",\n          this.PackMapAreaVolumeV1,\n        ];\n\n        this.__root = this.PackMapAreasV1 = [\"areas\", Utils.getArrayReader(this.PackMapAreaV1)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackMapAreaV0 = [\n          \"min\",\n          [\"[]\", \"float32\", 3],\n          \"max\",\n          [\"[]\", \"float32\", 3],\n          \"internal\",\n          [\"[]\", \"float32\", 3],\n          \"external\",\n          [\"[]\", \"float32\", 3],\n          \"token\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapPortalV0 = [\"portalVerts\", Utils.getArrayReader([\"[]\", \"float32\", 3])];\n\n        this.__root = this.PackMapAreasV0 = [\n          \"areas\",\n          Utils.getArrayReader(this.PackMapAreaV0),\n          \"portals\",\n          Utils.getArrayReader(this.PackMapPortalV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: ARMF, versions: 2, strucTab: 0x1834230\n  /// ==================================================\n\n  {\n    name: \"ARMF\",\n    versions: {\n      // => Version: 1\n      1: function () {\n        this.PackAssetManifestFile = [\n          \"baseId\",\n          \"uint32\",\n          \"fileId\",\n          \"uint32\",\n          \"size\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackAssetExtraFile = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"size\", \"uint32\", \"fileType\", \"uint32\"];\n\n        this.__root = this.PackAssetRootManifest = [\n          \"buildId\",\n          \"uint32\",\n          \"manifests\",\n          Utils.getArrayReader(this.PackAssetManifestFile),\n          \"extraFiles\",\n          Utils.getArrayReader(this.PackAssetExtraFile),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackAssetExtraFile = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"size\", \"uint32\", \"fileType\", \"uint32\"];\n\n        this.__root = this.PackAssetRootManifestV0 = [\n          \"buildId\",\n          \"uint32\",\n          \"extraFiles\",\n          Utils.getArrayReader(this.PackAssetExtraFile),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: ASND, versions: 3, strucTab: 0x16CF998\n  /// ==================================================\n\n  {\n    name: \"ASND\",\n    versions: {\n      // => Version: 2\n      2: function () {\n        this.ReservedWaveformDataV2 = [\n          \"reserved1\",\n          \"uint32\",\n          \"reserved2\",\n          \"uint32\",\n          \"reserved3\",\n          \"uint32\",\n          \"reserved4\",\n          \"uint32\",\n        ];\n\n        this.__root = this.WaveformDataV2 = [\n          \"length\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"reservedData\",\n          Utils.getPointerReader(this.ReservedWaveformDataV2),\n          \"reserved1\",\n          \"uint32\",\n          \"reserved2\",\n          \"uint32\",\n          \"crc\",\n          \"uint32\",\n          \"numSamples\",\n          \"uint32\",\n          \"loopStart\",\n          \"uint32\",\n          \"loopEnd\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"format\",\n          \"uint8\",\n          \"reserved3\",\n          \"uint8\",\n          \"reserved4\",\n          \"uint8\",\n          \"reserved5\",\n          \"uint8\",\n          \"numChannels\",\n          \"uint8\",\n          \"reserved6\",\n          \"uint8\",\n          \"reserved7\",\n          \"uint8\",\n          \"reserved8\",\n          \"uint8\",\n          \"audioData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"otherData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0xE21150\n      1: function () {\n        this.__root = this.WaveformDataV1 = [\n          \"length\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"crc\",\n          \"uint32\",\n          \"numSamples\",\n          \"uint32\",\n          \"loopStart\",\n          \"uint32\",\n          \"loopEnd\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"format\",\n          \"uint8\",\n          \"noteBase\",\n          \"uint8\",\n          \"noteHigh\",\n          \"uint8\",\n          \"noteLow\",\n          \"uint8\",\n          \"numChannels\",\n          \"uint8\",\n          \"reserved1\",\n          \"uint8\",\n          \"reserved2\",\n          \"uint8\",\n          \"reserved3\",\n          \"uint8\",\n          \"audioData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"otherData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.__root = this.WaveformDataV0 = [\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"flags\",\n          \"uint32\",\n          \"length\",\n          \"float32\",\n          \"noteBase\",\n          \"uint8\",\n          \"noteHigh\",\n          \"uint8\",\n          \"noteLow\",\n          \"uint8\",\n          \"numChannels\",\n          \"uint8\",\n          \"numSamples\",\n          \"uint32\",\n          \"waveformDataType\",\n          \"uint8\",\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: audi, versions: 9, strucTab: 0x1723448\n  /// ==================================================\n\n  {\n    name: \"audi\",\n    versions: {\n      // => Version: 8\n      8: function () {\n        this.PackMapAudioRegion = [\n          \"regionType\",\n          \"uint32\",\n          \"overrideMode\",\n          \"uint32\",\n          \"filenameSourceDay\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDay\",\n          Utils.getFileNameReader(),\n          \"filenameSourceNight\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNight\",\n          Utils.getFileNameReader(),\n          \"filenameInterior\",\n          Utils.getFileNameReader(),\n          \"exteriorVolume\",\n          \"float32\",\n          \"priority\",\n          \"uint32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 3],\n          \"fadeBand\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapAudioRegionTool = [\"annotation\", Utils.getString16Reader()];\n\n        this.PackMapAudioDep = [\"dependency\", Utils.getFileNameReader(), \"flags\", \"uint32\"];\n\n        this.__root = this.MapAudio = [\n          \"filenameAmbientDaySurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDayUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightSurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightUnderwater\",\n          Utils.getFileNameReader(),\n          \"audioRegions\",\n          Utils.getArrayReader(this.PackMapAudioRegion),\n          \"audioRegionTools\",\n          Utils.getArrayReader(this.PackMapAudioRegionTool),\n          \"audioDepArray\",\n          Utils.getArrayReader(this.PackMapAudioDep),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.PackMapAudioRegion = [\n          \"regionType\",\n          \"uint32\",\n          \"overrideMode\",\n          \"uint32\",\n          \"filenameSourceDay\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDay\",\n          Utils.getFileNameReader(),\n          \"filenameSourceNight\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNight\",\n          Utils.getFileNameReader(),\n          \"filenameInterior\",\n          Utils.getFileNameReader(),\n          \"exteriorVolume\",\n          \"float32\",\n          \"priority\",\n          \"uint32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 3],\n          \"fadeBand\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapAudioRegionTool = [\"annotation\", Utils.getString16Reader()];\n\n        this.__root = this.MapAudio = [\n          \"filenameAmbientDaySurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDayUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightSurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightUnderwater\",\n          Utils.getFileNameReader(),\n          \"audioRegions\",\n          Utils.getArrayReader(this.PackMapAudioRegion),\n          \"audioRegionTools\",\n          Utils.getArrayReader(this.PackMapAudioRegionTool),\n        ];\n      },\n\n      // => Version: 6\n      6: function () {\n        this.PackMapAudioRegion = [\n          \"regionType\",\n          \"uint32\",\n          \"overrideMode\",\n          \"uint32\",\n          \"filenameSourceDay\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDay\",\n          Utils.getFileNameReader(),\n          \"filenameSourceNight\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNight\",\n          Utils.getFileNameReader(),\n          \"filenameInterior\",\n          Utils.getFileNameReader(),\n          \"exteriorVolume\",\n          \"float32\",\n          \"priority\",\n          \"uint32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 3],\n          \"fadeBand\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.__root = this.MapAudio = [\n          \"filenameAmbientDaySurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDayUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightSurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightUnderwater\",\n          Utils.getFileNameReader(),\n          \"audioRegions\",\n          Utils.getArrayReader(this.PackMapAudioRegion),\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.PackMapAudioRegion = [\n          \"regionType\",\n          \"uint32\",\n          \"overrideMode\",\n          \"uint32\",\n          \"filenameSourceDay\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDay\",\n          Utils.getFileNameReader(),\n          \"filenameSourceNight\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNight\",\n          Utils.getFileNameReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 3],\n          \"fadeBand\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.__root = this.MapAudio = [\n          \"filenameAmbientDaySurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDayUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightSurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightUnderwater\",\n          Utils.getFileNameReader(),\n          \"audioRegions\",\n          Utils.getArrayReader(this.PackMapAudioRegion),\n        ];\n      },\n\n      // => Version: 4, ReferencedFunction: 0xEBB190\n      4: function () {\n        this.PackMapAudioRegion = [\n          \"regionType\",\n          \"uint32\",\n          \"overrideMode\",\n          \"uint32\",\n          \"filenameSourceDay\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDay\",\n          Utils.getFileNameReader(),\n          \"filenameMusicDay\",\n          Utils.getFileNameReader(),\n          \"filenameSourceNight\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNight\",\n          Utils.getFileNameReader(),\n          \"filenameMusicNight\",\n          Utils.getFileNameReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 3],\n          \"fadeBand\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.__root = this.MapAudio = [\n          \"filenameAmbientDaySurface\",\n          Utils.getFileNameReader(),\n          \"filenameMusicDaySurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDayUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameMusicDayUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightSurface\",\n          Utils.getFileNameReader(),\n          \"filenameMusicNightSurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameMusicNightUnderwater\",\n          Utils.getFileNameReader(),\n          \"audioRegions\",\n          Utils.getArrayReader(this.PackMapAudioRegion),\n        ];\n      },\n\n      // => Version: 3, ReferencedFunction: 0xEBB080\n      3: function () {\n        this.PackMapAudioRegion = [\n          \"regionType\",\n          \"uint32\",\n          \"overrideMode\",\n          \"uint32\",\n          \"filenameSourceDay\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDay\",\n          Utils.getFileNameReader(),\n          \"filenameMusicDay\",\n          Utils.getFileNameReader(),\n          \"filenameSourceNight\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNight\",\n          Utils.getFileNameReader(),\n          \"filenameMusicNight\",\n          Utils.getFileNameReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 3],\n          \"fadeBand\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.__root = this.MapAudio = [\n          \"filenameAmbientDaySurface\",\n          Utils.getFileNameReader(),\n          \"filenameMusicDaySurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientDayUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameMusicDayUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightSurface\",\n          Utils.getFileNameReader(),\n          \"filenameMusicNightSurface\",\n          Utils.getFileNameReader(),\n          \"filenameAmbientNightUnderwater\",\n          Utils.getFileNameReader(),\n          \"filenameMusicNightUnderwater\",\n          Utils.getFileNameReader(),\n          \"audioRegions\",\n          Utils.getArrayReader(this.PackMapAudioRegion),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PackMapAudioRegion = [\n          \"regionType\",\n          \"uint32\",\n          \"overrideMode\",\n          \"uint32\",\n          \"filenameSource\",\n          Utils.getFileNameReader(),\n          \"filenameAmbient\",\n          Utils.getFileNameReader(),\n          \"filenameMusic\",\n          Utils.getFileNameReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 3],\n          \"fadeBand\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.__root = this.MapAudio = [\n          \"globalAmbientScriptFilename\",\n          Utils.getFileNameReader(),\n          \"globalMusicScriptFilename\",\n          Utils.getFileNameReader(),\n          \"globalAmbientUnderwaterScriptFilename\",\n          Utils.getFileNameReader(),\n          \"globalMusicUnderwaterScriptFilename\",\n          Utils.getFileNameReader(),\n          \"audioRegions\",\n          Utils.getArrayReader(this.PackMapAudioRegion),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PackMapAudioRegion = [\n          \"regionType\",\n          \"uint32\",\n          \"overrideMode\",\n          \"uint32\",\n          \"filenameSource\",\n          Utils.getFileNameReader(),\n          \"filenameAmbient\",\n          Utils.getFileNameReader(),\n          \"filenameMusic\",\n          Utils.getFileNameReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 3],\n          \"fadeBand\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.__root = this.MapAudio = [\n          \"globalAmbientScriptFilename\",\n          Utils.getFileNameReader(),\n          \"globalMusicScriptFilename\",\n          Utils.getFileNameReader(),\n          \"audioRegions\",\n          Utils.getArrayReader(this.PackMapAudioRegion),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.__root = this.MapAudio = [\n          \"globalAmbientScriptFilename\",\n          Utils.getFileNameReader(),\n          \"globalMusicScriptFilename\",\n          Utils.getFileNameReader(),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: BIDX, versions: 1, strucTab: 0x16CF834\n  /// ==================================================\n\n  {\n    name: \"BIDX\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.BankFileNameDataV0 = [\"fileName\", Utils.getFileNameReader()];\n\n        this.BankLanguageDataV0 = [\"bankFileName\", Utils.getArrayReader(this.BankFileNameDataV0)];\n\n        this.__root = this.BankIndexDataV0 = [\"bankLanguage\", Utils.getArrayReader(this.BankLanguageDataV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: BKCK, versions: 3, strucTab: 0x16CF458\n  /// ==================================================\n\n  {\n    name: \"BKCK\",\n    versions: {\n      // => Version: 2\n      2: function () {\n        this.AsndFileDataV2 = [\n          \"voiceId\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"reserved1\",\n          \"uint32\",\n          \"reserved2\",\n          \"uint32\",\n          \"reserved3\",\n          \"uint32\",\n          \"reserved4\",\n          \"uint32\",\n          \"length\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"reserved5\",\n          \"uint8\",\n          \"reserved6\",\n          \"uint8\",\n          \"reserved7\",\n          \"uint8\",\n          \"reserved8\",\n          \"uint8\",\n          \"audioData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ReservedBankDataV2 = [\n          \"reserved1\",\n          \"uint32\",\n          \"reserved2\",\n          \"uint32\",\n          \"reserved3\",\n          \"uint32\",\n          \"reserved4\",\n          \"uint32\",\n        ];\n\n        this.__root = this.BankFileDataV2 = [\n          \"reserved1\",\n          \"uint32\",\n          \"reserved2\",\n          \"uint32\",\n          \"reserved3\",\n          \"uint32\",\n          \"reserved4\",\n          \"uint32\",\n          \"asndFile\",\n          Utils.getArrayReader(this.AsndFileDataV2),\n          \"reservedData\",\n          Utils.getPointerReader(this.ReservedBankDataV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.AsndFileDataV1 = [\n          \"voiceId\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"reserved1\",\n          \"uint32\",\n          \"reserved2\",\n          \"uint32\",\n          \"length\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"audioData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.BankFileDataV1 = [\n          \"reserved1\",\n          \"uint32\",\n          \"reserved2\",\n          \"uint32\",\n          \"asndFile\",\n          Utils.getArrayReader(this.AsndFileDataV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.AsndFileDataV0 = [\n          \"voiceId\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"reserved1\",\n          \"uint32\",\n          \"reserved2\",\n          \"uint32\",\n          \"length\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"audioData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.BankFileDataV0 = [\n          \"reserved1\",\n          \"uint32\",\n          \"reserved2\",\n          \"uint32\",\n          \"asndFile\",\n          Utils.getArrayReader(this.AsndFileDataV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: bloc, versions: 1, strucTab: 0x1724304\n  /// ==================================================\n\n  {\n    name: \"bloc\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackMapBlockRecord = [\"filename\", Utils.getFileNameReader()];\n\n        this.__root = this.PackMapBlock = [\n          \"blockDims\",\n          [\"[]\", \"uint32\", 2],\n          \"blockRecordArray\",\n          Utils.getArrayReader(this.PackMapBlockRecord),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: CDHS, versions: 2, strucTab: 0x15313C0\n  /// ==================================================\n\n  {\n    name: \"CDHS\",\n    versions: {\n      // => Version: 1, ReferencedFunction: 0x5B0AE0\n      1: function () {\n        this.PackVsGenParams = [\n          \"pointWindCount\",\n          \"uint8\",\n          \"lightPointCount\",\n          \"uint8\",\n          \"lightSpotCount\",\n          \"uint8\",\n          \"texTransCount\",\n          \"uint8\",\n          \"hazeMode\",\n          \"uint8\",\n          \"flags\",\n          \"uint16\",\n        ];\n\n        this.PackVertexShaderKey = [\n          \"vsGenParams\",\n          this.PackVsGenParams,\n          \"vertexFormat\",\n          \"uint32\",\n          \"texGenCount\",\n          \"uint32\",\n          \"texGen\",\n          [\"[]\", \"uint32\", 14],\n          \"vsVersion\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackShaderCache = [\"data\", Utils.getArrayReader(this.PackVertexShaderKey)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackVertexShaderKeyV0 = [\n          \"params\",\n          \"uint32\",\n          \"vertexFormat\",\n          \"uint32\",\n          \"texGenCount\",\n          \"uint32\",\n          \"texGen\",\n          [\"[]\", \"uint32\", 14],\n          \"vsVersion\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackShaderCacheV0 = [\"data\", Utils.getArrayReader(this.PackVertexShaderKeyV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: cg15, versions: 1, strucTab: 0x17242C8\n  /// ==================================================\n\n  {\n    name: \"cg15\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackMapCoarseNavGraphNodeV0 = [\n          \"materialId\",\n          \"uint32\",\n          \"bottomLeftBound\",\n          [\"[]\", \"float32\", 3],\n          \"topRightBound\",\n          [\"[]\", \"float32\", 3],\n          \"centroid\",\n          [\"[]\", \"float32\", 3],\n          \"faces\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapCoarseNavGraphConnectionEdgeV0 = [\n          \"edgeStart\",\n          [\"[]\", \"float32\", 3],\n          \"edgeEnd\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapCoarseNavGraphConnectionV0 = [\n          \"targetSectionUid\",\n          \"uint32\",\n          \"targetNodeIndex\",\n          \"uint32\",\n          \"edges\",\n          Utils.getArrayReader(this.PackMapCoarseNavGraphConnectionEdgeV0),\n        ];\n\n        this.PackMapCoarseNavGraphNodeConnectionsV0 = [\n          \"nodeIndex\",\n          \"uint32\",\n          \"connections\",\n          Utils.getArrayReader(this.PackMapCoarseNavGraphConnectionV0),\n        ];\n\n        this.PackMapCoarseNavGraphSectionV0 = [\n          \"sectionUid\",\n          \"uint32\",\n          \"nodes\",\n          Utils.getArrayReader(this.PackMapCoarseNavGraphNodeV0),\n          \"nodeConnections\",\n          Utils.getArrayReader(this.PackMapCoarseNavGraphNodeConnectionsV0),\n        ];\n\n        this.__root = this.PackMapCoarseNavGraphV0 = [\n          \"sections\",\n          Utils.getArrayReader(this.PackMapCoarseNavGraphSectionV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: cnfg, versions: 1, strucTab: 0x1884668\n  /// ==================================================\n\n  {\n    name: \"cnfg\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackAnimAimIKBoneV0 = [\n          \"boneToken\",\n          Utils.getQWordReader(),\n          \"clampAngle\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"smoothingWeight\",\n          \"float32\",\n        ];\n\n        this.PackAnimAimIKConfigV0 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"boneEye\",\n          Utils.getQWordReader(),\n          \"boneSight\",\n          Utils.getQWordReader(),\n          \"endEffector\",\n          Utils.getQWordReader(),\n          \"frustumHAngle\",\n          \"float32\",\n          \"frustumVAngle\",\n          \"float32\",\n          \"frustumLength\",\n          \"float32\",\n          \"targetVelocityConstraint\",\n          \"float32\",\n          \"bones\",\n          Utils.getArrayReader(this.PackAnimAimIKBoneV0),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackAnimIKRaycastTargetV0 = [\"flags\", \"uint32\", \"direction\", [\"[]\", \"float32\", 3]];\n\n        this.PackAnimIKChainV0 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"smoothWeight\",\n          [\"[]\", \"float32\", 3],\n          \"hyperExtensionStart\",\n          \"float32\",\n          \"hyperExtensionScale\",\n          \"float32\",\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"targetRaycastInfo\",\n          Utils.getPointerReader(this.PackAnimIKRaycastTargetV0),\n          \"targetMode\",\n          \"uint8\",\n          \"chainType\",\n          \"uint8\",\n        ];\n\n        this.PackAnimIKChainGroupV0 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"chains\",\n          Utils.getArrayReader(this.PackAnimIKChainV0),\n        ];\n\n        this.__root = this.PackAnimConfigV0 = [\n          \"aimIKConfigs\",\n          Utils.getArrayReader(this.PackAnimAimIKConfigV0),\n          \"chainGroups\",\n          Utils.getArrayReader(this.PackAnimIKChainGroupV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: COLL, versions: 5, strucTab: 0x1773030\n  /// ==================================================\n\n  {\n    name: \"COLL\",\n    versions: {\n      // => Version: 4\n      4: function () {\n        this.ModelCollisionKeyFrameV10 = [\n          \"time\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelCollisionAnimatedObjectV10 = [\n          \"shapeIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"keyFrames\",\n          Utils.getArrayReader(this.ModelCollisionKeyFrameV10),\n        ];\n\n        this.ModelCollisionAnimationV10 = [\n          \"animation\",\n          Utils.getQWordReader(),\n          \"objects\",\n          Utils.getArrayReader(this.ModelCollisionAnimatedObjectV10),\n          \"targetPoints\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.ModelCollisionMeshV10 = [\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n          \"navSeedPoints\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.ModelCollisionBoxV10 = [\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionSphereV10 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionCapsuleV10 = [\n          \"p0\",\n          [\"[]\", \"float32\", 3],\n          \"p1\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionSurfaceV10 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.__root = this.ModelFileCollisionV10 = [\n          \"animations\",\n          Utils.getArrayReader(this.ModelCollisionAnimationV10),\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV10),\n          \"boxes\",\n          Utils.getArrayReader(this.ModelCollisionBoxV10),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV10),\n          \"capsules\",\n          Utils.getArrayReader(this.ModelCollisionCapsuleV10),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV10),\n        ];\n      },\n\n      // => Version: 3, ReferencedFunction: 0xF277D0\n      3: function () {\n        this.ModelCollisionKeyFrameV9 = [\n          \"time\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"orientation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.ModelCollisionAnimatedObjectV9 = [\n          \"shapeIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"keyFrames\",\n          Utils.getArrayReader(this.ModelCollisionKeyFrameV9),\n        ];\n\n        this.ModelCollisionAnimationV9 = [\n          \"animation\",\n          Utils.getQWordReader(),\n          \"objects\",\n          Utils.getArrayReader(this.ModelCollisionAnimatedObjectV9),\n        ];\n\n        this.ModelCollisionMeshV9 = [\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionBoxV9 = [\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionSphereV9 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionCapsuleV9 = [\n          \"p0\",\n          [\"[]\", \"float32\", 3],\n          \"p1\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionSurfaceV9 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.__root = this.ModelFileCollisionV9 = [\n          \"animations\",\n          Utils.getArrayReader(this.ModelCollisionAnimationV9),\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV9),\n          \"boxes\",\n          Utils.getArrayReader(this.ModelCollisionBoxV9),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV9),\n          \"capsules\",\n          Utils.getArrayReader(this.ModelCollisionCapsuleV9),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV9),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.ModelCollisionMeshV8 = [\n          \"animationSequences\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionCloudV8 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionCubeV8 = [\"transform\", [\"[]\", [\"[]\", \"float32\", 4], 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSphereV8 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionCapsuleV8 = [\n          \"p0\",\n          [\"[]\", \"float32\", 3],\n          \"p1\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionSurfaceV8 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.__root = this.ModelFileCollisionV8 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV8),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelCollisionCloudV8),\n          \"cubes\",\n          Utils.getArrayReader(this.ModelCollisionCubeV8),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV8),\n          \"capsules\",\n          Utils.getArrayReader(this.ModelCollisionCapsuleV8),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV8),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.ModelCollisionMeshV1 = [\n          \"animationSequences\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionCloudV1 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionCubeV1 = [\"transform\", [\"[]\", [\"[]\", \"float32\", 4], 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSphereV1 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSurfaceV1 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.__root = this.ModelFileCollisionV1 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV1),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelCollisionCloudV1),\n          \"cubes\",\n          Utils.getArrayReader(this.ModelCollisionCubeV1),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV1),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ModelCollisionMeshV0 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionCloudV0 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionCubeV0 = [\"transform\", [\"[]\", [\"[]\", \"float32\", 4], 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSphereV0 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSurfaceV0 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.__root = this.ModelFileCollisionV0 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV0),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelCollisionCloudV0),\n          \"cubes\",\n          Utils.getArrayReader(this.ModelCollisionCubeV0),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV0),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: comp, versions: 20, strucTab: 0x18840B0\n  /// ==================================================\n\n  {\n    name: \"comp\",\n    versions: {\n      // => Version: 19\n      19: function () {\n        this.PackCompositeBlitRectSetV19 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeBoneScaleParamV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint8\",\n          \"max\",\n          \"float32\",\n          \"min\",\n          \"float32\",\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          [\"[]\", \"float32\", 3],\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackCompositeBoneScaleRegionV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"value\",\n          \"float32\",\n          \"Bone\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleParamV19),\n        ];\n\n        this.PackCompositeMorphWeightV19 = [\"name\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.PackCompositeBoneScaleV19 = [\n          \"BodyRegion\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV19),\n          \"MorphWeight\",\n          Utils.getArrayReader(this.PackCompositeMorphWeightV19),\n        ];\n\n        this.PackCompositeBoneScaleFileV19 = [\"fileName\", Utils.getString16Reader()];\n\n        this.PackCompositeFileDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"animRoleOverride\",\n          Utils.getQWordReader(),\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeSkinPatternV19 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeSkinStyleV19 = [\n          \"chest\",\n          Utils.getQWordReader(),\n          \"feet\",\n          Utils.getQWordReader(),\n          \"hands\",\n          Utils.getQWordReader(),\n          \"legs\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackCompositeColorV19 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV19 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV19,\n          \"color1\",\n          this.PackCompositeColorV19,\n          \"color2\",\n          this.PackCompositeColorV19,\n          \"color3\",\n          this.PackCompositeColorV19,\n        ];\n\n        this.PackCompositeVariantV19 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"boneScaleIndex\",\n          \"uint32\",\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV19),\n          \"eyeColor\",\n          this.PackCompositeColorV19,\n          \"hairColor\",\n          this.PackCompositeColorV19,\n          \"hairColor2\",\n          this.PackCompositeColorV19,\n          \"patternColor\",\n          this.PackCompositeColorV19,\n          \"skinColor\",\n          this.PackCompositeColorV19,\n          \"skinIndex\",\n          \"uint32\",\n          \"skinStyle\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeAnimOverrideV19 = [\"animRole\", Utils.getQWordReader(), \"filepath\", Utils.getFileNameReader()];\n\n        this.PackCompositeRaceDataV19 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"bodyBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV19),\n          \"bodyBoneScaleFiles\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleFileV19),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"eyeColorPalette\",\n          Utils.getString16Reader(),\n          \"faceBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV19),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV19),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV19),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"skinStyles\",\n          Utils.getArrayReader(this.PackCompositeSkinStyleV19),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV19),\n          \"animOverrides\",\n          Utils.getArrayReader(this.PackCompositeAnimOverrideV19),\n        ];\n\n        this.__root = this.PackCompositeV19 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV19),\n          \"boneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV19),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV19),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 18\n      18: function () {\n        this.PackCompositeBlitRectSetV18 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeBoneScaleParamV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint8\",\n          \"max\",\n          \"float32\",\n          \"min\",\n          \"float32\",\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          [\"[]\", \"float32\", 3],\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackCompositeBoneScaleRegionV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"value\",\n          \"float32\",\n          \"Bone\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleParamV18),\n        ];\n\n        this.PackCompositeMorphWeightV18 = [\"name\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.PackCompositeBoneScaleV18 = [\n          \"BodyRegion\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV18),\n          \"MorphWeight\",\n          Utils.getArrayReader(this.PackCompositeMorphWeightV18),\n        ];\n\n        this.PackCompositeBoneScaleFileV18 = [\"fileName\", Utils.getString16Reader()];\n\n        this.PackCompositeFileDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"animRoleOverride\",\n          Utils.getQWordReader(),\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeSkinPatternV18 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeSkinStyleV18 = [\n          \"chest\",\n          Utils.getQWordReader(),\n          \"feet\",\n          Utils.getQWordReader(),\n          \"hands\",\n          Utils.getQWordReader(),\n          \"legs\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackCompositeColorV18 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV18 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV18,\n          \"color1\",\n          this.PackCompositeColorV18,\n          \"color2\",\n          this.PackCompositeColorV18,\n          \"color3\",\n          this.PackCompositeColorV18,\n        ];\n\n        this.PackCompositeVariantV18 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"boneScaleIndex\",\n          \"uint32\",\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV18),\n          \"eyeColor\",\n          this.PackCompositeColorV18,\n          \"hairColor\",\n          this.PackCompositeColorV18,\n          \"hairColor2\",\n          this.PackCompositeColorV18,\n          \"patternColor\",\n          this.PackCompositeColorV18,\n          \"skinColor\",\n          this.PackCompositeColorV18,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeAnimOverrideV18 = [\"animRole\", Utils.getQWordReader(), \"filepath\", Utils.getFileNameReader()];\n\n        this.PackCompositeRaceDataV18 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"bodyBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV18),\n          \"bodyBoneScaleFiles\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleFileV18),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"eyeColorPalette\",\n          Utils.getString16Reader(),\n          \"faceBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV18),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV18),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV18),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"skinStyles\",\n          Utils.getArrayReader(this.PackCompositeSkinStyleV18),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV18),\n          \"animOverrides\",\n          Utils.getArrayReader(this.PackCompositeAnimOverrideV18),\n        ];\n\n        this.__root = this.PackCompositeV18 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV18),\n          \"boneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV18),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV18),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 17, ReferencedFunction: 0x1103270\n      17: function () {\n        this.PackCompositeBlitRectSetV17 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeBoneScaleParamV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint8\",\n          \"max\",\n          \"float32\",\n          \"min\",\n          \"float32\",\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          [\"[]\", \"float32\", 3],\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackCompositeBoneScaleRegionV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"value\",\n          \"float32\",\n          \"Bone\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleParamV17),\n        ];\n\n        this.PackCompositeMorphWeightV17 = [\"name\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.PackCompositeBoneScaleV17 = [\n          \"BodyRegion\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV17),\n          \"MorphWeight\",\n          Utils.getArrayReader(this.PackCompositeMorphWeightV17),\n        ];\n\n        this.PackCompositeBoneScaleFileV17 = [\"fileName\", Utils.getString16Reader()];\n\n        this.PackCompositeFileDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeSkinPatternV17 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeSkinStyleV17 = [\n          \"chest\",\n          Utils.getQWordReader(),\n          \"feet\",\n          Utils.getQWordReader(),\n          \"hands\",\n          Utils.getQWordReader(),\n          \"legs\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackCompositeColorV17 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV17 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV17,\n          \"color1\",\n          this.PackCompositeColorV17,\n          \"color2\",\n          this.PackCompositeColorV17,\n          \"color3\",\n          this.PackCompositeColorV17,\n        ];\n\n        this.PackCompositeVariantV17 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"boneScaleIndex\",\n          \"uint32\",\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV17),\n          \"eyeColor\",\n          this.PackCompositeColorV17,\n          \"hairColor\",\n          this.PackCompositeColorV17,\n          \"hairColor2\",\n          this.PackCompositeColorV17,\n          \"patternColor\",\n          this.PackCompositeColorV17,\n          \"skinColor\",\n          this.PackCompositeColorV17,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeAnimOverrideV17 = [\"animRole\", Utils.getQWordReader(), \"filepath\", Utils.getFileNameReader()];\n\n        this.PackCompositeRaceDataV17 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"bodyBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV17),\n          \"bodyBoneScaleFiles\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleFileV17),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"eyeColorPalette\",\n          Utils.getString16Reader(),\n          \"faceBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV17),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV17),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV17),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"skinStyles\",\n          Utils.getArrayReader(this.PackCompositeSkinStyleV17),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV17),\n          \"animOverrides\",\n          Utils.getArrayReader(this.PackCompositeAnimOverrideV17),\n        ];\n\n        this.__root = this.PackCompositeV17 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV17),\n          \"boneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV17),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV17),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 16, ReferencedFunction: 0x1102ED0\n      16: function () {\n        this.PackCompositeBlitRectSetV16 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeBoneScaleParamV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint8\",\n          \"max\",\n          \"float32\",\n          \"min\",\n          \"float32\",\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          [\"[]\", \"float32\", 3],\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackCompositeBoneScaleRegionV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"value\",\n          \"float32\",\n          \"Bone\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleParamV16),\n        ];\n\n        this.PackCompositeMorphWeightV16 = [\"name\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.PackCompositeBoneScaleV16 = [\n          \"BodyRegion\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV16),\n          \"MorphWeight\",\n          Utils.getArrayReader(this.PackCompositeMorphWeightV16),\n        ];\n\n        this.PackCompositeBoneScaleFileV16 = [\"fileName\", Utils.getString16Reader()];\n\n        this.PackCompositeFileDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeSkinPatternV16 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV16 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV16 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV16,\n          \"color1\",\n          this.PackCompositeColorV16,\n          \"color2\",\n          this.PackCompositeColorV16,\n          \"color3\",\n          this.PackCompositeColorV16,\n        ];\n\n        this.PackCompositeVariantV16 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"boneScaleIndex\",\n          \"uint32\",\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV16),\n          \"eyeColor\",\n          this.PackCompositeColorV16,\n          \"hairColor\",\n          this.PackCompositeColorV16,\n          \"hairColor2\",\n          this.PackCompositeColorV16,\n          \"patternColor\",\n          this.PackCompositeColorV16,\n          \"skinColor\",\n          this.PackCompositeColorV16,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeAnimOverrideV16 = [\"animRole\", Utils.getQWordReader(), \"filepath\", Utils.getFileNameReader()];\n\n        this.PackCompositeRaceDataV16 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"bodyBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV16),\n          \"bodyBoneScaleFiles\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleFileV16),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"eyeColorPalette\",\n          Utils.getString16Reader(),\n          \"faceBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV16),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV16),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV16),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"skinStyleCount\",\n          \"uint8\",\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV16),\n          \"animOverrides\",\n          Utils.getArrayReader(this.PackCompositeAnimOverrideV16),\n        ];\n\n        this.__root = this.PackCompositeV16 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV16),\n          \"boneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV16),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV16),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 15\n      15: function () {\n        this.PackCompositeBlitRectSetV15 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeBoneScaleParamV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint8\",\n          \"max\",\n          \"float32\",\n          \"min\",\n          \"float32\",\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          [\"[]\", \"float32\", 3],\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackCompositeBoneScaleRegionV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"value\",\n          \"float32\",\n          \"Bone\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleParamV15),\n        ];\n\n        this.PackCompositeMorphWeightV15 = [\"name\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.PackCompositeBoneScaleV15 = [\n          \"BodyRegion\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV15),\n          \"MorphWeight\",\n          Utils.getArrayReader(this.PackCompositeMorphWeightV15),\n        ];\n\n        this.PackCompositeBoneScaleFileV15 = [\"fileName\", Utils.getString16Reader()];\n\n        this.PackCompositeFileDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeSkinPatternV15 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV15 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV15 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV15,\n          \"color1\",\n          this.PackCompositeColorV15,\n          \"color2\",\n          this.PackCompositeColorV15,\n          \"color3\",\n          this.PackCompositeColorV15,\n        ];\n\n        this.PackCompositeVariantV15 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"boneScaleIndex\",\n          \"uint32\",\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV15),\n          \"eyeColor\",\n          this.PackCompositeColorV15,\n          \"hairColor\",\n          this.PackCompositeColorV15,\n          \"hairColor2\",\n          this.PackCompositeColorV15,\n          \"patternColor\",\n          this.PackCompositeColorV15,\n          \"skinColor\",\n          this.PackCompositeColorV15,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeAnimOverrideV15 = [\"animRole\", Utils.getQWordReader(), \"filepath\", Utils.getFileNameReader()];\n\n        this.PackCompositeRaceDataV15 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"bodyBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV15),\n          \"bodyBoneScaleFiles\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleFileV15),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"eyeColorPalette\",\n          Utils.getString16Reader(),\n          \"faceBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV15),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV15),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV15),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"skinStyleCount\",\n          \"uint8\",\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV15),\n          \"animOverrides\",\n          Utils.getArrayReader(this.PackCompositeAnimOverrideV15),\n        ];\n\n        this.__root = this.PackCompositeV15 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV15),\n          \"boneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV15),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV15),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 14\n      14: function () {\n        this.PackCompositeBlitRectSetV14 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeBoneScaleParamV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint8\",\n          \"max\",\n          \"float32\",\n          \"min\",\n          \"float32\",\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          [\"[]\", \"float32\", 3],\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackCompositeBoneScaleRegionV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"value\",\n          \"float32\",\n          \"Bone\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleParamV14),\n        ];\n\n        this.PackCompositeMorphWeightV14 = [\"name\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.PackCompositeBoneScaleV14 = [\n          \"BodyRegion\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV14),\n          \"MorphWeight\",\n          Utils.getArrayReader(this.PackCompositeMorphWeightV14),\n        ];\n\n        this.PackCompositeBoneScaleFileV14 = [\"fileName\", Utils.getString16Reader()];\n\n        this.PackCompositeFileDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeSkinPatternV14 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV14 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV14 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV14,\n          \"color1\",\n          this.PackCompositeColorV14,\n          \"color2\",\n          this.PackCompositeColorV14,\n          \"color3\",\n          this.PackCompositeColorV14,\n        ];\n\n        this.PackCompositeVariantV14 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"boneScaleIndex\",\n          \"uint32\",\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV14),\n          \"eyeColor\",\n          this.PackCompositeColorV14,\n          \"hairColor\",\n          this.PackCompositeColorV14,\n          \"hairColor2\",\n          this.PackCompositeColorV14,\n          \"patternColor\",\n          this.PackCompositeColorV14,\n          \"skinColor\",\n          this.PackCompositeColorV14,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV14 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"bodyBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV14),\n          \"bodyBoneScaleFiles\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleFileV14),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"eyeColorPalette\",\n          Utils.getString16Reader(),\n          \"faceBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV14),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV14),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV14),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"skinStyleCount\",\n          \"uint8\",\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV14),\n        ];\n\n        this.__root = this.PackCompositeV14 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV14),\n          \"boneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV14),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV14),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 13\n      13: function () {\n        this.PackCompositeBlitRectSetV13 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeBoneScaleParamV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint8\",\n          \"max\",\n          \"float32\",\n          \"min\",\n          \"float32\",\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          [\"[]\", \"float32\", 3],\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackCompositeBoneScaleRegionV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"value\",\n          \"float32\",\n          \"Bone\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleParamV13),\n        ];\n\n        this.PackCompositeMorphWeightV13 = [\"value\", \"float32\", \"name\", Utils.getQWordReader()];\n\n        this.PackCompositeBoneScaleV13 = [\n          \"BodyRegion\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV13),\n          \"MorphWeight\",\n          Utils.getArrayReader(this.PackCompositeMorphWeightV13),\n        ];\n\n        this.PackCompositeBoneScaleFileV13 = [\"fileName\", Utils.getString16Reader()];\n\n        this.PackCompositeFileDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeSkinPatternV13 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV13 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV13 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV13,\n          \"color1\",\n          this.PackCompositeColorV13,\n          \"color2\",\n          this.PackCompositeColorV13,\n          \"color3\",\n          this.PackCompositeColorV13,\n        ];\n\n        this.PackCompositeVariantV13 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"boneScaleIndex\",\n          \"uint32\",\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV13),\n          \"hairColor\",\n          this.PackCompositeColorV13,\n          \"hairColor2\",\n          this.PackCompositeColorV13,\n          \"patternColor\",\n          this.PackCompositeColorV13,\n          \"skinColor\",\n          this.PackCompositeColorV13,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV13 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"bodyBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV13),\n          \"bodyBoneScaleFiles\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleFileV13),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faceBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV13),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV13),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV13),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"skinStyleCount\",\n          \"uint8\",\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV13),\n        ];\n\n        this.__root = this.PackCompositeV13 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV13),\n          \"boneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV13),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV13),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 12\n      12: function () {\n        this.PackCompositeBlitRectSetV12 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeBoneScaleParamV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint8\",\n          \"max\",\n          \"float32\",\n          \"min\",\n          \"float32\",\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          [\"[]\", \"float32\", 3],\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackCompositeBoneScaleRegionV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"value\",\n          \"float32\",\n          \"Bone\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleParamV12),\n        ];\n\n        this.PackCompositeMorphWeightV12 = [\"value\", \"float32\", \"name\", Utils.getQWordReader()];\n\n        this.PackCompositeBoneScaleV12 = [\n          \"BodyRegion\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleRegionV12),\n          \"MorphWeight\",\n          Utils.getArrayReader(this.PackCompositeMorphWeightV12),\n        ];\n\n        this.PackCompositeBoneScaleFileV12 = [\"fileName\", Utils.getString16Reader()];\n\n        this.PackCompositeFileDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV12 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV12 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV12 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV12,\n          \"color1\",\n          this.PackCompositeColorV12,\n          \"color2\",\n          this.PackCompositeColorV12,\n          \"color3\",\n          this.PackCompositeColorV12,\n        ];\n\n        this.PackCompositeVariantV12 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"boneScaleIndex\",\n          \"uint32\",\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV12),\n          \"hairColor\",\n          this.PackCompositeColorV12,\n          \"hairColor2\",\n          this.PackCompositeColorV12,\n          \"patternColor\",\n          this.PackCompositeColorV12,\n          \"skinColor\",\n          this.PackCompositeColorV12,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV12 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"bodyBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV12),\n          \"bodyBoneScaleFiles\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleFileV12),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faceBoneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV12),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV12),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV12),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"skinStyleCount\",\n          \"uint8\",\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV12),\n        ];\n\n        this.__root = this.PackCompositeV12 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV12),\n          \"boneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV12),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV12),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 11, ReferencedFunction: 0x1102E90\n      11: function () {\n        this.PackCompositeBlitRectSetV11 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeBoneScaleParamV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint8\",\n          \"max\",\n          \"float32\",\n          \"min\",\n          \"float32\",\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          [\"[]\", \"float32\", 3],\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackCompositeBoneScaleRegionV11 = [\n          \"value\",\n          \"float32\",\n          \"Bone\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleParamV11),\n        ];\n\n        this.PackCompositeBoneScaleV11 = [\"BodyRegion\", Utils.getArrayReader(this.PackCompositeBoneScaleRegionV11)];\n\n        this.PackCompositeFileDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV11 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV11 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV11 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV11,\n          \"color1\",\n          this.PackCompositeColorV11,\n          \"color2\",\n          this.PackCompositeColorV11,\n          \"color3\",\n          this.PackCompositeColorV11,\n        ];\n\n        this.PackCompositeVariantV11 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"boneScaleIndex\",\n          \"uint32\",\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV11),\n          \"hairColor\",\n          this.PackCompositeColorV11,\n          \"hairColor2\",\n          this.PackCompositeColorV11,\n          \"patternColor\",\n          this.PackCompositeColorV11,\n          \"skinColor\",\n          this.PackCompositeColorV11,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV11 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV11),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV11),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV11),\n        ];\n\n        this.__root = this.PackCompositeV11 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV11),\n          \"boneScales\",\n          Utils.getArrayReader(this.PackCompositeBoneScaleV11),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV11),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 10\n      10: function () {\n        this.PackCompositeBlitRectSetV10 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV10 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV10 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV10 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV10,\n          \"color1\",\n          this.PackCompositeColorV10,\n          \"color2\",\n          this.PackCompositeColorV10,\n          \"color3\",\n          this.PackCompositeColorV10,\n        ];\n\n        this.PackCompositeVariantV10 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV10),\n          \"hairColor\",\n          this.PackCompositeColorV10,\n          \"hairColor2\",\n          this.PackCompositeColorV10,\n          \"patternColor\",\n          this.PackCompositeColorV10,\n          \"skinColor\",\n          this.PackCompositeColorV10,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV10 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV10),\n          \"flags\",\n          \"uint32\",\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV10),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV10),\n        ];\n\n        this.__root = this.PackCompositeV10 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV10),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV10),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 9\n      9: function () {\n        this.PackCompositeBlitRectSetV9 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV9 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV9 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV9 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV9,\n          \"color1\",\n          this.PackCompositeColorV9,\n          \"color2\",\n          this.PackCompositeColorV9,\n          \"color3\",\n          this.PackCompositeColorV9,\n        ];\n\n        this.PackCompositeVariantV9 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV9),\n          \"hairColor\",\n          this.PackCompositeColorV9,\n          \"hairColor2\",\n          this.PackCompositeColorV9,\n          \"patternColor\",\n          this.PackCompositeColorV9,\n          \"skinColor\",\n          this.PackCompositeColorV9,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV9 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV9),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV9),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV9),\n        ];\n\n        this.__root = this.PackCompositeV9 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV9),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV9),\n          \"configVersion\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 8\n      8: function () {\n        this.PackCompositeBlitRectSetV8 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV8 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV8 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV8 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV8,\n          \"color1\",\n          this.PackCompositeColorV8,\n          \"color2\",\n          this.PackCompositeColorV8,\n          \"color3\",\n          this.PackCompositeColorV8,\n        ];\n\n        this.PackCompositeVariantV8 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV8),\n          \"hairColor\",\n          this.PackCompositeColorV8,\n          \"hairColor2\",\n          this.PackCompositeColorV8,\n          \"patternColor\",\n          this.PackCompositeColorV8,\n          \"skinColor\",\n          this.PackCompositeColorV8,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV8 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"baseHeadToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV8),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV8),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV8),\n        ];\n\n        this.__root = this.PackCompositeV8 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV8),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV8),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.PackCompositeBlitRectSetV7 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV7 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV7 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV7 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV7,\n          \"color1\",\n          this.PackCompositeColorV7,\n          \"color2\",\n          this.PackCompositeColorV7,\n          \"color3\",\n          this.PackCompositeColorV7,\n        ];\n\n        this.PackCompositeVariantV7 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV7),\n          \"hairColor\",\n          this.PackCompositeColorV7,\n          \"hairColor2\",\n          this.PackCompositeColorV7,\n          \"patternColor\",\n          this.PackCompositeColorV7,\n          \"skinColor\",\n          this.PackCompositeColorV7,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV7 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV7),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV7),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"skinPatternPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV7),\n        ];\n\n        this.__root = this.PackCompositeV7 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV7),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV7),\n        ];\n      },\n\n      // => Version: 6\n      6: function () {\n        this.PackCompositeBlitRectSetV6 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV6 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n          \"ears\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV6 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV6 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV6,\n          \"color1\",\n          this.PackCompositeColorV6,\n          \"color2\",\n          this.PackCompositeColorV6,\n          \"color3\",\n          this.PackCompositeColorV6,\n        ];\n\n        this.PackCompositeVariantV6 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV6),\n          \"hairColor\",\n          this.PackCompositeColorV6,\n          \"hairColor2\",\n          this.PackCompositeColorV6,\n          \"patternColor\",\n          this.PackCompositeColorV6,\n          \"skinColor\",\n          this.PackCompositeColorV6,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV6 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV6),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV6),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV6),\n        ];\n\n        this.__root = this.PackCompositeV6 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV6),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV6),\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.PackCompositeBlitRectSetV5 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV5 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV5 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV5 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV5 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"color0\",\n          this.PackCompositeColorV5,\n          \"color1\",\n          this.PackCompositeColorV5,\n          \"color2\",\n          this.PackCompositeColorV5,\n          \"color3\",\n          this.PackCompositeColorV5,\n        ];\n\n        this.PackCompositeVariantV5 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV5),\n          \"hairColor\",\n          this.PackCompositeColorV5,\n          \"hairColor2\",\n          this.PackCompositeColorV5,\n          \"patternColor\",\n          this.PackCompositeColorV5,\n          \"skinColor\",\n          this.PackCompositeColorV5,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV5 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV5),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV5),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV5),\n        ];\n\n        this.__root = this.PackCompositeV5 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV5),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV5),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.PackCompositeBlitRectSetV4 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint8\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV4 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV4 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV4 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV4 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"clothColor\",\n          this.PackCompositeColorV4,\n          \"leatherColor\",\n          this.PackCompositeColorV4,\n          \"metalColor\",\n          this.PackCompositeColorV4,\n        ];\n\n        this.PackCompositeVariantV4 = [\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV4),\n          \"hairColor\",\n          this.PackCompositeColorV4,\n          \"patternColor\",\n          this.PackCompositeColorV4,\n          \"skinColor\",\n          this.PackCompositeColorV4,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV4 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV4),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV4),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV4),\n        ];\n\n        this.__root = this.PackCompositeV4 = [\n          \"armorColorIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV4),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.PackCompositeBlitRectSetV3 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV3 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV3 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV3 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV3 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"clothColor\",\n          this.PackCompositeColorV3,\n          \"leatherColor\",\n          this.PackCompositeColorV3,\n          \"metalColor\",\n          this.PackCompositeColorV3,\n        ];\n\n        this.PackCompositeVariantV3 = [\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV3),\n          \"hairColor\",\n          this.PackCompositeColorV3,\n          \"patternColor\",\n          this.PackCompositeColorV3,\n          \"skinColor\",\n          this.PackCompositeColorV3,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV3 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"beard\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV3),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV3),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV3),\n        ];\n\n        this.__root = this.PackCompositeV3 = [\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV3),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PackCompositeBlitRectSetV2 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV2 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV2 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV2 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"clothColor\",\n          this.PackCompositeColorV2,\n          \"leatherColor\",\n          this.PackCompositeColorV2,\n          \"metalColor\",\n          this.PackCompositeColorV2,\n        ];\n\n        this.PackCompositeVariantV2 = [\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV2),\n          \"hairColor\",\n          this.PackCompositeColorV2,\n          \"patternColor\",\n          this.PackCompositeColorV2,\n          \"skinColor\",\n          this.PackCompositeColorV2,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV2 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV2),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV2),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV2),\n        ];\n\n        this.__root = this.PackCompositeV2 = [\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV2),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PackCompositeBlitRectSetV1 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV1 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskDye1\",\n          Utils.getFileNameReader(),\n          \"maskDye2\",\n          Utils.getFileNameReader(),\n          \"maskDye3\",\n          Utils.getFileNameReader(),\n          \"maskDye4\",\n          Utils.getFileNameReader(),\n          \"maskCut\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"dyeFlags\",\n          \"uint32\",\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV1 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV1 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV1 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"clothColor\",\n          this.PackCompositeColorV1,\n          \"leatherColor\",\n          this.PackCompositeColorV1,\n          \"metalColor\",\n          this.PackCompositeColorV1,\n        ];\n\n        this.PackCompositeVariantV1 = [\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV1),\n          \"hairColor\",\n          this.PackCompositeColorV1,\n          \"patternColor\",\n          this.PackCompositeColorV1,\n          \"skinColor\",\n          this.PackCompositeColorV1,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV1 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV1),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"hairColorPalette\",\n          Utils.getString16Reader(),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV1),\n          \"skinColorPalette\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV1),\n        ];\n\n        this.__root = this.PackCompositeV1 = [\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV1),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackCompositeBlitRectSetV0 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"size\",\n          [\"[]\", \"uint32\", 2],\n          \"rectIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"rectArray\",\n          Utils.getArrayReader([\"[]\", \"uint32\", 4]),\n        ];\n\n        this.PackCompositeFileDataV0 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"meshBase\",\n          Utils.getFileNameReader(),\n          \"meshOverlap\",\n          Utils.getFileNameReader(),\n          \"maskClothSkin\",\n          Utils.getFileNameReader(),\n          \"maskLeather\",\n          Utils.getFileNameReader(),\n          \"maskMetal\",\n          Utils.getFileNameReader(),\n          \"maskGlow\",\n          Utils.getFileNameReader(),\n          \"textureBase\",\n          Utils.getFileNameReader(),\n          \"textureNormal\",\n          Utils.getFileNameReader(),\n          \"hideFlags\",\n          \"uint32\",\n          \"skinFlags\",\n          \"uint32\",\n          \"blitRectIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeSkinPatternV0 = [\n          \"chest\",\n          Utils.getFileNameReader(),\n          \"face\",\n          Utils.getFileNameReader(),\n          \"feet\",\n          Utils.getFileNameReader(),\n          \"hands\",\n          Utils.getFileNameReader(),\n          \"legs\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackCompositeColorV0 = [\n          \"brightness\",\n          \"uint8\",\n          \"contrast\",\n          \"uint8\",\n          \"hue\",\n          \"uint8\",\n          \"saturation\",\n          \"uint8\",\n          \"lightness\",\n          \"uint8\",\n        ];\n\n        this.PackCompositeVariantComponentV0 = [\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"clothColor\",\n          this.PackCompositeColorV0,\n          \"leatherColor\",\n          this.PackCompositeColorV0,\n          \"metalColor\",\n          this.PackCompositeColorV0,\n        ];\n\n        this.PackCompositeVariantV0 = [\n          \"components\",\n          Utils.getArrayReader(this.PackCompositeVariantComponentV0),\n          \"hairColor\",\n          this.PackCompositeColorV0,\n          \"patternColor\",\n          this.PackCompositeColorV0,\n          \"skinColor\",\n          this.PackCompositeColorV0,\n          \"skinIndex\",\n          \"uint32\",\n        ];\n\n        this.PackCompositeRaceDataV0 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"nameToken\",\n          Utils.getQWordReader(),\n          \"ears\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"faces\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"fileData\",\n          Utils.getArrayReader(this.PackCompositeFileDataV0),\n          \"hairStyles\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"skeletonFile\",\n          Utils.getFileNameReader(),\n          \"skinPatterns\",\n          Utils.getArrayReader(this.PackCompositeSkinPatternV0),\n          \"type\",\n          \"uint32\",\n          \"variantRefRace\",\n          Utils.getQWordReader(),\n          \"variants\",\n          Utils.getArrayReader(this.PackCompositeVariantV0),\n        ];\n\n        this.__root = this.PackCompositeV0 = [\n          \"blitRects\",\n          Utils.getArrayReader(this.PackCompositeBlitRectSetV0),\n          \"raceSexData\",\n          Utils.getArrayReader(this.PackCompositeRaceDataV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: CSCN, versions: 37, strucTab: 0x16E8BC8\n  /// ==================================================\n\n  {\n    name: \"CSCN\",\n    versions: {\n      // => Version: 36, ReferencedFunction: 0xE37660\n      36: function () {\n        this.PropertyDataV36 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV36 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV36 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV36 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV36 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV36),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV36),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV36),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV36 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV36),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV36),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV36 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV36),\n        ];\n\n        this.ColorDefDataV36 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV36 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV36,\n          \"ambientSkyColor\",\n          this.ColorDefDataV36,\n          \"fillColor\",\n          this.ColorDefDataV36,\n          \"hemisphericalColor\",\n          this.ColorDefDataV36,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV36 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV36 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV36 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV36 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"index\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV36),\n        ];\n\n        this.SpeciesResourceDataV36 = [\n          \"speciesId\",\n          [\"[]\", \"uint8\", 16],\n          \"name\",\n          Utils.getQWordReader(),\n          \"modelId\",\n          Utils.getQWordReader(),\n          \"modelVariant\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ResourceDataV36 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV36),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV36),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV36),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV36),\n          \"speciesResource\",\n          Utils.getArrayReader(this.SpeciesResourceDataV36),\n        ];\n\n        this.__root = this.SceneDataV36 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV36),\n          \"resources\",\n          this.ResourceDataV36,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV36),\n        ];\n      },\n\n      // => Version: 35\n      35: function () {\n        this.PropertyDataV35 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV35 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV35 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV35 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV35 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV35),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV35),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV35),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV35 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV35),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV35),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV35 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV35),\n        ];\n\n        this.ColorDefDataV35 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV35 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV35,\n          \"ambientSkyColor\",\n          this.ColorDefDataV35,\n          \"fillColor\",\n          this.ColorDefDataV35,\n          \"hemisphericalColor\",\n          this.ColorDefDataV35,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV35 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV35 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV35 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV35 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"index\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV35),\n        ];\n\n        this.SpeciesResourceDataV35 = [\n          \"speciesId\",\n          [\"[]\", \"uint8\", 16],\n          \"name\",\n          Utils.getQWordReader(),\n          \"modelId\",\n          Utils.getQWordReader(),\n          \"modelVariant\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ResourceDataV35 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV35),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV35),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV35),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV35),\n          \"speciesResource\",\n          Utils.getArrayReader(this.SpeciesResourceDataV35),\n        ];\n\n        this.__root = this.SceneDataV35 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV35),\n          \"resources\",\n          this.ResourceDataV35,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV35),\n        ];\n      },\n\n      // => Version: 34, ReferencedFunction: 0xE375C0\n      34: function () {\n        this.PropertyDataV34 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV34 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV34 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV34 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV34 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV34),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV34),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV34),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV34 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV34),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV34),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV34 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV34),\n        ];\n\n        this.ColorDefDataV34 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV34 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV34,\n          \"ambientSkyColor\",\n          this.ColorDefDataV34,\n          \"fillColor\",\n          this.ColorDefDataV34,\n          \"hemisphericalColor\",\n          this.ColorDefDataV34,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV34 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV34 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV34 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV34 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"index\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV34),\n        ];\n\n        this.SpeciesResourceDataV34 = [\n          \"speciesId\",\n          [\"[]\", \"uint8\", 16],\n          \"modelId\",\n          Utils.getQWordReader(),\n          \"modelVariant\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ResourceDataV34 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV34),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV34),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV34),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV34),\n          \"speciesResource\",\n          Utils.getArrayReader(this.SpeciesResourceDataV34),\n        ];\n\n        this.__root = this.SceneDataV34 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV34),\n          \"resources\",\n          this.ResourceDataV34,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV34),\n        ];\n      },\n\n      // => Version: 33, ReferencedFunction: 0xE37520\n      33: function () {\n        this.PropertyDataV33 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV33 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV33 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV33 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV33 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV33),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV33),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV33),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV33 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV33),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV33),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV33 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV33),\n        ];\n\n        this.ColorDefDataV33 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV33 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV33,\n          \"ambientSkyColor\",\n          this.ColorDefDataV33,\n          \"fillColor\",\n          this.ColorDefDataV33,\n          \"hemisphericalColor\",\n          this.ColorDefDataV33,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV33 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV33 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV33 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV33 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"index\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV33),\n        ];\n\n        this.ResourceDataV33 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV33),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV33),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV33),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV33),\n        ];\n\n        this.__root = this.SceneDataV33 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV33),\n          \"resources\",\n          this.ResourceDataV33,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV33),\n        ];\n      },\n\n      // => Version: 32, ReferencedFunction: 0xE37480\n      32: function () {\n        this.PropertyDataV32 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV32 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV32 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV32 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV32 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV32),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV32),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV32),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV32 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV32),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV32),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV32 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV32),\n        ];\n\n        this.ColorDefDataV32 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV32 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV32,\n          \"ambientSkyColor\",\n          this.ColorDefDataV32,\n          \"fillColor\",\n          this.ColorDefDataV32,\n          \"hemisphericalColor\",\n          this.ColorDefDataV32,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV32 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV32 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV32 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV32 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"index\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV32),\n        ];\n\n        this.ResourceDataV32 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV32),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV32),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV32),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV32),\n        ];\n\n        this.__root = this.SceneDataV32 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV32),\n          \"resources\",\n          this.ResourceDataV32,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV32),\n        ];\n      },\n\n      // => Version: 31, ReferencedFunction: 0xE373E0\n      31: function () {\n        this.PropertyDataV31 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV31 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV31 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV31 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV31 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV31),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV31),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV31),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV31 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV31),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV31),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV31 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV31),\n        ];\n\n        this.ColorDefDataV31 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV31 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV31,\n          \"ambientSkyColor\",\n          this.ColorDefDataV31,\n          \"fillColor\",\n          this.ColorDefDataV31,\n          \"hemisphericalColor\",\n          this.ColorDefDataV31,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV31 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV31 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV31 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV31 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"index\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV31),\n        ];\n\n        this.ResourceDataV31 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV31),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV31),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV31),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV31),\n        ];\n\n        this.__root = this.SceneDataV31 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV31),\n          \"resources\",\n          this.ResourceDataV31,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV31),\n        ];\n      },\n\n      // => Version: 30, ReferencedFunction: 0xE37390\n      30: function () {\n        this.PropertyDataV30 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV30 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV30 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV30 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV30 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV30),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV30),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV30),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV30 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV30),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV30),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV30 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV30),\n        ];\n\n        this.ColorDefDataV30 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV30 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV30,\n          \"ambientSkyColor\",\n          this.ColorDefDataV30,\n          \"fillColor\",\n          this.ColorDefDataV30,\n          \"hemisphericalColor\",\n          this.ColorDefDataV30,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV30 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV30 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV30 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV30 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"index\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV30),\n        ];\n\n        this.ResourceDataV30 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV30),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV30),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV30),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV30),\n        ];\n\n        this.__root = this.SceneDataV30 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV30),\n          \"resources\",\n          this.ResourceDataV30,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV30),\n        ];\n      },\n\n      // => Version: 29\n      29: function () {\n        this.PropertyDataV29 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV29 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV29 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV29 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV29),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV29),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV29),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV29),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV29),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV29 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV29),\n        ];\n\n        this.ColorDefDataV29 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV29 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV29,\n          \"ambientSkyColor\",\n          this.ColorDefDataV29,\n          \"fillColor\",\n          this.ColorDefDataV29,\n          \"hemisphericalColor\",\n          this.ColorDefDataV29,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV29 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV29 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV29 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV29 = [\n          \"guid\",\n          [\"[]\", \"uint8\", 16],\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV29),\n        ];\n\n        this.ResourceDataV29 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV29),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV29),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV29),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV29),\n        ];\n\n        this.__root = this.SceneDataV29 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV29),\n          \"resources\",\n          this.ResourceDataV29,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV29),\n        ];\n      },\n\n      // => Version: 28, ReferencedFunction: 0xE372F0\n      28: function () {\n        this.PropertyDataV28 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV28 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV28 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV28 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV28),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV28),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV28),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV28),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV28),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV28),\n        ];\n\n        this.ColorDefDataV28 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV28 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV28,\n          \"ambientSkyColor\",\n          this.ColorDefDataV28,\n          \"fillColor\",\n          this.ColorDefDataV28,\n          \"hemisphericalColor\",\n          this.ColorDefDataV28,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV28 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV28 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV28 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV28 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV28),\n        ];\n\n        this.ResourceDataV28 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV28),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV28),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV28),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV28),\n        ];\n\n        this.__root = this.SceneDataV28 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV28),\n          \"resources\",\n          this.ResourceDataV28,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV28),\n        ];\n      },\n\n      // => Version: 27, ReferencedFunction: 0xE37250\n      27: function () {\n        this.PropertyDataV27 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV27 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV27 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV27 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV27),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV27),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV27),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV27),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV27),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV27),\n        ];\n\n        this.ColorDefDataV27 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV27 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV27,\n          \"ambientSkyColor\",\n          this.ColorDefDataV27,\n          \"fillColor\",\n          this.ColorDefDataV27,\n          \"hemisphericalColor\",\n          this.ColorDefDataV27,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV27 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV27 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV27 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV27 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV27),\n        ];\n\n        this.ResourceDataV27 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV27),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV27),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV27),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV27),\n        ];\n\n        this.__root = this.SceneDataV27 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV27),\n          \"resources\",\n          this.ResourceDataV27,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV27),\n        ];\n      },\n\n      // => Version: 26, ReferencedFunction: 0xE371B0\n      26: function () {\n        this.PropertyDataV26 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV26 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV26 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV26 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV26),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV26),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV26),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV26),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV26),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV26),\n        ];\n\n        this.ColorDefDataV26 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV26 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV26,\n          \"ambientSkyColor\",\n          this.ColorDefDataV26,\n          \"fillColor\",\n          this.ColorDefDataV26,\n          \"hemisphericalColor\",\n          this.ColorDefDataV26,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV26 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV26 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV26 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV26 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV26),\n        ];\n\n        this.ResourceDataV26 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV26),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV26),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV26),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV26),\n        ];\n\n        this.__root = this.SceneDataV26 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV26),\n          \"resources\",\n          this.ResourceDataV26,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV26),\n        ];\n      },\n\n      // => Version: 25, ReferencedFunction: 0xE37110\n      25: function () {\n        this.PropertyDataV25 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV25 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV25 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV25 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV25),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV25),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV25),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV25),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV25),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV25),\n        ];\n\n        this.ColorDefDataV25 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV25 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV25,\n          \"ambientSkyColor\",\n          this.ColorDefDataV25,\n          \"fillColor\",\n          this.ColorDefDataV25,\n          \"hemisphericalColor\",\n          this.ColorDefDataV25,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV25 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV25 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV25 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV25 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV25),\n        ];\n\n        this.ResourceDataV25 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV25),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV25),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV25),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV25),\n        ];\n\n        this.__root = this.SceneDataV25 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV25),\n          \"resources\",\n          this.ResourceDataV25,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV25),\n        ];\n      },\n\n      // => Version: 24, ReferencedFunction: 0xE37070\n      24: function () {\n        this.PropertyDataV24 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV24 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV24 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV24 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV24),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV24),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV24),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV24),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV24),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"playScript\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV24),\n        ];\n\n        this.ColorDefDataV24 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV24 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV24,\n          \"ambientSkyColor\",\n          this.ColorDefDataV24,\n          \"fillColor\",\n          this.ColorDefDataV24,\n          \"hemisphericalColor\",\n          this.ColorDefDataV24,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV24 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV24 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV24 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV24 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV24),\n        ];\n\n        this.ResourceDataV24 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV24),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV24),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV24),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV24),\n        ];\n\n        this.__root = this.SceneDataV24 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV24),\n          \"resources\",\n          this.ResourceDataV24,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV24),\n        ];\n      },\n\n      // => Version: 23\n      23: function () {\n        this.PropertyDataV23 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV23 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV23 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV23 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV23),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV23),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV23),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV23),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV23),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV23),\n        ];\n\n        this.ColorDefDataV23 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV23 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV23,\n          \"ambientSkyColor\",\n          this.ColorDefDataV23,\n          \"fillColor\",\n          this.ColorDefDataV23,\n          \"hemisphericalColor\",\n          this.ColorDefDataV23,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV23 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV23 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV23 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV23 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV23),\n        ];\n\n        this.ResourceDataV23 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV23),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV23),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV23),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV23),\n        ];\n\n        this.__root = this.SceneDataV23 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV23),\n          \"resources\",\n          this.ResourceDataV23,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV23),\n        ];\n      },\n\n      // => Version: 22, ReferencedFunction: 0xE36FD0\n      22: function () {\n        this.PropertyDataV22 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV22 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV22 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV22 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV22),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV22),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV22),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV22),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV22),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV22),\n        ];\n\n        this.ColorDefDataV22 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV22 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV22,\n          \"ambientSkyColor\",\n          this.ColorDefDataV22,\n          \"fillColor\",\n          this.ColorDefDataV22,\n          \"hemisphericalColor\",\n          this.ColorDefDataV22,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV22 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV22 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV22 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV22 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV22),\n        ];\n\n        this.ResourceDataV22 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV22),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV22),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV22),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV22),\n        ];\n\n        this.__root = this.SceneDataV22 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV22),\n          \"resources\",\n          this.ResourceDataV22,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV22),\n        ];\n      },\n\n      // => Version: 21\n      21: function () {\n        this.PropertyDataV21 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV21 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV21 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV21 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV21),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV21),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV21),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV21),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV21),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV21),\n        ];\n\n        this.ColorDefDataV21 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV21 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV21,\n          \"ambientSkyColor\",\n          this.ColorDefDataV21,\n          \"fillColor\",\n          this.ColorDefDataV21,\n          \"hemisphericalColor\",\n          this.ColorDefDataV21,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV21 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV21 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV21 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV21 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV21),\n        ];\n\n        this.ResourceDataV21 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV21),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV21),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV21),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV21),\n        ];\n\n        this.__root = this.SceneDataV21 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV21),\n          \"resources\",\n          this.ResourceDataV21,\n          \"trackGroup\",\n          Utils.getPointerReader(this.TrackGroupDataV21),\n        ];\n      },\n\n      // => Version: 20, ReferencedFunction: 0xE36F30\n      20: function () {\n        this.PropertyDataV20 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV20 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV20 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV20 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV20),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV20),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV20),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV20),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV20),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV20),\n        ];\n\n        this.ColorDefDataV20 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV20 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV20,\n          \"ambientSkyColor\",\n          this.ColorDefDataV20,\n          \"fillColor\",\n          this.ColorDefDataV20,\n          \"hemisphericalColor\",\n          this.ColorDefDataV20,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV20 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV20 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV20 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV20 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV20),\n        ];\n\n        this.ResourceDataV20 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV20),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV20),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV20),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV20),\n        ];\n\n        this.__root = this.SceneDataV20 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV20),\n          \"resources\",\n          this.ResourceDataV20,\n        ];\n      },\n\n      // => Version: 19, ReferencedFunction: 0xE36E90\n      19: function () {\n        this.PropertyDataV19 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV19 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV19 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV19 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV19),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV19),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV19),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV19),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV19),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV19),\n        ];\n\n        this.ColorDefDataV19 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV19 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV19,\n          \"ambientSkyColor\",\n          this.ColorDefDataV19,\n          \"fillColor\",\n          this.ColorDefDataV19,\n          \"hemisphericalColor\",\n          this.ColorDefDataV19,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV19 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV19 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV19 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV19 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV19),\n        ];\n\n        this.ResourceDataV19 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV19),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV19),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV19),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV19),\n        ];\n\n        this.__root = this.SceneDataV19 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV19),\n          \"resources\",\n          this.ResourceDataV19,\n        ];\n      },\n\n      // => Version: 18, ReferencedFunction: 0xE36E90\n      18: function () {\n        this.PropertyDataV18 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV18 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV18 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV18 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV18),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV18),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV18),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV18),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV18),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV18),\n        ];\n\n        this.ColorDefDataV18 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV18 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV18,\n          \"ambientSkyColor\",\n          this.ColorDefDataV18,\n          \"fillColor\",\n          this.ColorDefDataV18,\n          \"hemisphericalColor\",\n          this.ColorDefDataV18,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV18 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV18 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV18 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV18 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV18),\n        ];\n\n        this.ResourceDataV18 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV18),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV18),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV18),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV18),\n        ];\n\n        this.__root = this.SceneDataV18 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV18),\n          \"resources\",\n          this.ResourceDataV18,\n        ];\n      },\n\n      // => Version: 17, ReferencedFunction: 0xE36DF0\n      17: function () {\n        this.PropertyDataV17 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV17 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV17 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV17 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV17),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV17),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV17),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV17),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV17),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV17),\n        ];\n\n        this.ColorDefDataV17 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV17 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV17,\n          \"ambientSkyColor\",\n          this.ColorDefDataV17,\n          \"fillColor\",\n          this.ColorDefDataV17,\n          \"hemisphericalColor\",\n          this.ColorDefDataV17,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV17 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV17 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV17 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV17 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV17),\n        ];\n\n        this.ResourceDataV17 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV17),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV17),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV17),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV17),\n        ];\n\n        this.__root = this.SceneDataV17 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV17),\n          \"resources\",\n          this.ResourceDataV17,\n        ];\n      },\n\n      // => Version: 16, ReferencedFunction: 0xE36D50\n      16: function () {\n        this.PropertyDataV16 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV16 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV16 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV16 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV16),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV16),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV16),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV16),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV16),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV16),\n        ];\n\n        this.ColorDefDataV16 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV16 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV16,\n          \"ambientSkyColor\",\n          this.ColorDefDataV16,\n          \"fillColor\",\n          this.ColorDefDataV16,\n          \"hemisphericalColor\",\n          this.ColorDefDataV16,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV16 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV16 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV16 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV16),\n        ];\n\n        this.ResourceDataV16 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV16),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV16),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV16),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV16),\n        ];\n\n        this.__root = this.SceneDataV16 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV16),\n          \"resources\",\n          this.ResourceDataV16,\n        ];\n      },\n\n      // => Version: 15\n      15: function () {\n        this.PropertyDataV15 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV15 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV15 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV15 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV15),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV15),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV15),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV15),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV15),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"updateScript\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV15),\n        ];\n\n        this.ColorDefDataV15 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV15 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV15,\n          \"ambientSkyColor\",\n          this.ColorDefDataV15,\n          \"fillColor\",\n          this.ColorDefDataV15,\n          \"hemisphericalColor\",\n          this.ColorDefDataV15,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV15 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV15 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV15 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV15),\n        ];\n\n        this.ResourceDataV15 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV15),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV15),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV15),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV15),\n        ];\n\n        this.__root = this.SceneDataV15 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV15),\n          \"resources\",\n          this.ResourceDataV15,\n        ];\n      },\n\n      // => Version: 14\n      14: function () {\n        this.PropertyDataV14 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV14 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV14 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV14 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV14),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV14),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV14),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV14),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV14),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV14),\n        ];\n\n        this.ColorDefDataV14 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV14 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV14,\n          \"ambientSkyColor\",\n          this.ColorDefDataV14,\n          \"fillColor\",\n          this.ColorDefDataV14,\n          \"hemisphericalColor\",\n          this.ColorDefDataV14,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV14 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV14 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV14 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"voiceId\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV14),\n        ];\n\n        this.ResourceDataV14 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV14),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV14),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV14),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV14),\n        ];\n\n        this.__root = this.SceneDataV14 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV14),\n          \"resources\",\n          this.ResourceDataV14,\n        ];\n      },\n\n      // => Version: 13, ReferencedFunction: 0xE36CD0\n      13: function () {\n        this.PropertyDataV13 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV13 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV13 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV13 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV13),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV13),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV13),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV13),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV13),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV13),\n        ];\n\n        this.ColorDefDataV13 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV13 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV13,\n          \"ambientSkyColor\",\n          this.ColorDefDataV13,\n          \"fillColor\",\n          this.ColorDefDataV13,\n          \"hemisphericalColor\",\n          this.ColorDefDataV13,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV13 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV13 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV13 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV13),\n        ];\n\n        this.ResourceDataV13 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV13),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV13),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV13),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV13),\n        ];\n\n        this.__root = this.SceneDataV13 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV13),\n          \"resources\",\n          this.ResourceDataV13,\n        ];\n      },\n\n      // => Version: 12, ReferencedFunction: 0xE36BE0\n      12: function () {\n        this.PropertyDataV12 = [\"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader(), \"type\", \"uint8\"];\n\n        this.CurveKeyDataV12 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV12 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV12 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV12),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV12),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV12),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.TrackGroupDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV12),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV12),\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.SequenceDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV12),\n        ];\n\n        this.ColorDefDataV12 = [\"intensity\", \"float32\", \"color\", [\"[]\", \"uint8\", 3]];\n\n        this.AmbientLightDataV12 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV12,\n          \"ambientSkyColor\",\n          this.ColorDefDataV12,\n          \"fillColor\",\n          this.ColorDefDataV12,\n          \"hemisphericalColor\",\n          this.ColorDefDataV12,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV12 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV12 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV12 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV12),\n        ];\n\n        this.ResourceDataV12 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV12),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV12),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV12),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV12),\n        ];\n\n        this.__root = this.SceneDataV12 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV12),\n          \"resources\",\n          this.ResourceDataV12,\n        ];\n      },\n\n      // => Version: 11, ReferencedFunction: 0xE36B40\n      11: function () {\n        this.PropertyDataV11 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV11 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV11 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV11 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV11),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV11),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV11),\n        ];\n\n        this.TrackGroupDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV11),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV11),\n        ];\n\n        this.SequenceDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV11),\n        ];\n\n        this.ColorDefDataV11 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV11 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV11,\n          \"ambientSkyColor\",\n          this.ColorDefDataV11,\n          \"fillColor\",\n          this.ColorDefDataV11,\n          \"hemisphericalColor\",\n          this.ColorDefDataV11,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV11 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV11 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV11 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV11 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV11),\n        ];\n\n        this.ResourceDataV11 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV11),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV11),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV11),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV11),\n        ];\n\n        this.__root = this.SceneDataV11 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV11),\n          \"resources\",\n          this.ResourceDataV11,\n        ];\n      },\n\n      // => Version: 10, ReferencedFunction: 0xE36AE0\n      10: function () {\n        this.PropertyDataV10 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV10 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV10 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV10 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV10),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV10),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV10),\n        ];\n\n        this.TrackGroupDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV10),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV10),\n        ];\n\n        this.SequenceDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV10),\n        ];\n\n        this.ColorDefDataV10 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV10 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV10,\n          \"ambientSkyColor\",\n          this.ColorDefDataV10,\n          \"fillColor\",\n          this.ColorDefDataV10,\n          \"hemisphericalColor\",\n          this.ColorDefDataV10,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV10 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV10 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV10 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV10 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV10),\n        ];\n\n        this.ResourceDataV10 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV10),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV10),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV10),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV10),\n        ];\n\n        this.__root = this.SceneDataV10 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV10),\n          \"resources\",\n          this.ResourceDataV10,\n        ];\n      },\n\n      // => Version: 9, ReferencedFunction: 0xE36A30\n      9: function () {\n        this.PropertyDataV9 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV9 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV9 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV9 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV9),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV9),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV9),\n        ];\n\n        this.TrackGroupDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV9),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV9),\n        ];\n\n        this.SequenceDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV9),\n        ];\n\n        this.ColorDefDataV9 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV9 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV9,\n          \"ambientSkyColor\",\n          this.ColorDefDataV9,\n          \"fillColor\",\n          this.ColorDefDataV9,\n          \"hemisphericalColor\",\n          this.ColorDefDataV9,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV9 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV9 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV9 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV9 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV9),\n        ];\n\n        this.ResourceDataV9 = [\n          \"crc\",\n          \"uint32\",\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV9),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV9),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV9),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV9),\n        ];\n\n        this.__root = this.SceneDataV9 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV9),\n          \"resources\",\n          this.ResourceDataV9,\n        ];\n      },\n\n      // => Version: 8\n      8: function () {\n        this.PropertyDataV8 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV8 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV8 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV8 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV8),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV8),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV8),\n        ];\n\n        this.TrackGroupDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV8),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV8),\n        ];\n\n        this.SequenceDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV8),\n        ];\n\n        this.ColorDefDataV8 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV8 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV8,\n          \"ambientSkyColor\",\n          this.ColorDefDataV8,\n          \"fillColor\",\n          this.ColorDefDataV8,\n          \"hemisphericalColor\",\n          this.ColorDefDataV8,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.FileNameRefDataV8 = [\"name\", Utils.getQWordReader(), \"fileName\", Utils.getFileNameReader()];\n\n        this.ScriptDataV8 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV8 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV8 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV8),\n        ];\n\n        this.ResourceDataV8 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV8),\n          \"fileNameRef\",\n          Utils.getArrayReader(this.FileNameRefDataV8),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV8),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV8),\n        ];\n\n        this.__root = this.SceneDataV8 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV8),\n          \"resources\",\n          this.ResourceDataV8,\n        ];\n      },\n\n      // => Version: 7, ReferencedFunction: 0xE36950\n      7: function () {\n        this.PropertyDataV7 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV7 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV7 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV7 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV7),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV7),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV7),\n        ];\n\n        this.TrackGroupDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV7),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV7),\n        ];\n\n        this.SequenceDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV7),\n        ];\n\n        this.ColorDefDataV7 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV7 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV7,\n          \"ambientSkyColor\",\n          this.ColorDefDataV7,\n          \"fillColor\",\n          this.ColorDefDataV7,\n          \"hemisphericalColor\",\n          this.ColorDefDataV7,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ScriptDataV7 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV7 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV7 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV7),\n        ];\n\n        this.ResourceDataV7 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV7),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV7),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV7),\n        ];\n\n        this.__root = this.SceneDataV7 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV7),\n          \"resources\",\n          this.ResourceDataV7,\n        ];\n      },\n\n      // => Version: 6, ReferencedFunction: 0xE36880\n      6: function () {\n        this.PropertyDataV6 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV6 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV6 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV6 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV6),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV6),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV6),\n        ];\n\n        this.TrackGroupDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV6),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV6),\n        ];\n\n        this.SequenceDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV6),\n        ];\n\n        this.ColorDefDataV6 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV6 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV6,\n          \"ambientSkyColor\",\n          this.ColorDefDataV6,\n          \"fillColor\",\n          this.ColorDefDataV6,\n          \"hemisphericalColor\",\n          this.ColorDefDataV6,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ScriptDataV6 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV6 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV6 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV6),\n        ];\n\n        this.ResourceDataV6 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV6),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV6),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV6),\n        ];\n\n        this.__root = this.SceneDataV6 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV6),\n          \"resources\",\n          this.ResourceDataV6,\n        ];\n      },\n\n      // => Version: 5, ReferencedFunction: 0xE367E0\n      5: function () {\n        this.PropertyDataV5 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV5 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV5 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV5 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV5 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV5),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV5),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV5),\n        ];\n\n        this.TrackGroupDataV5 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV5),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV5),\n        ];\n\n        this.SequenceDataV5 = [\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV5),\n        ];\n\n        this.ColorDefDataV5 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV5 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV5,\n          \"ambientSkyColor\",\n          this.ColorDefDataV5,\n          \"fillColor\",\n          this.ColorDefDataV5,\n          \"hemisphericalColor\",\n          this.ColorDefDataV5,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ScriptDataV5 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV5 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV5 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV5),\n        ];\n\n        this.ResourceDataV5 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV5),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV5),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV5),\n        ];\n\n        this.__root = this.SceneDataV5 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV5),\n          \"resources\",\n          this.ResourceDataV5,\n        ];\n      },\n\n      // => Version: 4, ReferencedFunction: 0xE36740\n      4: function () {\n        this.PropertyDataV4 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV4 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV4 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV4 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV4 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV4),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV4),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV4),\n        ];\n\n        this.TrackGroupDataV4 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV4),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV4),\n        ];\n\n        this.SequenceDataV4 = [\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV4),\n        ];\n\n        this.ColorDefDataV4 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV4 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV4,\n          \"ambientSkyColor\",\n          this.ColorDefDataV4,\n          \"fillColor\",\n          this.ColorDefDataV4,\n          \"hemisphericalColor\",\n          this.ColorDefDataV4,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ScriptDataV4 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV4 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV4 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"id\",\n          \"uint32\",\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV4),\n        ];\n\n        this.ResourceDataV4 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV4),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV4),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV4),\n        ];\n\n        this.__root = this.SceneDataV4 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV4),\n          \"resources\",\n          this.ResourceDataV4,\n        ];\n      },\n\n      // => Version: 3, ReferencedFunction: 0xE366A0\n      3: function () {\n        this.PropertyDataV3 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV3 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV3 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV3 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV3 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV3),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV3),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV3),\n        ];\n\n        this.TrackGroupDataV3 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV3),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV3),\n        ];\n\n        this.SequenceDataV3 = [\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV3),\n        ];\n\n        this.ColorDefDataV3 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV3 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV3,\n          \"ambientSkyColor\",\n          this.ColorDefDataV3,\n          \"fillColor\",\n          this.ColorDefDataV3,\n          \"hemisphericalColor\",\n          this.ColorDefDataV3,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ScriptDataV3 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV3 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV3 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV3),\n        ];\n\n        this.ResourceDataV3 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV3),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV3),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV3),\n        ];\n\n        this.__root = this.SceneDataV3 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV3),\n          \"resources\",\n          this.ResourceDataV3,\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PropertyDataV2 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV2 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV2 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV2 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV2),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV2),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV2),\n        ];\n\n        this.TrackGroupDataV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV2),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV2),\n        ];\n\n        this.SequenceDataV2 = [\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV2),\n        ];\n\n        this.ColorDefDataV2 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV2 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV2,\n          \"ambientSkyColor\",\n          this.ColorDefDataV2,\n          \"fillColor\",\n          this.ColorDefDataV2,\n          \"hemisphericalColor\",\n          this.ColorDefDataV2,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ScriptDataV2 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV2 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV2 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV2),\n        ];\n\n        this.ResourceDataV2 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV2),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV2),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV2),\n        ];\n\n        this.__root = this.SceneDataV2 = [\n          \"startingSequence\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV2),\n          \"resources\",\n          this.ResourceDataV2,\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0xE36590\n      1: function () {\n        this.PropertyDataV1 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV1 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV1 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV1 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV1 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV1),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV1),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV1),\n        ];\n\n        this.TrackGroupDataV1 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV1),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV1),\n        ];\n\n        this.SequenceDataV1 = [\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV1),\n        ];\n\n        this.ColorDefDataV1 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV1 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV1,\n          \"ambientSkyColor\",\n          this.ColorDefDataV1,\n          \"fillColor\",\n          this.ColorDefDataV1,\n          \"hemisphericalColor\",\n          this.ColorDefDataV1,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ScriptDataV1 = [\"name\", Utils.getQWordReader(), \"byteCode\", Utils.getArrayReader(\"uint8\")];\n\n        this.TextEntryDataV1 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV1 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV1),\n        ];\n\n        this.ResourceDataV1 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV1),\n          \"script\",\n          Utils.getArrayReader(this.ScriptDataV1),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV1),\n        ];\n\n        this.__root = this.SceneDataV1 = [\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV1),\n          \"resources\",\n          this.ResourceDataV1,\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PropertyDataV0 = [\"type\", \"uint8\", \"value\", Utils.getQWordReader(), \"pathVal\", Utils.getFileNameReader()];\n\n        this.CurveKeyDataV0 = [\"time\", \"float32\", \"value\", \"float32\", \"inTangent\", \"float32\", \"outTangent\", \"float32\"];\n\n        this.FlagKeyDataV0 = [\"time\", \"float32\", \"value\", \"float32\"];\n\n        this.TriggerKeyDataV0 = [\n          \"time\",\n          \"float32\",\n          \"flags1\",\n          \"uint8\",\n          \"flags2\",\n          \"uint8\",\n          \"flags3\",\n          \"uint8\",\n          \"flags4\",\n          \"uint8\",\n          \"token1\",\n          Utils.getQWordReader(),\n          \"token2\",\n          Utils.getQWordReader(),\n          \"value1\",\n          \"float32\",\n          \"value2\",\n          \"float32\",\n          \"value3\",\n          \"float32\",\n          \"value4\",\n          \"float32\",\n        ];\n\n        this.TrackDataV0 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"curveKey\",\n          Utils.getArrayReader(this.CurveKeyDataV0),\n          \"flagKey\",\n          Utils.getArrayReader(this.FlagKeyDataV0),\n          \"triggerKey\",\n          Utils.getArrayReader(this.TriggerKeyDataV0),\n        ];\n\n        this.TrackGroupDataV0 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"prop\",\n          Utils.getArrayReader(this.PropertyDataV0),\n          \"track\",\n          Utils.getArrayReader(this.TrackDataV0),\n        ];\n\n        this.SequenceDataV0 = [\n          \"environmentMap\",\n          Utils.getFileNameReader(),\n          \"map\",\n          Utils.getString16Reader(),\n          \"clientMap\",\n          Utils.getString16Reader(),\n          \"name\",\n          Utils.getQWordReader(),\n          \"length\",\n          \"float32\",\n          \"trackGroup\",\n          Utils.getArrayReader(this.TrackGroupDataV0),\n        ];\n\n        this.ColorDefDataV0 = [\"color\", [\"[]\", \"uint8\", 3], \"intensity\", \"float32\"];\n\n        this.AmbientLightDataV0 = [\n          \"ambientGroundColor\",\n          this.ColorDefDataV0,\n          \"ambientSkyColor\",\n          this.ColorDefDataV0,\n          \"fillColor\",\n          this.ColorDefDataV0,\n          \"hemisphericalColor\",\n          this.ColorDefDataV0,\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.TextEntryDataV0 = [\"text\", Utils.getString16Reader(), \"language\", \"uint8\"];\n\n        this.TextResourceDataV0 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"textEntry\",\n          Utils.getArrayReader(this.TextEntryDataV0),\n        ];\n\n        this.ResourceDataV0 = [\n          \"ambientLightResource\",\n          Utils.getArrayReader(this.AmbientLightDataV0),\n          \"textResource\",\n          Utils.getArrayReader(this.TextResourceDataV0),\n        ];\n\n        this.__root = this.SceneDataV0 = [\n          \"sequence\",\n          Utils.getArrayReader(this.SequenceDataV0),\n          \"resources\",\n          this.ResourceDataV0,\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: cube, versions: 4, strucTab: 0x17244E0\n  /// ==================================================\n\n  {\n    name: \"cube\",\n    versions: {\n      // => Version: 3\n      3: function () {\n        this.PackMapCubeMapSampleV3 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"filenameDayDefault\",\n          Utils.getFileNameReader(),\n          \"filenameNightDefault\",\n          Utils.getFileNameReader(),\n          \"filenameDayScript\",\n          Utils.getFileNameReader(),\n          \"filenameNightScript\",\n          Utils.getFileNameReader(),\n          \"envID\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapCubeMapParamsV3 = [\n          \"modulateColor\",\n          \"uint32\",\n          \"brightness\",\n          \"float32\",\n          \"contrast\",\n          \"float32\",\n          \"blurPasses\",\n          \"uint32\",\n          \"envVolume\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.PackMapCubeMapV3 = [\n          \"sampleArray\",\n          Utils.getArrayReader(this.PackMapCubeMapSampleV3),\n          \"paramsArray\",\n          Utils.getArrayReader(this.PackMapCubeMapParamsV3),\n        ];\n      },\n\n      // => Version: 2, ReferencedFunction: 0x452AB0\n      2: function () {\n        this.PackMapCubeMapSampleV2 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"filenameDayDefault\",\n          Utils.getFileNameReader(),\n          \"filenameNightDefault\",\n          Utils.getFileNameReader(),\n          \"filenameDayScript\",\n          Utils.getFileNameReader(),\n          \"filenameNightScript\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapCubeMapParamsV2 = [\n          \"modulateColor\",\n          \"uint32\",\n          \"brightness\",\n          \"float32\",\n          \"contrast\",\n          \"float32\",\n          \"blurPasses\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapCubeMapV2 = [\n          \"sampleArray\",\n          Utils.getArrayReader(this.PackMapCubeMapSampleV2),\n          \"paramsArray\",\n          Utils.getArrayReader(this.PackMapCubeMapParamsV2),\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0xEB92D0\n      1: function () {\n        this.PackMapCubeMapSampleV1 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"dayPtr\",\n          Utils.getArrayReader(\"uint8\"),\n          \"nightPtr\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapCubeMapParamsV1 = [\n          \"modulateColor\",\n          \"uint32\",\n          \"brightness\",\n          \"float32\",\n          \"contrast\",\n          \"float32\",\n          \"blurPasses\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapCubeMapV1 = [\n          \"sampleArray\",\n          Utils.getArrayReader(this.PackMapCubeMapSampleV1),\n          \"paramsArray\",\n          Utils.getArrayReader(this.PackMapCubeMapParamsV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackMapCubeMapSampleV0 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"dataPtr\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapCubeMapParamsV0 = [\n          \"modulateColor\",\n          \"uint32\",\n          \"brightness\",\n          \"float32\",\n          \"contrast\",\n          \"float32\",\n          \"blurPasses\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapCubeMapV0 = [\n          \"sampleArray\",\n          Utils.getArrayReader(this.PackMapCubeMapSampleV0),\n          \"paramsArray\",\n          Utils.getArrayReader(this.PackMapCubeMapParamsV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: DATA, versions: 4, strucTab: 0x153BE08\n  /// ==================================================\n\n  {\n    name: \"DATA\",\n    versions: {\n      // => Version: 3, ReferencedFunction: 0x612960\n      3: function () {\n        this.PagedImageLayerDataV3 = [\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"strippedDims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n          \"diskFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV3 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"solidColor\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.__root = this.PagedImageTableDataV3 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV3),\n          \"rawPages\",\n          Utils.getArrayReader(this.PagedImagePageDataV3),\n          \"strippedPages\",\n          Utils.getArrayReader(this.PagedImagePageDataV3),\n          \"flags\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PagedImageLayerDataV2 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"diskFormat\",\n          \"uint32\",\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV2 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"solidColor\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.__root = this.PagedImageTableDataV2 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV2),\n          \"pages\",\n          Utils.getArrayReader(this.PagedImagePageDataV2),\n          \"flags\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PagedImageLayerDataV1 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"diskFormat\",\n          \"uint32\",\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV1 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"solidColor\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.__root = this.PagedImageTableDataV1 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV1),\n          \"pages\",\n          Utils.getArrayReader(this.PagedImagePageDataV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PagedImageEmbeddedPageDataV0 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"rawData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"compressedData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PagedImageEmbeddedPagesDataV0 = [\n          \"pages\",\n          Utils.getArrayReader(this.PagedImageEmbeddedPageDataV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: dcal, versions: 10, strucTab: 0x1724720\n  /// ==================================================\n\n  {\n    name: \"dcal\",\n    versions: {\n      // => Version: 9, ReferencedFunction: 0xEBA2D0\n      9: function () {\n        this.PackMapDecalVertexV8 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"normal\",\n          [\"[]\", \"float32\", 3],\n          \"tangent\",\n          [\"[]\", \"float32\", 3],\n          \"bitangent\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapDecalV9 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"textureScaleUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureScaleUV1\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV1\",\n          [\"[]\", \"float32\", 2],\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"flags\",\n          \"uint32\",\n          \"animTranslation\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeX\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeY\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"animRotation\",\n          \"float32\",\n          \"surfaceBias\",\n          \"float32\",\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"vertices\",\n          Utils.getArrayReader(this.PackMapDecalVertexV8),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"propIds\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"projection\",\n          \"uint8\",\n          \"surfaceId\",\n          Utils.getQWordReader(),\n          \"id\",\n          Utils.getQWordReader(),\n        ];\n\n        this.__root = this.PackMapDecalsV9 = [\"decals\", Utils.getArrayReader(this.PackMapDecalV9)];\n      },\n\n      // => Version: 8\n      8: function () {\n        this.PackMapDecalVertexV7 = [\"position\", [\"[]\", \"float32\", 3]];\n\n        this.PackMapDecalV8 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"textureScaleUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureScaleUV1\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV1\",\n          [\"[]\", \"float32\", 2],\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"flags\",\n          \"uint32\",\n          \"animTranslation\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeX\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeY\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"animRotation\",\n          \"float32\",\n          \"surfaceBias\",\n          \"float32\",\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"vertices\",\n          Utils.getArrayReader(this.PackMapDecalVertexV7),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"propIds\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"projection\",\n          \"uint8\",\n          \"surfaceId\",\n          Utils.getQWordReader(),\n          \"id\",\n          Utils.getQWordReader(),\n        ];\n\n        this.__root = this.PackMapDecalsV8 = [\"decals\", Utils.getArrayReader(this.PackMapDecalV8)];\n      },\n\n      // => Version: 7, ReferencedFunction: 0xEBA270\n      7: function () {\n        this.PackMapDecalVertexV6 = [\"position\", [\"[]\", \"float32\", 3]];\n\n        this.PackMapDecalV7 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"textureScaleUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureScaleUV1\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV1\",\n          [\"[]\", \"float32\", 2],\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"flags\",\n          \"uint32\",\n          \"animTranslation\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeX\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeY\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"animRotation\",\n          \"float32\",\n          \"surfaceBias\",\n          \"float32\",\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"vertices\",\n          Utils.getArrayReader(this.PackMapDecalVertexV6),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"propIds\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"projection\",\n          \"uint8\",\n          \"id\",\n          Utils.getQWordReader(),\n        ];\n\n        this.__root = this.PackMapDecalsV7 = [\"decals\", Utils.getArrayReader(this.PackMapDecalV7)];\n      },\n\n      // => Version: 6\n      6: function () {\n        this.PackMapDecalVertexV5 = [\"position\", [\"[]\", \"float32\", 3]];\n\n        this.PackMapDecalV6 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"textureScaleUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureScaleUV1\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV1\",\n          [\"[]\", \"float32\", 2],\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"flags\",\n          \"uint32\",\n          \"animTranslation\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeX\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeY\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"animRotation\",\n          \"float32\",\n          \"surfaceBias\",\n          \"float32\",\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"vertices\",\n          Utils.getArrayReader(this.PackMapDecalVertexV5),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"propIds\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"projection\",\n          \"uint8\",\n        ];\n\n        this.__root = this.PackMapDecalsV6 = [\"decals\", Utils.getArrayReader(this.PackMapDecalV6)];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.PackMapDecalVertexV4 = [\"position\", [\"[]\", \"float32\", 3]];\n\n        this.PackMapDecalV5 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"textureScaleUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureScaleUV1\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV1\",\n          [\"[]\", \"float32\", 2],\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"flags\",\n          \"uint32\",\n          \"animTranslation\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeX\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeY\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"animRotation\",\n          \"float32\",\n          \"surfaceBias\",\n          \"float32\",\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"vertices\",\n          Utils.getArrayReader(this.PackMapDecalVertexV4),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"propIds\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.PackMapDecalsV5 = [\"decals\", Utils.getArrayReader(this.PackMapDecalV5)];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.PackMapDecalV4 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"textureScaleUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureScaleUV1\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV1\",\n          [\"[]\", \"float32\", 2],\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"flags\",\n          \"uint32\",\n          \"animTranslation\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeX\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeY\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"animRotation\",\n          \"float32\",\n          \"surfaceBias\",\n          \"float32\",\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.__root = this.PackMapDecalsV4 = [\"decals\", Utils.getArrayReader(this.PackMapDecalV4)];\n      },\n\n      // => Version: 3, ReferencedFunction: 0xEBA1F0\n      3: function () {\n        this.PackMapDecalV3 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"textureScaleUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV0\",\n          [\"[]\", \"float32\", 2],\n          \"textureScaleUV1\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffsetUV1\",\n          [\"[]\", \"float32\", 2],\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"flags\",\n          \"uint32\",\n          \"animTranslation\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeX\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeY\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"animRotation\",\n          \"float32\",\n          \"surfaceBias\",\n          \"float32\",\n        ];\n\n        this.__root = this.PackMapDecalsV3 = [\"decals\", Utils.getArrayReader(this.PackMapDecalV3)];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PackMapDecalV2 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"textureScale\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffset\",\n          [\"[]\", \"float32\", 2],\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"flags\",\n          \"uint32\",\n          \"animTranslation\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeX\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleRangeY\",\n          [\"[]\", \"float32\", 2],\n          \"animScaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"animRotation\",\n          \"float32\",\n        ];\n\n        this.__root = this.PackMapDecalsV2 = [\"decals\", Utils.getArrayReader(this.PackMapDecalV2)];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PackMapDecalV1 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"textureScale\",\n          [\"[]\", \"float32\", 2],\n          \"textureOffset\",\n          [\"[]\", \"float32\", 2],\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapDecalsV1 = [\"decals\", Utils.getArrayReader(this.PackMapDecalV1)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: DX9S, versions: 12, strucTab: 0x1528AE0\n  /// ==================================================\n\n  {\n    name: \"DX9S\",\n    versions: {\n      // => Version: 11, ReferencedFunction: 0x5AE350\n      11: function () {\n        this.AmatDx9SamplerV11 = [\n          \"textureIndex\",\n          \"uint32\",\n          \"state\",\n          Utils.getArrayReader(\"uint32\"),\n          \"usesBindTexture\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9ShaderV11 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"instructionCount\",\n          \"uint16\",\n        ];\n\n        this.AmatDx9EffectV11 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV11 = [\"effects\", Utils.getRefArrayReader(this.AmatDx9EffectV11)];\n\n        this.AmatDx9TechniqueV11 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV11),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV11 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV11),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV11),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV11),\n          \"useLegacyBindTextures\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 10\n      10: function () {\n        this.AmatDx9SamplerV10 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV10 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"instructionCount\",\n          \"uint16\",\n        ];\n\n        this.AmatDx9EffectV10 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV10 = [\"effects\", Utils.getRefArrayReader(this.AmatDx9EffectV10)];\n\n        this.AmatDx9TechniqueV10 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV10),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV10 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV10),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV10),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV10),\n        ];\n      },\n\n      // => Version: 9, ReferencedFunction: 0x5AE990\n      9: function () {\n        this.AmatDx9SamplerV9 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV9 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9EffectV9 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV9 = [\"effects\", Utils.getRefArrayReader(this.AmatDx9EffectV9)];\n\n        this.AmatDx9TechniqueV9 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV9),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV9 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV9),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV9),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV9),\n        ];\n      },\n\n      // => Version: 8, ReferencedFunction: 0x5AE760\n      8: function () {\n        this.AmatDx9SamplerV8 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV8 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9EffectV8 = [\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV8 = [\"effects\", Utils.getRefArrayReader(this.AmatDx9EffectV8)];\n\n        this.AmatDx9TechniqueV8 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV8),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV8 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV8),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV8),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV8),\n        ];\n      },\n\n      // => Version: 7, ReferencedFunction: 0x5AE6E0\n      7: function () {\n        this.AmatDx9SamplerV7 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV7 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9EffectV7 = [\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV7 = [\"effects\", [\"[]\", this.AmatDx9EffectV7, 8]];\n\n        this.AmatDx9TechniqueV7 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV7),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV7 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV7),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV7),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV7),\n        ];\n      },\n\n      // => Version: 6, ReferencedFunction: 0x5AE690\n      6: function () {\n        this.AmatDx9SamplerV6 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV6 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9EffectV6 = [\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV6 = [\"effects\", [\"[]\", this.AmatDx9EffectV6, 8]];\n\n        this.AmatDx9TechniqueV6 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV6),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV6 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV6),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV6),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV6),\n        ];\n      },\n\n      // => Version: 5, ReferencedFunction: 0x5AE5A0\n      5: function () {\n        this.AmatDx9SamplerV5 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV5 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9EffectV5 = [\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV5 = [\"effects\", [\"[]\", this.AmatDx9EffectV5, 7]];\n\n        this.AmatDx9TechniqueV5 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"sortTri\",\n          \"uint32\",\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV5),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV5 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV5),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV5),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV5),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.AmatDx9SamplerV4 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV4 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9EffectV4 = [\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV4 = [\"effects\", [\"[]\", this.AmatDx9EffectV4, 7]];\n\n        this.AmatDx9TechniqueV4 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"sortTri\",\n          \"uint32\",\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV4),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV4 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV4),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV4),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.AmatDx9SamplerV3 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV3 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9EffectV3 = [\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV3 = [\"effects\", [\"[]\", this.AmatDx9EffectV3, 7]];\n\n        this.AmatDx9TechniqueV3 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"sortTri\",\n          \"uint32\",\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV3),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV3 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV3),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV3),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV3),\n        ];\n      },\n\n      // => Version: 2, ReferencedFunction: 0x5AE370\n      2: function () {\n        this.AmatDx9SamplerV2 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV2 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9EffectV2 = [\n          \"renderStates\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9PassV2 = [\"effects\", [\"[]\", this.AmatDx9EffectV2, 7]];\n\n        this.AmatDx9TechniqueV2 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"sortTri\",\n          \"uint32\",\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV2),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV2 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV2),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV2),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV2),\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0x5AE1C0\n      1: function () {\n        this.AmatDx9SamplerV1 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV1 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9RenderStatesV1 = [\"renderStates\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9PassV1 = [\n          \"effectRenderStates\",\n          Utils.getRefArrayReader(this.AmatDx9RenderStatesV1),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          [\"[]\", \"uint32\", 5],\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          [\"[]\", \"uint32\", 5],\n        ];\n\n        this.AmatDx9TechniqueV1 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"sortTri\",\n          \"uint32\",\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV1),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV1 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV1),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV1),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.AmatDx9SamplerV0 = [\"textureIndex\", \"uint32\", \"state\", Utils.getArrayReader(\"uint32\")];\n\n        this.AmatDx9ShaderV0 = [\n          \"shader\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constRegisters\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.AmatDx9PassV0 = [\n          \"renderState\",\n          Utils.getArrayReader(\"uint32\"),\n          \"samplerIndex\",\n          Utils.getArrayReader(\"uint32\"),\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n          \"vsGenFlags\",\n          \"uint32\",\n          \"passFlags\",\n          \"uint32\",\n        ];\n\n        this.AmatDx9TechniqueV0 = [\n          \"name\",\n          Utils.getStringReader(),\n          \"sortTri\",\n          \"uint32\",\n          \"passes\",\n          Utils.getArrayReader(this.AmatDx9PassV0),\n          \"maxPsVersion\",\n          \"uint16\",\n          \"maxVsVersion\",\n          \"uint16\",\n        ];\n\n        this.__root = this.AmatDx9MaterialV0 = [\n          \"samplers\",\n          Utils.getArrayReader(this.AmatDx9SamplerV0),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatDx9ShaderV0),\n          \"techniques\",\n          Utils.getArrayReader(this.AmatDx9TechniqueV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: edit, versions: 17, strucTab: 0x1724B58\n  /// ==================================================\n\n  {\n    name: \"edit\",\n    versions: {\n      // => Version: 16, ReferencedFunction: 0x452AB0\n      16: function () {\n        this.MapEditLayerItem = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"layerFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.MapEditLayers = [\n          \"layerStates\",\n          Utils.getArrayReader(\"uint8\"),\n          \"layerNames\",\n          Utils.getArrayReader(Utils.getString16Reader()),\n          \"layerIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"items\",\n          Utils.getArrayReader(this.MapEditLayerItem),\n        ];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.PackMapEditSurfacePoly = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"surfaceType\",\n          \"uint32\",\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"range\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditSurfaceRoadNode = [\"position\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.PackMapEditSurfaceRoad = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"surfaceType\",\n          \"uint32\",\n          \"nodes\",\n          Utils.getArrayReader(this.PackMapEditSurfaceRoadNode),\n        ];\n\n        this.PackMapEditNavmeshGenPropMode = [\n          \"propId\",\n          Utils.getQWordReader(),\n          \"mode\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEditNavMeshData = [\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"surfacePolys\",\n          Utils.getArrayReader(this.PackMapEditSurfacePoly),\n          \"surfaceRoads\",\n          Utils.getArrayReader(this.PackMapEditSurfaceRoad),\n          \"propModesForGeneration\",\n          Utils.getArrayReader(this.PackMapEditNavmeshGenPropMode),\n        ];\n\n        this.MapEditSnapPoint = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.MapEditMeasureSpan = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"substrateId0\",\n          Utils.getQWordReader(),\n          \"substrateId1\",\n          Utils.getQWordReader(),\n          \"substrateModuleId0\",\n          \"uint32\",\n          \"substrateModuleId1\",\n          \"uint32\",\n          \"position0\",\n          [\"[]\", \"float32\", 3],\n          \"position1\",\n          [\"[]\", \"float32\", 3],\n          \"limits\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"navMeshData\",\n          this.PackMapEditNavMeshData,\n          \"snapPoints\",\n          Utils.getArrayReader(this.MapEditSnapPoint),\n          \"measureSpans\",\n          Utils.getArrayReader(this.MapEditMeasureSpan),\n          \"mapHome\",\n          Utils.getString16Reader(),\n          \"homeSave\",\n          \"uint8\",\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n      },\n\n      // => Version: 15, ReferencedFunction: 0x452AB0\n      15: function () {\n        this.MapEditLayerItem = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"layerFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.MapEditLayers = [\n          \"layerStates\",\n          Utils.getArrayReader(\"uint8\"),\n          \"layerNames\",\n          Utils.getArrayReader(Utils.getString16Reader()),\n          \"layerIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"items\",\n          Utils.getArrayReader(this.MapEditLayerItem),\n        ];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.PackMapEditSurfacePoly = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"surfaceType\",\n          \"uint32\",\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"range\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditSurfaceRoadNode = [\"position\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.PackMapEditSurfaceRoad = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"surfaceType\",\n          \"uint32\",\n          \"nodes\",\n          Utils.getArrayReader(this.PackMapEditSurfaceRoadNode),\n        ];\n\n        this.PackMapEditNavMeshData = [\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"surfacePolys\",\n          Utils.getArrayReader(this.PackMapEditSurfacePoly),\n          \"surfaceRoads\",\n          Utils.getArrayReader(this.PackMapEditSurfaceRoad),\n        ];\n\n        this.MapEditSnapPoint = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.MapEditMeasureSpan = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"substrateId0\",\n          Utils.getQWordReader(),\n          \"substrateId1\",\n          Utils.getQWordReader(),\n          \"substrateModuleId0\",\n          \"uint32\",\n          \"substrateModuleId1\",\n          \"uint32\",\n          \"position0\",\n          [\"[]\", \"float32\", 3],\n          \"position1\",\n          [\"[]\", \"float32\", 3],\n          \"limits\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"navMeshData\",\n          this.PackMapEditNavMeshData,\n          \"snapPoints\",\n          Utils.getArrayReader(this.MapEditSnapPoint),\n          \"measureSpans\",\n          Utils.getArrayReader(this.MapEditMeasureSpan),\n          \"mapHome\",\n          Utils.getString16Reader(),\n          \"homeSave\",\n          \"uint8\",\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n      },\n\n      // => Version: 14, ReferencedFunction: 0x452AB0\n      14: function () {\n        this.MapEditLayerItem = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"layerFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.MapEditLayers = [\n          \"layerStates\",\n          Utils.getArrayReader(\"uint8\"),\n          \"layerNames\",\n          Utils.getArrayReader(Utils.getString16Reader()),\n          \"layerIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"items\",\n          Utils.getArrayReader(this.MapEditLayerItem),\n        ];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.PackMapEditSurfacePoly = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"surfaceType\",\n          \"uint32\",\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"range\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditSurfaceRoadNode = [\"position\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.PackMapEditSurfaceRoad = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"surfaceType\",\n          \"uint32\",\n          \"nodes\",\n          Utils.getArrayReader(this.PackMapEditSurfaceRoadNode),\n        ];\n\n        this.PackMapEditNavMeshData = [\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"surfacePolys\",\n          Utils.getArrayReader(this.PackMapEditSurfacePoly),\n          \"surfaceRoads\",\n          Utils.getArrayReader(this.PackMapEditSurfaceRoad),\n        ];\n\n        this.MapEditSnapPoint = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"navMeshData\",\n          this.PackMapEditNavMeshData,\n          \"snapPoints\",\n          Utils.getArrayReader(this.MapEditSnapPoint),\n          \"mapHome\",\n          Utils.getString16Reader(),\n          \"homeSave\",\n          \"uint8\",\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n      },\n\n      // => Version: 13, ReferencedFunction: 0x452AB0\n      13: function () {\n        this.MapEditLayerItem = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"layerFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.MapEditLayers = [\n          \"layerStates\",\n          Utils.getArrayReader(\"uint8\"),\n          \"layerNames\",\n          Utils.getArrayReader(Utils.getString16Reader()),\n          \"layerIds\",\n          Utils.getArrayReader(\"uint32\"),\n          \"items\",\n          Utils.getArrayReader(this.MapEditLayerItem),\n        ];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.MapEditSnapPoint = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"snapPoints\",\n          Utils.getArrayReader(this.MapEditSnapPoint),\n          \"mapHome\",\n          Utils.getString16Reader(),\n          \"homeSave\",\n          \"uint8\",\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n      },\n\n      // => Version: 12, ReferencedFunction: 0x452AB0\n      12: function () {\n        this.MapEditLayerItem = [\"guid\", Utils.getQWordReader(), \"moduleId\", \"uint32\", \"layerFlags\", \"uint32\"];\n\n        this.MapEditLayers = [\n          \"layerStates\",\n          [\"[]\", \"uint8\", 31],\n          \"layerNames\",\n          [\"[]\", Utils.getString16Reader(), 31],\n          \"items\",\n          Utils.getArrayReader(this.MapEditLayerItem),\n        ];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.MapEditSnapPoint = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"snapPoints\",\n          Utils.getArrayReader(this.MapEditSnapPoint),\n          \"mapHome\",\n          Utils.getString16Reader(),\n          \"homeSave\",\n          \"uint8\",\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n      },\n\n      // => Version: 11\n      11: function () {\n        this.MapEditLayerItem = [\"guid\", Utils.getQWordReader(), \"moduleId\", \"uint32\", \"layerFlags\", \"uint32\"];\n\n        this.MapEditLayers = [\n          \"layerStates\",\n          [\"[]\", \"uint8\", 31],\n          \"layerNames\",\n          [\"[]\", Utils.getString16Reader(), 31],\n          \"items\",\n          Utils.getArrayReader(this.MapEditLayerItem),\n        ];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.MapEditSnapPoint = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"moduleId\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"snapPoints\",\n          Utils.getArrayReader(this.MapEditSnapPoint),\n          \"mapHome\",\n          Utils.getString16Reader(),\n          \"homeSave\",\n          \"uint8\",\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n      },\n\n      // => Version: 10\n      10: function () {\n        this.MapEditLayers = [\n          \"layerPropCount\",\n          [\"[]\", \"uint32\", 31],\n          \"layerStates\",\n          [\"[]\", \"uint8\", 31],\n          \"layerNames\",\n          [\"[]\", Utils.getString16Reader(), 31],\n        ];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"mapHome\",\n          Utils.getString16Reader(),\n          \"homeSave\",\n          \"uint8\",\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n      },\n\n      // => Version: 9\n      9: function () {\n        this.MapEditLayers = [\n          \"layerPropCount\",\n          [\"[]\", \"uint32\", 31],\n          \"layerStates\",\n          [\"[]\", \"uint8\", 31],\n          \"layerNames\",\n          [\"[]\", Utils.getString16Reader(), 31],\n        ];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"mapHome\",\n          Utils.getString16Reader(),\n          \"homeSave\",\n          \"uint8\",\n        ];\n      },\n\n      // => Version: 8\n      8: function () {\n        this.MapEditLayers = [\n          \"layerPropCount\",\n          [\"[]\", \"uint32\", 31],\n          \"layerStates\",\n          [\"[]\", \"uint8\", 31],\n          \"layerNames\",\n          [\"[]\", Utils.getString16Reader(), 31],\n        ];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.MapEditLayers = [\"layerPropCount\", [\"[]\", \"uint32\", 31], \"layerStates\", [\"[]\", \"uint8\", 31]];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.MapEditData = [\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n        ];\n      },\n\n      // => Version: 6\n      6: function () {\n        this.MapEditRegion = [\"regions\", Utils.getArrayReader(Utils.getString16Reader())];\n\n        this.MapEditRegion = [\n          \"ambientColor\",\n          [\"[]\", \"uint8\", 3],\n          \"directionalColor\",\n          [\"[]\", \"uint8\", 3],\n          \"ambientIntenisty\",\n          \"float32\",\n          \"directionalIntenisty\",\n          \"float32\",\n        ];\n\n        this.MapEditLayers = [\"layerPropCount\", [\"[]\", \"uint32\", 31], \"layerStates\", [\"[]\", \"uint8\", 31]];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEditDirtyChunks = [\"flags\", \"uint32\", \"position\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.MapEditData = [\n          \"regions\",\n          this.MapEditRegion,\n          \"miniMapParams\",\n          this.MapEditRegion,\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n          \"floodPoints\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n        ];\n      },\n\n      // => Version: 5, ReferencedFunction: 0x452AB0\n      5: function () {\n        this.MapEditRegion = [\"regions\", Utils.getArrayReader(Utils.getString16Reader())];\n\n        this.MapEditRegion = [\n          \"ambientColor\",\n          [\"[]\", \"uint8\", 3],\n          \"directionalColor\",\n          [\"[]\", \"uint8\", 3],\n          \"ambientIntenisty\",\n          \"float32\",\n          \"directionalIntenisty\",\n          \"float32\",\n        ];\n\n        this.MapEditLayers = [\"layerPropCount\", [\"[]\", \"uint32\", 31], \"layerStates\", [\"[]\", \"uint8\", 31]];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.PackMapEditDirtyChunks = [\"dirtyFlags\", \"uint32\", \"chunkCoord\", [\"[]\", \"uint32\", 2]];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.MapEditData = [\n          \"regions\",\n          this.MapEditRegion,\n          \"miniMapParams\",\n          this.MapEditRegion,\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"dirtyChunks\",\n          Utils.getArrayReader(this.PackMapEditDirtyChunks),\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n        ];\n      },\n\n      // => Version: 4, ReferencedFunction: 0x452AB0\n      4: function () {\n        this.MapEditRegion = [\"regions\", Utils.getArrayReader(Utils.getString16Reader())];\n\n        this.MapEditRegion = [\n          \"ambientColor\",\n          [\"[]\", \"uint8\", 3],\n          \"directionalColor\",\n          [\"[]\", \"uint8\", 3],\n          \"ambientIntenisty\",\n          \"float32\",\n          \"directionalIntenisty\",\n          \"float32\",\n        ];\n\n        this.MapEditLayers = [\"layerPropCount\", [\"[]\", \"uint32\", 31], \"layerStates\", [\"[]\", \"uint8\", 31]];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.MapEditData = [\n          \"regions\",\n          this.MapEditRegion,\n          \"miniMapParams\",\n          this.MapEditRegion,\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.MapEditRegion = [\"regions\", Utils.getArrayReader(Utils.getString16Reader())];\n\n        this.MapEditRegion = [\n          \"ambientColor\",\n          [\"[]\", \"uint8\", 3],\n          \"directionalColor\",\n          [\"[]\", \"uint8\", 3],\n          \"ambientIntenisty\",\n          \"float32\",\n          \"directionalIntenisty\",\n          \"float32\",\n        ];\n\n        this.MapEditLayers = [\"layerStates\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapEditAnnotation = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"anchors\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEditAnnotations = [\"annotations\", Utils.getArrayReader(this.PackMapEditAnnotation)];\n\n        this.MapEditCamLocations = [\n          \"attack\",\n          \"float32\",\n          \"rotation\",\n          \"float32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.MapEditData = [\n          \"regions\",\n          this.MapEditRegion,\n          \"miniMapParams\",\n          this.MapEditRegion,\n          \"layers\",\n          this.MapEditLayers,\n          \"annotations\",\n          this.PackMapEditAnnotations,\n          \"camLocations\",\n          Utils.getArrayReader(this.MapEditCamLocations),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: env, versions: 76, strucTab: 0x17206D8\n  /// ==================================================\n\n  {\n    name: \"env\",\n    versions: {\n      // => Version: 75, ReferencedFunction: 0xEB9240\n      75: function () {\n        this.PackMapEnvDataLightV75 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV75 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV75),\n          \"shadowInfluence\",\n          \"float32\",\n          \"backlightColor\",\n          [\"[]\", \"uint8\", 3],\n          \"backlightIntensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV46 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV46 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV46),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV75 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n          \"reserved\",\n          \"uint32\",\n        ];\n\n        this.PackMapEnvDataLayerV75 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV75),\n          \"name\",\n          Utils.getString16Reader(),\n          \"reserved\",\n          \"uint32\",\n        ];\n\n        this.PackMapEnvDataCloudsV75 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV75)];\n\n        this.PackMapEnvDataColoredLightRingsV46 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectExV46 = [\"dummy\", \"uint32\"];\n\n        this.PackMapEnvDataEffectV75 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"ssaoAmount\",\n          \"float32\",\n          \"ssaoBrighten\",\n          \"float32\",\n          \"ssaoContrast\",\n          \"float32\",\n          \"ssaoSunScale\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"clutTexturePath\",\n          Utils.getFileNameReader(),\n          \"ext\",\n          Utils.getPointerReader(this.PackMapEnvDataEffectExV46),\n        ];\n\n        this.PackMapEnvDataHazeV75 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV75 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"float32\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n          \"reserved\",\n          \"uint32\",\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV46 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV75 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvLensFlareAtomV46 = [\n          \"rows\",\n          \"uint32\",\n          \"columns\",\n          \"uint32\",\n          \"start\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"offset\",\n          [\"[]\", \"float32\", 2],\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"baseRotation\",\n          \"float32\",\n          \"cameraRotation\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvLensFlareTextureV46 = [\"texture\", Utils.getFileNameReader()];\n\n        this.PackMapEnvDataShaderConstantV46 = [\"token\", \"uint32\", \"value\", [\"[]\", \"float32\", 4]];\n\n        this.PackMapEnvLensFlareV46 = [\n          \"atoms\",\n          Utils.getArrayReader(this.PackMapEnvLensFlareAtomV46),\n          \"textures\",\n          Utils.getArrayReader(this.PackMapEnvLensFlareTextureV46),\n          \"material\",\n          Utils.getFileNameReader(),\n          \"fadeBand\",\n          [\"[]\", \"float32\", 2],\n          \"reverseFadeBand\",\n          [\"[]\", \"float32\", 2],\n          \"opacityCoeff\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n          \"constants\",\n          Utils.getArrayReader(this.PackMapEnvDataShaderConstantV46),\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesExV46 = [\"dummy\", \"uint32\"];\n\n        this.PackMapEnvDataSkyCardAttributesV75 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n          \"lensFlare\",\n          Utils.getPointerReader(this.PackMapEnvLensFlareV46),\n          \"ext\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardAttributesExV46),\n        ];\n\n        this.PackMapEnvDataShaderTextureV46 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackEnvDataSkyCardAnimationV46 = [\n          \"textureAnimTranslation\",\n          [\"[]\", \"float32\", 2],\n          \"textureAnimScaleRangeX\",\n          [\"[]\", \"float32\", 2],\n          \"textureAnimScaleRangeY\",\n          [\"[]\", \"float32\", 2],\n          \"textureAnimScaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"textureAnimRotation\",\n          \"float32\",\n          \"texCoords\",\n          \"uint32\",\n        ];\n\n        this.PackMapEnvDataSkycardFlipbookV46 = [\n          \"rows\",\n          \"uint32\",\n          \"columns\",\n          \"uint32\",\n          \"start\",\n          \"uint32\",\n          \"count\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardMaterialV46 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"constants\",\n          Utils.getArrayReader(this.PackMapEnvDataShaderConstantV46),\n          \"textures\",\n          Utils.getArrayReader(this.PackMapEnvDataShaderTextureV46),\n          \"textureAnimation\",\n          this.PackEnvDataSkyCardAnimationV46,\n          \"flipbook\",\n          this.PackMapEnvDataSkycardFlipbookV46,\n        ];\n\n        this.PackMapEnvDataSkyCardExV46 = [\"dummy\", \"uint32\"];\n\n        this.PackMapEnvDataSkyCardV75 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV75,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV75,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n          \"location\",\n          [\"[]\", \"float32\", 3],\n          \"material\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardMaterialV46),\n          \"ext\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardExV46),\n        ];\n\n        this.PackMapEnvDataSkyCardsV75 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV75)];\n\n        this.PackMapEnvDataSpawnModelDataV46 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV46 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV46)];\n\n        this.PackMapEnvDataSpawnGroupsV46 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV46),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV75 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV75 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataAudioV46 = [\"token\", Utils.getQWordReader()];\n\n        this.PackMapEnvDataBaseEx2V46 = [\"dummy\", \"uint32\"];\n\n        this.PackMapEnvDataBaseExV46 = [\n          \"ext2\",\n          Utils.getPointerReader(this.PackMapEnvDataBaseEx2V46),\n          \"brightTime\",\n          \"float32\",\n          \"dimTime\",\n          \"float32\",\n          \"darkCoeff\",\n          \"float32\",\n          \"darkExp\",\n          \"float32\",\n          \"darkMin\",\n          \"float32\",\n          \"darkMax\",\n          \"float32\",\n          \"brightMin\",\n          \"float32\",\n          \"brightMax\",\n          \"float32\",\n          \"brightScale\",\n          \"float32\",\n          \"darkScale\",\n          \"float32\",\n          \"waterReflectionParams\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataShapeV46 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV75 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV75),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV46),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV75),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV46),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV75),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV75),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV75),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV46),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV75),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV75),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV46),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV75),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV75),\n          \"audio\",\n          Utils.getRefArrayReader(this.PackMapEnvDataAudioV46),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"ext\",\n          Utils.getPointerReader(this.PackMapEnvDataBaseExV46),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV46),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV75 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV75 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV75),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV46),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV75),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV46),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV75),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV75),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV75),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV46),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV75),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV75),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV46),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV75),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV75),\n          \"audio\",\n          Utils.getRefArrayReader(this.PackMapEnvDataAudioV46),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"ext\",\n          Utils.getPointerReader(this.PackMapEnvDataBaseExV46),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV75),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV75 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV75),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV75),\n        ];\n      },\n\n      // => Version: 74\n      74: function () {\n        this.PackMapEnvDataLightV74 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV74 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV74),\n          \"shadowInfluence\",\n          \"float32\",\n          \"backlightColor\",\n          [\"[]\", \"uint8\", 3],\n          \"backlightIntensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV45 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV45 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV45),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV74 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n          \"reserved\",\n          \"uint32\",\n        ];\n\n        this.PackMapEnvDataLayerV74 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV74),\n          \"name\",\n          Utils.getString16Reader(),\n          \"reserved\",\n          \"uint32\",\n        ];\n\n        this.PackMapEnvDataCloudsV74 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV74)];\n\n        this.PackMapEnvDataColoredLightRingsV45 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV74 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV74 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV74 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"float32\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n          \"reserved\",\n          \"uint32\",\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV45 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV74 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV74 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV74 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV74,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV74,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV74 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV74)];\n\n        this.PackMapEnvDataSpawnModelDataV45 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV45 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV45)];\n\n        this.PackMapEnvDataSpawnGroupsV45 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV45),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV74 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV74 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataAudioV45 = [\"token\", Utils.getQWordReader()];\n\n        this.PackMapEnvDataShapeV45 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV74 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV74),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV45),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV74),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV45),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV74),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV74),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV74),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV45),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV74),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV74),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV45),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV74),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV74),\n          \"audio\",\n          Utils.getRefArrayReader(this.PackMapEnvDataAudioV45),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"reserved\",\n          Utils.getString16Reader(),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV45),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV74 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV74 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV74),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV45),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV74),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV45),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV74),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV74),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV74),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV45),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV74),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV74),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV45),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV74),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV74),\n          \"audio\",\n          Utils.getRefArrayReader(this.PackMapEnvDataAudioV45),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"reserved\",\n          Utils.getString16Reader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV74),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV74 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV74),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV74),\n        ];\n      },\n\n      // => Version: 73\n      73: function () {\n        this.PackMapEnvDataLightV73 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV73 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV73),\n          \"shadowInfluence\",\n          \"float32\",\n          \"backlightColor\",\n          [\"[]\", \"uint8\", 3],\n          \"backlightIntensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV44 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV44 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV44),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV73 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV73 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV73),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV73 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV73)];\n\n        this.PackMapEnvDataColoredLightRingsV44 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV73 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV73 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV73 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"float32\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV44 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV73 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV73 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV73 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV73,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV73,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV73 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV73)];\n\n        this.PackMapEnvDataSpawnModelDataV44 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV44 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV44)];\n\n        this.PackMapEnvDataSpawnGroupsV44 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV44),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV73 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV73 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataAudioV44 = [\"token\", Utils.getQWordReader()];\n\n        this.PackMapEnvDataShapeV44 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV73 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV73),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV44),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV73),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV44),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV73),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV73),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV73),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV44),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV73),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV73),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV44),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV73),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV73),\n          \"audio\",\n          Utils.getRefArrayReader(this.PackMapEnvDataAudioV44),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV44),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV73 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV73 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV73),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV44),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV73),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV44),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV73),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV73),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV73),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV44),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV73),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV73),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV44),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV73),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV73),\n          \"audio\",\n          Utils.getRefArrayReader(this.PackMapEnvDataAudioV44),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV73),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV73 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV73),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV73),\n        ];\n      },\n\n      // => Version: 72\n      72: function () {\n        this.PackMapEnvDataLightV72 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV72 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV72),\n          \"shadowInfluence\",\n          \"float32\",\n          \"backlightColor\",\n          [\"[]\", \"uint8\", 3],\n          \"backlightIntensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV43 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV43 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV43),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV72 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV72 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV72),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV72 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV72)];\n\n        this.PackMapEnvDataColoredLightRingsV43 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV72 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV72 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV72 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"float32\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV43 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV72 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV72 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV72 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV72,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV72,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV72 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV72)];\n\n        this.PackMapEnvDataSpawnModelDataV43 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV43 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV43)];\n\n        this.PackMapEnvDataSpawnGroupsV43 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV43),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV72 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV72 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataShapeV43 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV72 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV72),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV43),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV72),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV43),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV72),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV72),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV72),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV43),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV72),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV72),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV43),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV72),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV72),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"audioToken\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV43),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV72 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV72 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV72),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV43),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV72),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV43),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV72),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV72),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV72),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV43),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV72),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV72),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV43),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV72),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV72),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"audioToken\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV72),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV72 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV72),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV72),\n        ];\n      },\n\n      // => Version: 71, ReferencedFunction: 0xEB91A0\n      71: function () {\n        this.PackMapEnvDataLightV71 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV71 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV71),\n          \"shadowInfluence\",\n          \"float32\",\n          \"backlightColor\",\n          [\"[]\", \"uint8\", 3],\n          \"backlightIntensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV42 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV42 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV42),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV71 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV71 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV71),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV71 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV71)];\n\n        this.PackMapEnvDataColoredLightRingsV42 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV71 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV71 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV71 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"float32\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV42 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV71 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV71 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV71 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV71,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV71,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV71 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV71)];\n\n        this.PackMapEnvDataSpawnModelDataV42 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV42 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV42)];\n\n        this.PackMapEnvDataSpawnGroupsV42 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV42),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV71 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV71 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataShapeV42 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV71 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV71),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV42),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV71),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV42),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV71),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV71),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV71),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV42),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV71),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV71),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV42),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV71),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV71),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV42),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV71 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV71 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV71),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV42),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV71),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV42),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV71),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV71),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV71),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV42),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV71),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV71),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV42),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV71),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV71),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV71),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV71 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV71),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV71),\n        ];\n      },\n\n      // => Version: 70, ReferencedFunction: 0xEB9150\n      70: function () {\n        this.PackMapEnvDataLightV70 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV70 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV70),\n          \"shadowInfluence\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV41 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV41 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV41),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV70 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV70 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV70),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV70 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV70)];\n\n        this.PackMapEnvDataColoredLightRingsV41 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV70 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV70 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV70 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"float32\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV41 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV70 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV70 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV70 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV70,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV70,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV70 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV70)];\n\n        this.PackMapEnvDataSpawnModelDataV41 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV41 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV41)];\n\n        this.PackMapEnvDataSpawnGroupsV41 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV41),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV70 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV70 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataShapeV41 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV70 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV70),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV41),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV70),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV41),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV70),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV70),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV70),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV41),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV70),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV70),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV41),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV70),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV70),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV41),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV70 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV70 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV70),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV41),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV70),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV41),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV70),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV70),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV70),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV41),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV70),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV70),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV41),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV70),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV70),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV70),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV70 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV70),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV70),\n        ];\n      },\n\n      // => Version: 69\n      69: function () {\n        this.PackMapEnvDataLightV69 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV69 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV69),\n          \"shadowInfluence\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV40 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV40 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV40),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV69 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV69 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV69),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV69 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV69)];\n\n        this.PackMapEnvDataColoredLightRingsV40 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV69 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV69 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV69 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV40 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV69 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV69 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV69 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV69,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV69,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV69 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV69)];\n\n        this.PackMapEnvDataSpawnModelDataV40 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV40 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV40)];\n\n        this.PackMapEnvDataSpawnGroupsV40 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV40),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV69 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV69 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataShapeV40 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV69 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV69),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV40),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV69),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV40),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV69),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV69),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV69),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV40),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV69),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV69),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV40),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV69),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV69),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV40),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV69 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV69 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV69),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV40),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV69),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV40),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV69),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV69),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV69),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV40),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV69),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV69),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV40),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV69),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV69),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV69),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV69 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV69),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV69),\n        ];\n      },\n\n      // => Version: 68, ReferencedFunction: 0xEB9030\n      68: function () {\n        this.PackMapEnvDataLightV68 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV68 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV68),\n          \"shadowInfluence\",\n          \"float32\",\n          \"backlight\",\n          Utils.getPointerReader(this.PackMapEnvDataLightV68),\n        ];\n\n        this.PackMapEnvDataLightingCharV39 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV39 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV39),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV68 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV68 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV68),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV68 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV68)];\n\n        this.PackMapEnvDataColoredLightRingsV39 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV68 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV68 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV68 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV39 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV68 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV68 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV68 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV68,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV68,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV68 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV68)];\n\n        this.PackMapEnvDataSpawnModelDataV39 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV39 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV39)];\n\n        this.PackMapEnvDataSpawnGroupsV39 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV39),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV68 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV68 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataShapeV39 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV68 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV68),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV39),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV68),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV39),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV68),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV68),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV68),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV39),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV68),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV68),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV39),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV68),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV68),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV39),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV68 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV68 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV68),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV39),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV68),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV39),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV68),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV68),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV68),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV39),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV68),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV68),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV39),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV68),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV68),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV68),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV68 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV68),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV68),\n        ];\n      },\n\n      // => Version: 67\n      67: function () {\n        this.PackMapEnvDataLightV67 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV67 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV67),\n          \"shadowInfluence\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV38 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV38 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV38),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV67 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV67 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV67),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV67 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV67)];\n\n        this.PackMapEnvDataColoredLightRingsV38 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV67 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV67 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV67 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV38 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV67 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV67 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV67 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV67,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV67,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV67 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV67)];\n\n        this.PackMapEnvDataSpawnModelDataV38 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV38 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV38)];\n\n        this.PackMapEnvDataSpawnGroupsV38 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV38),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV67 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV67 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataShapeV38 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV67 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV67),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV38),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV67),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV38),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV67),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV67),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV67),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV38),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV67),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV67),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV38),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV67),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV67),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV38),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV67 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV67 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV67),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV38),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV67),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV38),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV67),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV67),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV67),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV38),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV67),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV67),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV38),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV67),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV67),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV67),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV67 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV67),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV67),\n        ];\n      },\n\n      // => Version: 66, ReferencedFunction: 0xEB8EE0\n      66: function () {\n        this.PackMapEnvDataLightV66 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV66 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV66),\n          \"shadowInfluence\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV37 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV37 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV37),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV66 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV66 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV66),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV66 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV66)];\n\n        this.PackMapEnvDataColoredLightRingsV37 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV66 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV66 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV66 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV37 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV66 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV66 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV66 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV66,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV66,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV66 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV66)];\n\n        this.PackMapEnvDataSpawnModelDataV37 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV37 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV37)];\n\n        this.PackMapEnvDataSpawnGroupsV37 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV37),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV66 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV66 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataShapeV37 = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"height\",\n          \"float32\",\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"shapeType\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV66 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV66),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV37),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV66),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV37),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV66),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV66),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV66),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV37),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV66),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV66),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV37),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV66),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV66),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"guid\",\n          Utils.getQWordReader(),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapEnvDataShapeV37),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV66 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV66 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV66),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV37),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV66),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV37),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV66),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV66),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV66),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV37),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV66),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV66),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV37),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV66),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV66),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV66),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV66 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV66),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV66),\n        ];\n      },\n\n      // => Version: 65, ReferencedFunction: 0xEB8E80\n      65: function () {\n        this.PackMapEnvDataLightV65 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV65 = [\n          \"lights\",\n          Utils.getRefArrayReader(this.PackMapEnvDataLightV65),\n          \"shadowInfluence\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLightingCharV36 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV36 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV36),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV65 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV65 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV65),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV65 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV65)];\n\n        this.PackMapEnvDataColoredLightRingsV36 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV65 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV65 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV65 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV36 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV65 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV65 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV65 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV65,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV65,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV65 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV65)];\n\n        this.PackMapEnvDataSpawnModelDataV36 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV36 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV36)];\n\n        this.PackMapEnvDataSpawnGroupsV36 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV36),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV65 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV65 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV65 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV65),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV36),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV65),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV36),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV65),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV65),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV65),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV36),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV65),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV65),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV36),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV65),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV65),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV65 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV65 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV65),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV36),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV65),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV36),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV65),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV65),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV65),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV36),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV65),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV65),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV36),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV65),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV65),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV65),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV65 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV65),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV65),\n        ];\n      },\n\n      // => Version: 64, ReferencedFunction: 0xEB8D90\n      64: function () {\n        this.PackMapEnvDataLightV64 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV64 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV64)];\n\n        this.PackMapEnvDataLightingCharV35 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV35 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV35),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV64 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV64 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV64),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV64 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV64)];\n\n        this.PackMapEnvDataColoredLightRingsV35 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV64 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV64 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV64 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV35 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV64 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n          \"verticalOffset\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV64 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV64 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV64,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV64,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV64 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV64)];\n\n        this.PackMapEnvDataSpawnModelDataV35 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV35 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV35)];\n\n        this.PackMapEnvDataSpawnGroupsV35 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV35),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV64 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV64 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n          \"gustSpeed\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV64 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV64),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV35),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV64),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV35),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV64),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV64),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV64),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV35),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV64),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV64),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV35),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV64),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV64),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV64 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV64 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV64),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV35),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV64),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV35),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV64),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV64),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV64),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV35),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV64),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV64),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV35),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV64),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV64),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV64),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV64 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV64),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV64),\n        ];\n      },\n\n      // => Version: 63, ReferencedFunction: 0xEB8C90\n      63: function () {\n        this.PackMapEnvDataLightV63 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV63 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV63)];\n\n        this.PackMapEnvDataLightingCharV34 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV34 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV34),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV63 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV63 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV63),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV63 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV63)];\n\n        this.PackMapEnvDataColoredLightRingsV34 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV63 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV63 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV63 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV34 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV63 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV63 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV63 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV63,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV63,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV63 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV63)];\n\n        this.PackMapEnvDataSpawnModelDataV34 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV34 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV34)];\n\n        this.PackMapEnvDataSpawnGroupsV34 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV34),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV63 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"foamSpawn\",\n          \"float32\",\n          \"foamDissolve\",\n          \"float32\",\n          \"foamDepthAttenuation\",\n          \"float32\",\n          \"foamColor0\",\n          [\"[]\", \"uint8\", 4],\n          \"foamColor1\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PackMapEnvDataWindV63 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV63 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV63),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV34),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV63),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV34),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV63),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV63),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV63),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV34),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV63),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV63),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV34),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV63),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV63),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV63 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV63 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV63),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV34),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV63),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV34),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV63),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV63),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV63),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV34),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV63),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV63),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV34),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV63),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV63),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV63),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV63 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV63),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV63),\n        ];\n      },\n\n      // => Version: 62, ReferencedFunction: 0xEB8C60\n      62: function () {\n        this.PackMapEnvDataLightV62 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV62 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV62)];\n\n        this.PackMapEnvDataLightingCharV33 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV33 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV33),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV62 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV62 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV62),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV62 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV62)];\n\n        this.PackMapEnvDataColoredLightRingsV33 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV62 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV62 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n          \"sunDirRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataPFieldV62 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV33 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV62 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV62 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV62 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV62,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV62,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV62 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV62)];\n\n        this.PackMapEnvDataSpawnModelDataV33 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV33 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV33)];\n\n        this.PackMapEnvDataSpawnGroupsV33 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV33),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV62 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV62 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV62 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV62),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV33),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV62),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV33),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV62),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV62),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV62),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV33),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV62),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV62),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV33),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV62),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV62),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV62 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV62 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV62),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV33),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV62),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV33),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV62),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV62),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV62),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV33),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV62),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV62),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV33),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV62),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV62),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV62),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV62 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV62),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV62),\n        ];\n      },\n\n      // => Version: 61, ReferencedFunction: 0xEB8C30\n      61: function () {\n        this.PackMapEnvDataLightV61 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV61 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV61)];\n\n        this.PackMapEnvDataLightingCharV32 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV32 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV32),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV61 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV61 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV61),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV61 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV61)];\n\n        this.PackMapEnvDataColoredLightRingsV32 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV61 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n          \"flatteningCharacterRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV61 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV61 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV32 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV61 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV61 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV61 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV61,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV61,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV61 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV61)];\n\n        this.PackMapEnvDataSpawnModelDataV32 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV32 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV32)];\n\n        this.PackMapEnvDataSpawnGroupsV32 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV32),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV61 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV61 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV61 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV61),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV32),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV61),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV32),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV61),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV61),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV61),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV32),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV61),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV61),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV32),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV61),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV61),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV61 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV61 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV61),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV32),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV61),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV32),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV61),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV61),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV61),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV32),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV61),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV61),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV32),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV61),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV61),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV61),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV61 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV61),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV61),\n        ];\n      },\n\n      // => Version: 60, ReferencedFunction: 0xEB8C00\n      60: function () {\n        this.PackMapEnvDataLightV60 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV60 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV60)];\n\n        this.PackMapEnvDataLightingCharV31 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV31 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV31),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV60 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV60 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV60),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV60 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV60)];\n\n        this.PackMapEnvDataColoredLightRingsV31 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV60 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n          \"flatteningRange\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataHazeV60 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV60 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV31 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV60 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV60 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV60 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV60,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV60,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV60 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV60)];\n\n        this.PackMapEnvDataSpawnModelDataV31 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV31 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV31)];\n\n        this.PackMapEnvDataSpawnGroupsV31 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV31),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV60 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV60 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV60 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV60),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV31),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV60),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV31),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV60),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV60),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV60),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV31),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV60),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV60),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV31),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV60),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV60),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV60 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV60 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV60),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV31),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV60),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV31),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV60),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV60),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV60),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV31),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV60),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV60),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV31),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV60),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV60),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV60),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV60 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV60),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV60),\n        ];\n      },\n\n      // => Version: 59, ReferencedFunction: 0xEB8AF0\n      59: function () {\n        this.PackMapEnvDataLightV59 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV59 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV59)];\n\n        this.PackMapEnvDataLightingCharV30 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV30 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV30),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV59 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV59 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV59),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV59 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV59)];\n\n        this.PackMapEnvDataColoredLightRingsV30 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV59 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV59 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV59 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV30 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV59 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV59 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV59 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV59,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV59,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV59 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV59)];\n\n        this.PackMapEnvDataSpawnModelDataV30 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV30 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV30)];\n\n        this.PackMapEnvDataSpawnGroupsV30 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV30),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV59 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV59 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV59 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV59),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV30),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV59),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV30),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV59),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV59),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV59),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV30),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV59),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV59),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV30),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV59),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV59),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV59 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV59 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV59),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV30),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV59),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV30),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV59),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV59),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV59),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV30),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV59),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV59),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV30),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV59),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV59),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV59),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV59 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV59),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV59),\n        ];\n      },\n\n      // => Version: 58, ReferencedFunction: 0xEB89E0\n      58: function () {\n        this.PackMapEnvDataLightV58 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV58 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV58)];\n\n        this.PackMapEnvDataLightingCharV29 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV29 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV29),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV58 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV58 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV58),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV58 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV58)];\n\n        this.PackMapEnvDataColoredLightRingsV29 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV58 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV58 = [\n          \"nearColor\",\n          [\"[]\", \"uint8\", 4],\n          \"farColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV58 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV29 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV58 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV58 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV58 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV58,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV58,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV58 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV58)];\n\n        this.PackMapEnvDataSpawnModelDataV29 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getString16Reader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV29 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV29)];\n\n        this.PackMapEnvDataSpawnGroupsV29 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV29),\n          \"targets\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapEnvDataWaterV58 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV58 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV58 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV58),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV29),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV58),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV29),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV58),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV58),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV58),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV29),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV58),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV58),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV29),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV58),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV58),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV58 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV58 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV58),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV29),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV58),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV29),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV58),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV58),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV58),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV29),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV58),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV58),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV29),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV58),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV58),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV58),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV58 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV58),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV58),\n        ];\n      },\n\n      // => Version: 57\n      57: function () {\n        this.PackMapEnvDataLightV57 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV57 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV57)];\n\n        this.PackMapEnvDataLightingCharV28 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV28 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV28),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV57 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV57 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV57),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV57 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV57)];\n\n        this.PackMapEnvDataColoredLightRingsV28 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV57 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV57 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV57 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV28 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV57 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV57 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV57 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV57,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV57,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV57 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV57)];\n\n        this.PackMapEnvDataSpawnModelDataV28 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getString16Reader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV28 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV28)];\n\n        this.PackMapEnvDataSpawnGroupsV28 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV28),\n          \"targetVolume\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataWaterV57 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV57 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV57 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV57),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV28),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV57),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV28),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV57),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV57),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV57),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV28),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV57),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV57),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV28),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV57),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV57),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV57 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV57 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV57),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV28),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV57),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV28),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV57),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV57),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV57),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV28),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV57),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV57),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV28),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV57),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV57),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV57),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV57 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV57),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV57),\n        ];\n      },\n\n      // => Version: 56, ReferencedFunction: 0xEB88D0\n      56: function () {\n        this.PackMapEnvDataLightV56 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV56 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV56)];\n\n        this.PackMapEnvDataLightingCharV27 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV27 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV27),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV56 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV56 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV56),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV56 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV56)];\n\n        this.PackMapEnvDataColoredLightRingsV27 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV56 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV56 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV56 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV27 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV56 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV56 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV56 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV56,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV56,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV56 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV56)];\n\n        this.PackMapEnvDataSpawnModelDataV27 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotXRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotYRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotZRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getString16Reader(),\n          \"maxConcurrent\",\n          \"uint16\",\n        ];\n\n        this.PackMapEnvDataSpawnListV27 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV27)];\n\n        this.PackMapEnvDataSpawnGroupsV27 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV27),\n          \"targetVolume\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataWaterV56 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV56 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV56 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV56),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV27),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV56),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV27),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV56),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV56),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV56),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV27),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV56),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV56),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV27),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV56),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV56),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV56 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV56 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV56),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV27),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV56),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV27),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV56),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV56),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV56),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV27),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV56),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV56),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV27),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV56),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV56),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV56),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV56 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV56),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV56),\n        ];\n      },\n\n      // => Version: 55\n      55: function () {\n        this.PackMapEnvDataLightV55 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV55 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV55)];\n\n        this.PackMapEnvDataLightingCharV26 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV26 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV26),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV55 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV55 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV55),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV55 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV55)];\n\n        this.PackMapEnvDataColoredLightRingsV26 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV55 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV55 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV55 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV26 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV55 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV55 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV55 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV55,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV55,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV55 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV55)];\n\n        this.PackMapEnvDataSpawnModelDataV26 = [\n          \"spawnRange\",\n          [\"[]\", \"uint32\", 2],\n          \"lifeSpan\",\n          [\"[]\", \"uint32\", 2],\n          \"probability\",\n          \"float32\",\n          \"delay\",\n          \"float32\",\n          \"maxConcurrent\",\n          \"uint16\",\n          \"flags\",\n          \"uint32\",\n          \"modelFile\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSpawnListV26 = [\"spawns\", Utils.getArrayReader(this.PackMapEnvDataSpawnModelDataV26)];\n\n        this.PackMapEnvDataSpawnGroupsV26 = [\n          \"spawnGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataSpawnListV26),\n          \"targetVolume\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataWaterV55 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV55 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV55 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV55),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV26),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV55),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV26),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV55),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV55),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV55),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV26),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV55),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV55),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV26),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV55),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV55),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV55 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV55 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV55),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV26),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV55),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV26),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV55),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV55),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV55),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV26),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV55),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV55),\n          \"spawns\",\n          Utils.getPointerReader(this.PackMapEnvDataSpawnGroupsV26),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV55),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV55),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV55),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV55 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV55),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV55),\n        ];\n      },\n\n      // => Version: 54, ReferencedFunction: 0xEB8820\n      54: function () {\n        this.PackMapEnvDataLightV54 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV54 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV54)];\n\n        this.PackMapEnvDataLightingCharV25 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV25 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV25),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV54 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV54 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV54),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV54 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV54)];\n\n        this.PackMapEnvDataColoredLightRingsV25 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV54 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV54 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV54 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV25 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV54 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV54 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV54 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV54,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV54,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV54 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV54)];\n\n        this.PackMapEnvDataWaterV54 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV54 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV54 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV54),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV25),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV54),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV25),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV54),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV54),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV54),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV25),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV54),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV54),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV54),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV54),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV54 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV54 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV54),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV25),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV54),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV25),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV54),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV54),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV54),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV25),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV54),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV54),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV54),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV54),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV54),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV54 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV54),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV54),\n        ];\n      },\n\n      // => Version: 53, ReferencedFunction: 0xEB8770\n      53: function () {\n        this.PackMapEnvDataLightV53 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV53 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV53)];\n\n        this.PackMapEnvDataLightingCharV24 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV24 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV24),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV53 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV53 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV53),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV53 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV53)];\n\n        this.PackMapEnvDataColoredLightRingsV24 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV53 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV53 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV53 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"deviationSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV24 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV53 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV53 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV53 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV53,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV53,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV53 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV53)];\n\n        this.PackMapEnvDataWaterV53 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV53 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV53 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV53),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV24),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV53),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV24),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV53),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV53),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV53),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV24),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV53),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV53),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV53),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV53),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV53 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV53 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV53),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV24),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV53),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV24),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV53),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV53),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV53),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV24),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV53),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV53),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV53),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV53),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV53),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV53 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV53),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV53),\n        ];\n      },\n\n      // => Version: 52, ReferencedFunction: 0xEB8690\n      52: function () {\n        this.PackMapEnvDataLightV52 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV52 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV52)];\n\n        this.PackMapEnvDataLightingCharV23 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV23 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV23),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV52 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV52 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV52),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV52 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV52)];\n\n        this.PackMapEnvDataColoredLightRingsV23 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV52 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV52 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV52 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"clusterCount\",\n          \"uint16\",\n          \"clustering\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint16\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"seed\",\n          \"uint32\",\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV23 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV52 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV52 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV52 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV52,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV52,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV52 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV52)];\n\n        this.PackMapEnvDataWaterV52 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV52 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV52 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV52),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV23),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV52),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV23),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV52),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV52),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV52),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV23),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV52),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV52),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV52),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV52),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV52 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV52 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV52),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV23),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV52),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV23),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV52),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV52),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV52),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV23),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV52),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV52),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV52),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV52),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV52),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV52 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV52),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV52),\n        ];\n      },\n\n      // => Version: 51\n      51: function () {\n        this.PackMapEnvDataLightV51 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV51 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV51)];\n\n        this.PackMapEnvDataLightingCharV22 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV22 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV22),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV51 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV51 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV51),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV51 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV51)];\n\n        this.PackMapEnvDataColoredLightRingsV22 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV51 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV51 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV51 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"lifetime\",\n          \"float32\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"period\",\n          \"float32\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV22 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV51 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV51 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV51 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV51,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV51,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV51 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV51)];\n\n        this.PackMapEnvDataWaterV51 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV51 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV51 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV51),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV22),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV51),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV22),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV51),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV51),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV51),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV22),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV51),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV51),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV51),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV51),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV51 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV51 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV51),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV22),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV51),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV22),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV51),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV51),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV51),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV22),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV51),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV51),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV51),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV51),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV51),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV51 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV51),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV51),\n        ];\n      },\n\n      // => Version: 50, ReferencedFunction: 0xEB8580\n      50: function () {\n        this.PackMapEnvDataLightV50 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV50 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV50)];\n\n        this.PackMapEnvDataLightingCharV21 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV21 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV21),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV50 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV50 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV50),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV50 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV50)];\n\n        this.PackMapEnvDataColoredLightRingsV21 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n          \"lightColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"shadowColors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n        ];\n\n        this.PackMapEnvDataEffectV50 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV50 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV50 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV21 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV50 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV50 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV50 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV50,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV50,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV50 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV50)];\n\n        this.PackMapEnvDataWaterV50 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV50 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV50 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV50),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV21),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV50),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV21),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV50),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV50),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV50),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV21),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV50),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV50),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV50),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV50),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV50 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV50 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV50),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV21),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV50),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV21),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV50),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV50),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV50),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV21),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV50),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV50),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV50),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV50),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV50),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV50 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV50),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV50),\n        ];\n      },\n\n      // => Version: 49, ReferencedFunction: 0xEB8430\n      49: function () {\n        this.PackMapEnvDataLightV49 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV49 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV49)];\n\n        this.PackMapEnvDataLightingCharV20 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLightingCharGroupV20 = [\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV20),\n        ];\n\n        this.PackMapEnvDataLayerAttributesV49 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV49 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV49),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV49 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV49)];\n\n        this.PackMapEnvDataColoredLightRingsV20 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"colors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n        ];\n\n        this.PackMapEnvDataEffectV49 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV49 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV49 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV20 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV49 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV49 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV49 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV49,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV49,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV49 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV49)];\n\n        this.PackMapEnvDataWaterV49 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV49 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV49 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV49),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV20),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV49),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV20),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV49),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV49),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV49),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV20),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV49),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV49),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV49),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV49),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV49 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV49 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV49),\n          \"lightingCharGroups\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharGroupV20),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV49),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV20),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV49),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV49),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV49),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV20),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV49),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV49),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV49),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV49),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV49),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV49 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV49),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV49),\n        ];\n      },\n\n      // => Version: 48\n      48: function () {\n        this.PackMapEnvDataLightV48 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV48 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV48)];\n\n        this.PackMapEnvDataLightingCharV19 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV48 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV48 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV48),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV48 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV48)];\n\n        this.PackMapEnvDataColoredLightRingsV19 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"colors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n        ];\n\n        this.PackMapEnvDataEffectV48 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV48 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV48 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV19 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV48 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV48 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV48 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV48,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV48,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV48 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV48)];\n\n        this.PackMapEnvDataWaterV48 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV48 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV48 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV48),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV19),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV48),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV19),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV48),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV48),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV48),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV19),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV48),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV48),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV48),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV48),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV48 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV48 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV48),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV19),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV48),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV19),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV48),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV48),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV48),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV19),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV48),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV48),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV48),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV48),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"bindTarget\",\n          Utils.getQWordReader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV48),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV48 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV48),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV48),\n        ];\n      },\n\n      // => Version: 47\n      47: function () {\n        this.PackMapEnvDataLightV47 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV47 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV47)];\n\n        this.PackMapEnvDataLightingCharV18 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV47 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV47 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV47),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV47 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV47)];\n\n        this.PackMapEnvDataColoredLightRingsV18 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"colors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n        ];\n\n        this.PackMapEnvDataEffectV47 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV47 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV47 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV18 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV47 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV47 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV47 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV47,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV47,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV47 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV47)];\n\n        this.PackMapEnvDataWaterV47 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV47 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV47 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV47),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV18),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV47),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV18),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV47),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV47),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV47),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV18),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV47),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV47),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV47),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV47),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV47 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV47 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV47),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV18),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV47),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV18),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV47),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV47),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV47),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV18),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV47),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV47),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV47),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV47),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV47),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV47 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV47),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV47),\n        ];\n      },\n\n      // => Version: 46\n      46: function () {\n        this.PackMapEnvDataLightV46 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV46 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV46)];\n\n        this.PackMapEnvDataLightingCharV17 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV46 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV46 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV46),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV46 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV46)];\n\n        this.PackMapEnvDataColoredLightRingsV17 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"colors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n        ];\n\n        this.PackMapEnvDataEffectV46 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV46 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV46 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV17 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV46 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV46 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV46 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV46,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV46,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV46 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV46)];\n\n        this.PackMapEnvDataWaterV46 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV46 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV46 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV46),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV17),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV46),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV17),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV46),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV46),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV46),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV17),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV46),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV46),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV46),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV46),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV46 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV46 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV46),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV17),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV46),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV17),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV46),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV46),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV46),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV17),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV46),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV46),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV46),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV46),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV46),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV46 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV46),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV46),\n        ];\n      },\n\n      // => Version: 45\n      45: function () {\n        this.PackMapEnvDataLightV45 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV45 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV45)];\n\n        this.PackMapEnvDataLightingCharV16 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV45 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV45 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV45),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV45 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV45)];\n\n        this.PackMapEnvDataColoredLightRingsV16 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"colors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n        ];\n\n        this.PackMapEnvDataEffectV45 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV45 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV45 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV16 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV45 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV45 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV45 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV45,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV45,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV45 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV45)];\n\n        this.PackMapEnvDataWaterV45 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV45 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV45 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV45),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV16),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV45),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV16),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV45),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV45),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV45),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV16),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV45),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV45),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV45),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV45),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV45 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV45 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV45),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV16),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV45),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV16),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV45),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV45),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV45),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV16),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV45),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV45),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV45),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV45),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV45),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV45 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV45),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV45),\n        ];\n      },\n\n      // => Version: 44, ReferencedFunction: 0xEB8320\n      44: function () {\n        this.PackMapEnvDataLightV44 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV44 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV44)];\n\n        this.PackMapEnvDataLightingCharV15 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV44 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV44 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV44),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV44 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV44)];\n\n        this.PackMapEnvDataColoredLightRingsV15 = [\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"colors\",\n          [\"[]\", [\"[]\", \"uint8\", 4], 6],\n          \"distances\",\n          [\"[]\", \"float32\", 6],\n        ];\n\n        this.PackMapEnvDataEffectV44 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV44 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV44 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV15 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV44 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV44 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV44 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV44,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV44,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV44 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV44)];\n\n        this.PackMapEnvDataWaterV44 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV44 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV44 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV44),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV15),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV44),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV15),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV44),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV44),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV44),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV15),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV44),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV44),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV44),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV44),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV44 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV44 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV44),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV15),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV44),\n          \"coloredLightRings\",\n          Utils.getRefArrayReader(this.PackMapEnvDataColoredLightRingsV15),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV44),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV44),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV44),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV15),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV44),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV44),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV44),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV44),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV44),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV44 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV44),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV44),\n        ];\n      },\n\n      // => Version: 43, ReferencedFunction: 0xEB8270\n      43: function () {\n        this.PackMapEnvDataLightV43 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV43 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV43)];\n\n        this.PackMapEnvDataLightingCharV14 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV43 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n          \"fadeWidth\",\n          \"float32\",\n          \"fadeEnd\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataLayerV43 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV43),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV43 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV43)];\n\n        this.PackMapEnvDataEffectV43 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV43 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV43 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV14 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV43 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV43 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n          \"brightness\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardV43 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV43,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV43,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV43 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV43)];\n\n        this.PackMapEnvDataWaterV43 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.PackMapEnvDataWindV43 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV43 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV43),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV14),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV43),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV43),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV43),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV43),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV14),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV43),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV43),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV43),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV43),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV43 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV43 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV43),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV14),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV43),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV43),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV43),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV43),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV14),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV43),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV43),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV43),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV43),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV43),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV43 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV43),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV43),\n        ];\n      },\n\n      // => Version: 42, ReferencedFunction: 0xEB81D0\n      42: function () {\n        this.PackMapEnvDataLightV42 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV42 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV42)];\n\n        this.PackMapEnvDataLightingCharV13 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV42 = [\n          \"brightness\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV42 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV42),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV42 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV42)];\n\n        this.PackMapEnvDataEffectV42 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV42 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV42 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV13 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV42 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV42 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV42 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV42,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV42,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV42 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV42)];\n\n        this.PackMapEnvDataWaterV42 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n        ];\n\n        this.PackMapEnvDataWindV42 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV42 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV42),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV13),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV42),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV42),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV42),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV42),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV13),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV42),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV42),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV42),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV42),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV42 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV42 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV42),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV13),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV42),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV42),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV42),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV42),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV13),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV42),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV42),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV42),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV42),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV42),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV42 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV42),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV42),\n        ];\n      },\n\n      // => Version: 41, ReferencedFunction: 0xEB80B0\n      41: function () {\n        this.PackMapEnvDataLightV41 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV41 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV41)];\n\n        this.PackMapEnvDataLightingCharV12 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV41 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV41 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV41),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV41 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV41)];\n\n        this.PackMapEnvDataEffectV41 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV41 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV41 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV12 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV41 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV41 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV41 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV41,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV41,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV41 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV41)];\n\n        this.PackMapEnvDataWaterV41 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"depthAttenuation\",\n          \"float32\",\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n        ];\n\n        this.PackMapEnvDataWindV41 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV41 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV41),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV12),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV41),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV41),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV41),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV41),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV12),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV41),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV41),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV41),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV41),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV41 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV41 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV41),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV12),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV41),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV41),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV41),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV41),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV12),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV41),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV41),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV41),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV41),\n          \"name\",\n          Utils.getString16Reader(),\n          \"nightMods\",\n          Utils.getArrayReader(\"uint8\"),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV41),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV41 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV41),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV41),\n        ];\n      },\n\n      // => Version: 40, ReferencedFunction: 0xEB8070\n      40: function () {\n        this.PackMapEnvDataLightV40 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV40 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV40)];\n\n        this.PackMapEnvDataLightingCharV11 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV40 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV40 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV40),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV40 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV40)];\n\n        this.PackMapEnvDataEffectV40 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV40 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV40 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV11 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV40 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV40 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV40 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV40,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV40,\n          \"flags\",\n          \"uint32\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV40 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV40)];\n\n        this.PackMapEnvDataWaterV40 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n          \"depthAttenuation\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataWindV40 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV40 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV40),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV11),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV40),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV40),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV40),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV40),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV11),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV40),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV40),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV40),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV40),\n          \"name\",\n          Utils.getString16Reader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV40 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV40 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV40),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV11),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV40),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV40),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV40),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV40),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV11),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV40),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV40),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV40),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV40),\n          \"name\",\n          Utils.getString16Reader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV40),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV40 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV40),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV40),\n        ];\n      },\n\n      // => Version: 39\n      39: function () {\n        this.PackMapEnvDataLightV39 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV39 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV39)];\n\n        this.PackMapEnvDataLightingCharV10 = [\n          \"sunScale\",\n          \"float32\",\n          \"saturation\",\n          \"float32\",\n          \"sunFill\",\n          \"float32\",\n          \"ambScale\",\n          \"float32\",\n          \"ambFill\",\n          \"float32\",\n          \"flags\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLayerAttributesV39 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV39 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV39),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV39 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV39)];\n\n        this.PackMapEnvDataEffectV39 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV39 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV39 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV10 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV39 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV39 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV39 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV39,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV39,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV39 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV39)];\n\n        this.PackMapEnvDataWaterV39 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n          \"depthAttenuation\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataWindV39 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV39 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV39),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV10),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV39),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV39),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV39),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV39),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV10),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV39),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV39),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV39),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV39),\n          \"name\",\n          Utils.getString16Reader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"guid\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV39 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV39 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV39),\n          \"lightingChar\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingCharV10),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV39),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV39),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV39),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV39),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV10),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV39),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV39),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV39),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV39),\n          \"name\",\n          Utils.getString16Reader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV39),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV39 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV39),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV39),\n        ];\n      },\n\n      // => Version: 38, ReferencedFunction: 0xEB7FD0\n      38: function () {\n        this.PackMapEnvDataLightV38 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV38 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV38)];\n\n        this.PackMapEnvDataLayerAttributesV38 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV38 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV38),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV38 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV38)];\n\n        this.PackMapEnvDataEffectV38 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n          \"focalDepth\",\n          \"float32\",\n          \"focalRange\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV38 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV38 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV9 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV38 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV38 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV38 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV38,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV38,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV38 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV38)];\n\n        this.PackMapEnvDataWaterV38 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n          \"depthAttenuation\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataWindV38 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV38 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV38),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV38),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV38),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV38),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV38),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV9),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV38),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV38),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV38),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV38),\n          \"name\",\n          Utils.getString16Reader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV38 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV38 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV38),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV38),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV38),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV38),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV38),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV9),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV38),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV38),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV38),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV38),\n          \"name\",\n          Utils.getString16Reader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV38),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV38 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV38),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV38),\n        ];\n      },\n\n      // => Version: 37, ReferencedFunction: 0xEB7F50\n      37: function () {\n        this.PackMapEnvDataLightV37 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV37 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV37)];\n\n        this.PackMapEnvDataLayerAttributesV37 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV37 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"extent\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV37),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV37 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV37)];\n\n        this.PackMapEnvDataEffectV37 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV37 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV37 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV8 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV37 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV37 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV37 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV37,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV37,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV37 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV37)];\n\n        this.PackMapEnvDataWaterV37 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n          \"depthAttenuation\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataWindV37 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV37 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV37),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV37),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV37),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV37),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV37),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV8),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV37),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV37),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV37),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV37),\n          \"name\",\n          Utils.getString16Reader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV37 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV37 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV37),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV37),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV37),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV37),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV37),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV8),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV37),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV37),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV37),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV37),\n          \"name\",\n          Utils.getString16Reader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV37),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV37 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV37),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV37),\n        ];\n      },\n\n      // => Version: 36\n      36: function () {\n        this.PackMapEnvDataLightV36 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV36 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV36)];\n\n        this.PackMapEnvDataLayerAttributesV36 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV36 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV36),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV36 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV36)];\n\n        this.PackMapEnvDataEffectV36 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV36 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV36 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV7 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV36 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV36 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV36 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV36,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV36,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV36 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV36)];\n\n        this.PackMapEnvDataWaterV36 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n          \"depthAttenuation\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataWindV36 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV36 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV36),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV36),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV36),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV36),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV36),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV7),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV36),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV36),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV36),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV36),\n          \"name\",\n          Utils.getString16Reader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV36 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV36 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV36),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV36),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV36),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV36),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV36),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV7),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV36),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV36),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV36),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV36),\n          \"name\",\n          Utils.getString16Reader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV36),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV36 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV36),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV36),\n        ];\n      },\n\n      // => Version: 35, ReferencedFunction: 0xEB7EF0\n      35: function () {\n        this.PackMapEnvDataLightV35 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV35 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV35)];\n\n        this.PackMapEnvDataLayerAttributesV35 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV35 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV35),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV35 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV35)];\n\n        this.PackMapEnvDataEffectV35 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV35 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV35 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataPFieldCutoutV6 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"x\",\n          [\"[]\", \"float32\", 4],\n          \"y\",\n          [\"[]\", \"float32\", 4],\n          \"z\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyV35 = [\n          \"flags\",\n          \"uint8\",\n          \"dayBrightness\",\n          \"float32\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightBrightness\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV35 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV35 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV35,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV35,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV35 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV35)];\n\n        this.PackMapEnvDataWaterV35 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataWindV35 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV35 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV35),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV35),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV35),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV35),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV35),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV6),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV35),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV35),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV35),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV35),\n          \"name\",\n          Utils.getString16Reader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV35 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV35 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV35),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV35),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV35),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV35),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV35),\n          \"particleFieldCutouts\",\n          Utils.getArrayReader(this.PackMapEnvDataPFieldCutoutV6),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV35),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV35),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV35),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV35),\n          \"name\",\n          Utils.getString16Reader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV35),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV35 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV35),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV35),\n        ];\n      },\n\n      // => Version: 34\n      34: function () {\n        this.PackMapEnvDataLightV34 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV34 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV34)];\n\n        this.PackMapEnvDataLayerAttributesV34 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV34 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV34),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV34 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV34)];\n\n        this.PackMapEnvDataEffectV34 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"tintTargetColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"tintFocus\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV34 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV34 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyV34 = [\n          \"flags\",\n          \"uint8\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV34 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV34 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV34,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV34,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV34 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV34)];\n\n        this.PackMapEnvDataWaterV34 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataWindV34 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV34 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV34),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV34),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV34),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV34),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV34),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV34),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV34),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV34),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV34),\n          \"name\",\n          Utils.getString16Reader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV34 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV34 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV34),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV34),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV34),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV34),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV34),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV34),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV34),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV34),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV34),\n          \"name\",\n          Utils.getString16Reader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV34),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV34 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV34),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV34),\n        ];\n      },\n\n      // => Version: 33\n      33: function () {\n        this.PackMapEnvDataLightV33 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV33 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV33)];\n\n        this.PackMapEnvDataLayerAttributesV33 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV33 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV33),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV33 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV33)];\n\n        this.PackMapEnvDataEffectV33 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV33 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV33 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyV33 = [\n          \"flags\",\n          \"uint8\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV33 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV33 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV33,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV33,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV33 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV33)];\n\n        this.PackMapEnvDataWaterV33 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataWindV33 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV33 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV33),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV33),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV33),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV33),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV33),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV33),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV33),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV33),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV33),\n          \"name\",\n          Utils.getString16Reader(),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV33 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV33 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV33),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV33),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV33),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV33),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV33),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV33),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV33),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV33),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV33),\n          \"name\",\n          Utils.getString16Reader(),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV33),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV33 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV33),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV33),\n        ];\n      },\n\n      // => Version: 32, ReferencedFunction: 0xEB7D60\n      32: function () {\n        this.PackMapEnvDataLightV32 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV32 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV32)];\n\n        this.PackMapEnvDataLayerAttributesV32 = [\n          \"density\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV32 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"attributes\",\n          Utils.getArrayReader(this.PackMapEnvDataLayerAttributesV32),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV32 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV32)];\n\n        this.PackMapEnvDataEffectV32 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV32 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV32 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyV32 = [\n          \"flags\",\n          \"uint8\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV32 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV32 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV32,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV32,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV32 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV32)];\n\n        this.PackMapEnvDataWaterV32 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataWindV32 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV32 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV32),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV32),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV32),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV32),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV32),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV32),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV32),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV32),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV32),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV32 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV32 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV32),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV32),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV32),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV32),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV32),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV32),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV32),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV32),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV32),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV32),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV32 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV32),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV32),\n        ];\n      },\n\n      // => Version: 31, ReferencedFunction: 0xEB7CF0\n      31: function () {\n        this.PackMapEnvDataLightV31 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV31 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV31)];\n\n        this.PackMapEnvDataLayerAttributesV31 = [\n          \"density\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV31 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"day\",\n          this.PackMapEnvDataLayerAttributesV31,\n          \"night\",\n          this.PackMapEnvDataLayerAttributesV31,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV31 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV31)];\n\n        this.PackMapEnvDataEffectV31 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV31 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV31 = [\n          \"altitude\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"depth\",\n          \"float32\",\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fade\",\n          \"float32\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyV31 = [\n          \"flags\",\n          \"uint8\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV31 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV31 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV31,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV31,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV31 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV31)];\n\n        this.PackMapEnvDataWaterV31 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"patternEdge\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataWindV31 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV31 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV31),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV31),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV31),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV31),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV31),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV31),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV31),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV31),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV31),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV31 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV31 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV31),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV31),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV31),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV31),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV31),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV31),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV31),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV31),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV31),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV31),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV31 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV31),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV31),\n        ];\n      },\n\n      // => Version: 30, ReferencedFunction: 0xEB7C70\n      30: function () {\n        this.PackMapEnvDataLightV30 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV30 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV30)];\n\n        this.PackMapEnvDataLayerAttributesV30 = [\n          \"density\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV30 = [\n          \"altitude\",\n          \"float32\",\n          \"cutOut\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"day\",\n          this.PackMapEnvDataLayerAttributesV30,\n          \"night\",\n          this.PackMapEnvDataLayerAttributesV30,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV30 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV30)];\n\n        this.PackMapEnvDataEffectV30 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV30 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV30 = [\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyV30 = [\n          \"flags\",\n          \"uint8\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV30 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV30 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV30,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV30,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV30 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV30)];\n\n        this.PackMapEnvDataWaterV30 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataWindV30 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV30 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV30),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV30),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV30),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV30),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV30),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV30),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV30),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV30),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV30),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV30 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV30 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV30),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV30),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV30),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV30),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV30),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV30),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV30),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV30),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV30),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV30),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV30 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV30),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV30),\n        ];\n      },\n\n      // => Version: 29\n      29: function () {\n        this.PackMapEnvDataLightV29 = [\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapEnvDataLightingV29 = [\"lights\", Utils.getRefArrayReader(this.PackMapEnvDataLightV29)];\n\n        this.PackMapEnvDataLayerAttributesV29 = [\n          \"density\",\n          \"float32\",\n          \"depth\",\n          \"float32\",\n          \"haze\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackMapEnvDataLayerV29 = [\n          \"altitude\",\n          \"float32\",\n          \"scale\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"day\",\n          this.PackMapEnvDataLayerAttributesV29,\n          \"night\",\n          this.PackMapEnvDataLayerAttributesV29,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataCloudsV29 = [\"layers\", Utils.getArrayReader(this.PackMapEnvDataLayerV29)];\n\n        this.PackMapEnvDataEffectV29 = [\n          \"glow\",\n          [\"[]\", \"uint8\", 4],\n          \"tintColor\",\n          [\"[]\", \"uint8\", 4],\n          \"saturation\",\n          \"float32\",\n          \"tintAmount\",\n          \"float32\",\n          \"glowLevel\",\n          [\"[]\", \"uint8\", 4],\n          \"glowAmplify\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataHazeV29 = [\n          \"distColor\",\n          [\"[]\", \"uint8\", 4],\n          \"distRange\",\n          [\"[]\", \"float32\", 2],\n          \"heightColor\",\n          [\"[]\", \"uint8\", 4],\n          \"heightRange\",\n          [\"[]\", \"float32\", 2],\n          \"depthCue\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataPFieldV29 = [\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"deviation\",\n          \"float32\",\n          \"extent\",\n          \"uint16\",\n          \"fieldDirection\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint8\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"particleCount\",\n          \"uint16\",\n          \"rotation\",\n          [\"[]\", \"float32\", 2],\n          \"scaleX\",\n          [\"[]\", \"float32\", 2],\n          \"scaleY\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          [\"[]\", \"float32\", 2],\n          \"texColRow\",\n          [\"[]\", \"uint32\", 2],\n          \"texFPS\",\n          \"uint16\",\n          \"texPath\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint8\",\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyV29 = [\n          \"flags\",\n          \"uint8\",\n          \"dayHazeBottom\",\n          \"float32\",\n          \"dayHazeDensity\",\n          \"float32\",\n          \"dayHazeFalloff\",\n          \"float32\",\n          \"dayLightIntensity\",\n          \"float32\",\n          \"dayStarDensity\",\n          \"float32\",\n          \"nightHazeBottom\",\n          \"float32\",\n          \"nightHazeDensity\",\n          \"float32\",\n          \"nightHazeFalloff\",\n          \"float32\",\n          \"nightLightIntensity\",\n          \"float32\",\n          \"nightStarDensity\",\n          \"float32\",\n        ];\n\n        this.PackMapEnvDataSkyCardAttributesV29 = [\n          \"azimuth\",\n          \"float32\",\n          \"density\",\n          \"float32\",\n          \"hazeDensity\",\n          \"float32\",\n          \"latitude\",\n          \"float32\",\n          \"lightIntensity\",\n          \"float32\",\n          \"minHaze\",\n          \"float32\",\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"speed\",\n          \"float32\",\n          \"texture\",\n          Utils.getFileNameReader(),\n          \"textureUV\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.PackMapEnvDataSkyCardV29 = [\n          \"day\",\n          this.PackMapEnvDataSkyCardAttributesV29,\n          \"night\",\n          this.PackMapEnvDataSkyCardAttributesV29,\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapEnvDataSkyCardsV29 = [\"cards\", Utils.getArrayReader(this.PackMapEnvDataSkyCardV29)];\n\n        this.PackMapEnvDataWaterV29 = [\n          \"waterFlags\",\n          \"uint32\",\n          \"animAmplitude\",\n          \"float32\",\n          \"animChoppiness\",\n          \"float32\",\n          \"animWind\",\n          [\"[]\", \"float32\", 2],\n          \"bumpAmount\",\n          \"float32\",\n          \"bumpAngle0\",\n          \"float32\",\n          \"bumpAngle1\",\n          \"float32\",\n          \"bumpScale0\",\n          \"float32\",\n          \"bumpScale1\",\n          \"float32\",\n          \"bumpSpeed0\",\n          \"float32\",\n          \"bumpSpeed1\",\n          \"float32\",\n          \"bumpTile0\",\n          \"float32\",\n          \"bumpTile1\",\n          \"float32\",\n          \"patternAngle\",\n          \"float32\",\n          \"patternTile\",\n          \"float32\",\n          \"patternSpeed\",\n          \"float32\",\n          \"surfaceShallowColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceDeepColor\",\n          [\"[]\", \"uint8\", 4],\n          \"patternColor\",\n          [\"[]\", \"uint8\", 4],\n          \"surfaceFresnel\",\n          \"float32\",\n          \"distortAmount\",\n          \"float32\",\n          \"bumpTexture\",\n          Utils.getFileNameReader(),\n          \"patternTexture\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataWindV29 = [\n          \"azimuth\",\n          \"uint8\",\n          \"elevation\",\n          \"uint8\",\n          \"noise\",\n          \"uint8\",\n          \"speed\",\n          \"uint8\",\n          \"gust\",\n          \"uint8\",\n          \"gustFreq\",\n          \"uint8\",\n        ];\n\n        this.PackMapEnvDataLocalV29 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV29),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV29),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV29),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV29),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV29),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV29),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV29),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV29),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV29),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"zRange\",\n          [\"[]\", \"float32\", 2],\n          \"fadeHorizInner\",\n          \"float32\",\n          \"fadeHorizOuter\",\n          \"float32\",\n          \"fadeVertical\",\n          \"float32\",\n          \"type\",\n          \"uint8\",\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.PackMapEnvDataSkyModeTexV29 = [\n          \"texPathNE\",\n          Utils.getFileNameReader(),\n          \"texPathSW\",\n          Utils.getFileNameReader(),\n          \"texPathT\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapEnvDataGlobalV29 = [\n          \"lighting\",\n          Utils.getArrayReader(this.PackMapEnvDataLightingV29),\n          \"clouds\",\n          Utils.getPointerReader(this.PackMapEnvDataCloudsV29),\n          \"effect\",\n          Utils.getRefArrayReader(this.PackMapEnvDataEffectV29),\n          \"haze\",\n          Utils.getRefArrayReader(this.PackMapEnvDataHazeV29),\n          \"particleFields\",\n          Utils.getRefArrayReader(this.PackMapEnvDataPFieldV29),\n          \"sky\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyV29),\n          \"skyCards\",\n          Utils.getPointerReader(this.PackMapEnvDataSkyCardsV29),\n          \"water\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWaterV29),\n          \"wind\",\n          Utils.getRefArrayReader(this.PackMapEnvDataWindV29),\n          \"skyModeTex\",\n          Utils.getArrayReader(this.PackMapEnvDataSkyModeTexV29),\n          \"starFile\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapEnvironmentV29 = [\n          \"dataLocalArray\",\n          Utils.getArrayReader(this.PackMapEnvDataLocalV29),\n          \"dataGlobal\",\n          Utils.getPointerReader(this.PackMapEnvDataGlobalV29),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: eula, versions: 1, strucTab: 0x18843EC\n  /// ==================================================\n\n  {\n    name: \"eula\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackEulaLanguageV0 = [\"Language\", \"uint8\", \"Text\", Utils.getString16Reader()];\n\n        this.__root = this.PackEulaV0 = [\"Language\", Utils.getArrayReader(this.PackEulaLanguageV0), \"Version\", \"uint8\"];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: exp, versions: 1, strucTab: 0x1720B58\n  /// ==================================================\n\n  {\n    name: \"exp\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.MapExpansionProperty = [\n          \"type\",\n          \"uint32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.MapExpansionProperties = [\"properties\", Utils.getArrayReader(this.MapExpansionProperty)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: EXPA, versions: 4, strucTab: 0x1773290\n  /// ==================================================\n\n  {\n    name: \"EXPA\",\n    versions: {\n      // => Version: 3\n      3: function () {\n        this.ModelFileSnapPointV3 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"shape\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.ModelExpansionEmitterV3 = [\n          \"curl\",\n          \"float32\",\n          \"vortexSize\",\n          \"float32\",\n          \"curlQuality\",\n          \"uint32\",\n          \"curlFlags\",\n          \"uint32\",\n          \"fieldScale\",\n          \"float32\",\n        ];\n\n        this.__root = this.ModelFileExpansionV3 = [\n          \"snapPoints\",\n          Utils.getArrayReader(this.ModelFileSnapPointV3),\n          \"snapPointPriority\",\n          \"float32\",\n          \"emitters\",\n          Utils.getArrayReader(this.ModelExpansionEmitterV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.ModelFileSnapPointV2 = [\"bone\", Utils.getQWordReader(), \"shape\", Utils.getQWordReader()];\n\n        this.ModelExpansionEmitterV2 = [\n          \"curl\",\n          \"float32\",\n          \"vortexSize\",\n          \"float32\",\n          \"curlQuality\",\n          \"uint32\",\n          \"curlFlags\",\n          \"uint32\",\n          \"fieldScale\",\n          \"float32\",\n        ];\n\n        this.__root = this.ModelFileExpansionV2 = [\n          \"snapPoints\",\n          Utils.getArrayReader(this.ModelFileSnapPointV2),\n          \"snapPointPriority\",\n          \"float32\",\n          \"emitters\",\n          Utils.getArrayReader(this.ModelExpansionEmitterV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.ModelFileSnapPointV1 = [\"bone\", Utils.getQWordReader()];\n\n        this.ModelExpansionEmitterV1 = [\n          \"curl\",\n          \"float32\",\n          \"vortexSize\",\n          \"float32\",\n          \"curlQuality\",\n          \"uint32\",\n          \"curlFlags\",\n          \"uint32\",\n          \"fieldScale\",\n          \"float32\",\n        ];\n\n        this.__root = this.ModelFileExpansionV1 = [\n          \"snapPoints\",\n          Utils.getArrayReader(this.ModelFileSnapPointV1),\n          \"snapPointPriority\",\n          \"float32\",\n          \"emitters\",\n          Utils.getArrayReader(this.ModelExpansionEmitterV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ModelFileSnapPointV0 = [\"bone\", Utils.getQWordReader()];\n\n        this.ModelExpansionEmitterV0 = [\"curl\", \"float32\", \"vortexSize\", \"float32\"];\n\n        this.__root = this.ModelFileExpansionV0 = [\n          \"snapPoints\",\n          Utils.getArrayReader(this.ModelFileSnapPointV0),\n          \"snapPointPriority\",\n          \"float32\",\n          \"emitters\",\n          Utils.getArrayReader(this.ModelExpansionEmitterV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: fall, versions: 1, strucTab: 0x1884460\n  /// ==================================================\n\n  {\n    name: \"fall\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackAnimFallbackV0 = [\n          \"sourceAnim\",\n          Utils.getQWordReader(),\n          \"targetAnims\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.PackAnimFallbacksV0 = [\"fallbacks\", Utils.getArrayReader(this.PackAnimFallbackV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: GAME, versions: 1, strucTab: 0x17731A4\n  /// ==================================================\n\n  {\n    name: \"GAME\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.__root = this.ModelFileGame = [\"gameData\", Utils.getArrayReader(\"uint8\")];\n      },\n    },\n  },\n\n  /// ==================================================\n  /// Chunk: GAME, versions: 7, strucTab: 0x1830508\n  /// ==================================================\n\n  {\n    name: \"GAME\",\n    versions: {\n      // => Version: 6\n      6: function () {\n        this.ScenePathNodeV6 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n          \"singlesided\",\n          \"uint8\",\n        ];\n\n        this.ScenePathV6 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV6),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV6 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV6 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV6),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneGameSurfaceV6 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.__root = this.SceneFileGameV6 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV6),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV6),\n          \"surfaces\",\n          Utils.getArrayReader(this.SceneGameSurfaceV6),\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.ScenePathNodeV5 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n          \"singlesided\",\n          \"uint8\",\n        ];\n\n        this.ScenePathV5 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV5),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV5 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV5 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV5),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaceFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.__root = this.SceneFileGameV5 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV5),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV5),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.ScenePathNodeV4 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n          \"singlesided\",\n          \"uint8\",\n        ];\n\n        this.ScenePathV4 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV4),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV4 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV4 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV4),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaceFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.SceneGrabNodeV4 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n        ];\n\n        this.__root = this.SceneFileGameV4 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV4),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV4),\n          \"grabPoints\",\n          Utils.getArrayReader(this.SceneGrabNodeV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.ScenePathNodeV3 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n        ];\n\n        this.ScenePathV3 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV3),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV3 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV3 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV3),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaceFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.SceneGrabNodeV3 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n        ];\n\n        this.__root = this.SceneFileGameV3 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV3),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV3),\n          \"grabPoints\",\n          Utils.getArrayReader(this.SceneGrabNodeV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.ScenePathNodeV2 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n        ];\n\n        this.ScenePathV2 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV2),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV2 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV2 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV2),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneGrabNodeV2 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n        ];\n\n        this.__root = this.SceneFileGameV2 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV2),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV2),\n          \"grabPoints\",\n          Utils.getArrayReader(this.SceneGrabNodeV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.ScenePathNodeV1 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n        ];\n\n        this.ScenePathV1 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV1),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV1 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV1 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV1),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.SceneFileGameV1 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV1),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ScenePathNodeV0 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.ScenePathV0 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV0),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV0 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV0 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV0),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.SceneFileGameV0 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV0),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: GEOM, versions: 2, strucTab: 0x1773278\n  /// ==================================================\n\n  {\n    name: \"GEOM\",\n    versions: {\n      // => Version: 1, ReferencedFunction: 0xF28010\n      1: function () {\n        this.ModelMeshMorphVertV66 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV66 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV66),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV66),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshVertexDataV1 = [\"vertexCount\", \"uint32\", \"mesh\", this.PackVertexType];\n\n        this.ModelMeshIndexDataV1 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshGeometryV1 = [\n          \"verts\",\n          this.ModelMeshVertexDataV1,\n          \"indices\",\n          this.ModelMeshIndexDataV1,\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshIndexDataV1),\n          \"transforms\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelMeshDataV66 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV66),\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n          \"boneBindings\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"geometry\",\n          Utils.getPointerReader(this.ModelMeshGeometryV1),\n        ];\n\n        this.__root = this.ModelFileGeometryV1 = [\"meshes\", Utils.getRefArrayReader(this.ModelMeshDataV66)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ModelMeshMorphVertV65 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV65 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV65),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV65),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshVertexDataV0 = [\"vertexCount\", \"uint32\", \"mesh\", this.PackVertexType];\n\n        this.ModelMeshIndexDataV0 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshGeometryV0 = [\n          \"verts\",\n          this.ModelMeshVertexDataV0,\n          \"indices\",\n          this.ModelMeshIndexDataV0,\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshIndexDataV0),\n        ];\n\n        this.ModelMeshDataV65 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV65),\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n          \"boneNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"geometry\",\n          Utils.getPointerReader(this.ModelMeshGeometryV0),\n        ];\n\n        this.__root = this.ModelFileGeometryV0 = [\"meshes\", Utils.getRefArrayReader(this.ModelMeshDataV65)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: GR2S, versions: 5, strucTab: 0x177309C\n  /// ==================================================\n\n  {\n    name: \"GR2S\",\n    versions: {\n      // => Version: 4, ReferencedFunction: 0xF28C30\n      4: function () {\n        this.ModelGr2DataV4 = [\n          \"filename\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.ModelFileGr2sV4 = [\"gr2Data\", Utils.getArrayReader(this.ModelGr2DataV4)];\n      },\n\n      // => Version: 3, ReferencedFunction: 0xF28880\n      3: function () {\n        this.ModelGr2DataV3 = [\n          \"filename\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.ModelFileGr2sV3 = [\"gr2Data\", Utils.getArrayReader(this.ModelGr2DataV3)];\n      },\n\n      // => Version: 2, ReferencedFunction: 0xF282D0\n      2: function () {\n        this.ModelGr2DataV2 = [\n          \"filename\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.ModelFileGr2sV2 = [\"gr2Data\", Utils.getArrayReader(this.ModelGr2DataV2)];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.ModelGr2DataV1 = [\n          \"filename\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.ModelFileGr2sV1 = [\"gr2Data\", Utils.getArrayReader(this.ModelGr2DataV1)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ModelGr2DataV0 = [\"data\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.ModelFileGr2sV0 = [\"gr2Data\", Utils.getArrayReader(this.ModelGr2DataV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: GRMT, versions: 7, strucTab: 0x1528A80\n  /// ==================================================\n\n  {\n    name: \"GRMT\",\n    versions: {\n      // => Version: 6\n      6: function () {\n        this.__root = this.AmatGr = [\n          \"texArrayRange\",\n          \"uint8\",\n          \"texCount\",\n          \"uint8\",\n          \"sortOrder\",\n          \"uint8\",\n          \"sortTri\",\n          \"uint8\",\n          \"procAnim\",\n          \"uint8\",\n          \"debugFlags\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"texTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.__root = this.AmatGr = [\n          \"texArrayRange\",\n          \"uint8\",\n          \"texCount\",\n          \"uint8\",\n          \"texTransformRange\",\n          \"uint8\",\n          \"sortOrder\",\n          \"uint8\",\n          \"sortTri\",\n          \"uint8\",\n          \"procAnim\",\n          \"uint8\",\n          \"debugFlags\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"texType\",\n          \"uint32\",\n          \"textureMasks\",\n          [\"[]\", \"uint32\", 4],\n          \"texTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.__root = this.AmatGr = [\n          \"texArrayRange\",\n          \"uint8\",\n          \"texCount\",\n          \"uint8\",\n          \"texTransformRange\",\n          \"uint8\",\n          \"sortOrder\",\n          \"uint8\",\n          \"sortTri\",\n          \"uint8\",\n          \"procAnim\",\n          \"uint8\",\n          \"debugFlags\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"texType\",\n          \"uint32\",\n          \"textureMasks\",\n          [\"[]\", \"uint32\", 4],\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.__root = this.AmatGrV3 = [\n          \"texArrayRange\",\n          \"uint8\",\n          \"texCount\",\n          \"uint8\",\n          \"texTransformRange\",\n          \"uint8\",\n          \"sortOrder\",\n          \"uint8\",\n          \"sortTri\",\n          \"uint8\",\n          \"debugFlags\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"texType\",\n          \"uint32\",\n          \"textureMasks\",\n          [\"[]\", \"uint32\", 4],\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.__root = this.AmatGrV2 = [\n          \"texArrayRange\",\n          \"uint8\",\n          \"texCount\",\n          \"uint8\",\n          \"texTransformRange\",\n          \"uint8\",\n          \"sortOrder\",\n          \"uint8\",\n          \"sortTri\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"texType\",\n          \"uint32\",\n          \"textureMasks\",\n          [\"[]\", \"uint32\", 4],\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.__root = this.AmatGrV1 = [\n          \"texArrayRange\",\n          \"uint8\",\n          \"texCount\",\n          \"uint8\",\n          \"texTransformRange\",\n          \"uint8\",\n          \"sortOrder\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"texType\",\n          \"uint32\",\n          \"textureMasks\",\n          [\"[]\", \"uint32\", 4],\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.__root = this.AmatGrV0 = [\n          \"texArrayRange\",\n          \"uint8\",\n          \"texCount\",\n          \"uint8\",\n          \"texTransformRange\",\n          \"uint8\",\n          \"sortOrder\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"textureMasks\",\n          [\"[]\", \"uint32\", 4],\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: havk, versions: 15, strucTab: 0x1723760\n  /// ==================================================\n\n  {\n    name: \"havk\",\n    versions: {\n      // => Version: 14, ReferencedFunction: 0xEBA840\n      14: function () {\n        this.PackMoppType = [\"moppData\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapCollideCollisionV14 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint16\"),\n          \"moppCodeData\",\n          this.PackMoppType,\n        ];\n\n        this.PackMapCollideBlockerV14 = [\"vertices\", Utils.getArrayReader([\"[]\", \"float32\", 3])];\n\n        this.PackMapCollideNavMeshV14 = [\n          \"navMesh\",\n          Utils.getArrayReader(\"uint8\"),\n          \"graph\",\n          Utils.getArrayReader(\"uint8\"),\n          \"mediator\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapCollideAnimationV14 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"collisionIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blockerIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapCollideGeometryV14 = [\n          \"quantizedExtents\",\n          \"uint8\",\n          \"animations\",\n          Utils.getArrayReader(\"uint32\"),\n          \"navMeshIndex\",\n          \"uint16\",\n        ];\n\n        this.PackMapCollideModelObsV14 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.PackMapCollideModelPropV14 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideModelZoneV14 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapCollideV14 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"collisions\",\n          Utils.getArrayReader(this.PackMapCollideCollisionV14),\n          \"blockers\",\n          Utils.getArrayReader(this.PackMapCollideBlockerV14),\n          \"navMeshes\",\n          Utils.getArrayReader(this.PackMapCollideNavMeshV14),\n          \"animations\",\n          Utils.getArrayReader(this.PackMapCollideAnimationV14),\n          \"geometries\",\n          Utils.getArrayReader(this.PackMapCollideGeometryV14),\n          \"obsModels\",\n          Utils.getArrayReader(this.PackMapCollideModelObsV14),\n          \"propModels\",\n          Utils.getArrayReader(this.PackMapCollideModelPropV14),\n          \"zoneModels\",\n          Utils.getArrayReader(this.PackMapCollideModelZoneV14),\n        ];\n      },\n\n      // => Version: 13, ReferencedFunction: 0xEBA4F0\n      13: function () {\n        this.PackMapCollideCollisionV13 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint16\"),\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapCollideBlockerV13 = [\"vertices\", Utils.getArrayReader([\"[]\", \"float32\", 3])];\n\n        this.PackMapCollideAnimationV13 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"collisionIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"blockerIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapCollideGeometryV13 = [\"quantizedExtents\", \"uint8\", \"animations\", Utils.getArrayReader(\"uint32\")];\n\n        this.PackMapCollideModelObsV13 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.PackMapCollideModelPropV13 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideModelZoneV13 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapCollideV13 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"collisions\",\n          Utils.getArrayReader(this.PackMapCollideCollisionV13),\n          \"blockers\",\n          Utils.getArrayReader(this.PackMapCollideBlockerV13),\n          \"animations\",\n          Utils.getArrayReader(this.PackMapCollideAnimationV13),\n          \"geometries\",\n          Utils.getArrayReader(this.PackMapCollideGeometryV13),\n          \"obsModels\",\n          Utils.getArrayReader(this.PackMapCollideModelObsV13),\n          \"propModels\",\n          Utils.getArrayReader(this.PackMapCollideModelPropV13),\n          \"zoneModels\",\n          Utils.getArrayReader(this.PackMapCollideModelZoneV13),\n        ];\n      },\n\n      // => Version: 12\n      12: function () {\n        this.PackMapCollideMeshV12 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint16\"),\n          \"moppCodeScale\",\n          \"float32\",\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapCollideMeshRefV12 = [\"sequence\", Utils.getQWordReader(), \"meshIndex\", \"uint32\"];\n\n        this.PackMapCollideGeometryV12 = [\n          \"quantizedExtents\",\n          \"uint8\",\n          \"meshRefs\",\n          Utils.getArrayReader(this.PackMapCollideMeshRefV12),\n        ];\n\n        this.PackMapCollideModelObsV12 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.PackMapCollideModelPropV12 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideModelZoneV12 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideAiChunkV12 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapCollideV12 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"meshes\",\n          Utils.getArrayReader(this.PackMapCollideMeshV12),\n          \"geometries\",\n          Utils.getArrayReader(this.PackMapCollideGeometryV12),\n          \"obsModels\",\n          Utils.getArrayReader(this.PackMapCollideModelObsV12),\n          \"propModels\",\n          Utils.getArrayReader(this.PackMapCollideModelPropV12),\n          \"zoneModels\",\n          Utils.getArrayReader(this.PackMapCollideModelZoneV12),\n          \"aiChunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"aiChunks\",\n          Utils.getArrayReader(this.PackMapCollideAiChunkV12),\n        ];\n      },\n\n      // => Version: 11\n      11: function () {\n        this.PackMapCollideMeshV11 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeScale\",\n          \"float32\",\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapCollideMeshRefV11 = [\"sequence\", Utils.getQWordReader(), \"meshIndex\", \"uint32\"];\n\n        this.PackMapCollideGeometryV11 = [\n          \"quantizedExtents\",\n          \"uint8\",\n          \"meshRefs\",\n          Utils.getArrayReader(this.PackMapCollideMeshRefV11),\n        ];\n\n        this.PackMapCollideModelObsV11 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.PackMapCollideModelPropV11 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideModelZoneV11 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideAiChunkV11 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapCollideV11 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"meshes\",\n          Utils.getArrayReader(this.PackMapCollideMeshV11),\n          \"geometries\",\n          Utils.getArrayReader(this.PackMapCollideGeometryV11),\n          \"obsModels\",\n          Utils.getArrayReader(this.PackMapCollideModelObsV11),\n          \"propModels\",\n          Utils.getArrayReader(this.PackMapCollideModelPropV11),\n          \"zoneModels\",\n          Utils.getArrayReader(this.PackMapCollideModelZoneV11),\n          \"aiChunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"aiChunks\",\n          Utils.getArrayReader(this.PackMapCollideAiChunkV11),\n        ];\n      },\n\n      // => Version: 10\n      10: function () {\n        this.PackMapCollideMeshV10 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeScale\",\n          \"float32\",\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapCollideMeshRefV10 = [\"sequence\", Utils.getQWordReader(), \"meshIndex\", \"uint32\"];\n\n        this.PackMapCollideGeometryV10 = [\"meshRefs\", Utils.getArrayReader(this.PackMapCollideMeshRefV10)];\n\n        this.PackMapCollideModelObsV10 = [\"geometryIndex\", \"uint32\"];\n\n        this.PackMapCollideModelPropV10 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideModelZoneV10 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideAiChunkV10 = [\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapCollideV10 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"meshes\",\n          Utils.getArrayReader(this.PackMapCollideMeshV10),\n          \"geometries\",\n          Utils.getArrayReader(this.PackMapCollideGeometryV10),\n          \"obsModels\",\n          Utils.getArrayReader(this.PackMapCollideModelObsV10),\n          \"propModels\",\n          Utils.getArrayReader(this.PackMapCollideModelPropV10),\n          \"zoneModels\",\n          Utils.getArrayReader(this.PackMapCollideModelZoneV10),\n          \"aiBoundaryMin\",\n          [\"[]\", \"float32\", 3],\n          \"aiBoundaryMax\",\n          [\"[]\", \"float32\", 3],\n          \"aiChunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"aiChunks\",\n          Utils.getArrayReader(this.PackMapCollideAiChunkV10),\n        ];\n      },\n\n      // => Version: 9\n      9: function () {\n        this.PackMapCollideMeshV9 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeScale\",\n          \"float32\",\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapCollideMeshRefV9 = [\"sequence\", Utils.getQWordReader(), \"meshIndex\", \"uint32\"];\n\n        this.PackMapCollideGeometryV9 = [\"meshRefs\", Utils.getArrayReader(this.PackMapCollideMeshRefV9)];\n\n        this.PackMapCollideModelObsV9 = [\"geometryIndex\", \"uint32\"];\n\n        this.PackMapCollideModelPropV9 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideModelZoneV9 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideAiChunkV9 = [\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapCollideV9 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"meshes\",\n          Utils.getArrayReader(this.PackMapCollideMeshV9),\n          \"geometries\",\n          Utils.getArrayReader(this.PackMapCollideGeometryV9),\n          \"obsModels\",\n          Utils.getArrayReader(this.PackMapCollideModelObsV9),\n          \"propModels\",\n          Utils.getArrayReader(this.PackMapCollideModelPropV9),\n          \"zoneModels\",\n          Utils.getArrayReader(this.PackMapCollideModelZoneV9),\n          \"aiBoundaryMin\",\n          [\"[]\", \"float32\", 3],\n          \"aiBoundaryMax\",\n          [\"[]\", \"float32\", 3],\n          \"aiChunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"aiChunks\",\n          Utils.getArrayReader(this.PackMapCollideAiChunkV9),\n        ];\n      },\n\n      // => Version: 8, ReferencedFunction: 0xEBA8B0\n      8: function () {\n        this.PackMapCollideMeshV8 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeScale\",\n          \"float32\",\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapCollideMeshRefV8 = [\"sequence\", Utils.getQWordReader(), \"meshIndex\", \"uint32\"];\n\n        this.PackMapCollideGeometryV8 = [\"meshRefs\", Utils.getArrayReader(this.PackMapCollideMeshRefV8)];\n\n        this.PackMapCollideModelPropV8 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideModelZoneV8 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideAiChunkV8 = [\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapCollideV8 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"meshes\",\n          Utils.getArrayReader(this.PackMapCollideMeshV8),\n          \"geometries\",\n          Utils.getArrayReader(this.PackMapCollideGeometryV8),\n          \"propModels\",\n          Utils.getArrayReader(this.PackMapCollideModelPropV8),\n          \"zoneModels\",\n          Utils.getArrayReader(this.PackMapCollideModelZoneV8),\n          \"aiBoundaryMin\",\n          [\"[]\", \"float32\", 3],\n          \"aiBoundaryMax\",\n          [\"[]\", \"float32\", 3],\n          \"aiChunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"aiChunks\",\n          Utils.getArrayReader(this.PackMapCollideAiChunkV8),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.PackMapCollideMoppCodeV7 = [\"cookedData\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapCollideMeshSizeV7 = [\"scale\", \"float32\", \"moppCodeIndex\", \"uint32\"];\n\n        this.PackMapCollideMeshV7 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"sizes\",\n          Utils.getArrayReader(this.PackMapCollideMeshSizeV7),\n        ];\n\n        this.PackMapCollideMeshRefV7 = [\"sequence\", Utils.getQWordReader(), \"meshIndex\", \"uint32\"];\n\n        this.PackMapCollideGeometryV7 = [\"meshRefs\", Utils.getArrayReader(this.PackMapCollideMeshRefV7)];\n\n        this.PackMapCollideModelPropV7 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideModelZoneV7 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideAiChunkV7 = [\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapCollideV7 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"moppCodes\",\n          Utils.getArrayReader(this.PackMapCollideMoppCodeV7),\n          \"meshes\",\n          Utils.getArrayReader(this.PackMapCollideMeshV7),\n          \"geometries\",\n          Utils.getArrayReader(this.PackMapCollideGeometryV7),\n          \"propModels\",\n          Utils.getArrayReader(this.PackMapCollideModelPropV7),\n          \"zoneModels\",\n          Utils.getArrayReader(this.PackMapCollideModelZoneV7),\n          \"aiBoundaryMin\",\n          [\"[]\", \"float32\", 3],\n          \"aiBoundaryMax\",\n          [\"[]\", \"float32\", 3],\n          \"aiChunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"aiChunks\",\n          Utils.getArrayReader(this.PackMapCollideAiChunkV7),\n        ];\n      },\n\n      // => Version: 6\n      6: function () {\n        this.PackMapCollideMoppCodeV6 = [\"cookedData\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapCollideMeshSizeV6 = [\"scale\", \"float32\", \"moppCodeIndex\", \"uint32\"];\n\n        this.PackMapCollideMeshV6 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"sizes\",\n          Utils.getArrayReader(this.PackMapCollideMeshSizeV6),\n        ];\n\n        this.PackMapCollideMeshRefV6 = [\"sequence\", Utils.getQWordReader(), \"meshIndex\", \"uint32\"];\n\n        this.PackMapCollideGeometryV6 = [\"meshRefs\", Utils.getArrayReader(this.PackMapCollideMeshRefV6)];\n\n        this.PackMapCollideModelPropV6 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapCollideModelZoneV6 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapCollideV6 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"moppCodes\",\n          Utils.getArrayReader(this.PackMapCollideMoppCodeV6),\n          \"meshes\",\n          Utils.getArrayReader(this.PackMapCollideMeshV6),\n          \"geometries\",\n          Utils.getArrayReader(this.PackMapCollideGeometryV6),\n          \"propModels\",\n          Utils.getArrayReader(this.PackMapCollideModelPropV6),\n          \"zoneModels\",\n          Utils.getArrayReader(this.PackMapCollideModelZoneV6),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: ICON, versions: 1, strucTab: 0x1773248\n  /// ==================================================\n\n  {\n    name: \"ICON\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.__root = this.ModelFileIcon = [\"jpgData\", Utils.getArrayReader(\"uint8\")];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: laye, versions: 1, strucTab: 0x1720B64\n  /// ==================================================\n\n  {\n    name: \"laye\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackMapLayerProp = [\"guid\", Utils.getQWordReader(), \"layerIds\", Utils.getArrayReader(\"uint32\")];\n\n        this.PackMapLayer = [\"layerId\", \"uint32\", \"metaData\", Utils.getArrayReader([\"[]\", \"uint32\", 4])];\n\n        this.__root = this.PackMapLayers = [\n          \"props\",\n          Utils.getArrayReader(this.PackMapLayerProp),\n          \"layers\",\n          Utils.getArrayReader(this.PackMapLayer),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: lght, versions: 18, strucTab: 0x1720FD0\n  /// ==================================================\n\n  {\n    name: \"lght\",\n    versions: {\n      // => Version: 17\n      17: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapPortalData = [\n          \"fadeCamera\",\n          \"float32\",\n          \"fadeLight\",\n          \"float32\",\n          \"lighten\",\n          \"float32\",\n          \"darken\",\n          \"float32\",\n        ];\n\n        this.PackMapPortalLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"portalData\",\n          Utils.getArrayReader(this.PackMapPortalData),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapSpotShadow = [\"shadowFilename\", Utils.getFileNameReader()];\n\n        this.PackMapSpotLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"upDirection\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n          \"shadowData\",\n          Utils.getPointerReader(this.PackMapSpotShadow),\n        ];\n\n        this.PackMapSpotLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapSpotLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoints\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"flags\",\n          \"uint32\",\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"portalLights\",\n          Utils.getArrayReader(this.PackMapPortalLight),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapSpotLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 16\n      16: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapPortalData = [\n          \"fadeCamera\",\n          \"float32\",\n          \"fadeLight\",\n          \"float32\",\n          \"lighten\",\n          \"float32\",\n          \"darken\",\n          \"float32\",\n        ];\n\n        this.PackMapPortalLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"portalData\",\n          Utils.getArrayReader(this.PackMapPortalData),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapSpotShadow = [\"shadowFilename\", Utils.getFileNameReader()];\n\n        this.PackMapSpotLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n          \"shadowData\",\n          Utils.getPointerReader(this.PackMapSpotShadow),\n        ];\n\n        this.PackMapSpotLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapSpotLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoints\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"flags\",\n          \"uint32\",\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"portalLights\",\n          Utils.getArrayReader(this.PackMapPortalLight),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapSpotLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 15, ReferencedFunction: 0xEB9730\n      15: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapPortalData = [\n          \"fadeCamera\",\n          \"float32\",\n          \"fadeLight\",\n          \"float32\",\n          \"lighten\",\n          \"float32\",\n          \"darken\",\n          \"float32\",\n        ];\n\n        this.PackMapPortalLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"portalData\",\n          Utils.getArrayReader(this.PackMapPortalData),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapSpotLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoints\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"flags\",\n          \"uint32\",\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapLightsV15 = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"portalLights\",\n          Utils.getArrayReader(this.PackMapPortalLight),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapSpotLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 14\n      14: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapProtalLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"fadeCamera\",\n          \"float32\",\n          \"fadeLight\",\n          \"float32\",\n          \"lighten\",\n          \"float32\",\n          \"darken\",\n          \"float32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapSpotLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoints\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"flags\",\n          \"uint32\",\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapLightsV14 = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"portalLights\",\n          Utils.getArrayReader(this.PackMapProtalLight),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapSpotLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 13, ReferencedFunction: 0xEB95D0\n      13: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoints\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"flags\",\n          \"uint32\",\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapLightgroups),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 12, ReferencedFunction: 0xEB9310\n      12: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoint\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapLightgroups),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 11, ReferencedFunction: 0xEB9310\n      11: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoint\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapLightgroups),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 10, ReferencedFunction: 0xEB9F20\n      10: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoint\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n        ];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapLightgroups),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n        ];\n      },\n\n      // => Version: 9, ReferencedFunction: 0xEB9E60\n      9: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          \"uint32\",\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"extents\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoint\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n        ];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapLightgroups),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n        ];\n      },\n\n      // => Version: 8, ReferencedFunction: 0xEB9DE0\n      8: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          \"uint32\",\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"minExt\",\n          [\"[]\", \"float32\", 3],\n          \"maxExt\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"floodPoint\",\n          [\"[]\", \"float32\", 3],\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n        ];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapLightgroups),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          \"uint32\",\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"minExt\",\n          [\"[]\", \"float32\", 3],\n          \"maxExt\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"name\",\n          Utils.getString16Reader(),\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n        ];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapLightgroups),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n        ];\n      },\n\n      // => Version: 6\n      6: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapVolumeImage = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"dims\",\n          \"uint32\",\n          \"format\",\n          \"uint32\",\n          \"image\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapVolumeLight = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"minExt\",\n          [\"[]\", \"float32\", 3],\n          \"maxExt\",\n          [\"[]\", \"float32\", 3],\n          \"intensities\",\n          [\"[]\", \"float32\", 2],\n          \"pack\",\n          [\"[]\", \"float32\", 4],\n          \"images\",\n          Utils.getArrayReader(this.PackMapVolumeImage),\n        ];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapLightgroups),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n          \"volumeLights\",\n          Utils.getArrayReader(this.PackMapVolumeLight),\n        ];\n      },\n\n      // => Version: 5, ReferencedFunction: 0xEB9C50\n      5: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.PackMapPointLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"direction\",\n          [\"[]\", \"float32\", 3],\n          \"innerAngle\",\n          \"float32\",\n          \"outerAngle\",\n          \"float32\",\n          \"textureName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapPointLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapPointLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.__root = this.PackMapLights = [\n          \"pointLights\",\n          Utils.getArrayReader(this.PackMapLightgroups),\n          \"spotLights\",\n          Utils.getArrayReader(this.PackMapPointLightgroups),\n        ];\n      },\n\n      // => Version: 4, ReferencedFunction: 0xEB9A50\n      4: function () {\n        this.PackMapLight = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"offset\",\n          \"float32\",\n          \"amplitude\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.__root = this.PackMapLights = [\"lights\", Utils.getArrayReader(this.PackMapLightgroups)];\n      },\n\n      // => Version: 3, ReferencedFunction: 0xEB9910\n      3: function () {\n        this.PackMapLight = [\n          \"type\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"elevation\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapCurve = [\n          \"gust\",\n          \"float32\",\n          \"gustFreq\",\n          \"float32\",\n          \"noise\",\n          \"float32\",\n          \"phase\",\n          \"float32\",\n          \"curveType\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\n          \"lights\",\n          Utils.getArrayReader(this.PackMapLight),\n          \"curves\",\n          Utils.getArrayReader(this.PackMapCurve),\n        ];\n\n        this.__root = this.PackMapLights = [\"lights\", Utils.getArrayReader(this.PackMapLightgroups)];\n      },\n\n      // => Version: 2, ReferencedFunction: 0xEB97F0\n      2: function () {\n        this.PackMapLight = [\n          \"type\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"elevation\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapLightgroups = [\"lights\", Utils.getArrayReader(this.PackMapLight)];\n\n        this.__root = this.PackMapLights = [\"groups\", Utils.getArrayReader(this.PackMapLightgroups)];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PackMapLight = [\n          \"type\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"elevation\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"farDistance\",\n          \"float32\",\n        ];\n\n        this.__root = this.PackMapLights = [\"lights\", Utils.getArrayReader(this.PackMapLight)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: mach, versions: 2, strucTab: 0x1884620\n  /// ==================================================\n\n  {\n    name: \"mach\",\n    versions: {\n      // => Version: 1\n      1: function () {\n        this.PackAnimMachineActionV1 = [\n          \"actionData\",\n          \"uint32\", // Replaced unknown type: 0x1C\n        ];\n\n        this.PackAnimMachineActionBlockV1 = [\"actions\", Utils.getArrayReader(this.PackAnimMachineActionV1)];\n\n        this.PackAnimMachineActionVariantV1 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV1),\n        ];\n\n        this.PackAnimMachineActionVariantBlockV1 = [\n          \"actionVariants\",\n          Utils.getArrayReader(this.PackAnimMachineActionVariantV1),\n        ];\n\n        this.PackAnimMachineTransitionVariantV1 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV1),\n        ];\n\n        this.PackAnimMachineTransitionV1 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"targetStateName\",\n          Utils.getString16Reader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV1),\n          \"variants\",\n          Utils.getArrayReader(this.PackAnimMachineTransitionVariantV1),\n        ];\n\n        this.PackAnimMachineStateVariantV1 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV1),\n          \"actionVariantBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV1),\n          \"transitions\",\n          Utils.getArrayReader(this.PackAnimMachineTransitionV1),\n        ];\n\n        this.PackAnimMachineStateV1 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV1),\n          \"actionVariantBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV1),\n          \"transitions\",\n          Utils.getArrayReader(this.PackAnimMachineTransitionV1),\n          \"variants\",\n          Utils.getArrayReader(this.PackAnimMachineStateVariantV1),\n        ];\n\n        this.PackAnimMachineV1 = [\"states\", Utils.getArrayReader(this.PackAnimMachineStateV1)];\n\n        this.PackAnimModelV1 = [\n          \"modelFileId\",\n          Utils.getFileNameReader(),\n          \"modelFileRaw\",\n          Utils.getString16Reader(),\n          \"machineIndex\",\n          \"uint32\",\n          \"listeners\",\n          [\"[]\", \"uint8\", 16],\n        ];\n\n        this.__root = this.PackAnimMachinesV1 = [\n          \"machines\",\n          Utils.getArrayReader(this.PackAnimMachineV1),\n          \"models\",\n          Utils.getArrayReader(this.PackAnimModelV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackAnimMachineActionV0 = [\n          \"actionData\",\n          \"uint32\", // Replaced unknown type: 0x1C\n        ];\n\n        this.PackAnimMachineActionBlockV0 = [\"actions\", Utils.getArrayReader(this.PackAnimMachineActionV0)];\n\n        this.PackAnimMachineActionVariantV0 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n        ];\n\n        this.PackAnimMachineActionVariantBlockV0 = [\n          \"actionVariants\",\n          Utils.getArrayReader(this.PackAnimMachineActionVariantV0),\n        ];\n\n        this.PackAnimMachineTransitionVariantV0 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n        ];\n\n        this.PackAnimMachineTransitionV0 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"targetStateName\",\n          Utils.getString16Reader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n          \"variants\",\n          Utils.getArrayReader(this.PackAnimMachineTransitionVariantV0),\n        ];\n\n        this.PackAnimMachineStateVariantV0 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n          \"actionVariantBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV0),\n          \"transitions\",\n          Utils.getArrayReader(this.PackAnimMachineTransitionV0),\n        ];\n\n        this.PackAnimMachineStateV0 = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"actionBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionBlockV0),\n          \"actionVariantBlock\",\n          Utils.getPointerReader(this.PackAnimMachineActionVariantBlockV0),\n          \"transitions\",\n          Utils.getArrayReader(this.PackAnimMachineTransitionV0),\n          \"variants\",\n          Utils.getArrayReader(this.PackAnimMachineStateVariantV0),\n        ];\n\n        this.PackAnimMachineV0 = [\"states\", Utils.getArrayReader(this.PackAnimMachineStateV0)];\n\n        this.PackAnimModelV0 = [\n          \"modelFileId\",\n          Utils.getFileNameReader(),\n          \"modelFileRaw\",\n          Utils.getString16Reader(),\n          \"machineIndex\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackAnimMachinesV0 = [\n          \"machines\",\n          Utils.getArrayReader(this.PackAnimMachineV0),\n          \"models\",\n          Utils.getArrayReader(this.PackAnimModelV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: main, versions: 1, strucTab: 0x187F4D0\n  /// ==================================================\n\n  {\n    name: \"main\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.CollideNavMeshChunkRef = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkFilename\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.CollideNavMesh = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkRefArray\",\n          Utils.getArrayReader(this.CollideNavMeshChunkRef),\n        ];\n      },\n    },\n  },\n\n  /// ==================================================\n  /// Chunk: main, versions: 1, strucTab: 0x187F4E8\n  /// ==================================================\n\n  {\n    name: \"main\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.__root = this.CollideNavMeshChunk = [\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n    },\n  },\n\n  /// ==================================================\n  /// Chunk: main, versions: 2, strucTab: 0x187F500\n  /// ==================================================\n\n  {\n    name: \"main\",\n    versions: {\n      // => Version: 1\n      1: function () {\n        this.CollideModelManifestFile = [\n          \"modelFileStr\",\n          Utils.getString16Reader(),\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"collisionFile\",\n          Utils.getFileNameReader(),\n          \"scales\",\n          Utils.getArrayReader(\"float32\"),\n        ];\n\n        this.__root = this.CollideModelManifest = [\"files\", Utils.getArrayReader(this.CollideModelManifestFile)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.CollideModelManifestFile = [\n          \"modelFile\",\n          Utils.getFileNameReader(),\n          \"collisionFile\",\n          Utils.getFileNameReader(),\n          \"scales\",\n          Utils.getArrayReader(\"float32\"),\n        ];\n\n        this.__root = this.CollideModelManifest = [\"files\", Utils.getArrayReader(this.CollideModelManifestFile)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: Main, versions: 1, strucTab: 0x18841DC\n  /// ==================================================\n\n  {\n    name: \"Main\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackContentTypeInfo = [\n          \"guidOffset\",\n          \"uint32\",\n          \"uidOffset\",\n          \"uint32\",\n          \"dataIdOffset\",\n          \"uint32\",\n          \"nameOffset\",\n          \"uint32\",\n          \"trackReferences\",\n          \"uint8\",\n        ];\n\n        this.PackContentNamespace = [\"name\", Utils.getString16Reader(), \"domain\", \"uint32\", \"parentIndex\", \"uint32\"];\n\n        this.PackContentIndexEntry = [\n          \"type\",\n          \"uint32\",\n          \"offset\",\n          \"uint32\",\n          \"namespaceIndex\",\n          \"uint32\",\n          \"rootIndex\",\n          \"uint32\",\n        ];\n\n        this.PackContentLocalOffsetFixup = [\"relocOffset\", \"uint32\"];\n\n        this.PackContentExternalOffsetFixup = [\"relocOffset\", \"uint32\", \"targetFileIndex\", \"uint32\"];\n\n        this.PackContentFileIndexFixup = [\"relocOffset\", \"uint32\"];\n\n        this.PackContentStringIndexFixup = [\"relocOffset\", \"uint32\"];\n\n        this.PackContentTrackedReference = [\n          \"sourceOffset\",\n          \"uint32\",\n          \"targetFileIndex\",\n          \"uint32\",\n          \"targetOffset\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackContent = [\n          \"flags\",\n          \"uint32\",\n          \"typeInfos\",\n          Utils.getArrayReader(this.PackContentTypeInfo),\n          \"namespaces\",\n          Utils.getArrayReader(this.PackContentNamespace),\n          \"fileRefs\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"indexEntries\",\n          Utils.getArrayReader(this.PackContentIndexEntry),\n          \"localOffsets\",\n          Utils.getArrayReader(this.PackContentLocalOffsetFixup),\n          \"externalOffsets\",\n          Utils.getArrayReader(this.PackContentExternalOffsetFixup),\n          \"fileIndices\",\n          Utils.getArrayReader(this.PackContentFileIndexFixup),\n          \"stringIndices\",\n          Utils.getArrayReader(this.PackContentStringIndexFixup),\n          \"trackedReferences\",\n          Utils.getArrayReader(this.PackContentTrackedReference),\n          \"strings\",\n          Utils.getArrayReader(Utils.getString16Reader()),\n          \"content\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n    },\n  },\n\n  /// ==================================================\n  /// Chunk: Main, versions: 1, strucTab: 0x1884314\n  /// ==================================================\n\n  {\n    name: \"Main\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackMapMetadataMap = [\"mapId\", \"uint16\", \"mapType\", \"uint8\"];\n\n        this.__root = this.PackMapMetadata = [\"maps\", Utils.getArrayReader(this.PackMapMetadataMap)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: MFST, versions: 7, strucTab: 0x18341D0\n  /// ==================================================\n\n  {\n    name: \"MFST\",\n    versions: {\n      // => Version: 6\n      6: function () {\n        this.PackAssetManifestRecord = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"size\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.PackAssetManifestStream = [\"parentBaseId\", \"uint32\", \"streamBaseId\", \"uint32\"];\n\n        this.PackAssetManifestProperty = [\"type\", \"uint8\", \"data\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackAssetManifestPropertyIndex = [\"baseId\", \"uint32\", \"properyIndex\", \"uint32\"];\n\n        this.__root = this.PackAssetManifest = [\n          \"buildId\",\n          \"uint32\",\n          \"totalRecordSize\",\n          Utils.getQWordReader(),\n          \"records\",\n          Utils.getArrayReader(this.PackAssetManifestRecord),\n          \"streams\",\n          Utils.getArrayReader(this.PackAssetManifestStream),\n          \"properties\",\n          Utils.getArrayReader(this.PackAssetManifestProperty),\n          \"propertyTable\",\n          Utils.getArrayReader(this.PackAssetManifestPropertyIndex),\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.PackAssetManifestRecordV5 = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"size\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.PackAssetManifestStreamV5 = [\"parentBaseId\", \"uint32\", \"streamBaseId\", \"uint32\"];\n\n        this.PackAssetManifestPropertyV5 = [\"type\", \"uint8\", \"data\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackAssetManifestPropertyIndexV5 = [\"baseId\", \"uint32\", \"properyIndex\", \"uint32\"];\n\n        this.__root = this.PackAssetManifestV5 = [\n          \"buildId\",\n          \"uint32\",\n          \"records\",\n          Utils.getArrayReader(this.PackAssetManifestRecordV5),\n          \"streams\",\n          Utils.getArrayReader(this.PackAssetManifestStreamV5),\n          \"properties\",\n          Utils.getArrayReader(this.PackAssetManifestPropertyV5),\n          \"propertyTable\",\n          Utils.getArrayReader(this.PackAssetManifestPropertyIndexV5),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.PackAssetManifestRecordV4 = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"size\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.PackAssetManifestStreamV4 = [\"parentBaseId\", \"uint32\", \"streamBaseId\", \"uint32\"];\n\n        this.PackAssetManifestOptionsV4 = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.PackAssetManifestPropertyV4 = [\"type\", \"uint8\", \"data\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackAssetManifestPropertyIndexV4 = [\"baseId\", \"uint32\", \"properyIndex\", \"uint32\"];\n\n        this.__root = this.PackAssetManifestV4 = [\n          \"buildId\",\n          \"uint32\",\n          \"records\",\n          Utils.getArrayReader(this.PackAssetManifestRecordV4),\n          \"streams\",\n          Utils.getArrayReader(this.PackAssetManifestStreamV4),\n          \"options\",\n          Utils.getArrayReader(this.PackAssetManifestOptionsV4),\n          \"properties\",\n          Utils.getArrayReader(this.PackAssetManifestPropertyV4),\n          \"propertyTable\",\n          Utils.getArrayReader(this.PackAssetManifestPropertyIndexV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.PackAssetManifestRecordV3 = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"size\", \"uint32\"];\n\n        this.PackAssetManifestStreamV3 = [\"parentBaseId\", \"uint32\", \"streamBaseId\", \"uint32\"];\n\n        this.PackAssetManifestOptionsV3 = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.__root = this.PackAssetManifestV3 = [\n          \"buildId\",\n          \"uint32\",\n          \"records\",\n          Utils.getArrayReader(this.PackAssetManifestRecordV3),\n          \"streams\",\n          Utils.getArrayReader(this.PackAssetManifestStreamV3),\n          \"options\",\n          Utils.getArrayReader(this.PackAssetManifestOptionsV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PackAssetManifestRecordV2 = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"size\", \"uint32\"];\n\n        this.PackAssetManifestStreamV2 = [\"parentBaseId\", \"uint32\", \"streamBaseId\", \"uint32\"];\n\n        this.__root = this.PackAssetManifestV2 = [\n          \"buildId\",\n          \"uint32\",\n          \"records\",\n          Utils.getArrayReader(this.PackAssetManifestRecordV2),\n          \"streams\",\n          Utils.getArrayReader(this.PackAssetManifestStreamV2),\n          \"noDeltaRecords\",\n          Utils.getArrayReader(this.PackAssetManifestRecordV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PackAssetManifestRecordV1 = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"size\", \"uint32\"];\n\n        this.PackAssetManifestStreamV1 = [\"parentBaseId\", \"uint32\", \"streamBaseId\", \"uint32\"];\n\n        this.__root = this.PackAssetManifestV1 = [\n          \"buildId\",\n          \"uint32\",\n          \"records\",\n          Utils.getArrayReader(this.PackAssetManifestRecordV1),\n          \"streams\",\n          Utils.getArrayReader(this.PackAssetManifestStreamV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackAssetManifestRecordV0 = [\"baseId\", \"uint32\", \"fileId\", \"uint32\", \"size\", \"uint32\"];\n\n        this.__root = this.PackAssetManifestV0 = [\n          \"buildId\",\n          \"uint32\",\n          \"records\",\n          Utils.getArrayReader(this.PackAssetManifestRecordV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: mfst, versions: 3, strucTab: 0x18FBDC4\n  /// ==================================================\n\n  {\n    name: \"mfst\",\n    versions: {\n      // => Version: 2, ReferencedFunction: 0x1408880\n      2: function () {\n        this.ContentMapRedirector = [\n          \"mapGUID\",\n          [\"[]\", \"uint8\", 16],\n          \"token\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ContentMapModel = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"type\",\n          \"uint32\",\n          \"permutation\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ContentMapStart = [\n          \"token\",\n          \"uint32\",\n          \"modelArray\",\n          Utils.getArrayReader(this.ContentMapModel),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ContentMap = [\n          \"mapGUID\",\n          [\"[]\", \"uint8\", 16],\n          \"mapRedirectorArray\",\n          Utils.getArrayReader(this.ContentMapRedirector),\n          \"mapStartArray\",\n          Utils.getArrayReader(this.ContentMapStart),\n        ];\n\n        this.__root = this.ContentPortalManifest = [\"mapArray\", Utils.getArrayReader(this.ContentMap)];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.ContentMapRedirectorV1 = [\n          \"mapId\",\n          \"uint32\",\n          \"token\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ContentMapModelV1 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"type\",\n          \"uint32\",\n          \"permutation\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ContentMapStartV1 = [\n          \"token\",\n          \"uint32\",\n          \"modelArray\",\n          Utils.getArrayReader(this.ContentMapModelV1),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ContentMapV1 = [\n          \"mapId\",\n          \"uint32\",\n          \"mapRedirectorArray\",\n          Utils.getArrayReader(this.ContentMapRedirectorV1),\n          \"mapStartArray\",\n          Utils.getArrayReader(this.ContentMapStartV1),\n        ];\n\n        this.__root = this.ContentPortalManifestV1 = [\"mapArray\", Utils.getArrayReader(this.ContentMapV1)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ContentMapRedirectorV0 = [\n          \"mapId\",\n          \"uint32\",\n          \"token\",\n          \"uint32\",\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ContentMapModelV0 = [\"filename\", Utils.getFileNameReader(), \"flags\", \"uint32\", \"type\", \"uint32\"];\n\n        this.ContentMapStartV0 = [\n          \"token\",\n          \"uint32\",\n          \"modelArray\",\n          Utils.getArrayReader(this.ContentMapModelV0),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ContentMapV0 = [\n          \"mapId\",\n          \"uint32\",\n          \"mapRedirectorArray\",\n          Utils.getArrayReader(this.ContentMapRedirectorV0),\n          \"mapStartArray\",\n          Utils.getArrayReader(this.ContentMapStartV0),\n        ];\n\n        this.__root = this.ContentPortalManifestV0 = [\"mapArray\", Utils.getArrayReader(this.ContentMapV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: MODL, versions: 66, strucTab: 0x1772BB0\n  /// ==================================================\n\n  {\n    name: \"MODL\",\n    versions: {\n      // => Version: 65, ReferencedFunction: 0xF2C4D0\n      65: function () {\n        this.ModelTextureDataV65 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV65 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV65 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV65 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV65 = [\n          \"flags\",\n          \"uint32\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n          \"scrollFreq\",\n          [\"[]\", \"float32\", 2],\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"scaleFreq\",\n          [\"[]\", \"float32\", 2],\n          \"rotate\",\n          \"float32\",\n          \"rotate\",\n          \"float32\",\n        ];\n\n        this.ModelMaterialDataV65 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV65),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV65),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV65),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV65),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV65),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV65 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV65),\n        ];\n\n        this.ModelParticleCloudV65 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV65 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV65 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V65 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV65 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"affinity\",\n          \"uint32\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV65),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV65),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV65),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V65),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV65 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV65),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV65),\n        ];\n\n        this.ModelObstacleDataV65 = [\n          \"affinity\",\n          \"uint32\",\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V65),\n        ];\n\n        this.ModelStreakV65 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV65 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV65 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV65),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV65),\n        ];\n\n        this.ModelEffectLightV65 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV65 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV65)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV65 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV65 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV65)];\n\n        this.ModelClothGroupBindingV65 = [\n          \"strippedToken\",\n          Utils.getQWordReader(),\n          \"boneName\",\n          Utils.getStringReader(),\n          \"OBBMin\",\n          [\"[]\", \"float32\", 3],\n          \"OBBMax\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelClothSoftLockV65 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV65 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV65 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV65),\n          \"groupBindings\",\n          Utils.getArrayReader(this.ModelClothGroupBindingV65),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV65),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV65),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV65),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lockedNormals\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedTanegents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedBitangents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n          \"translateWeight\",\n          \"float32\",\n          \"visBone\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelEffectWindV65 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelWindDataV65 = [\"effectWind\", Utils.getArrayReader(this.ModelEffectWindV65)];\n\n        this.ModelLightningSystemV65 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV65 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV65),\n          \"fps\",\n          \"float32\",\n          \"frequency\",\n          \"float32\",\n          \"groupMax\",\n          \"uint32\",\n          \"groupMin\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"texOffset\",\n          \"float32\",\n          \"texRange\",\n          [\"[]\", \"float32\", 2],\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"thicknessRange\",\n          [\"[]\", \"float32\", 2],\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV65 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV65 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV65),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV65),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV65),\n        ];\n\n        this.ModelSoftBodyDataV65 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV65 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.ModelBoundingSphereV65 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.__root = this.ModelFileDataV65 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV65),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV65),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV65),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV65),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV65),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV65),\n          \"windData\",\n          Utils.getPointerReader(this.ModelWindDataV65),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV65),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV65),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV65),\n          \"boundingSphere\",\n          Utils.getPointerReader(this.ModelBoundingSphereV65),\n        ];\n      },\n\n      // => Version: 64\n      64: function () {\n        this.ModelTextureDataV64 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV64 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV64 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV64 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV64 = [\n          \"flags\",\n          \"uint32\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n          \"scrollFreq\",\n          [\"[]\", \"float32\", 2],\n          \"scale\",\n          [\"[]\", \"float32\", 2],\n          \"scaleFreq\",\n          [\"[]\", \"float32\", 2],\n          \"rotate\",\n          \"float32\",\n          \"rotate\",\n          \"float32\",\n        ];\n\n        this.ModelMaterialDataV64 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV64),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV64),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV64),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV64),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV64),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV64 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV64),\n        ];\n\n        this.ModelMeshLodDataV64 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV64 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV64 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV64),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV64),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV64 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV64),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV64),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelParticleCloudV64 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV64 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV64 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V64 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV64 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"affinity\",\n          \"uint32\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV64),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV64),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV64),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V64),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV64 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV64),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV64),\n        ];\n\n        this.ModelObstacleDataV64 = [\n          \"affinity\",\n          \"uint32\",\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V64),\n        ];\n\n        this.ModelStreakV64 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV64 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV64 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV64),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV64),\n        ];\n\n        this.ModelEffectLightV64 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV64 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV64)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV64 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV64 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV64)];\n\n        this.ModelClothGroupBindingV64 = [\n          \"strippedToken\",\n          Utils.getQWordReader(),\n          \"boneName\",\n          Utils.getStringReader(),\n          \"OBBMin\",\n          [\"[]\", \"float32\", 3],\n          \"OBBMax\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelClothSoftLockV64 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV64 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV64 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV64),\n          \"groupBindings\",\n          Utils.getArrayReader(this.ModelClothGroupBindingV64),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV64),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV64),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV64),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lockedNormals\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedTanegents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedBitangents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n          \"translateWeight\",\n          \"float32\",\n          \"visBone\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelEffectWindV64 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelWindDataV64 = [\"effectWind\", Utils.getArrayReader(this.ModelEffectWindV64)];\n\n        this.ModelLightningSystemV64 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV64 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV64),\n          \"fps\",\n          \"float32\",\n          \"frequency\",\n          \"float32\",\n          \"groupMax\",\n          \"uint32\",\n          \"groupMin\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"texOffset\",\n          \"float32\",\n          \"texRange\",\n          [\"[]\", \"float32\", 2],\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"thicknessRange\",\n          [\"[]\", \"float32\", 2],\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV64 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV64 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV64),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV64),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV64),\n        ];\n\n        this.ModelSoftBodyDataV64 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV64 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.ModelBoundingSphereV64 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.__root = this.ModelFileDataV64 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV64),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV64),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV64),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV64),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV64),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV64),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV64),\n          \"windData\",\n          Utils.getPointerReader(this.ModelWindDataV64),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV64),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV64),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV64),\n          \"boundingSphere\",\n          Utils.getPointerReader(this.ModelBoundingSphereV64),\n        ];\n      },\n\n      // => Version: 63, ReferencedFunction: 0xF2C410\n      63: function () {\n        this.ModelTextureDataV63 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV63 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV63 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV63 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV63 = [\n          \"flags\",\n          \"uint32\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV63 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV63),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV63),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV63),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV63),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV63),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV63 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV63),\n        ];\n\n        this.ModelMeshLodDataV63 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV63 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV63 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV63),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV63),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV63 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV63),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV63),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelParticleCloudV63 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV63 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV63 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V63 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV63 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"affinity\",\n          \"uint32\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV63),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV63),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV63),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V63),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV63 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV63),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV63),\n        ];\n\n        this.ModelObstacleDataV63 = [\n          \"affinity\",\n          \"uint32\",\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V63),\n        ];\n\n        this.ModelStreakV63 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV63 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV63 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV63),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV63),\n        ];\n\n        this.ModelEffectLightV63 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV63 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV63)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV63 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV63 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV63)];\n\n        this.ModelClothGroupBindingV63 = [\n          \"strippedToken\",\n          Utils.getQWordReader(),\n          \"boneName\",\n          Utils.getStringReader(),\n          \"OBBMin\",\n          [\"[]\", \"float32\", 3],\n          \"OBBMax\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelClothSoftLockV63 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV63 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV63 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV63),\n          \"groupBindings\",\n          Utils.getArrayReader(this.ModelClothGroupBindingV63),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV63),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV63),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV63),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lockedNormals\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedTanegents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedBitangents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n          \"translateWeight\",\n          \"float32\",\n        ];\n\n        this.ModelEffectWindV63 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelWindDataV63 = [\"effectWind\", Utils.getArrayReader(this.ModelEffectWindV63)];\n\n        this.ModelLightningSystemV63 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV63 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV63),\n          \"fps\",\n          \"float32\",\n          \"frequency\",\n          \"float32\",\n          \"groupMax\",\n          \"uint32\",\n          \"groupMin\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"texOffset\",\n          \"float32\",\n          \"texRange\",\n          [\"[]\", \"float32\", 2],\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"thicknessRange\",\n          [\"[]\", \"float32\", 2],\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV63 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV63 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV63),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV63),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV63),\n        ];\n\n        this.ModelSoftBodyDataV63 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV63 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.ModelBoundingSphereV63 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.__root = this.ModelFileDataV63 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV63),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV63),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV63),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV63),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV63),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV63),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV63),\n          \"windData\",\n          Utils.getPointerReader(this.ModelWindDataV63),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV63),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV63),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV63),\n          \"boundingSphere\",\n          Utils.getPointerReader(this.ModelBoundingSphereV63),\n        ];\n      },\n\n      // => Version: 62, ReferencedFunction: 0xF2C2F0\n      62: function () {\n        this.ModelTextureDataV62 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV62 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV62 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV62 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV62 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV62 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV62),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV62),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV62),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV62),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV62),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV62 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV62),\n        ];\n\n        this.ModelMeshLodDataV62 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV62 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV62 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV62),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV62),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV62 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV62),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV62),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelParticleCloudV62 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV62 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV62 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V62 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV62 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"affinity\",\n          \"uint32\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV62),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV62),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV62),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V62),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV62 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV62),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV62),\n        ];\n\n        this.ModelObstacleDataV62 = [\n          \"affinity\",\n          \"uint32\",\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V62),\n        ];\n\n        this.ModelStreakV62 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV62 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV62 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV62),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV62),\n        ];\n\n        this.ModelEffectLightV62 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV62 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV62)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV62 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV62 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV62)];\n\n        this.ModelClothGroupBindingV62 = [\n          \"strippedToken\",\n          Utils.getQWordReader(),\n          \"boneName\",\n          Utils.getStringReader(),\n          \"OBBMin\",\n          [\"[]\", \"float32\", 3],\n          \"OBBMax\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelClothSoftLockV62 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV62 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV62 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV62),\n          \"groupBindings\",\n          Utils.getArrayReader(this.ModelClothGroupBindingV62),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV62),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV62),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV62),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lockedNormals\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedTanegents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedBitangents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n          \"translateWeight\",\n          \"float32\",\n        ];\n\n        this.ModelEffectWindV62 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelWindDataV62 = [\"effectWind\", Utils.getArrayReader(this.ModelEffectWindV62)];\n\n        this.ModelLightningSystemV62 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV62 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV62),\n          \"fps\",\n          \"float32\",\n          \"frequency\",\n          \"float32\",\n          \"groupMax\",\n          \"uint32\",\n          \"groupMin\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"texOffset\",\n          \"float32\",\n          \"texRange\",\n          [\"[]\", \"float32\", 2],\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"thicknessRange\",\n          [\"[]\", \"float32\", 2],\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV62 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV62 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV62),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV62),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV62),\n        ];\n\n        this.ModelSoftBodyDataV62 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV62 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.ModelBoundingSphereV62 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.__root = this.ModelFileDataV62 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV62),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV62),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV62),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV62),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV62),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV62),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV62),\n          \"windData\",\n          Utils.getPointerReader(this.ModelWindDataV62),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV62),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV62),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV62),\n          \"boundingSphere\",\n          Utils.getPointerReader(this.ModelBoundingSphereV62),\n        ];\n      },\n\n      // => Version: 61, ReferencedFunction: 0xF2C290\n      61: function () {\n        this.ModelTextureDataV61 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV61 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV61 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV61 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV61 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV61 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV61),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV61),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV61),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV61),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV61),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV61 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV61),\n        ];\n\n        this.ModelMeshLodDataV61 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV61 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV61 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV61),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV61),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV61 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV61),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV61),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV61 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV61 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV61,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneSymmetryV61 = [\"boneLeft\", Utils.getQWordReader(), \"boneRight\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV61 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV61),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneSymmetries\",\n          Utils.getArrayReader(this.ModelBoneSymmetryV61),\n        ];\n\n        this.ModelMeshBindingDataV61 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV61 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV61 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV61),\n          \"InitialPlacement\",\n          this.ModelTransformDataV61,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV61),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV61),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV61 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV61 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV61 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV61 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V61 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV61 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"affinity\",\n          \"uint32\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV61),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV61),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV61),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V61),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV61 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV61),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV61),\n        ];\n\n        this.ModelObstacleDataV61 = [\n          \"affinity\",\n          \"uint32\",\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V61),\n        ];\n\n        this.ModelStreakV61 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV61 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV61 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV61),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV61),\n        ];\n\n        this.ModelEffectLightV61 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV61 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV61)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV61 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV61 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV61)];\n\n        this.ModelClothGroupBindingV61 = [\n          \"strippedToken\",\n          Utils.getQWordReader(),\n          \"boneName\",\n          Utils.getStringReader(),\n          \"OBBMin\",\n          [\"[]\", \"float32\", 3],\n          \"OBBMax\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelClothSoftLockV61 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV61 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV61 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV61),\n          \"groupBindings\",\n          Utils.getArrayReader(this.ModelClothGroupBindingV61),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV61),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV61),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV61),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lockedNormals\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedTanegents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedBitangents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n        ];\n\n        this.ModelEffectWindV61 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelWindDataV61 = [\"effectWind\", Utils.getArrayReader(this.ModelEffectWindV61)];\n\n        this.ModelLightningSystemV61 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV61 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV61),\n          \"fps\",\n          \"float32\",\n          \"frequency\",\n          \"float32\",\n          \"groupMax\",\n          \"uint32\",\n          \"groupMin\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"texOffset\",\n          \"float32\",\n          \"texRange\",\n          [\"[]\", \"float32\", 2],\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"thicknessRange\",\n          [\"[]\", \"float32\", 2],\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV61 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV61 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV61),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV61),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV61),\n        ];\n\n        this.ModelBoneConstraintLinkV61 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV61 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV61),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV61 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV61 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.ModelFixedOffsetDataV61 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentBone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.__root = this.ModelFileDataV61 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV61),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV61),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV61),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV61),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV61),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV61),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV61),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV61),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV61),\n          \"windData\",\n          Utils.getPointerReader(this.ModelWindDataV61),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV61),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV61),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV61),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV61),\n          \"fixedOffsetData\",\n          Utils.getArrayReader(this.ModelFixedOffsetDataV61),\n          \"modelReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 60, ReferencedFunction: 0xF2BE90\n      60: function () {\n        this.ModelTextureDataV60 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV60 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV60 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV60 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV60 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV60 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV60),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV60),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV60),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV60),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV60),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV60 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV60),\n        ];\n\n        this.ModelMeshLodDataV60 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV60 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV60 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV60),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV60),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV60 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV60),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV60),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV60 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV60 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV60,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneSymmetryV60 = [\"boneLeft\", Utils.getQWordReader(), \"boneRight\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV60 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV60),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneSymmetries\",\n          Utils.getArrayReader(this.ModelBoneSymmetryV60),\n        ];\n\n        this.ModelMeshBindingDataV60 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV60 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV60 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV60),\n          \"InitialPlacement\",\n          this.ModelTransformDataV60,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV60),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV60),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV60 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV60 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV60 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV60 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V60 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV60 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV60),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV60),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV60),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V60),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV60 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV60),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV60),\n        ];\n\n        this.ModelObstacleDataV60 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V60),\n        ];\n\n        this.ModelStreakV60 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV60 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV60 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV60),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV60),\n        ];\n\n        this.ModelEffectLightV60 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV60 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV60)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV60 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV60 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV60)];\n\n        this.ModelClothGroupBindingV60 = [\n          \"strippedToken\",\n          Utils.getQWordReader(),\n          \"boneName\",\n          Utils.getStringReader(),\n          \"OBBMin\",\n          [\"[]\", \"float32\", 3],\n          \"OBBMax\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelClothSoftLockV60 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV60 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV60 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV60),\n          \"groupBindings\",\n          Utils.getArrayReader(this.ModelClothGroupBindingV60),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV60),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV60),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV60),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lockedNormals\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedTanegents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedBitangents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n        ];\n\n        this.ModelLightningSystemV60 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV60 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV60),\n          \"fps\",\n          \"float32\",\n          \"frequency\",\n          \"float32\",\n          \"groupMax\",\n          \"uint32\",\n          \"groupMin\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"texOffset\",\n          \"float32\",\n          \"texRange\",\n          [\"[]\", \"float32\", 2],\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"thicknessRange\",\n          [\"[]\", \"float32\", 2],\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV60 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV60 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV60),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV60),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV60),\n        ];\n\n        this.ModelBoneConstraintLinkV60 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV60 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV60),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV60 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV60 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.ModelFixedOffsetDataV60 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentBone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.__root = this.ModelFileDataV60 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV60),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV60),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV60),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV60),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV60),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV60),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV60),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV60),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV60),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV60),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV60),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV60),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV60),\n          \"fixedOffsetData\",\n          Utils.getArrayReader(this.ModelFixedOffsetDataV60),\n          \"modelReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 59, ReferencedFunction: 0xF2BE40\n      59: function () {\n        this.ModelTextureDataV59 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV59 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV59 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV59 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV59 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV59 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV59),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV59),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV59),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV59),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV59),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV59 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV59),\n        ];\n\n        this.ModelMeshLodDataV59 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV59 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV59 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV59),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV59),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV59 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV59),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV59),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV59 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV59 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV59,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneSymmetryV59 = [\"boneLeft\", Utils.getQWordReader(), \"boneRight\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV59 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV59),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneSymmetries\",\n          Utils.getArrayReader(this.ModelBoneSymmetryV59),\n        ];\n\n        this.ModelMeshBindingDataV59 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV59 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV59 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV59),\n          \"InitialPlacement\",\n          this.ModelTransformDataV59,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV59),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV59),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV59 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV59 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV59 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV59 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V59 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV59 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV59),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV59),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV59),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V59),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV59 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV59),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV59),\n        ];\n\n        this.ModelObstacleDataV59 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V59),\n        ];\n\n        this.ModelStreakV59 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV59 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV59 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV59),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV59),\n        ];\n\n        this.ModelEffectLightV59 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV59 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV59)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV59 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV59 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV59)];\n\n        this.ModelClothSoftLockV59 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV59 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV59 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV59),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV59),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV59),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV59),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lockedNormals\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedTanegents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedBitangents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n        ];\n\n        this.ModelLightningSystemV59 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV59 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV59),\n          \"fps\",\n          \"float32\",\n          \"frequency\",\n          \"float32\",\n          \"groupMax\",\n          \"uint32\",\n          \"groupMin\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"texOffset\",\n          \"float32\",\n          \"texRange\",\n          [\"[]\", \"float32\", 2],\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"thicknessRange\",\n          [\"[]\", \"float32\", 2],\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV59 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV59 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV59),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV59),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV59),\n        ];\n\n        this.ModelBoneConstraintLinkV59 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV59 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV59),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV59 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV59 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.ModelFixedOffsetDataV59 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentBone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.__root = this.ModelFileDataV59 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV59),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV59),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV59),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV59),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV59),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV59),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV59),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV59),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV59),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV59),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV59),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV59),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV59),\n          \"fixedOffsetData\",\n          Utils.getArrayReader(this.ModelFixedOffsetDataV59),\n          \"modelReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 58, ReferencedFunction: 0xF2BD50\n      58: function () {\n        this.ModelTextureDataV58 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV58 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV58 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV58 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV58 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV58 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV58),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV58),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV58),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV58),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV58),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV58 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV58),\n        ];\n\n        this.ModelMeshLodDataV58 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV58 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV58 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV58),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV58),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV58 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV58),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV58),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV58 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV58 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV58,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneSymmetryV58 = [\"boneLeft\", Utils.getQWordReader(), \"boneRight\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV58 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV58),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneSymmetries\",\n          Utils.getArrayReader(this.ModelBoneSymmetryV58),\n        ];\n\n        this.ModelMeshBindingDataV58 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV58 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV58 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV58),\n          \"InitialPlacement\",\n          this.ModelTransformDataV58,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV58),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV58),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV58 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV58 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV58 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV58 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V58 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV58 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV58),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV58),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV58),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V58),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV58 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV58),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV58),\n        ];\n\n        this.ModelObstacleDataV58 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V58),\n        ];\n\n        this.ModelStreakV58 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV58 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV58 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV58),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV58),\n        ];\n\n        this.ModelEffectLightV58 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV58 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV58)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV58 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV58 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV58)];\n\n        this.ModelClothSoftLockV58 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV58 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV58 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV58),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV58),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV58),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV58),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lockedNormals\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedTanegents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockedBitangents\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n        ];\n\n        this.ModelLightningSystemV58 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV58 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV58),\n          \"fps\",\n          \"float32\",\n          \"frequency\",\n          \"float32\",\n          \"groupMax\",\n          \"uint32\",\n          \"groupMin\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"thicknessRange\",\n          [\"[]\", \"float32\", 2],\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV58 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV58 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV58),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV58),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV58),\n        ];\n\n        this.ModelBoneConstraintLinkV58 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV58 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV58),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV58 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV58 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.ModelFixedOffsetDataV58 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentBone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.__root = this.ModelFileDataV58 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV58),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV58),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV58),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV58),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV58),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV58),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV58),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV58),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV58),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV58),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV58),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV58),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV58),\n          \"fixedOffsetData\",\n          Utils.getArrayReader(this.ModelFixedOffsetDataV58),\n          \"modelReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 57\n      57: function () {\n        this.ModelTextureDataV57 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV57 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV57 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV57 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV57 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV57 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV57),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV57),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV57),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV57),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV57),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV57 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV57),\n        ];\n\n        this.ModelMeshLodDataV57 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV57 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV57 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV57),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV57),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV57 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV57),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV57),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV57 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV57 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV57,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneSymmetryV57 = [\"boneLeft\", Utils.getQWordReader(), \"boneRight\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV57 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV57),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneSymmetries\",\n          Utils.getArrayReader(this.ModelBoneSymmetryV57),\n        ];\n\n        this.ModelMeshBindingDataV57 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV57 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV57 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV57),\n          \"InitialPlacement\",\n          this.ModelTransformDataV57,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV57),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV57),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV57 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV57 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV57 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV57 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V57 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV57 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV57),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV57),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV57),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V57),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV57 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV57),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV57),\n        ];\n\n        this.ModelObstacleDataV57 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V57),\n        ];\n\n        this.ModelStreakV57 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV57 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV57 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV57),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV57),\n        ];\n\n        this.ModelEffectLightV57 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV57 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV57)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV57 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV57 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV57)];\n\n        this.ModelClothSoftLockV57 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV57 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV57 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV57),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV57),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV57),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV57),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n        ];\n\n        this.ModelLightningSystemV57 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV57 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV57 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV57 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV57),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV57),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV57),\n        ];\n\n        this.ModelBoneConstraintLinkV57 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV57 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV57),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV57 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV57 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.ModelFixedOffsetDataV57 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentBone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.__root = this.ModelFileDataV57 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV57),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV57),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV57),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV57),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV57),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV57),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV57),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV57),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV57),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV57),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV57),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV57),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV57),\n          \"fixedOffsetData\",\n          Utils.getArrayReader(this.ModelFixedOffsetDataV57),\n          \"modelReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 56\n      56: function () {\n        this.ModelTextureDataV56 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV56 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV56 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV56 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV56 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV56 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV56),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV56),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV56),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV56),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV56),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV56 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV56),\n        ];\n\n        this.ModelMeshLodDataV56 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV56 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV56 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV56),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV56),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV56 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV56),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV56),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV56 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV56 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV56,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneSymmetryV56 = [\"boneLeft\", Utils.getQWordReader(), \"boneRight\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV56 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV56),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneSymmetries\",\n          Utils.getArrayReader(this.ModelBoneSymmetryV56),\n        ];\n\n        this.ModelMeshBindingDataV56 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV56 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV56 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV56),\n          \"InitialPlacement\",\n          this.ModelTransformDataV56,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV56),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV56),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV56 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV56 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV56 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV56 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V56 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV56 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV56),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV56),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV56),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V56),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV56 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV56),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV56),\n        ];\n\n        this.ModelObstacleDataV56 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V56),\n        ];\n\n        this.ModelStreakV56 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV56 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV56 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV56),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV56),\n        ];\n\n        this.ModelEffectLightV56 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV56 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV56)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV56 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV56 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV56)];\n\n        this.ModelClothSoftLockV56 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV56 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV56 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV56),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV56),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV56),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV56),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n        ];\n\n        this.ModelLightningSystemV56 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV56 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV56 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV56 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV56),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV56),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV56),\n        ];\n\n        this.ModelBoneConstraintLinkV56 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV56 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV56),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV56 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV56 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.__root = this.ModelFileDataV56 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV56),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV56),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV56),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV56),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV56),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV56),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV56),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV56),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV56),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV56),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV56),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV56),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV56),\n          \"modelReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 55, ReferencedFunction: 0xF2BC60\n      55: function () {\n        this.ModelTextureDataV55 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV55 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV55 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV55 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV55 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV55 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV55),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV55),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV55),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV55),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV55),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV55 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV55),\n        ];\n\n        this.ModelMeshLodDataV55 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV55 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV55 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV55),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV55),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV55 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV55),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV55),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV55 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV55 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV55,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneSymmetryV55 = [\"boneLeft\", Utils.getQWordReader(), \"boneRight\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV55 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV55),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneSymmetries\",\n          Utils.getArrayReader(this.ModelBoneSymmetryV55),\n        ];\n\n        this.ModelMeshBindingDataV55 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV55 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV55 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV55),\n          \"InitialPlacement\",\n          this.ModelTransformDataV55,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV55),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV55),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV55 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV55 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV55 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV55 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V55 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV55 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV55),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV55),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV55),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V55),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV55 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV55),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV55),\n        ];\n\n        this.ModelObstacleDataV55 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V55),\n        ];\n\n        this.ModelStreakV55 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV55 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV55 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV55),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV55),\n        ];\n\n        this.ModelEffectLightV55 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV55 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV55)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV55 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV55 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV55)];\n\n        this.ModelClothSoftLockV55 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV55 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV55 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV55),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV55),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV55),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV55),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n        ];\n\n        this.ModelLightningSystemV55 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV55 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV55 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV55 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV55),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV55),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV55),\n        ];\n\n        this.ModelBoneConstraintLinkV55 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV55 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV55),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV55 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV55 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"boneInverseOffset\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.__root = this.ModelFileDataV55 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV55),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV55),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV55),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV55),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV55),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV55),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV55),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV55),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV55),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV55),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV55),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV55),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV55),\n        ];\n      },\n\n      // => Version: 54\n      54: function () {\n        this.ModelTextureDataV54 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV54 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV54 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV54 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV54 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV54 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV54),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV54),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV54),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV54),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV54),\n          \"texCoordCount\",\n          \"uint8\",\n        ];\n\n        this.ModelPermutationDataV54 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV54),\n        ];\n\n        this.ModelMeshLodDataV54 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV54 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV54 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV54),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV54),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV54 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV54),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV54),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV54 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV54 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV54,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneSymmetryV54 = [\"boneLeft\", Utils.getQWordReader(), \"boneRight\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV54 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV54),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneSymmetries\",\n          Utils.getArrayReader(this.ModelBoneSymmetryV54),\n        ];\n\n        this.ModelMeshBindingDataV54 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV54 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV54 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV54),\n          \"InitialPlacement\",\n          this.ModelTransformDataV54,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV54),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV54),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV54 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV54 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV54 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV54 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelMatrix43V54 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelParticleEmitterV54 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV54),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV54),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV54),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V54),\n          \"windInfluence\",\n          \"uint8\",\n          \"alignmentType\",\n          \"uint8\",\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV54 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV54),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV54),\n        ];\n\n        this.ModelObstacleDataV54 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V54),\n        ];\n\n        this.ModelStreakV54 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV54 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV54 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV54),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV54),\n        ];\n\n        this.ModelEffectLightV54 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV54 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV54)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV54 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV54 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV54)];\n\n        this.ModelClothSoftLockV54 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV54 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV54 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"slack\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV54),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV54),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV54),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV54),\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"lockCount\",\n          \"uint16\",\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"flags\",\n          \"uint8\",\n          \"rigidness\",\n          \"uint8\",\n        ];\n\n        this.ModelLightningSystemV54 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV54 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV54 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV54 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV54),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV54),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV54),\n        ];\n\n        this.ModelBoneConstraintLinkV54 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV54 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV54),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV54 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV54 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.__root = this.ModelFileDataV54 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV54),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV54),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV54),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV54),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV54),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV54),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV54),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV54),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV54),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV54),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV54),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV54),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV54),\n        ];\n      },\n\n      // => Version: 53, ReferencedFunction: 0xF2B980\n      53: function () {\n        this.ModelTextureDataV53 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV53 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV53 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV53 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV53 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV53 = [\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV53),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV53),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV53),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV53),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV53),\n        ];\n\n        this.ModelPermutationDataV53 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV53),\n        ];\n\n        this.ModelMeshLodDataV53 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV53 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV53 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV53),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV53),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV53 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV53),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV53),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV53 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV53 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV53,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV53 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV53),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV53 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV53 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV53 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV53),\n          \"InitialPlacement\",\n          this.ModelTransformDataV53,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV53),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV53),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV53 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV53 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV53 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV53 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV53 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV53),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV53),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV53),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV53 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV53),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV53),\n        ];\n\n        this.ModelMatrix43V53 = [\"x\", [\"[]\", \"float32\", 4], \"y\", [\"[]\", \"float32\", 4], \"z\", [\"[]\", \"float32\", 4]];\n\n        this.ModelObstacleDataV53 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"response\",\n          \"uint8\",\n          \"flags\",\n          \"uint32\",\n          \"dragCoef\",\n          \"float32\",\n          \"gravityCoef\",\n          \"float32\",\n          \"length\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"transform\",\n          Utils.getPointerReader(this.ModelMatrix43V53),\n        ];\n\n        this.ModelStreakV53 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV53 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV53 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV53),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV53),\n        ];\n\n        this.ModelEffectLightV53 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV53 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV53)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV53 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV53 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV53)];\n\n        this.ModelClothSoftLockV53 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV53 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothDataV53 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV53),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV53),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV53),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV53),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelLightningSystemV53 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV53 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV53 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV53 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV53),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV53),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV53),\n        ];\n\n        this.ModelBoneConstraintLinkV53 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV53 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV53),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV53 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV53 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.__root = this.ModelFileDataV53 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV53),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV53),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV53),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV53),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV53),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV53),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV53),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV53),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV53),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV53),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV53),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV53),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV53),\n        ];\n      },\n\n      // => Version: 52, ReferencedFunction: 0xF2B830\n      52: function () {\n        this.ModelTextureDataV52 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV52 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV52 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV52 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV52 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV52 = [\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV52),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV52),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV52),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV52),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV52),\n        ];\n\n        this.ModelPermutationDataV52 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV52),\n        ];\n\n        this.ModelMeshLodDataV52 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV52 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV52 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV52),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV52),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV52 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV52),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV52),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV52 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV52 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV52,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV52 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV52),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV52 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV52 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV52 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV52),\n          \"InitialPlacement\",\n          this.ModelTransformDataV52,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV52),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV52),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV52 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV52 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV52 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV52 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV52 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV52),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV52),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV52),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV52 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV52),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV52),\n        ];\n\n        this.ModelObstacleDataV52 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV52 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV52 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV52 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV52),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV52),\n        ];\n\n        this.ModelEffectLightV52 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV52 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV52)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV52 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV52 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV52)];\n\n        this.ModelClothSoftLockV52 = [\"weight\", \"uint8\", \"vertIndex\", \"uint16\"];\n\n        this.ModelClothConstraintV52 = [\n          \"distance\",\n          \"uint16\",\n          \"relationship\",\n          \"uint16\",\n          \"vertIndexA\",\n          \"uint16\",\n          \"vertIndexB\",\n          \"uint16\",\n        ];\n\n        this.ModelClothObstacleV52 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"depth\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n        ];\n\n        this.ModelClothDataV52 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"drag\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"compressibility\",\n          \"float32\",\n          \"stretchiness\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV52),\n          \"softLocks\",\n          Utils.getArrayReader(this.ModelClothSoftLockV52),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV52),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV52),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV52),\n        ];\n\n        this.ModelLightningSystemV52 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV52 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV52 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV52 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV52),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV52),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV52),\n        ];\n\n        this.ModelBoneConstraintLinkV52 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV52 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV52),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV52 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV52 = [\"bone\", Utils.getQWordReader(), \"offset\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.ModelFileDataV52 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV52),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV52),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV52),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV52),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV52),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV52),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV52),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV52),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV52),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV52),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV52),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV52),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV52),\n        ];\n      },\n\n      // => Version: 51, ReferencedFunction: 0xF2B5B0\n      51: function () {\n        this.ModelTextureDataV51 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV51 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV51 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV51 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV51 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV51 = [\n          \"materialId\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV51),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV51),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV51),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV51),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV51),\n        ];\n\n        this.ModelPermutationDataV51 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV51),\n        ];\n\n        this.ModelMeshLodDataV51 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV51 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV51 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV51),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV51),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV51 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV51),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV51),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n          \"materialIndex\",\n          \"uint32\",\n          \"materialName\",\n          Utils.getStringReader(),\n        ];\n\n        this.ModelTransformDataV51 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV51 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV51,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV51 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV51),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV51 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV51 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV51 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV51),\n          \"InitialPlacement\",\n          this.ModelTransformDataV51,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV51),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV51),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV51 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV51 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV51 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV51 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV51 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV51),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV51),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV51),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV51 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV51),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV51),\n        ];\n\n        this.ModelObstacleDataV51 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV51 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV51 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV51 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV51),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV51),\n        ];\n\n        this.ModelEffectLightV51 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV51 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV51)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV51 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV51 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV51)];\n\n        this.ModelClothConstraintV51 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV51 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint8\",\n          \"depth\",\n          \"float32\",\n          \"height\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"width\",\n          \"float32\",\n        ];\n\n        this.ModelClothDataV51 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV51),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV51),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV51),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV51),\n        ];\n\n        this.ModelLightningSystemV51 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV51 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV51 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          [\"[]\", \"float32\", 2],\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV51 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV51),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV51),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV51),\n        ];\n\n        this.ModelBoneConstraintLinkV51 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV51 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV51),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV51 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV51 = [\"bone\", Utils.getQWordReader(), \"offset\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.ModelFileDataV51 = [\n          \"permutations\",\n          Utils.getArrayReader(this.ModelPermutationDataV51),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV51),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV51),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV51),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV51),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV51),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV51),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV51),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV51),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV51),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV51),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV51),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV51),\n        ];\n      },\n\n      // => Version: 50, ReferencedFunction: 0xF2B570\n      50: function () {\n        this.ModelTextureDataV50 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV50 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV50 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV50 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV50 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV50 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV50),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV50),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV50),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV50),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV50),\n        ];\n\n        this.ModelMeshLodDataV50 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV50 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV50 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV50),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV50),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV50 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV50),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV50),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n        ];\n\n        this.ModelTransformDataV50 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV50 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV50,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV50 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV50),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV50 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV50 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV50 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV50),\n          \"InitialPlacement\",\n          this.ModelTransformDataV50,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV50),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV50),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV50 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV50 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV50 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV50 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV50 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV50),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV50),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV50),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV50 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV50),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV50),\n        ];\n\n        this.ModelObstacleDataV50 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV50 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV50 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV50 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV50),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV50),\n        ];\n\n        this.ModelEffectLightV50 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV50 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV50)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV50 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV50 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV50)];\n\n        this.ModelClothConstraintV50 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV50 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV50 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV50),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV50),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV50),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV50),\n        ];\n\n        this.ModelLightningSystemV50 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV50 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV50 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV50 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV50),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV50),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV50),\n        ];\n\n        this.ModelBoneConstraintLinkV50 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV50 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV50),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV50 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV50 = [\"bone\", Utils.getQWordReader(), \"offset\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.ModelFileDataV50 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV50),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV50),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV50),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV50),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV50),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV50),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV50),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV50),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV50),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV50),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV50),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV50),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV50),\n        ];\n      },\n\n      // => Version: 49\n      49: function () {\n        this.ModelTextureDataV49 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV49 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV49 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV49 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV49 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV49 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV49),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV49),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV49),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV49),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV49),\n        ];\n\n        this.ModelMeshLodDataV49 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV49 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV49 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV49),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV49),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV49 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV49),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV49),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n        ];\n\n        this.ModelTransformDataV49 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV49 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV49,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV49 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV49),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV49 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV49 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV49 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV49),\n          \"InitialPlacement\",\n          this.ModelTransformDataV49,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV49),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV49),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV49 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV49 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV49 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV49 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV49 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV49),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV49),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV49),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV49 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV49),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV49),\n        ];\n\n        this.ModelObstacleDataV49 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV49 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV49 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV49 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV49),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV49),\n        ];\n\n        this.ModelEffectLightV49 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV49 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV49)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV49 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV49 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV49)];\n\n        this.ModelClothConstraintV49 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV49 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV49 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV49),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV49),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV49),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV49),\n        ];\n\n        this.ModelLightningSystemV49 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV49 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV49 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV49 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV49),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV49),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV49),\n        ];\n\n        this.ModelBoneConstraintLinkV49 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV49 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV49),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV49 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelBoneOffsetDataV49 = [\"bone\", Utils.getQWordReader(), \"offset\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.ModelFileDataV49 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV49),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV49),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV49),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV49),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV49),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV49),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV49),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV49),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV49),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV49),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV49),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV49),\n          \"boneOffsetData\",\n          Utils.getArrayReader(this.ModelBoneOffsetDataV49),\n        ];\n      },\n\n      // => Version: 48, ReferencedFunction: 0xF2ADE0\n      48: function () {\n        this.ModelTextureDataV48 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV48 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV48 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV48 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV48 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV48 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV48),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV48),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV48),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV48),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV48),\n        ];\n\n        this.ModelMeshLodDataV48 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV48 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV48 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV48),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV48),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.GrBoundData = [\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"boxExtent\",\n          [\"[]\", \"float32\", 3],\n          \"sphereRadius\",\n          \"float32\",\n        ];\n\n        this.ModelMeshDataV48 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV48),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV48),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n          \"bounds\",\n          Utils.getArrayReader(this.GrBoundData),\n        ];\n\n        this.ModelTransformDataV48 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV48 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV48,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV48 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV48),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV48 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV48 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV48 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV48),\n          \"InitialPlacement\",\n          this.ModelTransformDataV48,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV48),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV48),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV48 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV48 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV48 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV48 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV48 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV48),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV48),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV48),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV48 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV48),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV48),\n        ];\n\n        this.ModelObstacleDataV48 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV48 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV48 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV48 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV48),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV48),\n        ];\n\n        this.ModelEffectLightV48 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV48 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV48)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV48 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV48 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV48)];\n\n        this.ModelClothConstraintV48 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV48 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV48 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV48),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV48),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV48),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV48),\n        ];\n\n        this.ModelLightningSystemV48 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV48 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV48 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV48 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV48),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV48),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV48),\n        ];\n\n        this.ModelBoneConstraintLinkV48 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV48 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV48),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV48 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileDataV48 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV48),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV48),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV48),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV48),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV48),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV48),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV48),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV48),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV48),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV48),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV48),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV48),\n        ];\n      },\n\n      // => Version: 47, ReferencedFunction: 0xF2AB60\n      47: function () {\n        this.ModelTextureDataV47 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV47 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV47 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV47 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV47 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV47 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV47),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV47),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV47),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV47),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV47),\n        ];\n\n        this.ModelMeshLodDataV47 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphVertV47 = [\"index\", \"uint16\", \"vector\", [\"[]\", \"float32\", 3]];\n\n        this.ModelMeshMorphTargetV47 = [\n          \"positions\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV47),\n          \"normals\",\n          Utils.getArrayReader(this.ModelMeshMorphVertV47),\n          \"mesh\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV47 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV47),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV47),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV47 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV47 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV47,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV47 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV47),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV47 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV47 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV47 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV47),\n          \"InitialPlacement\",\n          this.ModelTransformDataV47,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV47),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV47),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV47 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV47 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV47 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV47 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV47 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV47),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV47),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV47),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV47 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV47),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV47),\n        ];\n\n        this.ModelObstacleDataV47 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV47 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV47 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV47 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV47),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV47),\n        ];\n\n        this.ModelEffectLightV47 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV47 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV47)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV47 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV47 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV47)];\n\n        this.ModelClothConstraintV47 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV47 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV47 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV47),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV47),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV47),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV47),\n        ];\n\n        this.ModelLightningSystemV47 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV47 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV47 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV47 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV47),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV47),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV47),\n        ];\n\n        this.ModelBoneConstraintLinkV47 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV47 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV47),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV47 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileDataV47 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV47),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV47),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV47),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV47),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV47),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV47),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV47),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV47),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV47),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV47),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV47),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV47),\n        ];\n      },\n\n      // => Version: 46, ReferencedFunction: 0xF2AAD0\n      46: function () {\n        this.ModelTextureDataV46 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV46 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV46 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV46 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV46 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV46 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV46),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV46),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV46),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV46),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV46),\n        ];\n\n        this.ModelMeshLodDataV46 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV46 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV46 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV46),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV46),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV46 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV46 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV46,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV46 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV46),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV46 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV46 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV46 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV46),\n          \"InitialPlacement\",\n          this.ModelTransformDataV46,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV46),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV46),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV46 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV46 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV46 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV46 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV46 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV46),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV46),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV46),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV46 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV46),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV46),\n        ];\n\n        this.ModelObstacleDataV46 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV46 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV46 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV46 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV46),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV46),\n        ];\n\n        this.ModelEffectLightV46 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV46 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV46)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV46 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV46 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV46)];\n\n        this.ModelClothConstraintV46 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV46 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV46 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV46),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV46),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV46),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV46),\n        ];\n\n        this.ModelLightningSystemV46 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV46 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV46 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV46 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV46),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV46),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV46),\n        ];\n\n        this.ModelBoneConstraintLinkV46 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV46 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV46),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV46 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileDataV46 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV46),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV46),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV46),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV46),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV46),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV46),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV46),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV46),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV46),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV46),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV46),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV46),\n        ];\n      },\n\n      // => Version: 45\n      45: function () {\n        this.ModelTextureDataV45 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV45 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV45 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV45 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialTexTransformV45 = [\n          \"random\",\n          \"uint8\",\n          \"uvIndex\",\n          \"uint8\",\n          \"columns\",\n          \"uint8\",\n          \"rows\",\n          \"uint8\",\n          \"count\",\n          \"uint16\",\n          \"fps\",\n          \"float32\",\n          \"scroll\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelMaterialDataV45 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV45),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV45),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV45),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV45),\n          \"texTransforms\",\n          Utils.getArrayReader(this.ModelMaterialTexTransformV45),\n        ];\n\n        this.ModelMeshLodDataV45 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV45 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV45 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV45),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV45),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV45 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV45 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV45,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV45 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV45),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV45 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV45 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV45 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV45),\n          \"InitialPlacement\",\n          this.ModelTransformDataV45,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV45),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV45),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV45 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV45 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV45 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV45 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV45 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV45),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV45),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV45),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV45 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV45),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV45),\n        ];\n\n        this.ModelObstacleDataV45 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV45 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV45 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV45 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV45),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV45),\n        ];\n\n        this.ModelEffectLightV45 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV45 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV45)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV45 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV45 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV45)];\n\n        this.ModelClothConstraintV45 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV45 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV45 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV45),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV45),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV45),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV45),\n        ];\n\n        this.ModelLightningSystemV45 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV45 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV45 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV45 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV45),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV45),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV45),\n        ];\n\n        this.ModelBoneConstraintLinkV45 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV45 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV45),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV45 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileDataV45 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV45),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV45),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV45),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV45),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV45),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV45),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV45),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV45),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV45),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV45),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV45),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV45),\n        ];\n      },\n\n      // => Version: 44, ReferencedFunction: 0xF2A910\n      44: function () {\n        this.ModelTextureDataV44 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV44 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV44 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV44 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV44 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV44),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV44),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV44),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV44),\n        ];\n\n        this.ModelMeshLodDataV44 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV44 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV44 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV44),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV44),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV44 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV44 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV44,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV44 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV44),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV44 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV44 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV44 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV44),\n          \"InitialPlacement\",\n          this.ModelTransformDataV44,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV44),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV44),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV44 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV44 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV44 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV44 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV44 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV44),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV44),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV44),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV44 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV44),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV44),\n        ];\n\n        this.ModelObstacleDataV44 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV44 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV44 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV44 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV44),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV44),\n        ];\n\n        this.ModelEffectLightV44 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV44 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV44)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV44 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV44 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV44)];\n\n        this.ModelClothConstraintV44 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV44 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV44 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV44),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV44),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV44),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV44),\n        ];\n\n        this.ModelLightningSystemV44 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV44 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV44 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV44 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV44),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV44),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV44),\n        ];\n\n        this.ModelBoneConstraintLinkV44 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV44 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV44),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV44 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileDataV44 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV44),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV44),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV44),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV44),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV44),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV44),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV44),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV44),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV44),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV44),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV44),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV44),\n        ];\n      },\n\n      // => Version: 43\n      43: function () {\n        this.ModelTextureDataV43 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV43 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV43 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV43 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV43 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV43),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV43),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV43),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV43),\n        ];\n\n        this.ModelMeshLodDataV43 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV43 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV43 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV43),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV43),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV43 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV43 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV43,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV43 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV43),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingDataV43 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV43 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV43 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV43),\n          \"InitialPlacement\",\n          this.ModelTransformDataV43,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV43),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV43),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV43 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV43 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV43 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV43 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV43 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV43),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV43),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV43),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV43 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV43),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV43),\n        ];\n\n        this.ModelObstacleDataV43 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV43 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV43 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV43 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV43),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV43),\n        ];\n\n        this.ModelEffectLightV43 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV43 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV43)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV43 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV43 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV43)];\n\n        this.ModelClothConstraintV43 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV43 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV43 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV43),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV43),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV43),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV43),\n        ];\n\n        this.ModelLightningSystemV43 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV43 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV43 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV43 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV43),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV43),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV43),\n        ];\n\n        this.ModelBoneConstraintLinkV43 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV43 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV43),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV43 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileDataV43 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV43),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV43),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV43),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV43),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV43),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV43),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV43),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV43),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV43),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV43),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV43),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV43),\n        ];\n      },\n\n      // => Version: 42\n      42: function () {\n        this.ModelTextureDataV42 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV42 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV42 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV42 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV42 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV42),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV42),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV42),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV42),\n        ];\n\n        this.ModelMeshLodDataV42 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV42 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV42 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV42),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV42),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV42 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV42 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV42,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV42 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV42),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV42 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV42 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV42 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV42),\n          \"InitialPlacement\",\n          this.ModelTransformDataV42,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV42),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV42),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV42 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV42 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV42 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV42 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV42 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV42),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV42),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV42),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV42 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV42),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV42),\n        ];\n\n        this.ModelObstacleDataV42 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV42 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV42 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV42 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV42),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV42),\n        ];\n\n        this.ModelEffectLightV42 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV42 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV42)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV42 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV42 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV42)];\n\n        this.ModelClothConstraintV42 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV42 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV42 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV42),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV42),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV42),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV42),\n        ];\n\n        this.ModelLightningSystemV42 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV42 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV42 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV42 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV42),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV42),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV42),\n        ];\n\n        this.ModelBoneConstraintLinkV42 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV42 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV42),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV42 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileDataV42 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV42),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV42),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV42),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV42),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV42),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV42),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV42),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV42),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV42),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV42),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV42),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV42),\n        ];\n      },\n\n      // => Version: 41\n      41: function () {\n        this.ModelTextureDataV41 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV41 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV41 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV41 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV41 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV41),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV41),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV41),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV41),\n        ];\n\n        this.ModelMeshLodDataV41 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV41 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV41 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV41),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV41),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV41 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV41 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV41,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV41 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV41),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV41 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV41 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV41 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV41),\n          \"InitialPlacement\",\n          this.ModelTransformDataV41,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV41),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV41),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV41 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV41 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV41 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV41 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV41 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV41),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV41),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV41),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV41 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV41),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV41),\n        ];\n\n        this.ModelObstacleDataV41 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV41 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV41 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV41 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV41),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV41),\n        ];\n\n        this.ModelEffectLightV41 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV41 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV41)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV41 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV41 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV41)];\n\n        this.ModelClothConstraintV41 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV41 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV41 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV41),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV41),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV41),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV41),\n        ];\n\n        this.ModelLightningSystemV41 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV41 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV41 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV41 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV41),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV41),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV41),\n        ];\n\n        this.ModelBoneConstraintLinkV41 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV41 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV41),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelSoftBodyDataV41 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertexFvf\",\n          \"uint32\",\n          \"vertBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"bones\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.__root = this.ModelFileDataV41 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV41),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV41),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV41),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV41),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV41),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV41),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV41),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV41),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV41),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV41),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV41),\n          \"softBodyData\",\n          Utils.getArrayReader(this.ModelSoftBodyDataV41),\n        ];\n      },\n\n      // => Version: 40, ReferencedFunction: 0xF2A8C0\n      40: function () {\n        this.ModelTextureDataV40 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV40 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV40 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV40 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV40 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV40),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV40),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV40),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV40),\n        ];\n\n        this.ModelMeshLodDataV40 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV40 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV40 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV40),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV40),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV40 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV40 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV40,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV40 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV40),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV40 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV40 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV40 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV40),\n          \"InitialPlacement\",\n          this.ModelTransformDataV40,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV40),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV40),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV40 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV40 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV40 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV40 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV40 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"offset\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV40),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV40),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV40),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"velocityInherit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV40 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV40),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV40),\n        ];\n\n        this.ModelObstacleDataV40 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV40 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV40 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV40 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV40),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV40),\n        ];\n\n        this.ModelEffectLightV40 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV40 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV40)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV40 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV40 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV40)];\n\n        this.ModelClothConstraintV40 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV40 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV40 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV40),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV40),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV40),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV40),\n        ];\n\n        this.ModelLightningSystemV40 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV40 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV40 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV40 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV40),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV40),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV40),\n        ];\n\n        this.ModelBoneConstraintLinkV40 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV40 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV40),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.ModelFileDataV40 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV40),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV40),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV40),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV40),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV40),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV40),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV40),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV40),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV40),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV40),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV40),\n        ];\n      },\n\n      // => Version: 39, ReferencedFunction: 0xF2A810\n      39: function () {\n        this.ModelTextureDataV39 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV39 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV39 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV39 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV39 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV39),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV39),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV39),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV39),\n        ];\n\n        this.ModelMeshLodDataV39 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV39 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV39 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV39),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV39),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV39 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV39 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV39,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV39 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV39),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV39 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV39 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV39 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV39),\n          \"InitialPlacement\",\n          this.ModelTransformDataV39,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV39),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV39),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV39 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV39 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV39 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV39 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV39 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV39),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV39),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV39),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV39 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV39),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV39),\n        ];\n\n        this.ModelObstacleDataV39 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV39 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV39 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorStart\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV39 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV39),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV39),\n        ];\n\n        this.ModelEffectLightV39 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV39 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV39)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV39 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV39 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV39)];\n\n        this.ModelClothConstraintV39 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV39 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV39 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV39),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV39),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV39),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV39),\n        ];\n\n        this.ModelLightningSystemV39 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV39 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV39 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV39 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV39),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV39),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV39),\n        ];\n\n        this.ModelBoneConstraintLinkV39 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV39 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV39),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.ModelFileDataV39 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV39),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV39),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV39),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV39),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV39),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV39),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV39),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV39),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV39),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV39),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV39),\n        ];\n      },\n\n      // => Version: 38, ReferencedFunction: 0xF2A6A0\n      38: function () {\n        this.ModelTextureDataV38 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV38 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV38 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV38 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV38 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV38),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV38),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV38),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV38),\n        ];\n\n        this.ModelMeshLodDataV38 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV38 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV38 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV38),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV38),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV38 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV38 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV38,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV38 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV38),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV38 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV38 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV38 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV38),\n          \"InitialPlacement\",\n          this.ModelTransformDataV38,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV38),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV38),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV38 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV38 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV38 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV38 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV38 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV38),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV38),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV38),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV38 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV38),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV38),\n        ];\n\n        this.ModelObstacleDataV38 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV38 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV38 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV38 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV38),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV38),\n        ];\n\n        this.ModelEffectLightV38 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV38 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV38)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV38 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV38 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV38)];\n\n        this.ModelClothConstraintV38 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV38 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV38 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV38),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV38),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV38),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV38),\n        ];\n\n        this.ModelLightningSystemV38 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV38 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV38 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV38 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV38),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV38),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV38),\n        ];\n\n        this.ModelBoneConstraintLinkV38 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV38 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV38),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.ModelFileDataV38 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV38),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV38),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV38),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV38),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV38),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV38),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV38),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV38),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV38),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV38),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV38),\n        ];\n      },\n\n      // => Version: 37\n      37: function () {\n        this.ModelTextureDataV37 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV37 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV37 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV37 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV37 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV37),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV37),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV37),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV37),\n        ];\n\n        this.ModelMeshLodDataV37 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV37 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV37 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV37),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV37),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV37 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV37 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV37,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV37 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV37),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV37 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV37 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV37 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV37),\n          \"InitialPlacement\",\n          this.ModelTransformDataV37,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV37),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV37),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV37 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV37 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV37 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV37 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV37 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV37),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV37),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV37),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV37 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV37),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV37),\n        ];\n\n        this.ModelObstacleDataV37 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV37 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV37 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV37 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV37),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV37),\n        ];\n\n        this.ModelEffectLightV37 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV37 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV37)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV37 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV37 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV37)];\n\n        this.ModelClothConstraintV37 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV37 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV37 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV37),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV37),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV37),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV37),\n        ];\n\n        this.ModelLightningSystemV37 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV37 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV37 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV37 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV37),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV37),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV37),\n        ];\n\n        this.ModelBoneConstraintLinkV37 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV37 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV37),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.ModelFileDataV37 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV37),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV37),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV37),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV37),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV37),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV37),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV37),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV37),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV37),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV37),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV37),\n        ];\n      },\n\n      // => Version: 36, ReferencedFunction: 0xF2A560\n      36: function () {\n        this.ModelTextureDataV36 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV36 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV36 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV36 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV36 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV36),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV36),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV36),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV36),\n        ];\n\n        this.ModelMeshLodDataV36 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV36 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV36 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV36),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV36),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV36 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV36 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV36,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV36 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV36),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV36 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV36 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV36 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV36),\n          \"InitialPlacement\",\n          this.ModelTransformDataV36,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV36),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV36),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV36 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV36 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV36 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV36 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV36 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV36),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV36),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV36),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV36 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV36),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV36),\n        ];\n\n        this.ModelObstacleDataV36 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV36 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV36 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV36 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV36),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV36),\n        ];\n\n        this.ModelEffectLightV36 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV36 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV36)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV36 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV36 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV36)];\n\n        this.ModelClothConstraintV36 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV36 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV36 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV36),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV36),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV36),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV36),\n        ];\n\n        this.ModelLightningSystemV36 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV36 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV36 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV36 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV36),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV36),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV36),\n        ];\n\n        this.ModelBoneConstraintLinkV36 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV36 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV36),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.ModelFileDataV36 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV36),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV36),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV36),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV36),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV36),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV36),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV36),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV36),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV36),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV36),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV36),\n        ];\n      },\n\n      // => Version: 35, ReferencedFunction: 0xF2A400\n      35: function () {\n        this.ModelTextureDataV35 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV35 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV35 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV35 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV35 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV35),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV35),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV35),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV35),\n        ];\n\n        this.ModelMeshLodDataV35 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV35 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV35 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV35),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV35),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV35 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV35 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV35,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV35 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV35),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV35 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV35 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV35 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV35),\n          \"InitialPlacement\",\n          this.ModelTransformDataV35,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV35),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV35),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV35 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV35 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV35 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV35 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV35 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV35),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV35),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV35),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV35 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV35),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV35),\n        ];\n\n        this.ModelObstacleDataV35 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV35 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV35 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV35 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV35),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV35),\n        ];\n\n        this.ModelEffectLightV35 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV35 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV35)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV35 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV35 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV35)];\n\n        this.ModelClothConstraintV35 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV35 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV35 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV35),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV35),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV35),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV35),\n        ];\n\n        this.ModelLightningSystemV35 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV35 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          [\"[]\", \"uint32\", 3],\n          \"colorEnd\",\n          [\"[]\", \"uint32\", 3],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"opacity\",\n          [\"[]\", \"float32\", 2],\n          \"opacityPreset\",\n          \"uint8\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV35 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"updatePos\",\n          \"float32\",\n        ];\n\n        this.ModelLightningDataV35 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV35),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV35),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV35),\n        ];\n\n        this.ModelBoneConstraintV35 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"uint8\",\n          \"drag\",\n          \"uint8\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"uint8\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"uint8\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"uint8\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"uint8\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"uint8\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"uint8\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.ModelFileDataV35 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV35),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV35),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV35),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV35),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV35),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV35),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV35),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV35),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV35),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV35),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV35),\n        ];\n      },\n\n      // => Version: 34, ReferencedFunction: 0xF2A2E0\n      34: function () {\n        this.ModelTextureDataV34 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV34 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV34 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV34 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV34 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV34),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV34),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV34),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV34),\n        ];\n\n        this.ModelMeshLodDataV34 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV34 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV34 = [\n          \"visBone\",\n          Utils.getQWordReader(),\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV34),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV34),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV34 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV34 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV34,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV34 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV34),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV34 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV34 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV34 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV34),\n          \"InitialPlacement\",\n          this.ModelTransformDataV34,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV34),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV34),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV34 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV34 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV34 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV34 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV34 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV34),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV34),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV34),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV34 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV34),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV34),\n        ];\n\n        this.ModelObstacleDataV34 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelStreakV34 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV34 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV34 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV34),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV34),\n        ];\n\n        this.ModelEffectLightV34 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n        ];\n\n        this.ModelLightDataV34 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV34)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV34 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV34 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV34)];\n\n        this.ModelClothConstraintV34 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV34 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV34 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV34),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV34),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV34),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV34),\n        ];\n\n        this.ModelLightningSystemV34 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV34 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV34 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n        ];\n\n        this.ModelLightningDataV34 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV34),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV34),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV34),\n        ];\n\n        this.ModelBoneConstraintV34 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"uint8\",\n          \"drag\",\n          \"uint8\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"uint8\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"uint8\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"uint8\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"uint8\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"uint8\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"uint8\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.ModelFileDataV34 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV34),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV34),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV34),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV34),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV34),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV34),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV34),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV34),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV34),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV34),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV34),\n        ];\n      },\n\n      // => Version: 33\n      33: function () {\n        this.ModelTextureDataV33 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV33 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV33 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV33 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV33 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV33),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV33),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV33),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV33),\n        ];\n\n        this.ModelMeshLodDataV33 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV33 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV33 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV33),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV33),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV33 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV33 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV33,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV33 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV33),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV33 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV33 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV33 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV33),\n          \"InitialPlacement\",\n          this.ModelTransformDataV33,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV33),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV33),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV33 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV33 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV33 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV33 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV33 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV33),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV33),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV33),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV33 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV33),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV33),\n        ];\n\n        this.ModelObstacleDataV33 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV33 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV33 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV33 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV33),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV33),\n        ];\n\n        this.ModelEffectLightV33 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV33 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV33)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV33 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV33 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV33)];\n\n        this.ModelClothConstraintV33 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV33 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV33 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV33),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV33),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV33),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV33),\n        ];\n\n        this.ModelLightningSystemV33 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV33 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV33 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningDataV33 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV33),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV33),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV33),\n        ];\n\n        this.ModelBoneConstraintV33 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"uint8\",\n          \"drag\",\n          \"uint8\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"uint8\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"uint8\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"uint8\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"uint8\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"uint8\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"uint8\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.ModelFileDataV33 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV33),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV33),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV33),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV33),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV33),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV33),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV33),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV33),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV33),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV33),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV33),\n        ];\n      },\n\n      // => Version: 32\n      32: function () {\n        this.ModelTextureDataV32 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV32 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV32 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV32 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV32 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV32),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV32),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV32),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV32),\n        ];\n\n        this.ModelMeshLodDataV32 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV32 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV32 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV32),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV32),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV32 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV32 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV32,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV32 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV32),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV32 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV32 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV32 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV32),\n          \"InitialPlacement\",\n          this.ModelTransformDataV32,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV32),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV32),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV32 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV32 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV32 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV32 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV32 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV32),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV32),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV32),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV32 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV32),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV32),\n        ];\n\n        this.ModelObstacleDataV32 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV32 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV32 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV32 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV32),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV32),\n        ];\n\n        this.ModelEffectLightV32 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV32 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV32)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV32 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV32 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV32)];\n\n        this.ModelClothConstraintV32 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV32 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV32 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV32),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV32),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV32),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV32),\n        ];\n\n        this.ModelLightningSystemV32 = [\n          \"boltIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningBoltV32 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"nodeIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"colorBegin\",\n          \"uint32\",\n          \"colorEnd\",\n          \"uint32\",\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"fps\",\n          \"float32\",\n          \"probability\",\n          \"float32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"numSegments\",\n          \"uint16\",\n          \"period\",\n          \"float32\",\n          \"texOffset\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"texSpeed\",\n          \"float32\",\n          \"thickness\",\n          \"float32\",\n          \"thicknessPreset\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"variance\",\n          \"float32\",\n          \"variancePreset\",\n          \"uint8\",\n          \"noise\",\n          \"float32\",\n        ];\n\n        this.ModelLightningNodeV32 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"childrenIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"flags\",\n          \"uint32\",\n          \"probability\",\n          \"float32\",\n          \"radius\",\n          \"float32\",\n          \"shape\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightningDataV32 = [\n          \"systems\",\n          Utils.getArrayReader(this.ModelLightningSystemV32),\n          \"bolts\",\n          Utils.getArrayReader(this.ModelLightningBoltV32),\n          \"nodes\",\n          Utils.getArrayReader(this.ModelLightningNodeV32),\n        ];\n\n        this.__root = this.ModelFileDataV32 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV32),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV32),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV32),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV32),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV32),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV32),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV32),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV32),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV32),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelLightningDataV32),\n        ];\n      },\n\n      // => Version: 31\n      31: function () {\n        this.ModelTextureDataV31 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV31 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV31 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV31 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV31 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV31),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV31),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV31),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV31),\n        ];\n\n        this.ModelMeshLodDataV31 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV31 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV31 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV31),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV31),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV31 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV31 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV31,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV31 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV31),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV31 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV31 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV31 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV31),\n          \"InitialPlacement\",\n          this.ModelTransformDataV31,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV31),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV31),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV31 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV31 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV31 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV31 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV31 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV31),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV31),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV31),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV31 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV31),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV31),\n        ];\n\n        this.ModelObstacleDataV31 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV31 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV31 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"texV\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV31 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV31),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV31),\n        ];\n\n        this.ModelEffectLightV31 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV31 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV31)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV31 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV31 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV31)];\n\n        this.ModelClothConstraintV31 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV31 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV31 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV31),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV31),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV31),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV31),\n        ];\n\n        this.__root = this.ModelFileDataV31 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV31),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV31),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV31),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV31),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV31),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV31),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV31),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV31),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV31),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 30\n      30: function () {\n        this.ModelTextureDataV30 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV30 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV30 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV30 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV30 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV30),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV30),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV30),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV30),\n        ];\n\n        this.ModelMeshLodDataV30 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV30 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV30 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV30),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV30),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV30 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV30 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV30,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV30 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV30),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV30 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV30 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV30 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV30),\n          \"InitialPlacement\",\n          this.ModelTransformDataV30,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV30),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV30),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV30 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV30 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV30 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV30 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV30 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV30),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV30),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV30),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV30 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV30),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV30),\n        ];\n\n        this.ModelObstacleDataV30 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV30 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV30 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV30 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV30),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV30),\n        ];\n\n        this.ModelEffectLightV30 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV30 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV30)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV30 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV30 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV30)];\n\n        this.ModelClothConstraintV30 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV30 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV30 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV30),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV30),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV30),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV30),\n        ];\n\n        this.__root = this.ModelFileDataV30 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV30),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV30),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV30),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV30),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV30),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV30),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV30),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV30),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV30),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 29, ReferencedFunction: 0xF2A230\n      29: function () {\n        this.ModelTextureDataV29 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint32\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV29 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMatConstLinkV29 = [\"linkToken\", Utils.getQWordReader(), \"constantToken\", \"uint32\"];\n\n        this.ModelUVTransLinkV29 = [\"linkToken\", Utils.getQWordReader(), \"uvAnimId\", \"uint32\", \"type\", \"uint8\"];\n\n        this.ModelMaterialDataV29 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV29),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV29),\n          \"matConstLinks\",\n          Utils.getArrayReader(this.ModelMatConstLinkV29),\n          \"uvTransLinks\",\n          Utils.getArrayReader(this.ModelUVTransLinkV29),\n        ];\n\n        this.ModelMeshLodDataV29 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV29 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV29 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV29),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV29),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV29 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV29 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV29,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV29 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV29),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV29 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV29 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV29 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV29),\n          \"InitialPlacement\",\n          this.ModelTransformDataV29,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV29),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV29),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV29 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV29 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV29 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV29 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV29 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV29),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV29),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV29),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV29 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV29),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV29),\n        ];\n\n        this.ModelObstacleDataV29 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV29 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV29 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV29 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV29),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV29),\n        ];\n\n        this.ModelEffectLightV29 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV29 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV29)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV29 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV29 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV29)];\n\n        this.ModelClothConstraintV29 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothObstacleV29 = [\"bone\", Utils.getQWordReader(), \"type\", \"uint8\"];\n\n        this.ModelClothDataV29 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV29),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV29),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV29),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelClothObstacleV29),\n        ];\n\n        this.__root = this.ModelFileDataV29 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV29),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV29),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV29),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV29),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV29),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV29),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV29),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV29),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV29),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 28\n      28: function () {\n        this.ModelTextureDataV28 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV28 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV28 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV28),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV28),\n        ];\n\n        this.ModelMeshLodDataV28 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV28 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV28 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV28),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV28),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n          \"minBound\",\n          [\"[]\", \"float32\", 3],\n          \"maxBound\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelTransformDataV28 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV28 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV28,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV28 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV28),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV28 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV28 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV28 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV28),\n          \"InitialPlacement\",\n          this.ModelTransformDataV28,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV28),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV28),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n          \"center\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.ModelPropertyDataV28 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV28 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV28 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV28 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV28 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV28),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV28),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV28),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV28 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV28),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV28),\n        ];\n\n        this.ModelObstacleDataV28 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV28 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV28 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV28 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV28),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV28),\n        ];\n\n        this.ModelEffectLightV28 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV28 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV28)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV28 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV28 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV28)];\n\n        this.ModelClothConstraintV28 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV28 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV28),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV28),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV28),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV28 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV28),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV28),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV28),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV28),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV28),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV28),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV28),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV28),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV28),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 27\n      27: function () {\n        this.ModelTextureDataV27 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV27 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV27 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV27),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV27),\n        ];\n\n        this.ModelMeshLodDataV27 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV27 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV27 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV27),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV27),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"meshName\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelTransformDataV27 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV27 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV27,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV27 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV27),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV27 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV27 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV27 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV27),\n          \"InitialPlacement\",\n          this.ModelTransformDataV27,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV27),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV27),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelPropertyDataV27 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV27 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV27 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV27 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV27 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV27),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV27),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV27),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV27 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV27),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV27),\n        ];\n\n        this.ModelObstacleDataV27 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV27 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV27 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV27 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV27),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV27),\n        ];\n\n        this.ModelEffectLightV27 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV27 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV27)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV27 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV27 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV27)];\n\n        this.ModelClothConstraintV27 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV27 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV27),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV27),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV27),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV27 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV27),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV27),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV27),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV27),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV27),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV27),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV27),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV27),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV27),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 26, ReferencedFunction: 0xF29DB0\n      26: function () {\n        this.ModelTextureDataV26 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV26 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV26 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV26),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV26),\n        ];\n\n        this.ModelMeshLodDataV26 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV26 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV26 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV26),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV26),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV26 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV26 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV26,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV26 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV26),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV26 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV26 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV26 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV26),\n          \"InitialPlacement\",\n          this.ModelTransformDataV26,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV26),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV26),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelPropertyDataV26 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.ModelParticleCloudV26 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV26 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV26 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV26 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV26),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV26),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV26),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV26 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV26),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV26),\n        ];\n\n        this.ModelObstacleDataV26 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV26 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV26 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV26 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV26),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV26),\n        ];\n\n        this.ModelEffectLightV26 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV26 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV26)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV26 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV26 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV26)];\n\n        this.ModelClothConstraintV26 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV26 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV26),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV26),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV26),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV26 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV26),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV26),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV26),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyDataV26),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV26),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV26),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV26),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV26),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV26),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 25, ReferencedFunction: 0xF29C20\n      25: function () {\n        this.ModelTextureDataV25 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV25 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV25 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV25),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV25),\n        ];\n\n        this.ModelMeshLodDataV25 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV25 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV25 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV25),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV25),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV25 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV25 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV25,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV25 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV25),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV25 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV25 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV25 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV25),\n          \"InitialPlacement\",\n          this.ModelTransformDataV25,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV25),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV25),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelFloatPropertyDataV25 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV25 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV25),\n        ];\n\n        this.ModelParticleCloudV25 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV25 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV25 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"float32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV25 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV25),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV25),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV25),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV25 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV25),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV25),\n        ];\n\n        this.ModelObstacleDataV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV25 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"jitter\",\n          \"float32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV25 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV25),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV25),\n        ];\n\n        this.ModelEffectLightV25 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV25 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV25)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV25 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV25 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV25)];\n\n        this.ModelClothConstraintV25 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV25 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV25),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV25),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV25),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV25 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV25),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV25),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV25),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV25),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV25),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV25),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV25),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV25),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV25),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 24, ReferencedFunction: 0xF29BC0\n      24: function () {\n        this.ModelTextureDataV24 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV24 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV24 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV24),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV24),\n        ];\n\n        this.ModelMeshLodDataV24 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV24 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV24 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV24),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV24),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV24 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV24 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV24,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV24 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV24),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV24 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV24 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV24 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV24),\n          \"InitialPlacement\",\n          this.ModelTransformDataV24,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV24),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV24),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelFloatPropertyDataV24 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV24 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV24),\n        ];\n\n        this.ModelParticleCloudV24 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV24 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV24 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV24 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"emitterFlags\",\n          \"uint32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV24),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV24),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV24),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV24 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV24),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV24),\n        ];\n\n        this.ModelObstacleDataV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV24 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV24 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV24),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV24),\n        ];\n\n        this.ModelEffectLightV24 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV24 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV24)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV24 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV24 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV24)];\n\n        this.ModelClothConstraintV24 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV24 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV24),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV24),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV24),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV24 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV24),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV24),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV24),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV24),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV24),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV24),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV24),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV24),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV24),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 23, ReferencedFunction: 0xF29B50\n      23: function () {\n        this.ModelTextureDataV23 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV23 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV23 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV23),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV23),\n        ];\n\n        this.ModelMeshLodDataV23 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV23 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV23 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV23),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV23),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV23 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV23 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV23,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV23 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV23),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV23 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV23 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV23 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV23),\n          \"InitialPlacement\",\n          this.ModelTransformDataV23,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV23),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV23),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelFloatPropertyDataV23 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV23 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV23),\n        ];\n\n        this.ModelParticleCloudV23 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV23 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV23 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV23 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV23),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV23),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV23),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV23 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV23),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV23),\n        ];\n\n        this.ModelObstacleDataV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakV23 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV23 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV23),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV23),\n        ];\n\n        this.ModelEffectLightV23 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV23 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV23)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV23 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV23 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV23)];\n\n        this.ModelClothConstraintV23 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV23 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV23),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV23),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV23),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV23 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV23),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV23),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV23),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV23),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV23),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelObstacleDataV23),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV23),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV23),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV23),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 22\n      22: function () {\n        this.ModelTextureDataV22 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV22 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV22 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV22),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV22),\n        ];\n\n        this.ModelMeshLodDataV22 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV22 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV22 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV22),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV22),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV22 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV22 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV22,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV22 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV22),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV22 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV22 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV22 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV22),\n          \"InitialPlacement\",\n          this.ModelTransformDataV22,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV22),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV22),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelFloatPropertyDataV22 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV22 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV22),\n        ];\n\n        this.ModelParticleCloudV22 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV22 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV22 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV22 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV22),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV22),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV22),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleObstacleV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV22 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV22),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV22),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV22),\n        ];\n\n        this.ModelStreakV22 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV22 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV22),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV22),\n        ];\n\n        this.ModelEffectLightV22 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV22 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV22)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV22 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV22 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV22)];\n\n        this.ModelClothConstraintV22 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV22 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV22),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV22),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV22),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV22 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV22),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV22),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV22),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV22),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV22),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV22),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV22),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV22),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 21, ReferencedFunction: 0xF29A90\n      21: function () {\n        this.ModelTextureDataV21 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV21 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV21 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV21),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV21),\n        ];\n\n        this.ModelMeshLodDataV21 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV21 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV21 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV21),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV21),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV21 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV21 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV21,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV21 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV21),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV21 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV21 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV21 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV21),\n          \"InitialPlacement\",\n          this.ModelTransformDataV21,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV21),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV21),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelFloatPropertyDataV21 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV21 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV21),\n        ];\n\n        this.ModelParticleCloudV21 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"velocity\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelParticleCurveV21 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV21 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV21 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"alignmentType\",\n          \"uint8\",\n          \"alignmentDir\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          \"float32\",\n          \"colorFalloff\",\n          [\"[]\", \"float32\", 2],\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV21),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV21),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV21),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n          \"windInfluence\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleObstacleV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV21 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV21),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV21),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV21),\n        ];\n\n        this.ModelStreakV21 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"noise\",\n          \"float32\",\n          \"spawnDist\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n          \"wind\",\n          \"float32\",\n        ];\n\n        this.ModelStreakAnchorV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV21 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV21),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV21),\n        ];\n\n        this.ModelEffectLightV21 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV21 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV21)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV21 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV21 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV21)];\n\n        this.ModelClothConstraintV21 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV21 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV21),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV21),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV21),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV21 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV21),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV21),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV21),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV21),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV21),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV21),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV21),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV21),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 20, ReferencedFunction: 0xF298E0\n      20: function () {\n        this.ModelTextureDataV20 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV20 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV20 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV20),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV20),\n        ];\n\n        this.ModelMeshLodDataV20 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV20 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV20 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV20),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV20),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV20 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV20 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV20,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV20 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV20),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV20 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV20 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV20 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV20),\n          \"InitialPlacement\",\n          this.ModelTransformDataV20,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV20),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV20),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelFloatPropertyDataV20 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV20 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV20),\n        ];\n\n        this.ModelParticleCloudV20 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV20 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV20 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV20 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV20),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV20),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV20),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV20 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV20 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV20),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV20),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV20),\n        ];\n\n        this.ModelStreakV20 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV20 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV20 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV20),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV20),\n        ];\n\n        this.ModelEffectLightV20 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV20 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV20)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV20 = [\"token\", Utils.getQWordReader(), \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV20 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV20)];\n\n        this.ModelClothConstraintV20 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV20 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV20),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV20),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV20),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV20 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV20),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV20),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV20),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV20),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV20),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV20),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV20),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV20),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 19\n      19: function () {\n        this.ModelTextureDataV19 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV19 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV19 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV19),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV19),\n        ];\n\n        this.ModelMeshLodDataV19 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV19 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV19 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV19),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV19),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV19 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV19 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV19,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV19 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV19),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV19 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV19 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV19 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV19),\n          \"InitialPlacement\",\n          this.ModelTransformDataV19,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV19),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV19),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelFloatPropertyDataV19 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV19 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV19),\n        ];\n\n        this.ModelParticleCloudV19 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV19 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV19 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV19 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV19),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV19),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV19),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV19 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV19 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV19),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV19),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV19),\n        ];\n\n        this.ModelStreakV19 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV19 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV19 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV19),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV19),\n        ];\n\n        this.ModelEffectLightV19 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV19 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV19)];\n\n        this.PackVertexType = [\"fvf\", \"uint32\", \"vertices\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelClothBoneWeightV19 = [\"index\", \"uint16\", \"weight\", \"uint8\"];\n\n        this.ModelClothMeshGroupV19 = [\"weights\", Utils.getArrayReader(this.ModelClothBoneWeightV19)];\n\n        this.ModelClothConstraintV19 = [\"vertIndexA\", \"uint16\", \"vertIndexB\", \"uint16\", \"distance\", \"float32\"];\n\n        this.ModelClothDataV19 = [\n          \"materialIndex\",\n          \"uint32\",\n          \"flags\",\n          \"uint8\",\n          \"gravity\",\n          \"float32\",\n          \"weight\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"rigidness\",\n          \"uint8\",\n          \"mesh\",\n          this.PackVertexType,\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"lockCount\",\n          \"uint16\",\n          \"groups\",\n          Utils.getArrayReader(this.ModelClothMeshGroupV19),\n          \"softLocks\",\n          Utils.getArrayReader(\"uint8\"),\n          \"lod0Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV19),\n          \"lod1Constraints\",\n          Utils.getArrayReader(this.ModelClothConstraintV19),\n          \"lod1VertexCount\",\n          \"uint16\",\n          \"lod1Indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"barycentricCoords\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"barycentricIndices\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.__root = this.ModelFileDataV19 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV19),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV19),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV19),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV19),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV19),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV19),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV19),\n          \"clothData\",\n          Utils.getArrayReader(this.ModelClothDataV19),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 18\n      18: function () {\n        this.ModelTextureDataV18 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV18 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV18 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV18),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV18),\n        ];\n\n        this.ModelMeshLodDataV18 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV18 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"meshName\",\n          Utils.getStringReader(),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV18 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV18),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV18),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV18 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV18 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV18,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV18 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV18),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV18 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV18 = [\"trackMask\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelModelDataV18 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV18),\n          \"InitialPlacement\",\n          this.ModelTransformDataV18,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV18),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV18),\n          \"skeletonHash\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelFloatPropertyDataV18 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV18 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV18),\n        ];\n\n        this.ModelParticleCloudV18 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV18 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV18 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV18 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV18),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV18),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV18),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV18 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV18 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV18),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV18),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV18),\n        ];\n\n        this.ModelStreakV18 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV18 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV18 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV18),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV18),\n        ];\n\n        this.ModelEffectLightV18 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 3],\n          \"farDistance\",\n          \"float32\",\n          \"intensity\",\n          \"float32\",\n          \"nearDistance\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelLightDataV18 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV18)];\n\n        this.__root = this.ModelFileDataV18 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV18),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV18),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV18),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV18),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV18),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV18),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV18),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 17\n      17: function () {\n        this.ModelTextureDataV17 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV17 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV17 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV17),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV17),\n        ];\n\n        this.ModelMeshLodDataV17 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.ModelMeshMorphTargetV17 = [\n          \"positionIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"positions\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"normalIndices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"normals\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV17 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV17),\n          \"morphTargets\",\n          Utils.getArrayReader(this.ModelMeshMorphTargetV17),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV17 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV17 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV17,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV17 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV17),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV17 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV17 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV17),\n          \"InitialPlacement\",\n          this.ModelTransformDataV17,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV17),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV17 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV17 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV17),\n        ];\n\n        this.ModelParticleCloudV17 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV17 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV17 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV17 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV17),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV17),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV17),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV17 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV17 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV17),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV17),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV17),\n        ];\n\n        this.ModelStreakV17 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV17 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV17 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV17),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV17),\n        ];\n\n        this.ModelEffectLightV17 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"ranges\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelLightDataV17 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV17)];\n\n        this.__root = this.ModelFileDataV17 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV17),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV17),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV17),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV17),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV17),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV17),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV17),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n          \"soundScript\",\n          Utils.getFileNameReader(),\n        ];\n      },\n\n      // => Version: 16\n      16: function () {\n        this.ModelTextureDataV16 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV16 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV16 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV16),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV16),\n        ];\n\n        this.ModelMeshLodDataV16 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV16 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV16),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV16 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV16 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV16,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV16 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV16),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV16 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV16 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV16),\n          \"InitialPlacement\",\n          this.ModelTransformDataV16,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV16),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV16 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV16 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV16),\n        ];\n\n        this.ModelParticleCloudV16 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV16 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV16 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV16 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV16),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV16),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV16),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV16 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV16 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV16),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV16),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV16),\n        ];\n\n        this.ModelStreakV16 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV16 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV16 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV16),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV16),\n        ];\n\n        this.ModelEffectLightV16 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"ranges\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelLightDataV16 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV16)];\n\n        this.__root = this.ModelFileDataV16 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV16),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV16),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV16),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV16),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV16),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV16),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV16),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"lodOverride\",\n          [\"[]\", \"float32\", 2],\n        ];\n      },\n\n      // => Version: 15\n      15: function () {\n        this.ModelTextureDataV15 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV15 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV15 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV15),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV15),\n        ];\n\n        this.ModelMeshLodDataV15 = [\"indices\", Utils.getArrayReader(\"uint16\")];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV15 = [\n          \"lods\",\n          Utils.getArrayReader(this.ModelMeshLodDataV15),\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV15 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV15 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV15,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV15 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV15),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV15 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV15 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV15),\n          \"InitialPlacement\",\n          this.ModelTransformDataV15,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV15),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV15 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV15 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV15),\n        ];\n\n        this.ModelParticleCloudV15 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV15 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV15 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV15 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV15),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV15),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV15),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV15 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV15 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV15),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV15),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV15),\n        ];\n\n        this.ModelStreakV15 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV15 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV15 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV15),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV15),\n        ];\n\n        this.ModelEffectLightV15 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"ranges\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.ModelLightDataV15 = [\"effectLights\", Utils.getArrayReader(this.ModelEffectLightV15)];\n\n        this.__root = this.ModelFileDataV15 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV15),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV15),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV15),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV15),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV15),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV15),\n          \"lightData\",\n          Utils.getPointerReader(this.ModelLightDataV15),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n      },\n\n      // => Version: 14\n      14: function () {\n        this.ModelTextureDataV14 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV14 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV14 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV14),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV14),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV14 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"actionOffsetNames\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"actionOffsets\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.ModelTransformDataV14 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV14 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV14,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV14 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV14),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV14 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV14 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV14),\n          \"InitialPlacement\",\n          this.ModelTransformDataV14,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV14),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV14 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV14 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV14),\n        ];\n\n        this.ModelParticleCloudV14 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV14 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV14 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV14 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV14),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV14),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV14),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV14 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV14 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV14),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV14),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV14),\n        ];\n\n        this.ModelStreakV14 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV14 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV14 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV14),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV14),\n        ];\n\n        this.__root = this.ModelFileDataV14 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV14),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV14),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV14),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV14),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV14),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV14),\n        ];\n      },\n\n      // => Version: 13\n      13: function () {\n        this.ModelTextureDataV13 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV13 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV13 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV13),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV13),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV13 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV13 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV13 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV13,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV13 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV13),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV13 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV13 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV13),\n          \"InitialPlacement\",\n          this.ModelTransformDataV13,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV13),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV13 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV13 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV13),\n        ];\n\n        this.ModelParticleCloudV13 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV13 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV13 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV13 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV13),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV13),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV13),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV13 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV13 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV13),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV13),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV13),\n        ];\n\n        this.ModelStreakV13 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV13 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV13 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV13),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV13),\n        ];\n\n        this.__root = this.ModelFileDataV13 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV13),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV13),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV13),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV13),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV13),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV13),\n        ];\n      },\n\n      // => Version: 12\n      12: function () {\n        this.ModelTextureDataV12 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV12 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV12 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV12),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV12),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV12 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"seamVertIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV12 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV12 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV12,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV12 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV12),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV12 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV12 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV12),\n          \"InitialPlacement\",\n          this.ModelTransformDataV12,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV12),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV12 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV12 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV12),\n        ];\n\n        this.ModelParticleCloudV12 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV12 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV12 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV12 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV12),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV12),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV12),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV12 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV12 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV12),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV12),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV12),\n        ];\n\n        this.ModelStreakV12 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV12 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV12 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV12),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV12),\n        ];\n\n        this.__root = this.ModelFileDataV12 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV12),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV12),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV12),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV12),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV12),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV12),\n        ];\n      },\n\n      // => Version: 11, ReferencedFunction: 0xF296A0\n      11: function () {\n        this.ModelTextureDataV11 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV11 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV11 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV11),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV11),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV11 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV11 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV11 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV11,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV11 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV11),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV11 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV11 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV11),\n          \"InitialPlacement\",\n          this.ModelTransformDataV11,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV11),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV11 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV11 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV11),\n        ];\n\n        this.ModelParticleCloudV11 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelParticleCurveV11 = [\"curveType\", \"uint8\", \"keys\", Utils.getArrayReader([\"[]\", \"float32\", 2])];\n\n        this.ModelParticleFlipbookV11 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleEmitterV11 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"accelerationDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"accelerationDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"colorFalloff\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"opacityCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV11),\n          \"opacityCurvePreset\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getPointerReader(this.ModelParticleFlipbookV11),\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationDrag\",\n          \"float32\",\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleCurve\",\n          Utils.getPointerReader(this.ModelParticleCurveV11),\n          \"scaleCurvePreset\",\n          \"uint32\",\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"spawnWindEmit\",\n          [\"[]\", \"float32\", 2],\n          \"spawnWindSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"texCoordRect\",\n          [\"[]\", \"float32\", 4],\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV11 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV11 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV11),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV11),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV11),\n        ];\n\n        this.ModelStreakV11 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV11 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV11 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV11),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV11),\n        ];\n\n        this.__root = this.ModelFileDataV11 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV11),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV11),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV11),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV11),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV11),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV11),\n        ];\n      },\n\n      // => Version: 10\n      10: function () {\n        this.ModelTextureDataV10 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV10 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV10 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV10),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV10),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV10 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV10 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV10 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV10,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV10 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV10),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV10 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV10 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV10),\n          \"InitialPlacement\",\n          this.ModelTransformDataV10,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV10),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV10 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV10 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV10),\n        ];\n\n        this.ModelParticleFlipbookV10 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleCloudV10 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getArrayReader(this.ModelParticleFlipbookV10),\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"opacityCurveType\",\n          \"uint8\",\n          \"opacityKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"scaleCurveType\",\n          \"uint8\",\n          \"scaleKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.ModelParticleEmitterV10 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV10 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV10 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV10),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV10),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV10),\n        ];\n\n        this.ModelStreakV10 = [\n          \"anchorIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"bone\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"materialIndex\",\n          \"uint32\",\n          \"spawnFreq\",\n          \"float32\",\n          \"stretchDist\",\n          \"float32\",\n          \"texScale\",\n          \"float32\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelStreakAnchorV10 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"color\",\n          \"uint32\",\n          \"falloff\",\n          \"float32\",\n          \"lifetime\",\n          \"float32\",\n        ];\n\n        this.ModelStreakDataV10 = [\n          \"streaks\",\n          Utils.getArrayReader(this.ModelStreakV10),\n          \"anchors\",\n          Utils.getArrayReader(this.ModelStreakAnchorV10),\n        ];\n\n        this.__root = this.ModelFileDataV10 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV10),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV10),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV10),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV10),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV10),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelStreakDataV10),\n        ];\n      },\n\n      // => Version: 9\n      9: function () {\n        this.ModelTextureDataV9 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV9 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV9 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV9),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV9),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV9 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV9 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV9 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV9,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV9 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV9),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV9 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV9 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV9),\n          \"InitialPlacement\",\n          this.ModelTransformDataV9,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV9),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV9 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV9 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV9),\n        ];\n\n        this.ModelParticleFlipbookV9 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleCloudV9 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getArrayReader(this.ModelParticleFlipbookV9),\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"opacityCurveType\",\n          \"uint8\",\n          \"opacityKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"scaleCurveType\",\n          \"uint8\",\n          \"scaleKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.ModelParticleEmitterV9 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV9 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV9 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV9),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV9),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV9),\n        ];\n\n        this.__root = this.ModelFileDataV9 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV9),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV9),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV9),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV9),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV9),\n        ];\n      },\n\n      // => Version: 8, ReferencedFunction: 0xF2C790\n      8: function () {\n        this.ModelTextureDataV8 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n          \"uvAnimId\",\n          \"uint8\",\n          \"uvPSInputIndex\",\n          \"uint8\",\n        ];\n\n        this.ModelConstantDataV8 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV8 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV8),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV8),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV8 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelTransformDataV8 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV8 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV8,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV8 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV8),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV8 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV8 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV8),\n          \"InitialPlacement\",\n          this.ModelTransformDataV8,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV8),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV8 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV8 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV8),\n        ];\n\n        this.ModelParticleFlipbookV8 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleCloudV8 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getArrayReader(this.ModelParticleFlipbookV8),\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"opacityCurveType\",\n          \"uint8\",\n          \"opacityKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"scaleCurveType\",\n          \"uint8\",\n          \"scaleKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.ModelParticleEmitterV8 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV8 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV8 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV8),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV8),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV8),\n        ];\n\n        this.__root = this.ModelFileDataV8 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV8),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV8),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV8),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV8),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV8),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.ModelTextureDataV7 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelConstantDataV7 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV7 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV7),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV7),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV7 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV7 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelAnimationDataV7 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"animation\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV7),\n        ];\n\n        this.ModelAnimationImportDataV7 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelTransformDataV7 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV7 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV7,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV7 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV7),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV7 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV7 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV7),\n          \"InitialPlacement\",\n          this.ModelTransformDataV7,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV7),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelFloatPropertyDataV7 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV7 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV7),\n        ];\n\n        this.ModelCollisionMeshV7 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionCloudV7 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionCubeV7 = [\"transform\", [\"[]\", [\"[]\", \"float32\", 4], 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSphereV7 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSurfaceV7 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.ModelCollisionDataV7 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV7),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelCollisionCloudV7),\n          \"cubes\",\n          Utils.getArrayReader(this.ModelCollisionCubeV7),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV7),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV7),\n        ];\n\n        this.ModelParticleFlipbookV7 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleCloudV7 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getArrayReader(this.ModelParticleFlipbookV7),\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"opacityCurveType\",\n          \"uint8\",\n          \"opacityKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"scaleCurveType\",\n          \"uint8\",\n          \"scaleKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.ModelParticleEmitterV7 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV7 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV7 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV7),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV7),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV7),\n        ];\n\n        this.__root = this.ModelFileDataV7 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV7),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV7),\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV7),\n          \"animationFallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"animationImports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV7),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV7),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV7),\n          \"collisionData\",\n          Utils.getPointerReader(this.ModelCollisionDataV7),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV7),\n        ];\n      },\n\n      // => Version: 6, ReferencedFunction: 0xF2BED0\n      6: function () {\n        this.ModelTextureDataV6 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelConstantDataV6 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV6 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV6),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV6),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV6 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visBoneIndices\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV6 = [\"boneIndex\", \"uint32\", \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelAnimationDataV6 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"animation\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV6),\n        ];\n\n        this.ModelAnimationImportDataV6 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"sequenceTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.ModelTransformDataV6 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV6 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV6,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV6 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV6),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV6 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV6 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV6),\n          \"InitialPlacement\",\n          this.ModelTransformDataV6,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV6),\n        ];\n\n        this.ModelFloatPropertyDataV6 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV6 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV6),\n        ];\n\n        this.ModelCollisionMeshV6 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionCloudV6 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionCubeV6 = [\"transform\", [\"[]\", [\"[]\", \"float32\", 4], 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSphereV6 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSurfaceV6 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.ModelCollisionDataV6 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV6),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelCollisionCloudV6),\n          \"cubes\",\n          Utils.getArrayReader(this.ModelCollisionCubeV6),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV6),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV6),\n        ];\n\n        this.ModelParticleFlipbookV6 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleCloudV6 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getArrayReader(this.ModelParticleFlipbookV6),\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"opacityCurveType\",\n          \"uint8\",\n          \"opacityKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"scaleCurveType\",\n          \"uint8\",\n          \"scaleKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.ModelParticleEmitterV6 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelParticleObstacleV6 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n          \"visBoneIndex\",\n          \"uint32\",\n        ];\n\n        this.ModelCloudDataV6 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV6),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV6),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV6),\n        ];\n\n        this.__root = this.ModelFileDataV6 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV6),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV6),\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV6),\n          \"animationFallbacks\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"animationImports\",\n          Utils.getArrayReader(this.ModelAnimationImportDataV6),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV6),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV6),\n          \"collisionData\",\n          Utils.getPointerReader(this.ModelCollisionDataV6),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV6),\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.ModelTextureDataV5 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelConstantDataV5 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV5 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV5),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV5),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV5 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"flags\",\n          \"uint32\",\n          \"visTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV5 = [\"token\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelAnimationDataV5 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"animation\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV5),\n        ];\n\n        this.ModelTransformDataV5 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV5 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV5,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV5 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV5),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV5 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV5 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV5),\n          \"InitialPlacement\",\n          this.ModelTransformDataV5,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV5),\n        ];\n\n        this.ModelFloatPropertyDataV5 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV5 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV5),\n        ];\n\n        this.ModelCollisionMeshV5 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionCloudV5 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionCubeV5 = [\"transform\", [\"[]\", [\"[]\", \"float32\", 4], 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSphereV5 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSurfaceV5 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.ModelCollisionDataV5 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV5),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelCollisionCloudV5),\n          \"cubes\",\n          Utils.getArrayReader(this.ModelCollisionCubeV5),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV5),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV5),\n        ];\n\n        this.ModelParticleFlipbookV5 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleCloudV5 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flags\",\n          \"uint32\",\n          \"flipbook\",\n          Utils.getArrayReader(this.ModelParticleFlipbookV5),\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"opacityCurveType\",\n          \"uint8\",\n          \"opacityKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"scaleCurveType\",\n          \"uint8\",\n          \"scaleKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.ModelParticleEmitterV5 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleObstacleV5 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV5 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV5),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV5),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV5),\n        ];\n\n        this.__root = this.ModelFileDataV5 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV5),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV5),\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV5),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV5),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV5),\n          \"collisionData\",\n          Utils.getPointerReader(this.ModelCollisionDataV5),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV5),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.ModelTextureDataV4 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelConstantDataV4 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV4 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV4),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV4),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV4 = [\n          \"mesh\",\n          this.PackGrannyMeshType,\n          \"visTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelVisTrackDataV4 = [\"token\", Utils.getQWordReader(), \"keys\", Utils.getArrayReader(\"float32\")];\n\n        this.ModelAnimationDataV4 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"animation\",\n          this.PackGrannyAnimationTypeV0,\n          \"moveSpeed\",\n          \"float32\",\n          \"visTrackData\",\n          Utils.getArrayReader(this.ModelVisTrackDataV4),\n        ];\n\n        this.ModelTransformDataV4 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV4 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV4,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV4 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV4),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV4 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV4 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV4),\n          \"InitialPlacement\",\n          this.ModelTransformDataV4,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV4),\n        ];\n\n        this.ModelFloatPropertyDataV4 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV4 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV4),\n        ];\n\n        this.ModelCollisionMeshV4 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionCloudV4 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionCubeV4 = [\"transform\", [\"[]\", [\"[]\", \"float32\", 4], 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSphereV4 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSurfaceV4 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.ModelCollisionDataV4 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV4),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelCollisionCloudV4),\n          \"cubes\",\n          Utils.getArrayReader(this.ModelCollisionCubeV4),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV4),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV4),\n        ];\n\n        this.ModelParticleFlipbookV4 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleCloudV4 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flipbook\",\n          Utils.getArrayReader(this.ModelParticleFlipbookV4),\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"opacityCurveType\",\n          \"uint8\",\n          \"opacityKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"scaleCurveType\",\n          \"uint8\",\n          \"scaleKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.ModelParticleEmitterV4 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleObstacleV4 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV4 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV4),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV4),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV4),\n        ];\n\n        this.__root = this.ModelFileDataV4 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV4),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV4),\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV4),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV4),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV4),\n          \"collisionData\",\n          Utils.getPointerReader(this.ModelCollisionDataV4),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.ModelTextureDataV3 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelConstantDataV3 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV3 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV3),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV3),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV3 = [\"mesh\", this.PackGrannyMeshType];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelAnimationDataV3 = [\"token\", Utils.getQWordReader(), \"animation\", this.PackGrannyAnimationTypeV0];\n\n        this.ModelTransformDataV3 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV3 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV3,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV3 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV3),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV3 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV3 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV3),\n          \"InitialPlacement\",\n          this.ModelTransformDataV3,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV3),\n        ];\n\n        this.ModelFloatPropertyDataV3 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV3 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV3),\n        ];\n\n        this.ModelCollisionMeshV3 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionCloudV3 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionCubeV3 = [\"transform\", [\"[]\", [\"[]\", \"float32\", 4], 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSphereV3 = [\"radius\", \"float32\", \"position\", [\"[]\", \"float32\", 3], \"surface\", \"uint8\"];\n\n        this.ModelCollisionSurfaceV3 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.ModelCollisionDataV3 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV3),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelCollisionCloudV3),\n          \"cubes\",\n          Utils.getArrayReader(this.ModelCollisionCubeV3),\n          \"spheres\",\n          Utils.getArrayReader(this.ModelCollisionSphereV3),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV3),\n        ];\n\n        this.ModelParticleFlipbookV3 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleCloudV3 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flipbook\",\n          Utils.getArrayReader(this.ModelParticleFlipbookV3),\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"opacityCurveType\",\n          \"uint8\",\n          \"opacityKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"scaleCurveType\",\n          \"uint8\",\n          \"scaleKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.ModelParticleEmitterV3 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleObstacleV3 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV3 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV3),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV3),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV3),\n        ];\n\n        this.__root = this.ModelFileDataV3 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV3),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV3),\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV3),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV3),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV3),\n          \"collisionData\",\n          Utils.getPointerReader(this.ModelCollisionDataV3),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.ModelTextureDataV2 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelConstantDataV2 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV2 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV2),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV2),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV2 = [\"mesh\", this.PackGrannyMeshType];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelAnimationDataV2 = [\"token\", Utils.getQWordReader(), \"animation\", this.PackGrannyAnimationTypeV0];\n\n        this.ModelTransformDataV2 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV2 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV2,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV2 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV2),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV2 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV2 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV2),\n          \"InitialPlacement\",\n          this.ModelTransformDataV2,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV2),\n        ];\n\n        this.ModelFloatPropertyDataV2 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV2 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV2),\n        ];\n\n        this.ModelCollisionMeshV2 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelCollisionCloudV2 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelCollisionSurfaceV2 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.ModelCollisionDataV2 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelCollisionMeshV2),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelCollisionCloudV2),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelCollisionSurfaceV2),\n        ];\n\n        this.ModelParticleFlipbookV2 = [\n          \"columns\",\n          \"uint8\",\n          \"count\",\n          \"uint8\",\n          \"flags\",\n          \"uint8\",\n          \"fps\",\n          \"uint32\",\n          \"rows\",\n          \"uint8\",\n          \"start\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleCloudV2 = [\n          \"acceleration\",\n          [\"[]\", \"float32\", 3],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"drag\",\n          \"float32\",\n          \"emitterIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"flipbook\",\n          Utils.getArrayReader(this.ModelParticleFlipbookV2),\n          \"materialIndex\",\n          \"uint32\",\n          \"obstacleIndices\",\n          Utils.getArrayReader(\"uint32\"),\n          \"opacityCurveType\",\n          \"uint8\",\n          \"opacityKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"scaleCurveType\",\n          \"uint8\",\n          \"scaleKeys\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.ModelParticleEmitterV2 = [\n          \"acceleration\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"bone\",\n          Utils.getQWordReader(),\n          \"colorBegin\",\n          [\"[]\", \"float32\", 4],\n          \"colorEnd\",\n          [\"[]\", \"float32\", 4],\n          \"colorPeriod\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"lifetime\",\n          [\"[]\", \"float32\", 2],\n          \"rotationChange\",\n          [\"[]\", \"float32\", 2],\n          \"rotationInitial\",\n          [\"[]\", \"float32\", 2],\n          \"scaleChange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"scaleInitial\",\n          [\"[]\", [\"[]\", \"float32\", 2], 2],\n          \"velocity\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"velocityDistRange\",\n          [\"[]\", \"float32\", 2],\n          \"velocityDistSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"spawnGroupSize\",\n          [\"[]\", \"float32\", 2],\n          \"spawnPeriod\",\n          \"float32\",\n          \"spawnProbability\",\n          \"float32\",\n          \"spawnRadius\",\n          [\"[]\", \"float32\", 2],\n          \"spawnShape\",\n          \"uint8\",\n        ];\n\n        this.ModelParticleObstacleV2 = [\n          \"bone\",\n          Utils.getQWordReader(),\n          \"dragCoef\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"geoData\",\n          [\"[]\", \"float32\", 3],\n          \"gravityCoef\",\n          \"float32\",\n          \"response\",\n          \"uint8\",\n          \"type\",\n          \"uint8\",\n        ];\n\n        this.ModelCloudDataV2 = [\n          \"clouds\",\n          Utils.getArrayReader(this.ModelParticleCloudV2),\n          \"emitters\",\n          Utils.getArrayReader(this.ModelParticleEmitterV2),\n          \"obstacles\",\n          Utils.getArrayReader(this.ModelParticleObstacleV2),\n        ];\n\n        this.__root = this.ModelFileDataV2 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV2),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV2),\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV2),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV2),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV2),\n          \"collisionData\",\n          Utils.getPointerReader(this.ModelCollisionDataV2),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelCloudDataV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.ModelTextureDataV1 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelConstantDataV1 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV1 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV1),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV1),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV1 = [\"mesh\", this.PackGrannyMeshType];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelAnimationDataV1 = [\"token\", Utils.getQWordReader(), \"animation\", this.PackGrannyAnimationTypeV0];\n\n        this.ModelTransformDataV1 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV1 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV1,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV1 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV1),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV1 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV1 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV1),\n          \"InitialPlacement\",\n          this.ModelTransformDataV1,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV1),\n        ];\n\n        this.ModelFloatPropertyDataV1 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV1 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV1),\n        ];\n\n        this.ModelChunkCollisionMeshV1 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.ModelChunkCollisionCloudV1 = [\n          \"animationSequence\",\n          Utils.getQWordReader(),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"surface\",\n          \"uint8\",\n        ];\n\n        this.ModelChunkCollisionSurfaceV1 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.ModelChunkCollisionDataV1 = [\n          \"meshes\",\n          Utils.getArrayReader(this.ModelChunkCollisionMeshV1),\n          \"clouds\",\n          Utils.getArrayReader(this.ModelChunkCollisionCloudV1),\n          \"surfaces\",\n          Utils.getArrayReader(this.ModelChunkCollisionSurfaceV1),\n        ];\n\n        this.__root = this.ModelFileDataV1 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV1),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV1),\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV1),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV1),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV1),\n          \"collisionData\",\n          Utils.getPointerReader(this.ModelChunkCollisionDataV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ModelTextureDataV0 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"textureFlags\",\n          \"uint32\",\n          \"token\",\n          Utils.getQWordReader(),\n          \"blitId\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelConstantDataV0 = [\"name\", \"uint32\", \"value\", [\"[]\", \"float32\", 4], \"constantFlags\", \"uint32\"];\n\n        this.ModelMaterialDataV0 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"materialFlags\",\n          \"uint32\",\n          \"sortOrder\",\n          \"uint32\",\n          \"textures\",\n          Utils.getArrayReader(this.ModelTextureDataV0),\n          \"constants\",\n          Utils.getArrayReader(this.ModelConstantDataV0),\n        ];\n\n        this.PackGrannyMeshType = [\"mesh\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelMeshDataV0 = [\"mesh\", this.PackGrannyMeshType];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelAnimationDataV0 = [\"token\", Utils.getQWordReader(), \"animation\", this.PackGrannyAnimationTypeV0];\n\n        this.ModelTransformDataV0 = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneDataV0 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformDataV0,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelSkeletonDataV0 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneDataV0),\n          \"LODType\",\n          \"uint32\",\n        ];\n\n        this.ModelMeshBindingDataV0 = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelModelDataV0 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelSkeletonDataV0),\n          \"InitialPlacement\",\n          this.ModelTransformDataV0,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingDataV0),\n        ];\n\n        this.ModelFloatPropertyDataV0 = [\"token\", Utils.getQWordReader(), \"value\", \"float32\"];\n\n        this.ModelPropertyDataV0 = [\n          \"boolTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"floatValues\",\n          Utils.getArrayReader(this.ModelFloatPropertyDataV0),\n        ];\n\n        this.__root = this.ModelFileDataV0 = [\n          \"materials\",\n          Utils.getRefArrayReader(this.ModelMaterialDataV0),\n          \"meshes\",\n          Utils.getRefArrayReader(this.ModelMeshDataV0),\n          \"animations\",\n          Utils.getRefArrayReader(this.ModelAnimationDataV0),\n          \"model\",\n          Utils.getPointerReader(this.ModelModelDataV0),\n          \"properties\",\n          Utils.getPointerReader(this.ModelPropertyDataV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: MRAS, versions: 1, strucTab: 0x1528BA0\n  /// ==================================================\n\n  {\n    name: \"MRAS\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.AmatAppleShaderConstant = [\"token\", \"uint32\", \"regIndex\", \"uint32\", \"regCount\", \"uint32\"];\n\n        this.AmatAppleShader = [\n          \"isPixelShader\",\n          \"uint32\",\n          \"cachedData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"physicalData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"constants\",\n          Utils.getArrayReader(this.AmatAppleShaderConstant),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatAppleShaderConstant),\n        ];\n\n        this.AmatAppleRenderState = [\n          \"cullMode\",\n          \"uint32\",\n          \"blendControl\",\n          \"uint32\",\n          \"alphaTestAndMask\",\n          \"uint32\",\n          \"alphaTestRef\",\n          \"uint32\",\n          \"colorWrite_ARGB\",\n          \"uint32\",\n          \"depthWriteEnable\",\n          \"uint32\",\n          \"depthFunction\",\n          \"uint32\",\n          \"depthBias\",\n          \"float32\",\n        ];\n\n        this.AmatApplePass = [\n          \"renderState\",\n          this.AmatAppleRenderState,\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"psFileFame\",\n          Utils.getFileNameReader(),\n          \"vsFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.AmatAppleEffect = [\"token\", Utils.getQWordReader(), \"passes\", Utils.getArrayReader(this.AmatApplePass)];\n\n        this.AmatAppleSamplerState = [\n          \"addressU\",\n          \"uint32\",\n          \"addressV\",\n          \"uint32\",\n          \"addressW\",\n          \"uint32\",\n          \"borderColor\",\n          \"uint32\",\n          \"magFilter\",\n          \"uint32\",\n          \"maxAnisotropy\",\n          \"uint32\",\n          \"maxMipLevel\",\n          \"uint32\",\n          \"minFilter\",\n          \"uint32\",\n          \"mipFilter\",\n          \"uint32\",\n          \"mipMapLodBias\",\n          \"float32\",\n        ];\n\n        this.__root = this.AmatAppleMaterial = [\n          \"name\",\n          Utils.getStringReader(),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatAppleShader),\n          \"effects\",\n          Utils.getArrayReader(this.AmatAppleEffect),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatAppleSamplerState),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: msn, versions: 3, strucTab: 0x1721258\n  /// ==================================================\n\n  {\n    name: \"msn\",\n    versions: {\n      // => Version: 2\n      2: function () {\n        this.PackMapInterestPoint = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"forward\",\n          [\"[]\", \"float32\", 3],\n          \"description\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.MapMission = [\"interestPoint\", Utils.getArrayReader(this.PackMapInterestPoint)];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PackMapInterestPoint = [\"position\", [\"[]\", \"float32\", 3], \"forward\", [\"[]\", \"float32\", 3]];\n\n        this.__root = this.MapMission = [\"interestPoint\", Utils.getArrayReader(this.PackMapInterestPoint)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: nm15, versions: 4, strucTab: 0x1723E10\n  /// ==================================================\n\n  {\n    name: \"nm15\",\n    versions: {\n      // => Version: 3, ReferencedFunction: 0x452AB0\n      3: function () {\n        this.PackMapNavMeshChunkV3 = [\n          \"chunkIndex\",\n          \"uint32\",\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapNavMeshMoverV3 = [\n          \"chunkIndex\",\n          \"uint32\",\n          \"mapPropId\",\n          Utils.getQWordReader(),\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"mediatorData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapNavMeshV3 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapNavMeshChunkV3),\n          \"dynamicArray\",\n          Utils.getArrayReader(this.PackMapNavMeshMoverV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PackMapNavMeshChunkV2 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapNavMeshMoverV2 = [\n          \"mapPropId\",\n          Utils.getQWordReader(),\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"mediatorData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapNavMeshV2 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapNavMeshChunkV2),\n          \"dynamicArray\",\n          Utils.getArrayReader(this.PackMapNavMeshMoverV2),\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0xEB7230\n      1: function () {\n        this.PackMapNavMeshChunkV1 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapNavMeshV1 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapNavMeshChunkV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackMapNavMeshChunkV0 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapNavMeshV0 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapNavMeshChunkV0),\n        ];\n      },\n    },\n  },\n\n  /// ==================================================\n  /// Chunk: nm15, versions: 4, strucTab: 0x1723F40\n  /// ==================================================\n\n  {\n    name: \"nm15\",\n    versions: {\n      // => Version: 3\n      3: function () {\n        this.__root = this.PackMapNavMeshChunkV3 = [\n          \"chunkIndex\",\n          \"uint32\",\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.__root = this.PackMapNavMeshChunkV2 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0xEB71D0\n      1: function () {\n        this.__root = this.PackMapNavMeshChunkV1 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.__root = this.PackMapNavMeshChunkV0 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"queryMediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: nmex, versions: 4, strucTab: 0x1723E40\n  /// ==================================================\n\n  {\n    name: \"nmex\",\n    versions: {\n      // => Version: 3\n      3: function () {\n        this.PackMapNavMeshChunkExternalV3 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"filename\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapNavMeshMoverV3 = [\n          \"chunkIndex\",\n          \"uint32\",\n          \"mapPropId\",\n          Utils.getQWordReader(),\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"mediatorData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapNavMeshExternalV3 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapNavMeshChunkExternalV3),\n          \"dynamicArray\",\n          Utils.getArrayReader(this.PackMapNavMeshMoverV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PackMapNavMeshChunkExternalV2 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"filename\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.PackMapNavMeshMoverV2 = [\n          \"mapPropId\",\n          Utils.getQWordReader(),\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"mediatorData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapNavMeshExternalV2 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapNavMeshChunkExternalV2),\n          \"dynamicArray\",\n          Utils.getArrayReader(this.PackMapNavMeshMoverV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PackMapNavMeshChunkExternalV1 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"filename\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapNavMeshExternalV1 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapNavMeshChunkExternalV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackMapNavMeshChunkExternalV0 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"filename\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.PackMapNavMeshExternalV0 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapNavMeshChunkExternalV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: obs, versions: 3, strucTab: 0x172127C\n  /// ==================================================\n\n  {\n    name: \"obs\",\n    versions: {\n      // => Version: 2\n      2: function () {\n        this.PackMapEditCollision = [\n          \"token\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"bottmVertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"topVertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"name\",\n          Utils.getString16Reader(),\n          \"surface\",\n          Utils.getQWordReader(),\n        ];\n\n        this.__root = this.MapObstacles = [\"obstacles\", Utils.getArrayReader(this.PackMapEditCollision)];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PackMapEditCollision = [\n          \"token\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"bottmVertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"topVertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.MapObstacles = [\"obstacles\", Utils.getArrayReader(this.PackMapEditCollision)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackMapEditCollision = [\n          \"token\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"bottmVertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"topVertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.__root = this.MapObstacles = [\"obstacles\", Utils.getArrayReader(this.PackMapEditCollision)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: occ, versions: 1, strucTab: 0x17213F0\n  /// ==================================================\n\n  {\n    name: \"occ\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.MapOcclusion = [\n          \"token\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"name\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.MapOcclusions = [\"Occlusions\", Utils.getArrayReader(this.MapOcclusion)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: octm, versions: 1, strucTab: 0x17213FC\n  /// ==================================================\n\n  {\n    name: \"octm\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.__root = this.MapOcclusionTome = [\n          \"enableTomeQueries\",\n          \"uint32\",\n          \"tome\",\n          Utils.getArrayReader(\"uint8\"),\n          \"propIDMap\",\n          Utils.getArrayReader(\"uint8\"),\n          \"reserved\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: pack, versions: 1, strucTab: 0x1721464\n  /// ==================================================\n\n  {\n    name: \"pack\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.MapVariant = [\n          \"file\",\n          Utils.getString16Reader(),\n          \"name\",\n          Utils.getString16Reader(),\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.__root = this.MapPackage = [\n          \"baseFile\",\n          Utils.getFileNameReader(),\n          \"variants\",\n          Utils.getArrayReader(this.MapVariant),\n          \"flags\",\n          \"uint32\",\n        ];\n      },\n    },\n  },\n];\n","module.exports = [\n  /// ==================================================\n  /// Chunk: parm, versions: 1, strucTab: 0x1721458\n  /// ==================================================\n\n  {\n    name: \"parm\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.__root = this.MapParam = [\"rect\", [\"[]\", \"float32\", 4], \"flags\", \"uint32\", \"guid\", [\"[]\", \"uint8\", 16]];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: PGTB, versions: 4, strucTab: 0x153BDD8\n  /// ==================================================\n\n  {\n    name: \"PGTB\",\n    versions: {\n      // => Version: 3, ReferencedFunction: 0x6127C0\n      3: function () {\n        this.PagedImageLayerDataV3 = [\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"strippedDims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n          \"diskFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV3 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"solidColor\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.__root = this.PagedImageTableDataV3 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV3),\n          \"rawPages\",\n          Utils.getArrayReader(this.PagedImagePageDataV3),\n          \"strippedPages\",\n          Utils.getArrayReader(this.PagedImagePageDataV3),\n          \"flags\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PagedImageLayerDataV2 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"diskFormat\",\n          \"uint32\",\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV2 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"solidColor\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.__root = this.PagedImageTableDataV2 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV2),\n          \"pages\",\n          Utils.getArrayReader(this.PagedImagePageDataV2),\n          \"flags\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PagedImageLayerDataV1 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"diskFormat\",\n          \"uint32\",\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV1 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"solidColor\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.__root = this.PagedImageTableDataV1 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV1),\n          \"pages\",\n          Utils.getArrayReader(this.PagedImagePageDataV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PagedImageLayerDataV0 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"diskFormat\",\n          \"uint32\",\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV0 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PagedImageTableDataV0 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV0),\n          \"pages\",\n          Utils.getArrayReader(this.PagedImagePageDataV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: phys, versions: 11, strucTab: 0x17219F0\n  /// ==================================================\n\n  {\n    name: \"phys\",\n    versions: {\n      // => Version: 10\n      10: function () {\n        this.PackMapPhysicsMeshV10 = [\n          \"indexArray\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapPhysicsObjectV10 = [\n          \"mesh\",\n          Utils.getPointerReader(this.PackMapPhysicsMeshV10),\n          \"sceneFilePtr\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapPhysicsObjectRefV10 = [\"sequence\", Utils.getQWordReader(), \"objectIndex\", \"uint32\"];\n\n        this.PackMapPhysicsGeometryV10 = [\n          \"filePath\",\n          Utils.getString16Reader(),\n          \"quantizedExtents\",\n          \"uint8\",\n          \"objRefArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectRefV10),\n          \"surface\",\n          Utils.getArrayReader(\"uint16\"),\n        ];\n\n        this.PackMapPhysicsModelPropV10 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelZoneV8 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelObstacleV10 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.PackMapPhysicsBlockV10 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"objectArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectV10),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV10),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV10),\n          \"debrisModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV10),\n          \"zoneModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelZoneV8),\n          \"obsModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV10),\n        ];\n\n        this.__root = this.PackMapPhysicsV10 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"blockArray\",\n          Utils.getArrayReader(this.PackMapPhysicsBlockV10),\n        ];\n      },\n\n      // => Version: 9, ReferencedFunction: 0xEBA150\n      9: function () {\n        this.PackMapPhysicsMeshV9 = [\n          \"indexArray\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapPhysicsObjectV9 = [\n          \"mesh\",\n          Utils.getPointerReader(this.PackMapPhysicsMeshV9),\n          \"sceneFilePtr\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapPhysicsObjectRefV9 = [\"sequence\", Utils.getQWordReader(), \"objectIndex\", \"uint32\"];\n\n        this.PackMapPhysicsGeometryV9 = [\n          \"filePath\",\n          Utils.getString16Reader(),\n          \"quantizedExtents\",\n          \"uint8\",\n          \"objRefArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectRefV9),\n        ];\n\n        this.PackMapPhysicsModelPropV9 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelZoneV7 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelObstacleV9 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.PackMapPhysicsBlockV9 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"objectArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectV9),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV9),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV9),\n          \"debrisModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV9),\n          \"zoneModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelZoneV7),\n          \"obsModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV9),\n        ];\n\n        this.__root = this.PackMapPhysicsV9 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"blockArray\",\n          Utils.getArrayReader(this.PackMapPhysicsBlockV9),\n        ];\n      },\n\n      // => Version: 8\n      8: function () {\n        this.PackMapPhysicsMeshV8 = [\n          \"indexArray\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneBoxShapeV7 = [\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.SceneSphereShapeV7 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneCapsuleShapeV7 = [\"p0\", [\"[]\", \"float32\", 3], \"p1\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneMeshShapeV7 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneFilePhysicsV7 = [\n          \"boxes\",\n          Utils.getArrayReader(this.SceneBoxShapeV7),\n          \"spheres\",\n          Utils.getArrayReader(this.SceneSphereShapeV7),\n          \"capsules\",\n          Utils.getArrayReader(this.SceneCapsuleShapeV7),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneMeshShapeV7),\n        ];\n\n        this.ScenePathNodeV6 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n          \"singlesided\",\n          \"uint8\",\n        ];\n\n        this.ScenePathV6 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV6),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV6 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV6 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV6),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneGameSurfaceV6 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.SceneFileGameV6 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV6),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV6),\n          \"surfaces\",\n          Utils.getArrayReader(this.SceneGameSurfaceV6),\n        ];\n\n        this.PackMapPhysicsObjectV8 = [\n          \"mesh\",\n          Utils.getPointerReader(this.PackMapPhysicsMeshV8),\n          \"physics\",\n          Utils.getPointerReader(this.SceneFilePhysicsV7),\n          \"game\",\n          Utils.getPointerReader(this.SceneFileGameV6),\n        ];\n\n        this.PackMapPhysicsObjectRefV8 = [\"sequence\", Utils.getQWordReader(), \"objectIndex\", \"uint32\"];\n\n        this.PackMapPhysicsGeometryV8 = [\n          \"filePath\",\n          Utils.getString16Reader(),\n          \"quantizedExtents\",\n          \"uint8\",\n          \"objRefArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectRefV8),\n        ];\n\n        this.PackMapPhysicsModelPropV8 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelZoneV6 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelObstacleV8 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.PackMapPhysicsBlockV8 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"objectArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectV8),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV8),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV8),\n          \"debrisModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV8),\n          \"zoneModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelZoneV6),\n          \"obsModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV8),\n        ];\n\n        this.__root = this.PackMapPhysicsV8 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"blockArray\",\n          Utils.getArrayReader(this.PackMapPhysicsBlockV8),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.PackMapPhysicsMeshV7 = [\n          \"indexArray\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneBoxShapeV7 = [\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.SceneSphereShapeV7 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneCapsuleShapeV7 = [\"p0\", [\"[]\", \"float32\", 3], \"p1\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneMeshShapeV7 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneFilePhysicsV7 = [\n          \"boxes\",\n          Utils.getArrayReader(this.SceneBoxShapeV7),\n          \"spheres\",\n          Utils.getArrayReader(this.SceneSphereShapeV7),\n          \"capsules\",\n          Utils.getArrayReader(this.SceneCapsuleShapeV7),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneMeshShapeV7),\n        ];\n\n        this.ScenePathNodeV6 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n          \"singlesided\",\n          \"uint8\",\n        ];\n\n        this.ScenePathV6 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV6),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV6 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV6 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV6),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneGameSurfaceV6 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.SceneFileGameV6 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV6),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV6),\n          \"surfaces\",\n          Utils.getArrayReader(this.SceneGameSurfaceV6),\n        ];\n\n        this.PackMapPhysicsObjectV7 = [\n          \"mesh\",\n          Utils.getPointerReader(this.PackMapPhysicsMeshV7),\n          \"physics\",\n          Utils.getPointerReader(this.SceneFilePhysicsV7),\n          \"game\",\n          Utils.getPointerReader(this.SceneFileGameV6),\n        ];\n\n        this.PackMapPhysicsObjectRefV7 = [\"sequence\", Utils.getQWordReader(), \"objectIndex\", \"uint32\"];\n\n        this.PackMapPhysicsGeometryV7 = [\n          \"filePath\",\n          Utils.getString16Reader(),\n          \"quantizedExtents\",\n          \"uint8\",\n          \"objRefArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectRefV7),\n        ];\n\n        this.PackMapPhysicsModelPropV7 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelZoneV5 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelObstacleV7 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.PackMapPhysicsBlockV7 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"objectArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectV7),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV7),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV7),\n          \"zoneModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelZoneV5),\n          \"obsModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV7),\n        ];\n\n        this.__root = this.PackMapPhysicsV7 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"blockArray\",\n          Utils.getArrayReader(this.PackMapPhysicsBlockV7),\n        ];\n      },\n\n      // => Version: 6, ReferencedFunction: 0xEBA130\n      6: function () {\n        this.PackMapPhysicsMeshV6 = [\n          \"indexArray\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneBoxShapeV7 = [\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.SceneSphereShapeV7 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneCapsuleShapeV7 = [\"p0\", [\"[]\", \"float32\", 3], \"p1\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneMeshShapeV7 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneFilePhysicsV7 = [\n          \"boxes\",\n          Utils.getArrayReader(this.SceneBoxShapeV7),\n          \"spheres\",\n          Utils.getArrayReader(this.SceneSphereShapeV7),\n          \"capsules\",\n          Utils.getArrayReader(this.SceneCapsuleShapeV7),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneMeshShapeV7),\n        ];\n\n        this.ScenePathNodeV6 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n          \"singlesided\",\n          \"uint8\",\n        ];\n\n        this.ScenePathV6 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV6),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV6 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV6 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV6),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneGameSurfaceV6 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.SceneFileGameV6 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV6),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV6),\n          \"surfaces\",\n          Utils.getArrayReader(this.SceneGameSurfaceV6),\n        ];\n\n        this.PackMapPhysicsObjectV6 = [\n          \"mesh\",\n          Utils.getPointerReader(this.PackMapPhysicsMeshV6),\n          \"physics\",\n          Utils.getPointerReader(this.SceneFilePhysicsV7),\n          \"game\",\n          Utils.getPointerReader(this.SceneFileGameV6),\n        ];\n\n        this.PackMapPhysicsObjectRefV6 = [\"sequence\", Utils.getQWordReader(), \"objectIndex\", \"uint32\"];\n\n        this.PackMapPhysicsGeometryV6 = [\n          \"filePath\",\n          Utils.getString16Reader(),\n          \"quantizedExtents\",\n          \"uint8\",\n          \"objRefArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectRefV6),\n        ];\n\n        this.PackMapPhysicsModelPropV6 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelZoneV4 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelObstacleV6 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.__root = this.PackMapPhysicsV6 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"objectArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectV6),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV6),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV6),\n          \"zoneModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelZoneV4),\n          \"obsModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV6),\n        ];\n      },\n\n      // => Version: 5, ReferencedFunction: 0xEBA130\n      5: function () {\n        this.PackMapPhysicsMeshV5 = [\n          \"indexArray\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneBoxShapeV7 = [\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.SceneSphereShapeV7 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneCapsuleShapeV7 = [\"p0\", [\"[]\", \"float32\", 3], \"p1\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneMeshShapeV7 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneFilePhysicsV7 = [\n          \"boxes\",\n          Utils.getArrayReader(this.SceneBoxShapeV7),\n          \"spheres\",\n          Utils.getArrayReader(this.SceneSphereShapeV7),\n          \"capsules\",\n          Utils.getArrayReader(this.SceneCapsuleShapeV7),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneMeshShapeV7),\n        ];\n\n        this.ScenePathNodeV5 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n          \"singlesided\",\n          \"uint8\",\n        ];\n\n        this.ScenePathV5 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV5),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV5 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV5 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV5),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaceFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.SceneFileGameV5 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV5),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV5),\n        ];\n\n        this.PackMapPhysicsObjectV5 = [\n          \"mesh\",\n          Utils.getPointerReader(this.PackMapPhysicsMeshV5),\n          \"physics\",\n          Utils.getPointerReader(this.SceneFilePhysicsV7),\n          \"game\",\n          Utils.getPointerReader(this.SceneFileGameV5),\n        ];\n\n        this.PackMapPhysicsObjectRefV5 = [\"sequence\", Utils.getQWordReader(), \"objectIndex\", \"uint32\"];\n\n        this.PackMapPhysicsGeometryV5 = [\n          \"filePath\",\n          Utils.getString16Reader(),\n          \"quantizedExtents\",\n          \"uint8\",\n          \"objRefArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectRefV5),\n        ];\n\n        this.PackMapPhysicsModelPropV5 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelZoneV3 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelObstacleV5 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.__root = this.PackMapPhysicsV5 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"objectArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectV5),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV5),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV5),\n          \"zoneModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelZoneV3),\n          \"obsModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV5),\n        ];\n      },\n\n      // => Version: 4, ReferencedFunction: 0xEBA130\n      4: function () {\n        this.PackMapPhysicsMeshV4 = [\n          \"indexArray\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneBoxShapeV7 = [\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.SceneSphereShapeV7 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneCapsuleShapeV7 = [\"p0\", [\"[]\", \"float32\", 3], \"p1\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneMeshShapeV7 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneFilePhysicsV7 = [\n          \"boxes\",\n          Utils.getArrayReader(this.SceneBoxShapeV7),\n          \"spheres\",\n          Utils.getArrayReader(this.SceneSphereShapeV7),\n          \"capsules\",\n          Utils.getArrayReader(this.SceneCapsuleShapeV7),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneMeshShapeV7),\n        ];\n\n        this.ScenePathNodeV5 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n          \"radius\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"smoothing\",\n          \"float32\",\n          \"singlesided\",\n          \"uint8\",\n        ];\n\n        this.ScenePathV5 = [\n          \"properties\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"points\",\n          Utils.getArrayReader(this.ScenePathNodeV5),\n          \"closed\",\n          \"uint8\",\n        ];\n\n        this.SceneEdgeV5 = [\"indices\", [\"[]\", \"uint32\", 2], \"triangles\", Utils.getArrayReader(\"uint32\")];\n\n        this.SceneGameMeshV5 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"edges\",\n          Utils.getArrayReader(this.SceneEdgeV5),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaceFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.SceneFileGameV5 = [\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathV5),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneGameMeshV5),\n        ];\n\n        this.PackMapPhysicsObjectV4 = [\n          \"mesh\",\n          Utils.getPointerReader(this.PackMapPhysicsMeshV4),\n          \"physics\",\n          Utils.getPointerReader(this.SceneFilePhysicsV7),\n          \"game\",\n          Utils.getPointerReader(this.SceneFileGameV5),\n        ];\n\n        this.PackMapPhysicsObjectRefV4 = [\"sequence\", Utils.getQWordReader(), \"objectIndex\", \"uint32\"];\n\n        this.PackMapPhysicsGeometryV4 = [\n          \"filePath\",\n          Utils.getFileNameReader(),\n          \"quantizedExtents\",\n          \"uint8\",\n          \"objRefArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectRefV4),\n        ];\n\n        this.PackMapPhysicsModelPropV4 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelZoneV2 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 4],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelObstacleV4 = [\"translate\", [\"[]\", \"float32\", 3], \"geometryIndex\", \"uint32\"];\n\n        this.__root = this.PackMapPhysicsV4 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"objectArray\",\n          Utils.getArrayReader(this.PackMapPhysicsObjectV4),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV4),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV4),\n          \"zoneModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelZoneV2),\n          \"obsModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelObstacleV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.PackMapPhysicsMeshV3 = [\n          \"indexArray\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertexArray\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppCodeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PackMapPhysicsShapeDataV3 = [\"scale\", \"float32\", \"gameDataPtr\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapPhysicsGeometryV3 = [\"shapeDataIndexArray\", Utils.getArrayReader(\"uint32\")];\n\n        this.PackMapPhysicsModelPropV3 = [\n          \"token\",\n          [\"[]\", \"uint32\", 2],\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelZoneV1 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapPhysicsV3 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"meshArray\",\n          Utils.getArrayReader(this.PackMapPhysicsMeshV3),\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapPhysicsShapeDataV3),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV3),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV3),\n          \"zoneModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelZoneV1),\n        ];\n      },\n\n      // => Version: 2, ReferencedFunction: 0xEBA110\n      2: function () {\n        this.PackMapPhysicsShapeDataV2 = [\"scale\", \"float32\", \"gameDataPtr\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapPhysicsGeometryV2 = [\"shapeDataIndexArray\", Utils.getArrayReader(\"uint32\")];\n\n        this.PackMapPhysicsModelPropV2 = [\n          \"token\",\n          [\"[]\", \"uint32\", 2],\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.PackMapPhysicsModelZoneV0 = [\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapPhysicsV2 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapPhysicsShapeDataV2),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV2),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV2),\n          \"zoneModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelZoneV0),\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0xEBA0F0\n      1: function () {\n        this.PackMapPhysicsShapeDataV1 = [\"scale\", \"float32\", \"gameDataPtr\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapPhysicsGeometryV1 = [\"shapeDataIndexArray\", Utils.getArrayReader(\"uint32\")];\n\n        this.PackMapPhysicsModelPropV1 = [\n          \"token\",\n          [\"[]\", \"uint32\", 2],\n          \"scale\",\n          \"float32\",\n          \"translate\",\n          [\"[]\", \"float32\", 3],\n          \"rotate\",\n          [\"[]\", \"float32\", 3],\n          \"geometryIndex\",\n          \"uint32\",\n        ];\n\n        this.__root = this.PackMapPhysicsV1 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"shapeArray\",\n          Utils.getArrayReader(this.PackMapPhysicsShapeDataV1),\n          \"geometryArray\",\n          Utils.getArrayReader(this.PackMapPhysicsGeometryV1),\n          \"propModelArray\",\n          Utils.getArrayReader(this.PackMapPhysicsModelPropV1),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: PHYS, versions: 9, strucTab: 0x1830478\n  /// ==================================================\n\n  {\n    name: \"PHYS\",\n    versions: {\n      // => Version: 8\n      8: function () {\n        this.SceneBoxShapeV8 = [\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.SceneSphereShapeV8 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneCapsuleShapeV8 = [\"p0\", [\"[]\", \"float32\", 3], \"p1\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneMeshShapeV8 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneSurfaceV8 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.__root = this.SceneFilePhysicsV8 = [\n          \"boxes\",\n          Utils.getArrayReader(this.SceneBoxShapeV8),\n          \"spheres\",\n          Utils.getArrayReader(this.SceneSphereShapeV8),\n          \"capsules\",\n          Utils.getArrayReader(this.SceneCapsuleShapeV8),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneMeshShapeV8),\n          \"surfaces\",\n          Utils.getArrayReader(this.SceneSurfaceV8),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.SceneBoxShapeV7 = [\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.SceneSphereShapeV7 = [\"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneCapsuleShapeV7 = [\"p0\", [\"[]\", \"float32\", 3], \"p1\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneMeshShapeV7 = [\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.SceneFilePhysicsV7 = [\n          \"boxes\",\n          Utils.getArrayReader(this.SceneBoxShapeV7),\n          \"spheres\",\n          Utils.getArrayReader(this.SceneSphereShapeV7),\n          \"capsules\",\n          Utils.getArrayReader(this.SceneCapsuleShapeV7),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneMeshShapeV7),\n        ];\n      },\n\n      // => Version: 6\n      6: function () {\n        this.SceneShapeSurfaceV6 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.SceneBoxShapeV6 = [\n          \"surface\",\n          \"uint8\",\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.SceneSphereShapeV6 = [\"surface\", \"uint8\", \"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneCapsuleShapeV6 = [\n          \"surface\",\n          \"uint8\",\n          \"p0\",\n          [\"[]\", \"float32\", 3],\n          \"p1\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n        ];\n\n        this.SceneMeshShapeV6 = [\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneCollisionShapeV6 = [\"shapeIndex\", \"uint32\"];\n\n        this.SceneTriggerShapeV6 = [\"shapeIndex\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.SceneNamedShapeV6 = [\"shapeIndex\", \"uint32\"];\n\n        this.__root = this.SceneFilePhysicsV6 = [\n          \"surfaces\",\n          Utils.getArrayReader(this.SceneShapeSurfaceV6),\n          \"boxes\",\n          Utils.getArrayReader(this.SceneBoxShapeV6),\n          \"spheres\",\n          Utils.getArrayReader(this.SceneSphereShapeV6),\n          \"capsules\",\n          Utils.getArrayReader(this.SceneCapsuleShapeV6),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneMeshShapeV6),\n          \"collisionShapes\",\n          Utils.getArrayReader(this.SceneCollisionShapeV6),\n          \"triggerShapes\",\n          Utils.getArrayReader(this.SceneTriggerShapeV6),\n          \"namedShapes\",\n          Utils.getArrayReader(this.SceneNamedShapeV6),\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.SceneShapeSurfaceV5 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.SceneBoxShapeV5 = [\n          \"surface\",\n          \"uint8\",\n          \"dimensions\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.SceneSphereShapeV5 = [\"surface\", \"uint8\", \"center\", [\"[]\", \"float32\", 3], \"radius\", \"float32\"];\n\n        this.SceneMeshShapeV5 = [\n          \"surfaces\",\n          Utils.getArrayReader(\"uint8\"),\n          \"indices\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"moppInfo\",\n          [\"[]\", \"float32\", 4],\n          \"moppBytes\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.SceneCollisionShapeV5 = [\"shapeIndex\", \"uint32\"];\n\n        this.SceneTriggerShapeV5 = [\"shapeIndex\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.SceneNamedShapeV5 = [\"shapeIndex\", \"uint32\"];\n\n        this.__root = this.SceneFilePhysicsV5 = [\n          \"surfaces\",\n          Utils.getArrayReader(this.SceneShapeSurfaceV5),\n          \"boxes\",\n          Utils.getArrayReader(this.SceneBoxShapeV5),\n          \"spheres\",\n          Utils.getArrayReader(this.SceneSphereShapeV5),\n          \"meshes\",\n          Utils.getArrayReader(this.SceneMeshShapeV5),\n          \"collisionShapes\",\n          Utils.getArrayReader(this.SceneCollisionShapeV5),\n          \"triggerShapes\",\n          Utils.getArrayReader(this.SceneTriggerShapeV5),\n          \"namedShapes\",\n          Utils.getArrayReader(this.SceneNamedShapeV5),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.SceneShapeV4 = [\"surfaces\", Utils.getArrayReader(\"uint8\")];\n\n        this.SceneShapeSurfaceV4 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.SceneCollisionShapeV4 = [\"shapeIndex\", \"uint32\"];\n\n        this.SceneTriggerShapeV4 = [\"shapeIndex\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.SceneNamedShapeV4 = [\"shapeIndex\", \"uint32\"];\n\n        this.__root = this.SceneFilePhysicsV4 = [\n          \"shapeData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"shapes\",\n          Utils.getArrayReader(this.SceneShapeV4),\n          \"surfaces\",\n          Utils.getArrayReader(this.SceneShapeSurfaceV4),\n          \"collisionShapes\",\n          Utils.getArrayReader(this.SceneCollisionShapeV4),\n          \"triggerShapes\",\n          Utils.getArrayReader(this.SceneTriggerShapeV4),\n          \"namedShapes\",\n          Utils.getArrayReader(this.SceneNamedShapeV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.SceneShapeV3 = [\"surfaces\", Utils.getArrayReader(\"uint8\")];\n\n        this.SceneShapeSurfaceV3 = [\"tokens\", Utils.getArrayReader(Utils.getQWordReader())];\n\n        this.SceneCollisionShapeV3 = [\"shapeIndex\", \"uint32\"];\n\n        this.SceneTriggerShapeV3 = [\"shapeIndex\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.SceneNamedShapeV3 = [\"shapeIndex\", \"uint32\"];\n\n        this.ScenePathPhysicsV3 = [\"pathData\", Utils.getArrayReader([\"[]\", \"float32\", 4])];\n\n        this.__root = this.SceneFilePhysicsV3 = [\n          \"shapeData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"shapes\",\n          Utils.getArrayReader(this.SceneShapeV3),\n          \"surfaces\",\n          Utils.getArrayReader(this.SceneShapeSurfaceV3),\n          \"collisionShapes\",\n          Utils.getArrayReader(this.SceneCollisionShapeV3),\n          \"triggerShapes\",\n          Utils.getArrayReader(this.SceneTriggerShapeV3),\n          \"namedShapes\",\n          Utils.getArrayReader(this.SceneNamedShapeV3),\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathPhysicsV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.SceneShapeV2 = [\"shapeOffset\", \"uint32\"];\n\n        this.SceneCollisionShapeV2 = [\"shapeIndex\", \"uint32\"];\n\n        this.SceneQueryShapeV2 = [\"shapeIndex\", \"uint32\"];\n\n        this.SceneNamedShapeV2 = [\"shapeIndex\", \"uint32\"];\n\n        this.ScenePathPhysicsV2 = [\"pathData\", Utils.getArrayReader([\"[]\", \"float32\", 4])];\n\n        this.__root = this.SceneFilePhysicsV2 = [\n          \"shapeData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"shapes\",\n          Utils.getArrayReader(this.SceneShapeV2),\n          \"collisionShapes\",\n          Utils.getArrayReader(this.SceneCollisionShapeV2),\n          \"queryShapes\",\n          Utils.getArrayReader(this.SceneQueryShapeV2),\n          \"namedShapes\",\n          Utils.getArrayReader(this.SceneNamedShapeV2),\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathPhysicsV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.SceneShapeV1 = [\"shapeOffset\", \"uint32\"];\n\n        this.SceneCollisionShapeV1 = [\"shapeIndex\", \"uint32\"];\n\n        this.SceneNamedShapeV1 = [\"shapeIndex\", \"uint32\"];\n\n        this.ScenePathPhysicsV1 = [\"pathData\", Utils.getArrayReader([\"[]\", \"float32\", 4])];\n\n        this.__root = this.SceneFilePhysicsV1 = [\n          \"shapeData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"shapes\",\n          Utils.getArrayReader(this.SceneShapeV1),\n          \"collisionShapes\",\n          Utils.getArrayReader(this.SceneCollisionShapeV1),\n          \"namedShapes\",\n          Utils.getArrayReader(this.SceneNamedShapeV1),\n          \"paths\",\n          Utils.getArrayReader(this.ScenePathPhysicsV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.SceneShapeV0 = [\"shapeOffset\", \"uint32\"];\n\n        this.SceneCollisionShapeV0 = [\"shapeIndex\", \"uint32\"];\n\n        this.SceneNamedShapeV0 = [\"shapeIndex\", \"uint32\"];\n\n        this.__root = this.SceneFilePhysicsV0 = [\n          \"shapeData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"shapes\",\n          Utils.getArrayReader(this.SceneShapeV0),\n          \"collisionShapes\",\n          Utils.getArrayReader(this.SceneCollisionShapeV0),\n          \"namedShapes\",\n          Utils.getArrayReader(this.SceneNamedShapeV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: pnvm, versions: 3, strucTab: 0x172158C\n  /// ==================================================\n\n  {\n    name: \"pnvm\",\n    versions: {\n      // => Version: 2\n      2: function () {\n        this.PackMapPhysicsNavMeshChunkV2 = [\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"mediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapPhysicsNavMeshV2 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"erosionRadius\",\n          \"float32\",\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV2),\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0xEBB290\n      1: function () {\n        this.PackMapPhysicsNavMeshChunkV1 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"mediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"coarseGraphData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapPhysicsNavMeshV1 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackMapPhysicsNavMeshChunkV0 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"navMeshData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"mediatorMoppData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapPhysicsNavMeshV0 = [\n          \"boundsMin\",\n          [\"[]\", \"float32\", 3],\n          \"boundsMax\",\n          [\"[]\", \"float32\", 3],\n          \"chunkDims\",\n          [\"[]\", \"uint32\", 2],\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapPhysicsNavMeshChunkV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: PPSH, versions: 1, strucTab: 0x1528BD0\n  /// ==================================================\n\n  {\n    name: \"PPSH\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.AmatPs3ShaderConstant = [\n          \"token\",\n          \"uint32\",\n          \"regIndex\",\n          \"uint32\",\n          \"regCount\",\n          \"uint32\",\n          \"regValue\",\n          [\"[]\", \"float32\", 4],\n          \"data\",\n          \"uint32\",\n        ];\n\n        this.AmatPs3SamplerConstant = [\"regIndex\", \"uint32\", \"stateIndex\", \"uint32\", \"texIndex\", \"uint32\"];\n\n        this.__root = this.AmatPs3FragmentShaderConfig = [\n          \"offset\",\n          \"uint32\",\n          \"attributeInputMask\",\n          \"uint32\",\n          \"texCoordsInputMask\",\n          \"uint32\",\n          \"texCoords2D\",\n          \"uint32\",\n          \"texCoordsCentroid\",\n          \"uint32\",\n          \"fragmentControl\",\n          \"uint32\",\n          \"registerCount\",\n          \"uint32\",\n          \"constants\",\n          Utils.getArrayReader(this.AmatPs3ShaderConstant),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatPs3SamplerConstant),\n          \"code\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: prp2, versions: 22, strucTab: 0x1721F10\n  /// ==================================================\n\n  {\n    name: \"prp2\",\n    versions: {\n      // => Version: 21\n      21: function () {\n        this.PackMapPropConstantV18 = [\"token\", \"uint32\", \"constant\", [\"[]\", \"float32\", 4], \"submodel\", \"uint32\"];\n\n        this.PackMapPropObjV21 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constants\",\n          Utils.getArrayReader(this.PackMapPropConstantV18),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"reserved\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV21 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constants\",\n          Utils.getArrayReader(this.PackMapPropConstantV18),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"reserved\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropTransformV21 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackMapPropObjInstanceV21 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constants\",\n          Utils.getArrayReader(this.PackMapPropConstantV18),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"reserved\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"transforms\",\n          Utils.getArrayReader(this.PackMapPropTransformV21),\n          \"origGuidArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjToolV21 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjMetaV21 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constants\",\n          Utils.getArrayReader(this.PackMapPropConstantV18),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"reserved\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV21 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV21 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV21),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV21),\n          \"propInstanceArray\",\n          Utils.getArrayReader(this.PackMapPropObjInstanceV21),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV21),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV21),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV21),\n          \"reserved\",\n          Utils.getString16Reader(),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 20\n      20: function () {\n        this.PackMapPropConstantV17 = [\"token\", \"uint32\", \"constant\", [\"[]\", \"float32\", 4], \"submodel\", \"uint32\"];\n\n        this.PackMapPropObjV20 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constants\",\n          Utils.getArrayReader(this.PackMapPropConstantV17),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV20 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constants\",\n          Utils.getArrayReader(this.PackMapPropConstantV17),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropTransformV20 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackMapPropObjInstanceV20 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constants\",\n          Utils.getArrayReader(this.PackMapPropConstantV17),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"transforms\",\n          Utils.getArrayReader(this.PackMapPropTransformV20),\n          \"origGuidArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjToolV20 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjMetaV20 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constants\",\n          Utils.getArrayReader(this.PackMapPropConstantV17),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV20 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV20 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV20),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV20),\n          \"propInstanceArray\",\n          Utils.getArrayReader(this.PackMapPropObjInstanceV20),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV20),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV20),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV20),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 19\n      19: function () {\n        this.PackMapPropObjV19 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV19 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropTransformV19 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackMapPropObjInstanceV19 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"transforms\",\n          Utils.getArrayReader(this.PackMapPropTransformV19),\n          \"origGuidArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjToolV19 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjMetaV19 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV19 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV19 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV19),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV19),\n          \"propInstanceArray\",\n          Utils.getArrayReader(this.PackMapPropObjInstanceV19),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV19),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV19),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV19),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 18\n      18: function () {\n        this.PackMapPropObjV18 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV18 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropTransformV18 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackMapPropObjInstanceV18 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"transforms\",\n          Utils.getArrayReader(this.PackMapPropTransformV18),\n          \"origGuidArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjToolV18 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjMetaV18 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"sortLayer\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV18 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV18 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV18),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV18),\n          \"propInstanceArray\",\n          Utils.getArrayReader(this.PackMapPropObjInstanceV18),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV18),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV18),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV18),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 17, ReferencedFunction: 0xEB6AF0\n      17: function () {\n        this.PackMapPropObjV17 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV17 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropTransformV17 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackMapPropObjInstanceV17 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"transforms\",\n          Utils.getArrayReader(this.PackMapPropTransformV17),\n          \"origGuidArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjToolV17 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjMetaV17 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV17 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV17 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV17),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV17),\n          \"propInstanceArray\",\n          Utils.getArrayReader(this.PackMapPropObjInstanceV17),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV17),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV17),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV17),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 16\n      16: function () {\n        this.PackMapPropObjV16 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV16 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropTransformV16 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackMapPropObjInstanceV16 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"transforms\",\n          Utils.getArrayReader(this.PackMapPropTransformV16),\n          \"origGuidArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjToolV16 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjMetaV16 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"permutation\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV16 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV16 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV16),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV16),\n          \"propInstanceArray\",\n          Utils.getArrayReader(this.PackMapPropObjInstanceV16),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV16),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV16),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV16),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 15\n      15: function () {\n        this.PackMapPropObjV15 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV15 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropTransformV15 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackMapPropObjInstanceV15 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"transforms\",\n          Utils.getArrayReader(this.PackMapPropTransformV15),\n          \"origGuidArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjToolV15 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjMetaV15 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"bounds\",\n          [\"[]\", \"float32\", 4],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV15 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV15 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV15),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV15),\n          \"propInstanceArray\",\n          Utils.getArrayReader(this.PackMapPropObjInstanceV15),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV15),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV15),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV15),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 14, ReferencedFunction: 0xEB6A80\n      14: function () {\n        this.PackMapPropObjV14 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV14 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV14 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjMetaV14 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"bucketId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV14 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV14 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV14),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV14),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV14),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV14),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV14),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 13\n      13: function () {\n        this.PackMapPropObjV13 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV13 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV13 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapPropObjMetaV13 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV13 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"children\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV13 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV13),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV13),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV13),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV13),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV13),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 12, ReferencedFunction: 0xEB5900\n      12: function () {\n        this.PackMapPropObjV12 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV12 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV12 = [\"guid\", Utils.getQWordReader(), \"layerMask\", \"uint32\", \"glomType\", \"uint8\"];\n\n        this.PackMapPropObjMetaV12 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"parent\",\n          Utils.getQWordReader(),\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapPropObjVolumeV12 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomType\",\n          \"uint8\",\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV12 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV12),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV12),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV12),\n          \"propMetaArray\",\n          Utils.getArrayReader(this.PackMapPropObjMetaV12),\n          \"propVolumeArray\",\n          Utils.getArrayReader(this.PackMapPropObjVolumeV12),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 11, ReferencedFunction: 0xEB5740\n      11: function () {\n        this.PackMapPropObjV11 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV11 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"broadId\",\n          \"uint16\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV11 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"glomTargetId\",\n          Utils.getQWordReader(),\n          \"glomType\",\n          \"uint8\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapPropV11 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV11),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV11),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV11),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"nextBroadId\",\n          \"uint32\",\n        ];\n      },\n\n      // => Version: 10, ReferencedFunction: 0xEB6F90\n      10: function () {\n        this.PackMapPropObjV10 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV10 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV10 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"glomTargetId\",\n          Utils.getQWordReader(),\n          \"glomType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.PackMapPropV10 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV10),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV10),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV10),\n        ];\n      },\n\n      // => Version: 9, ReferencedFunction: 0xEB6E40\n      9: function () {\n        this.PackMapPropObjV9 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV9 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV9 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"glomTargetId\",\n          Utils.getQWordReader(),\n          \"glomType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.PackMapPropV9 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV9),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV9),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV9),\n        ];\n      },\n\n      // => Version: 8\n      8: function () {\n        this.PackMapPropObjV8 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV8 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"blitTextures\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV8 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"glomTargetId\",\n          Utils.getQWordReader(),\n          \"glomType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.PackMapPropV8 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV8),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV8),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV8),\n        ];\n      },\n\n      // => Version: 7, ReferencedFunction: 0xEB6DF0\n      7: function () {\n        this.PackMapPropObjV7 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV7 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV7 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"glomTargetId\",\n          Utils.getQWordReader(),\n          \"glomType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.PackMapPropV7 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV7),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV7),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV7),\n        ];\n      },\n\n      // => Version: 6, ReferencedFunction: 0xEB6C50\n      6: function () {\n        this.PackMapPropObjV6 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV6 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"float32\",\n          \"lod2\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV6 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"glomTargetId\",\n          Utils.getQWordReader(),\n          \"glomType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.PackMapPropV6 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV6),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV6),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV6),\n        ];\n      },\n\n      // => Version: 5\n      5: function () {\n        this.PackMapPropObjV5 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"uint16\",\n          \"lod2\",\n          \"uint16\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV5 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"uint16\",\n          \"lod2\",\n          \"uint16\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV5 = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"layerMask\",\n          \"uint32\",\n          \"glomOrigin\",\n          [\"[]\", \"float32\", 3],\n          \"glomClipScale\",\n          [\"[]\", \"float32\", 3],\n          \"glomTargetId\",\n          Utils.getQWordReader(),\n          \"glomType\",\n          \"uint8\",\n        ];\n\n        this.__root = this.PackMapPropV5 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV5),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV5),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV5),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.PackMapPropObjV4 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"uint16\",\n          \"lod2\",\n          \"uint16\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n        ];\n\n        this.PackMapPropObjAnimSeqV4 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"uint16\",\n          \"lod2\",\n          \"uint16\",\n          \"flags\",\n          \"uint32\",\n          \"byte\",\n          \"uint8\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV4 = [\"guid\", Utils.getQWordReader(), \"layerMask\", \"uint32\"];\n\n        this.__root = this.PackMapPropV4 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV4),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV4),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.PackMapPropObjV3 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"uint16\",\n          \"lod2\",\n          \"uint16\",\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackMapPropObjAnimSeqV3 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"guid\",\n          Utils.getQWordReader(),\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"rotation\",\n          [\"[]\", \"float32\", 3],\n          \"scale\",\n          \"float32\",\n          \"lod1\",\n          \"uint16\",\n          \"lod2\",\n          \"uint16\",\n          \"flags\",\n          \"uint32\",\n          \"animSequence\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapPropObjToolV3 = [\"guid\", Utils.getQWordReader(), \"layerMask\", \"uint32\"];\n\n        this.__root = this.PackMapPropV3 = [\n          \"propArray\",\n          Utils.getArrayReader(this.PackMapPropObjV3),\n          \"propAnimArray\",\n          Utils.getArrayReader(this.PackMapPropObjAnimSeqV3),\n          \"propToolArray\",\n          Utils.getArrayReader(this.PackMapPropObjToolV3),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: PRPS, versions: 1, strucTab: 0x177326C\n  /// ==================================================\n\n  {\n    name: \"PRPS\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.ModelFixedOffsetData = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"parentBone\",\n          Utils.getQWordReader(),\n          \"translation\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.ModelPropertyData = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.ModelFileProperties = [\n          \"fixedOffsetData\",\n          Utils.getArrayReader(this.ModelFixedOffsetData),\n          \"properties\",\n          Utils.getArrayReader(this.ModelPropertyData),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: PS3S, versions: 1, strucTab: 0x1528AD4\n  /// ==================================================\n\n  {\n    name: \"PS3S\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.AmatPs3ShaderConstant = [\n          \"token\",\n          \"uint32\",\n          \"regIndex\",\n          \"uint32\",\n          \"regCount\",\n          \"uint32\",\n          \"regValue\",\n          [\"[]\", \"float32\", 4],\n          \"data\",\n          \"uint32\",\n        ];\n\n        this.AmatPs3SamplerConstant = [\"regIndex\", \"uint32\", \"stateIndex\", \"uint32\", \"texIndex\", \"uint32\"];\n\n        this.AmatPs3FragmentShaderConfig = [\n          \"offset\",\n          \"uint32\",\n          \"attributeInputMask\",\n          \"uint32\",\n          \"texCoordsInputMask\",\n          \"uint32\",\n          \"texCoords2D\",\n          \"uint32\",\n          \"texCoordsCentroid\",\n          \"uint32\",\n          \"fragmentControl\",\n          \"uint32\",\n          \"registerCount\",\n          \"uint32\",\n          \"constants\",\n          Utils.getArrayReader(this.AmatPs3ShaderConstant),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatPs3SamplerConstant),\n          \"code\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.AmatPs3VertexShaderConfig = [\n          \"instructionSlot\",\n          \"uint32\",\n          \"instructionCount\",\n          \"uint32\",\n          \"attributeInputMask\",\n          \"uint32\",\n          \"registerCount\",\n          \"uint32\",\n          \"constants\",\n          Utils.getArrayReader(this.AmatPs3ShaderConstant),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatPs3SamplerConstant),\n          \"code\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.AmatPs3RenderState = [\n          \"cullMode\",\n          \"uint32\",\n          \"alphaFunc\",\n          \"uint32\",\n          \"alphaRef\",\n          \"uint32\",\n          \"blendOp\",\n          \"uint32\",\n          \"blendSrc\",\n          \"uint32\",\n          \"blendDst\",\n          \"uint32\",\n          \"colorMask\",\n          \"uint32\",\n          \"depthWrite\",\n          \"uint32\",\n          \"depthFunc\",\n          \"uint32\",\n          \"depthBias\",\n          \"float32\",\n        ];\n\n        this.AmatPs3Pass = [\n          \"renderState\",\n          this.AmatPs3RenderState,\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"psFileFame\",\n          Utils.getFileNameReader(),\n          \"vsFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.AmatPs3Effect = [\"token\", Utils.getQWordReader(), \"passes\", Utils.getArrayReader(this.AmatPs3Pass)];\n\n        this.AmatPs3Sampler = [\n          \"wraps\",\n          \"uint32\",\n          \"wrapt\",\n          \"uint32\",\n          \"maxAniso\",\n          \"uint32\",\n          \"filterMin\",\n          \"uint32\",\n          \"filterMag\",\n          \"uint32\",\n          \"filterBias\",\n          \"uint32\",\n        ];\n\n        this.__root = this.AmatPs3Material = [\n          \"name\",\n          Utils.getStringReader(),\n          \"fragmentShaders\",\n          Utils.getArrayReader(this.AmatPs3FragmentShaderConfig),\n          \"vertexShaders\",\n          Utils.getArrayReader(this.AmatPs3VertexShaderConfig),\n          \"effects\",\n          Utils.getArrayReader(this.AmatPs3Effect),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatPs3Sampler),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: PVSH, versions: 1, strucTab: 0x1528BDC\n  /// ==================================================\n\n  {\n    name: \"PVSH\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.AmatPs3ShaderConstant = [\n          \"token\",\n          \"uint32\",\n          \"regIndex\",\n          \"uint32\",\n          \"regCount\",\n          \"uint32\",\n          \"regValue\",\n          [\"[]\", \"float32\", 4],\n          \"data\",\n          \"uint32\",\n        ];\n\n        this.AmatPs3SamplerConstant = [\"regIndex\", \"uint32\", \"stateIndex\", \"uint32\", \"texIndex\", \"uint32\"];\n\n        this.__root = this.AmatPs3VertexShaderConfig = [\n          \"instructionSlot\",\n          \"uint32\",\n          \"instructionCount\",\n          \"uint32\",\n          \"attributeInputMask\",\n          \"uint32\",\n          \"registerCount\",\n          \"uint32\",\n          \"constants\",\n          Utils.getArrayReader(this.AmatPs3ShaderConstant),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatPs3SamplerConstant),\n          \"code\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: reso, versions: 2, strucTab: 0x17228C8\n  /// ==================================================\n\n  {\n    name: \"reso\",\n    versions: {\n      // => Version: 1\n      1: function () {\n        this.PackMapResourceMapNodeItemV1 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"type\",\n          \"uint32\",\n          \"permutation\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapResourceMapNodeV1 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"itemArray\",\n          Utils.getArrayReader(this.PackMapResourceMapNodeItemV1),\n        ];\n\n        this.__root = this.PackMapResourceMapV1 = [\"nodeArray\", Utils.getArrayReader(this.PackMapResourceMapNodeV1)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackMapResourceMapNodeItemV0 = [\"filename\", Utils.getFileNameReader(), \"type\", \"uint32\"];\n\n        this.PackMapResourceMapNodeV0 = [\n          \"position\",\n          [\"[]\", \"float32\", 3],\n          \"flags\",\n          \"uint32\",\n          \"itemArray\",\n          Utils.getArrayReader(this.PackMapResourceMapNodeItemV0),\n        ];\n\n        this.__root = this.PackMapResourceMapV0 = [\"nodeArray\", Utils.getArrayReader(this.PackMapResourceMapNodeV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: rive, versions: 6, strucTab: 0x1722A90\n  /// ==================================================\n\n  {\n    name: \"rive\",\n    versions: {\n      // => Version: 5, ReferencedFunction: 0xEB50C0\n      5: function () {\n        this.PackMapRiverProperty = [\n          \"type\",\n          \"uint32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.MapRiverReach = [\"properties\", Utils.getArrayReader(this.PackMapRiverProperty)];\n\n        this.MapRiver = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getString16Reader(),\n          \"properties\",\n          Utils.getArrayReader(this.PackMapRiverProperty),\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"reaches\",\n          Utils.getArrayReader(this.MapRiverReach),\n        ];\n\n        this.__root = this.PackMapRivers = [\"rivers\", Utils.getArrayReader(this.MapRiver)];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.MapRiverTextureMap = [\n          \"scale\",\n          \"float32\",\n          \"speedX\",\n          \"float32\",\n          \"speedY\",\n          \"float32\",\n          \"tiling\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"uvIndex\",\n          \"uint8\",\n        ];\n\n        this.MapRiverMaterial = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"textureFiles\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"textureMaps\",\n          Utils.getArrayReader(this.MapRiverTextureMap),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.MapRiverReach = [\n          \"width\",\n          \"float32\",\n          \"curveLength\",\n          \"float32\",\n          \"curvePercent\",\n          \"float32\",\n          \"xTessellation\",\n          \"uint32\",\n          \"yTessellation\",\n          [\"[]\", \"uint32\", 2],\n          \"broadId\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materials\",\n          Utils.getArrayReader(this.MapRiverMaterial),\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n\n        this.MapRiver = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getString16Reader(),\n          \"xTiling\",\n          \"float32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"reaches\",\n          Utils.getArrayReader(this.MapRiverReach),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapRivers = [\n          \"flags\",\n          \"uint32\",\n          \"nextBroadId\",\n          \"uint32\",\n          \"rivers\",\n          Utils.getArrayReader(this.MapRiver),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.MapRiverTextureMap = [\n          \"scale\",\n          \"float32\",\n          \"speedX\",\n          \"float32\",\n          \"speedY\",\n          \"float32\",\n          \"tiling\",\n          \"float32\",\n          \"uvIndex\",\n          \"uint8\",\n        ];\n\n        this.MapRiverMaterial = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"textureFiles\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"textureMaps\",\n          Utils.getArrayReader(this.MapRiverTextureMap),\n        ];\n\n        this.MapRiverReach = [\n          \"width\",\n          \"float32\",\n          \"curveLength\",\n          \"float32\",\n          \"curvePercent\",\n          \"float32\",\n          \"xTessellation\",\n          \"uint32\",\n          \"yTessellation\",\n          [\"[]\", \"uint32\", 2],\n          \"broadId\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"materials\",\n          Utils.getArrayReader(this.MapRiverMaterial),\n        ];\n\n        this.MapRiver = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getString16Reader(),\n          \"xTiling\",\n          \"float32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"reaches\",\n          Utils.getArrayReader(this.MapRiverReach),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapRivers = [\n          \"flags\",\n          \"uint32\",\n          \"nextBroadId\",\n          \"uint32\",\n          \"rivers\",\n          Utils.getArrayReader(this.MapRiver),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.MapRiverTextureMap = [\n          \"scale\",\n          \"float32\",\n          \"speedX\",\n          \"float32\",\n          \"speedY\",\n          \"float32\",\n          \"tiling\",\n          \"float32\",\n          \"uvIndex\",\n          \"uint8\",\n        ];\n\n        this.MapRiverMaterial = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"textureFiles\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"textureMaps\",\n          Utils.getArrayReader(this.MapRiverTextureMap),\n        ];\n\n        this.MapRiverReach = [\n          \"width\",\n          \"float32\",\n          \"curveLength\",\n          \"float32\",\n          \"curvePercent\",\n          \"float32\",\n          \"xTessellation\",\n          \"uint32\",\n          \"yTessellation\",\n          [\"[]\", \"uint32\", 2],\n          \"broadId\",\n          \"uint32\",\n          \"fvf\",\n          \"uint32\",\n          \"materials\",\n          Utils.getArrayReader(this.MapRiverMaterial),\n        ];\n\n        this.MapRiver = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getString16Reader(),\n          \"xTiling\",\n          \"float32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"reaches\",\n          Utils.getArrayReader(this.MapRiverReach),\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapRivers = [\n          \"flags\",\n          \"uint32\",\n          \"nextBroadId\",\n          \"uint32\",\n          \"rivers\",\n          Utils.getArrayReader(this.MapRiver),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.MapRiverTextureMap = [\n          \"scale\",\n          \"float32\",\n          \"speedX\",\n          \"float32\",\n          \"speedY\",\n          \"float32\",\n          \"tiling\",\n          \"float32\",\n          \"uvIndex\",\n          \"uint8\",\n        ];\n\n        this.MapRiverMaterial = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"textureFiles\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"textureMaps\",\n          Utils.getArrayReader(this.MapRiverTextureMap),\n        ];\n\n        this.MapRiverReach = [\n          \"width\",\n          \"float32\",\n          \"curveLength\",\n          \"float32\",\n          \"curvePercent\",\n          \"float32\",\n          \"xTessellation\",\n          \"uint32\",\n          \"yTessellation\",\n          [\"[]\", \"uint32\", 2],\n          \"broadId\",\n          \"uint32\",\n          \"materials\",\n          Utils.getArrayReader(this.MapRiverMaterial),\n        ];\n\n        this.MapRiver = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"name\",\n          Utils.getString16Reader(),\n          \"xTiling\",\n          \"float32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"reaches\",\n          Utils.getArrayReader(this.MapRiverReach),\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapRivers = [\n          \"flags\",\n          \"uint32\",\n          \"nextBroadId\",\n          \"uint32\",\n          \"rivers\",\n          Utils.getArrayReader(this.MapRiver),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.MapRiverTextureMap = [\"scale\", \"float32\", \"speed\", \"float32\", \"tiling\", \"float32\", \"uvIndex\", \"uint8\"];\n\n        this.MapRiverMaterial = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"textureFiles\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"constantTokens\",\n          Utils.getArrayReader(\"uint32\"),\n          \"constantValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n          \"textureMaps\",\n          Utils.getArrayReader(this.MapRiverTextureMap),\n        ];\n\n        this.MapRiverReach = [\n          \"width\",\n          \"float32\",\n          \"curveLength\",\n          \"float32\",\n          \"curvePercent\",\n          \"float32\",\n          \"xTessellation\",\n          \"uint32\",\n          \"yTessellation\",\n          [\"[]\", \"uint32\", 2],\n          \"broadId\",\n          \"uint32\",\n          \"materials\",\n          Utils.getArrayReader(this.MapRiverMaterial),\n        ];\n\n        this.MapRiver = [\n          \"guid\",\n          Utils.getQWordReader(),\n          \"xTiling\",\n          \"float32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"reaches\",\n          Utils.getArrayReader(this.MapRiverReach),\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapRivers = [\n          \"flags\",\n          \"uint32\",\n          \"nextBroadId\",\n          \"uint32\",\n          \"rivers\",\n          Utils.getArrayReader(this.MapRiver),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: ROOT, versions: 2, strucTab: 0x17731F0\n  /// ==================================================\n\n  {\n    name: \"ROOT\",\n    versions: {\n      // => Version: 1, ReferencedFunction: 0xF290C0\n      1: function () {\n        this.ModelRootMotionV1 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"keys\",\n          Utils.getArrayReader(\"float32\"),\n          \"posValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n          \"quatValues\",\n          Utils.getArrayReader([\"[]\", \"float32\", 4]),\n        ];\n\n        this.__root = this.ModelFileRootMotionV1 = [\"rootMotions\", Utils.getArrayReader(this.ModelRootMotionV1)];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ModelRootMotionV0 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"keys\",\n          Utils.getArrayReader(\"float32\"),\n          \"values\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.__root = this.ModelFileRootMotionV0 = [\"rootMotions\", Utils.getArrayReader(this.ModelRootMotionV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: seqn, versions: 1, strucTab: 0x1884454\n  /// ==================================================\n\n  {\n    name: \"seqn\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackAnimSequenceChargeStageV0 = [\"duration\", \"uint16\", \"endingChargeLevel\", \"uint8\"];\n\n        this.PackAnimSequenceStepActionV0 = [\"duration\", \"uint32\"];\n\n        this.PackAnimSequenceStepMoveV0 = [\n          \"duration\",\n          \"uint32\",\n          \"moveRotation\",\n          [\"[]\", \"float32\", 4],\n          \"facingRotation\",\n          [\"[]\", \"float32\", 4],\n          \"velocity\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.PackAnimSequenceStepV0 = [\n          \"type\",\n          \"uint8\",\n          \"animationSpeed\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"action\",\n          Utils.getPointerReader(this.PackAnimSequenceStepActionV0),\n          \"move\",\n          Utils.getPointerReader(this.PackAnimSequenceStepMoveV0),\n        ];\n\n        this.PackAnimSequenceTriggerV0 = [\"trigger\", \"uint8\", \"time\", \"uint32\", \"flags\", \"uint32\"];\n\n        this.PackAnimSequenceDataV0 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint32\",\n          \"blendInTime\",\n          \"float32\",\n          \"blendOutTime\",\n          \"float32\",\n          \"chargeStages\",\n          Utils.getArrayReader(this.PackAnimSequenceChargeStageV0),\n          \"steps\",\n          Utils.getArrayReader(this.PackAnimSequenceStepV0),\n          \"triggers\",\n          Utils.getArrayReader(this.PackAnimSequenceTriggerV0),\n        ];\n\n        this.PackAnimSequenceV0 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"animationData\",\n          Utils.getArrayReader(this.PackAnimSequenceDataV0),\n        ];\n\n        this.__root = this.PackAnimSequencesV0 = [\"sequences\", Utils.getArrayReader(this.PackAnimSequenceV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: shad, versions: 2, strucTab: 0x1722DB8\n  /// ==================================================\n\n  {\n    name: \"shad\",\n    versions: {\n      // => Version: 1, ReferencedFunction: 0xEBB230\n      1: function () {\n        this.PackMapShadowTileV1 = [\"compressionMode\", \"uint32\", \"bytes\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapShadowV1 = [\n          \"shadowDims\",\n          [\"[]\", \"uint32\", 2],\n          \"tileDims\",\n          [\"[]\", \"uint32\", 2],\n          \"tiles\",\n          Utils.getArrayReader(this.PackMapShadowTileV1),\n          \"worldToShadow\",\n          [\"[]\", \"float32\", 16],\n          \"s\",\n          [\"[]\", \"float32\", 2],\n          \"t\",\n          [\"[]\", \"float32\", 2],\n          \"u\",\n          [\"[]\", \"float32\", 2],\n          \"shadowEye\",\n          [\"[]\", \"float32\", 3],\n          \"shadowDir\",\n          [\"[]\", \"float32\", 3],\n          \"shadowUp\",\n          [\"[]\", \"float32\", 3],\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PackMapShadowTileV0 = [\"compressionMode\", \"uint32\", \"bytes\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapShadowV0 = [\n          \"shadowDims\",\n          [\"[]\", \"uint32\", 2],\n          \"tileDims\",\n          [\"[]\", \"uint32\", 2],\n          \"tiles\",\n          Utils.getArrayReader(this.PackMapShadowTileV0),\n          \"worldToShadow\",\n          [\"[]\", \"float32\", 16],\n          \"s\",\n          [\"[]\", \"float32\", 2],\n          \"t\",\n          [\"[]\", \"float32\", 2],\n          \"u\",\n          [\"[]\", \"float32\", 2],\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: shex, versions: 2, strucTab: 0x1722DD0\n  /// ==================================================\n\n  {\n    name: \"shex\",\n    versions: {\n      // => Version: 1\n      1: function () {\n        this.__root = this.PackMapShadowExtV1 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"shadowDims\",\n          [\"[]\", \"uint32\", 2],\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: shor, versions: 4, strucTab: 0x1722DE8\n  /// ==================================================\n\n  {\n    name: \"shor\",\n    versions: {\n      // => Version: 3, ReferencedFunction: 0xEBB250\n      3: function () {\n        this.MapShoreChain = [\n          \"offset\",\n          \"float32\",\n          \"opacity\",\n          \"float32\",\n          \"animationSpeed\",\n          \"float32\",\n          \"edgeSize\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"restTime\",\n          \"float32\",\n          \"fadeRanges\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"simplifyDistMin\",\n          \"float32\",\n          \"simplifyDistMax\",\n          \"float32\",\n          \"simplifyDot\",\n          \"float32\",\n        ];\n\n        this.__root = this.MapShore = [\"chains\", Utils.getArrayReader(this.MapShoreChain)];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.MapShoreChain = [\n          \"offset\",\n          \"float32\",\n          \"opacity\",\n          \"float32\",\n          \"animationSpeed\",\n          \"float32\",\n          \"edgeSize\",\n          [\"[]\", \"float32\", 2],\n          \"flags\",\n          \"uint32\",\n          \"points\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"materialFilename\",\n          Utils.getFileNameReader(),\n          \"textureFilenames\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n          \"restTime\",\n          \"float32\",\n          \"fadeRanges\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n        ];\n\n        this.__root = this.MapShore = [\"chains\", Utils.getArrayReader(this.MapShoreChain)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: SKEL, versions: 2, strucTab: 0x1773254\n  /// ==================================================\n\n  {\n    name: \"SKEL\",\n    versions: {\n      // => Version: 1, ReferencedFunction: 0xF29110\n      1: function () {\n        this.ModelTransformData = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneData = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformData,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelGrannySkeletonV1 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneData),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingData = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelGrannyModelV1 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelGrannySkeletonV1),\n          \"InitialPlacement\",\n          this.ModelTransformData,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingData),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneConstraintLinkV63 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV63 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV63),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.PackGrannyMirrorSpecType = [\"mirrorSpec\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV63 = [\"data\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV63 = [\n          \"grannyModel\",\n          Utils.getPointerReader(this.ModelGrannyModelV1),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV63),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"mirrorSpec\",\n          this.PackGrannyMirrorSpecType,\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV63),\n        ];\n\n        this.ModelSkeletonOverridesV1 = [\"boneConstraints\", Utils.getArrayReader(this.ModelBoneConstraintV63)];\n\n        this.__root = this.ModelFileSkeletonV1 = [\n          \"skeletonData\",\n          Utils.getPointerReader(this.ModelSkeletonDataV63),\n          \"fileReference\",\n          Utils.getFileNameReader(),\n          \"overrides\",\n          Utils.getPointerReader(this.ModelSkeletonOverridesV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ModelTransformData = [\n          \"Flags\",\n          \"uint32\",\n          \"Position\",\n          [\"[]\", \"float32\", 3],\n          \"Orientation\",\n          [\"[]\", \"float32\", 4],\n          \"ScaleShear\",\n          [\"[]\", [\"[]\", \"float32\", 3], 3],\n        ];\n\n        this.ModelBoneData = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"ParentIndex\",\n          \"uint32\",\n          \"LocalTransform\",\n          this.ModelTransformData,\n          \"InverseWorld4x4\",\n          [\"[]\", [\"[]\", \"float32\", 4], 4],\n          \"LODError\",\n          \"float32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelGrannySkeletonV0 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Bones\",\n          Utils.getArrayReader(this.ModelBoneData),\n          \"LODType\",\n          \"uint32\",\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelMeshBindingData = [\"Mesh\", Utils.getPointerReader(\"uint8\")];\n\n        this.ModelGrannyModelV0 = [\n          \"Name\",\n          Utils.getStringReader(),\n          \"Skeleton\",\n          Utils.getPointerReader(this.ModelGrannySkeletonV0),\n          \"InitialPlacement\",\n          this.ModelTransformData,\n          \"MeshBindings\",\n          Utils.getArrayReader(this.ModelMeshBindingData),\n          \"ExtendedData.Type\",\n          Utils.getPointerReader(\"uint8\"),\n          \"ExtendedData.Object\",\n          Utils.getPointerReader(\"uint8\"),\n        ];\n\n        this.ModelBoneConstraintLinkV62 = [\n          \"angle\",\n          \"float32\",\n          \"azimuth\",\n          \"float32\",\n          \"distance\",\n          [\"[]\", \"float32\", 2],\n          \"token\",\n          Utils.getQWordReader(),\n        ];\n\n        this.ModelBoneConstraintV62 = [\n          \"token\",\n          Utils.getQWordReader(),\n          \"flags\",\n          \"uint16\",\n          \"twistOffset\",\n          \"float32\",\n          \"animBlend\",\n          \"float32\",\n          \"drag\",\n          \"float32\",\n          \"ellipseRatio\",\n          \"float32\",\n          \"gravity\",\n          \"float32\",\n          \"collisionRadius\",\n          \"float32\",\n          \"wind\",\n          \"float32\",\n          \"angle\",\n          [\"[]\", \"float32\", 2],\n          \"angleStrength\",\n          \"float32\",\n          \"angleType\",\n          \"uint8\",\n          \"distanceInner\",\n          [\"[]\", \"float32\", 2],\n          \"distanceInnerStrength\",\n          \"float32\",\n          \"distanceInnerType\",\n          \"uint8\",\n          \"links\",\n          Utils.getArrayReader(this.ModelBoneConstraintLinkV62),\n          \"distanceOuter\",\n          [\"[]\", \"float32\", 2],\n          \"distanceOuterStrength\",\n          \"float32\",\n          \"distanceOuterType\",\n          \"uint8\",\n          \"twist\",\n          [\"[]\", \"float32\", 2],\n          \"twistStrength\",\n          \"float32\",\n          \"twistType\",\n          \"uint8\",\n        ];\n\n        this.ModelBoneSymmetryV62 = [\"boneLeft\", Utils.getQWordReader(), \"boneRight\", Utils.getQWordReader()];\n\n        this.PackGrannyTrackMaskType = [\"trackMask\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelTrackMaskV62 = [\"data\", this.PackGrannyTrackMaskType, \"token\", Utils.getQWordReader()];\n\n        this.ModelSkeletonDataV62 = [\n          \"grannyModel\",\n          Utils.getPointerReader(this.ModelGrannyModelV0),\n          \"boneConstraints\",\n          Utils.getArrayReader(this.ModelBoneConstraintV62),\n          \"boneFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"boneSymmetries\",\n          Utils.getArrayReader(this.ModelBoneSymmetryV62),\n          \"emitterBones\",\n          Utils.getArrayReader(\"uint32\"),\n          \"trackMasks\",\n          Utils.getArrayReader(this.ModelTrackMaskV62),\n        ];\n\n        this.__root = this.ModelFileSkeletonV0 = [\n          \"skeletonData\",\n          Utils.getPointerReader(this.ModelSkeletonDataV62),\n          \"fileReference\",\n          Utils.getFileNameReader(),\n        ];\n      },\n    },\n  },\n\n  /// ==================================================\n  /// Chunk: SKEL, versions: 4, strucTab: 0x183055C\n  /// ==================================================\n\n  {\n    name: \"SKEL\",\n    versions: {\n      // => Version: 3\n      3: function () {\n        this.SceneBoneV3 = [\n          \"vertexA\",\n          [\"[]\", \"float32\", 3],\n          \"vertexB\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"mass\",\n          \"float32\",\n          \"name\",\n          Utils.getQWordReader(),\n        ];\n\n        this.SceneJointV3 = [\n          \"bones\",\n          [\"[]\", \"uint32\", 2],\n          \"pivots\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"twists\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"planes\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"coneLimit\",\n          \"float32\",\n          \"planeMin\",\n          \"float32\",\n          \"planeMax\",\n          \"float32\",\n          \"twistMin\",\n          \"float32\",\n          \"twistMax\",\n          \"float32\",\n        ];\n\n        this.SceneHingeJointV3 = [\n          \"bones\",\n          [\"[]\", \"uint32\", 2],\n          \"pivots\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"hinges\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"normals\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"limitMin\",\n          \"float32\",\n          \"limitMax\",\n          \"float32\",\n        ];\n\n        this.__root = this.SceneFileSkeletonV3 = [\n          \"bones\",\n          Utils.getArrayReader(this.SceneBoneV3),\n          \"joints\",\n          Utils.getArrayReader(this.SceneJointV3),\n          \"hingeJoints\",\n          Utils.getArrayReader(this.SceneHingeJointV3),\n          \"ragdollToModel\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.SceneBoneV2 = [\n          \"vertexA\",\n          [\"[]\", \"float32\", 3],\n          \"vertexB\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"mass\",\n          \"float32\",\n        ];\n\n        this.SceneJointV2 = [\n          \"bones\",\n          [\"[]\", \"uint32\", 2],\n          \"pivots\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"twists\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"planes\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"coneLimit\",\n          \"float32\",\n          \"planeMin\",\n          \"float32\",\n          \"planeMax\",\n          \"float32\",\n          \"twistMin\",\n          \"float32\",\n          \"twistMax\",\n          \"float32\",\n        ];\n\n        this.SceneHingeJointV2 = [\n          \"bones\",\n          [\"[]\", \"uint32\", 2],\n          \"pivots\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"hinges\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"normals\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"limitMin\",\n          \"float32\",\n          \"limitMax\",\n          \"float32\",\n        ];\n\n        this.__root = this.SceneFileSkeletonV2 = [\n          \"bones\",\n          Utils.getArrayReader(this.SceneBoneV2),\n          \"joints\",\n          Utils.getArrayReader(this.SceneJointV2),\n          \"hingeJoints\",\n          Utils.getArrayReader(this.SceneHingeJointV2),\n          \"ragdollToModel\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.SceneBoneV1 = [\n          \"vertexA\",\n          [\"[]\", \"float32\", 3],\n          \"vertexB\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"mass\",\n          \"float32\",\n        ];\n\n        this.SceneJointV1 = [\n          \"bones\",\n          [\"[]\", \"uint32\", 2],\n          \"pivots\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"twists\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"planes\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"coneLimit\",\n          \"float32\",\n          \"planeMin\",\n          \"float32\",\n          \"planeMax\",\n          \"float32\",\n          \"twistMin\",\n          \"float32\",\n          \"twistMax\",\n          \"float32\",\n        ];\n\n        this.SceneHingeJointV1 = [\n          \"bones\",\n          [\"[]\", \"uint32\", 2],\n          \"pivots\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"hinges\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"normals\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"limitMin\",\n          \"float32\",\n          \"limitMax\",\n          \"float32\",\n        ];\n\n        this.SceneUnmappedBoneV1 = [\n          \"modelBoneIndex\",\n          \"uint32\",\n          \"sceneBoneIndex\",\n          \"uint32\",\n          \"localPose\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.__root = this.SceneFileSkeletonV1 = [\n          \"bones\",\n          Utils.getArrayReader(this.SceneBoneV1),\n          \"joints\",\n          Utils.getArrayReader(this.SceneJointV1),\n          \"hingeJoints\",\n          Utils.getArrayReader(this.SceneHingeJointV1),\n          \"unmappedBones\",\n          Utils.getArrayReader(this.SceneUnmappedBoneV1),\n          \"ragdollToModel\",\n          Utils.getArrayReader(\"uint32\"),\n          \"modelToRagdoll\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.SceneBoneV0 = [\n          \"vertexA\",\n          [\"[]\", \"float32\", 3],\n          \"vertexB\",\n          [\"[]\", \"float32\", 3],\n          \"radius\",\n          \"float32\",\n          \"mass\",\n          \"float32\",\n        ];\n\n        this.SceneJointV0 = [\n          \"bones\",\n          [\"[]\", \"uint32\", 2],\n          \"pivots\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"twists\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"planes\",\n          [\"[]\", [\"[]\", \"float32\", 3], 2],\n          \"coneLimit\",\n          \"float32\",\n          \"planeMin\",\n          \"float32\",\n          \"planeMax\",\n          \"float32\",\n          \"twistMin\",\n          \"float32\",\n          \"twistMax\",\n          \"float32\",\n        ];\n\n        this.SceneUnmappedBoneV0 = [\n          \"modelBoneIndex\",\n          \"uint32\",\n          \"sceneBoneIndex\",\n          \"uint32\",\n          \"localPose\",\n          [\"[]\", [\"[]\", \"float32\", 4], 3],\n        ];\n\n        this.__root = this.SceneFileSkeletonV0 = [\n          \"bones\",\n          Utils.getArrayReader(this.SceneBoneV0),\n          \"joints\",\n          Utils.getArrayReader(this.SceneJointV0),\n          \"unmappedBones\",\n          Utils.getArrayReader(this.SceneUnmappedBoneV0),\n          \"ragdollToModel\",\n          Utils.getArrayReader(\"uint32\"),\n          \"modelToRagdoll\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: snd, versions: 1, strucTab: 0x1721AA4\n  /// ==================================================\n\n  {\n    name: \"snd\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.__root = this.MapLegacy = [\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n          \"files\",\n          Utils.getArrayReader(Utils.getFileNameReader()),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: SPPA, versions: 1, strucTab: 0x1528BF4\n  /// ==================================================\n\n  {\n    name: \"SPPA\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.AmatAppleShaderConstant = [\"token\", \"uint32\", \"regIndex\", \"uint32\", \"regCount\", \"uint32\"];\n\n        this.__root = this.AmatAppleShader = [\n          \"isPixelShader\",\n          \"uint32\",\n          \"cachedData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"physicalData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"constants\",\n          Utils.getArrayReader(this.AmatAppleShaderConstant),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatAppleShaderConstant),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: surf, versions: 3, strucTab: 0x1722F58\n  /// ==================================================\n\n  {\n    name: \"surf\",\n    versions: {\n      // => Version: 2\n      2: function () {\n        this.MapSurfaceAttribute = [\"Id\", Utils.getQWordReader(), \"Sound\", Utils.getQWordReader(), \"flags\", \"uint32\"];\n\n        this.MapSurfaceAttributeTool = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"category\",\n          Utils.getString16Reader(),\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.MapSurfaceOverride = [\"surfaceId\", Utils.getQWordReader(), \"bitArray\", Utils.getArrayReader(\"uint32\")];\n\n        this.MapSurfaceTerrainOverride = [\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"overrideArray\",\n          Utils.getArrayReader(this.MapSurfaceOverride),\n        ];\n\n        this.MapSurfacePropOverride = [\n          \"propId\",\n          Utils.getQWordReader(),\n          \"overrideArray\",\n          Utils.getArrayReader(this.MapSurfaceOverride),\n        ];\n\n        this.__root = this.MapSurfaces = [\n          \"attributeData\",\n          Utils.getArrayReader(this.MapSurfaceAttribute),\n          \"toolData\",\n          Utils.getArrayReader(this.MapSurfaceAttributeTool),\n          \"terrainArray\",\n          Utils.getArrayReader(this.MapSurfaceTerrainOverride),\n          \"propArray\",\n          Utils.getArrayReader(this.MapSurfacePropOverride),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.MapSurfaceAttribute = [\"Id\", Utils.getQWordReader(), \"Sound\", Utils.getQWordReader(), \"flags\", \"uint32\"];\n\n        this.MapSurfaceAttributeTool = [\n          \"name\",\n          Utils.getString16Reader(),\n          \"category\",\n          Utils.getString16Reader(),\n          \"color\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.__root = this.MapSurfaces = [\n          \"attributeData\",\n          Utils.getArrayReader(this.MapSurfaceAttribute),\n          \"toolData\",\n          Utils.getArrayReader(this.MapSurfaceAttributeTool),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.MapSurfaceMeta = [\"index\", \"uint16\", \"descriptor\", \"uint8\", \"data\", \"uint8\"];\n\n        this.MapSurfaceChunk = [\n          \"coord\",\n          [\"[]\", \"uint32\", 3],\n          \"metadata\",\n          Utils.getArrayReader(this.MapSurfaceMeta),\n          \"typeData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.MapSurfaces = [\n          \"chunkData\",\n          Utils.getArrayReader(this.MapSurfaceChunk),\n          \"typeData\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: TKAC, versions: 1, strucTab: 0x1835188\n  /// ==================================================\n\n  {\n    name: \"TKAC\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.KeyEntry = [\"assetType\", \"uint32\", \"assetId\", \"uint32\", \"key\", Utils.getQWordReader()];\n\n        this.__root = this.KeyTableData = [\"keyEntryArr\", Utils.getArrayReader(this.KeyEntry)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: tlfs, versions: 1, strucTab: 0x1721550\n  /// ==================================================\n\n  {\n    name: \"tlfs\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.PackMapToolFsFileV0 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"time\",\n          Utils.getQWordReader(),\n          \"dataPtr\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.__root = this.PackMapToolFsV0 = [\"filePtr\", Utils.getArrayReader(this.PackMapToolFsFileV0)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: TOOL, versions: 4, strucTab: 0x1528B70\n  /// ==================================================\n\n  {\n    name: \"TOOL\",\n    versions: {\n      // => Version: 3, ReferencedFunction: 0x5AEBF0\n      3: function () {\n        this.AmatToolConstant = [\n          \"token\",\n          \"uint32\",\n          \"displayName\",\n          Utils.getString16Reader(),\n          \"defaultValue\",\n          [\"[]\", \"float32\", 4],\n          \"flags\",\n          \"uint32\",\n          \"minValue\",\n          [\"[]\", \"float32\", 4],\n          \"maxValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.AmatToolTexture = [\n          \"texName\",\n          Utils.getString16Reader(),\n          \"texDefaultFile\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.__root = this.AmatToolParams = [\n          \"description\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"texCoordCount\",\n          \"uint8\",\n          \"texTransformCount\",\n          \"uint8\",\n          \"decompressedTextCount\",\n          \"uint32\",\n          \"compressedText\",\n          Utils.getArrayReader(\"uint8\"),\n          \"constants\",\n          Utils.getArrayReader(this.AmatToolConstant),\n          \"textures\",\n          Utils.getArrayReader(this.AmatToolTexture),\n        ];\n      },\n\n      // => Version: 2, ReferencedFunction: 0x5AEB70\n      2: function () {\n        this.AmatToolConstant = [\n          \"token\",\n          \"uint32\",\n          \"displayName\",\n          Utils.getString16Reader(),\n          \"defaultValue\",\n          [\"[]\", \"float32\", 4],\n          \"flags\",\n          \"uint32\",\n          \"minValue\",\n          [\"[]\", \"float32\", 4],\n          \"maxValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.AmatToolTexture = [\n          \"texName\",\n          Utils.getString16Reader(),\n          \"texDefaultFile\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.__root = this.AmatToolParams = [\n          \"description\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"text\",\n          Utils.getStringReader(),\n          \"texCoordCount\",\n          \"uint8\",\n          \"texTransformCount\",\n          \"uint8\",\n          \"constants\",\n          Utils.getArrayReader(this.AmatToolConstant),\n          \"textures\",\n          Utils.getArrayReader(this.AmatToolTexture),\n        ];\n      },\n\n      // => Version: 1, ReferencedFunction: 0x5AEB10\n      1: function () {\n        this.AmatToolConstantV1 = [\n          \"token\",\n          \"uint32\",\n          \"displayName\",\n          Utils.getString16Reader(),\n          \"defaultValue\",\n          [\"[]\", \"float32\", 4],\n          \"flags\",\n          \"uint32\",\n          \"minValue\",\n          [\"[]\", \"float32\", 4],\n          \"maxValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.AmatToolTextureV1 = [\n          \"texName\",\n          Utils.getString16Reader(),\n          \"texDefaultFile\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.__root = this.AmatToolParamsV1 = [\n          \"description\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"text\",\n          Utils.getStringReader(),\n          \"texCoordCount\",\n          \"uint8\",\n          \"texTransformCount\",\n          \"uint8\",\n          \"constants\",\n          Utils.getArrayReader(this.AmatToolConstantV1),\n          \"textures\",\n          Utils.getArrayReader(this.AmatToolTextureV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.AmatToolConstantV0 = [\n          \"token\",\n          \"uint32\",\n          \"displayName\",\n          Utils.getString16Reader(),\n          \"defaultValue\",\n          [\"[]\", \"float32\", 4],\n          \"flags\",\n          \"uint32\",\n          \"minValue\",\n          [\"[]\", \"float32\", 4],\n          \"maxValue\",\n          [\"[]\", \"float32\", 4],\n        ];\n\n        this.AmatToolTextureV0 = [\n          \"texName\",\n          Utils.getString16Reader(),\n          \"texDefaultFile\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"texGen\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texTransform\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.__root = this.AmatToolParamsV0 = [\n          \"description\",\n          Utils.getString16Reader(),\n          \"flags\",\n          \"uint32\",\n          \"text\",\n          Utils.getStringReader(),\n          \"texCoordCount\",\n          \"uint8\",\n          \"texTransformCount\",\n          \"uint8\",\n          \"constants\",\n          Utils.getArrayReader(this.AmatToolConstantV0),\n          \"textures\",\n          Utils.getArrayReader(this.AmatToolTextureV0),\n        ];\n      },\n    },\n  },\n\n  /// ==================================================\n  /// Chunk: TOOL, versions: 17, strucTab: 0x17730D8\n  /// ==================================================\n\n  {\n    name: \"TOOL\",\n    versions: {\n      // => Version: 16, ReferencedFunction: 0xF29440\n      16: function () {\n        this.ModelToolCloudV16 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV16 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV16 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV16 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.PackGrannyAnimationTypeV1 = [\n          \"animation\",\n          Utils.getArrayReader(\"uint8\"),\n          \"pointers\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.ModelToolAnimationV16 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"filename\",\n          Utils.getString16Reader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV1,\n        ];\n\n        this.ModelSequenceCompressionInfoV16 = [\n          \"animToken\",\n          Utils.getQWordReader(),\n          \"cmpGroup\",\n          Utils.getString16Reader(),\n          \"cmpType\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.ModelFileToolV16 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV16),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV16),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV16),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV16),\n          \"permutationTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"highLodAnimations\",\n          Utils.getArrayReader(this.ModelToolAnimationV16),\n          \"compressionInfos\",\n          Utils.getArrayReader(this.ModelSequenceCompressionInfoV16),\n          \"region\",\n          Utils.getStringReader(),\n        ];\n      },\n\n      // => Version: 15\n      15: function () {\n        this.ModelToolCloudV15 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV15 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV15 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV15 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelToolAnimationV15 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"filename\",\n          Utils.getString16Reader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n        ];\n\n        this.ModelSequenceCompressionInfoV15 = [\n          \"animToken\",\n          Utils.getQWordReader(),\n          \"cmpGroup\",\n          Utils.getString16Reader(),\n          \"cmpType\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.ModelFileToolV15 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV15),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV15),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV15),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV15),\n          \"permutationTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"highLodAnimations\",\n          Utils.getArrayReader(this.ModelToolAnimationV15),\n          \"compressionInfos\",\n          Utils.getArrayReader(this.ModelSequenceCompressionInfoV15),\n          \"region\",\n          Utils.getStringReader(),\n        ];\n      },\n\n      // => Version: 14\n      14: function () {\n        this.ModelToolCloudV14 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV14 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV14 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV14 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelToolAnimationV14 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"filename\",\n          Utils.getString16Reader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n        ];\n\n        this.ModelSequenceCompressionInfoV14 = [\n          \"animToken\",\n          Utils.getQWordReader(),\n          \"cmpGroup\",\n          Utils.getString16Reader(),\n          \"cmpType\",\n          Utils.getString16Reader(),\n        ];\n\n        this.__root = this.ModelFileToolV14 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV14),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV14),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV14),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV14),\n          \"permutationTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"highLodAnimations\",\n          Utils.getArrayReader(this.ModelToolAnimationV14),\n          \"compressionInfos\",\n          Utils.getArrayReader(this.ModelSequenceCompressionInfoV14),\n        ];\n      },\n\n      // => Version: 13\n      13: function () {\n        this.ModelToolCloudV13 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV13 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV13 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV13 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelToolAnimationV13 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"filename\",\n          Utils.getString16Reader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n        ];\n\n        this.__root = this.ModelFileToolV13 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV13),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV13),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV13),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV13),\n          \"permutationTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"highLodAnimations\",\n          Utils.getArrayReader(this.ModelToolAnimationV13),\n        ];\n      },\n\n      // => Version: 12\n      12: function () {\n        this.ModelToolCloudV12 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV12 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV12 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV12 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.PackGrannyAnimationTypeV0 = [\"animation\", Utils.getArrayReader(\"uint8\")];\n\n        this.ModelToolAnimationV12 = [\n          \"name\",\n          Utils.getQWordReader(),\n          \"filename\",\n          Utils.getString16Reader(),\n          \"data\",\n          this.PackGrannyAnimationTypeV0,\n        ];\n\n        this.__root = this.ModelFileToolV12 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV12),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV12),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV12),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV12),\n          \"permutationTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"highLodAnimations\",\n          Utils.getArrayReader(this.ModelToolAnimationV12),\n        ];\n      },\n\n      // => Version: 11, ReferencedFunction: 0xF29420\n      11: function () {\n        this.ModelToolCloudV11 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV11 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV11 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV11 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.__root = this.ModelFileToolV11 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV11),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV11),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV11),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV11),\n          \"permutationTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n\n      // => Version: 10, ReferencedFunction: 0xF29590\n      10: function () {\n        this.ModelToolCloudV10 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV10 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV10 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV10 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.__root = this.ModelFileToolV10 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV10),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV10),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV10),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV10),\n          \"permutationTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n\n      // => Version: 9\n      9: function () {\n        this.ModelToolCloudV9 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV9 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV9 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV9 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolPropertyDataV9 = [\n          \"id\",\n          Utils.getQWordReader(),\n          \"type\",\n          \"uint32\",\n          \"mergeIndex\",\n          \"uint32\",\n          \"time\",\n          \"float32\",\n          \"val\",\n          Utils.getQWordReader(),\n          \"strVal\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.__root = this.ModelFileToolV9 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV9),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV9),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV9),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV9),\n          \"permutationTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n          \"properties\",\n          Utils.getArrayReader(this.ModelToolPropertyDataV9),\n        ];\n      },\n\n      // => Version: 8\n      8: function () {\n        this.ModelToolCloudV8 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV8 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV8 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV8 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.__root = this.ModelFileToolV8 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV8),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV8),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV8),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV8),\n          \"permutationTokens\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n\n      // => Version: 7\n      7: function () {\n        this.ModelToolCloudV7 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV7 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV7 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolLightningV7 = [\n          \"systemNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"boltNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"nodeNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.__root = this.ModelFileToolV7 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV7),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV7),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV7),\n          \"lightningData\",\n          Utils.getPointerReader(this.ModelToolLightningV7),\n        ];\n      },\n\n      // => Version: 6, ReferencedFunction: 0xF29550\n      6: function () {\n        this.ModelToolCloudV6 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolBlitTextureV6 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV6 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.__root = this.ModelFileToolV6 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV6),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV6),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV6),\n        ];\n      },\n\n      // => Version: 5, ReferencedFunction: 0xF29520\n      5: function () {\n        this.ModelToolCloudV5 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolMotionV5 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"keys\",\n          Utils.getArrayReader(\"float32\"),\n          \"values\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.ModelToolBlitTextureV5 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV5 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.__root = this.ModelFileToolV5 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV5),\n          \"motions\",\n          Utils.getArrayReader(this.ModelToolMotionV5),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV5),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV5),\n        ];\n      },\n\n      // => Version: 4\n      4: function () {\n        this.ModelToolCloudV4 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolMotionV4 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"keys\",\n          Utils.getArrayReader(\"float32\"),\n          \"values\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.ModelToolBlitTextureV4 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.ModelToolStreakV4 = [\n          \"streakNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"anchorNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.__root = this.ModelFileToolV4 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV4),\n          \"motions\",\n          Utils.getArrayReader(this.ModelToolMotionV4),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV4),\n          \"streakData\",\n          Utils.getPointerReader(this.ModelToolStreakV4),\n        ];\n      },\n\n      // => Version: 3\n      3: function () {\n        this.ModelToolCloudV3 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolMotionV3 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"keys\",\n          Utils.getArrayReader(\"float32\"),\n          \"values\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.ModelToolBlitTextureV3 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.__root = this.ModelFileToolV3 = [\n          \"modelType\",\n          Utils.getQWordReader(),\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV3),\n          \"motions\",\n          Utils.getArrayReader(this.ModelToolMotionV3),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.ModelToolCloudV2 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolMotionV2 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"keys\",\n          Utils.getArrayReader(\"float32\"),\n          \"values\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.ModelToolBlitTextureV2 = [\"blitId\", Utils.getQWordReader(), \"filename\", Utils.getFileNameReader()];\n\n        this.__root = this.ModelFileToolV2 = [\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV2),\n          \"motions\",\n          Utils.getArrayReader(this.ModelToolMotionV2),\n          \"blitTextures\",\n          Utils.getArrayReader(this.ModelToolBlitTextureV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.ModelToolCloudV1 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.ModelToolMotionV1 = [\n          \"sequence\",\n          Utils.getQWordReader(),\n          \"keys\",\n          Utils.getArrayReader(\"float32\"),\n          \"values\",\n          Utils.getArrayReader([\"[]\", \"float32\", 3]),\n        ];\n\n        this.__root = this.ModelFileToolV1 = [\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV1),\n          \"motions\",\n          Utils.getArrayReader(this.ModelToolMotionV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.ModelToolCloudV0 = [\n          \"cloudNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"emitterNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"obstacleNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n        ];\n\n        this.__root = this.ModelFileToolV0 = [\n          \"materialNames\",\n          Utils.getArrayReader(Utils.getStringReader()),\n          \"cloudData\",\n          Utils.getPointerReader(this.ModelToolCloudV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: trn, versions: 15, strucTab: 0x17232A8\n  /// ==================================================\n\n  {\n    name: \"trn\",\n    versions: {\n      // => Version: 14\n      14: function () {\n        this.PackMapTerrainChunkV14 = [\n          \"chunkFlags\",\n          \"uint32\",\n          \"surfaceIndexArray\",\n          Utils.getArrayReader(\"uint16\"),\n          \"surfaceTokenArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n\n        this.PackMapTerrainConstV14 = [\"tokenName\", \"uint32\", \"value\", [\"[]\", \"float32\", 4]];\n\n        this.PackMapTerrainTexV14 = [\n          \"tokenName\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          [\"[]\", \"uint32\", 2],\n          \"layer\",\n          \"uint32\",\n        ];\n\n        this.PackMapTerrainMaterialV14 = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"fvf\",\n          \"uint32\",\n          \"constIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapTerrainChunkUVDataV14 = [\n          \"translation\",\n          [\"[]\", \"float32\", 2],\n          \"xScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"yScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"scaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          \"float32\",\n        ];\n\n        this.PackMapTerrrainChunkMaterialV14 = [\n          \"tiling\",\n          [\"[]\", \"uint8\", 3],\n          \"hiResMaterial\",\n          this.PackMapTerrainMaterialV14,\n          \"loResMaterial\",\n          this.PackMapTerrainMaterialV14,\n          \"faderMaterial\",\n          this.PackMapTerrainMaterialV14,\n          \"uvData\",\n          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV14),\n        ];\n\n        this.PackMapTerrainMaterialsV14 = [\n          \"pagedImage\",\n          Utils.getFileNameReader(),\n          \"constArray\",\n          Utils.getArrayReader(this.PackMapTerrainConstV14),\n          \"texFileArray\",\n          Utils.getArrayReader(this.PackMapTerrainTexV14),\n          \"materials\",\n          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV14),\n          \"midFade\",\n          [\"[]\", \"float32\", 2],\n          \"farFade\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.__root = this.PackMapTerrainV14 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"swapDistance\",\n          \"float32\",\n          \"heightMapArray\",\n          Utils.getArrayReader(\"float32\"),\n          \"tileFlagArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapTerrainChunkV14),\n          \"materials\",\n          Utils.getPointerReader(this.PackMapTerrainMaterialsV14),\n        ];\n      },\n\n      // => Version: 13, ReferencedFunction: 0xEBAF80\n      13: function () {\n        this.PackMapTerrainChunkV13 = [\"chunkFlags\", \"uint32\", \"tileTableArray\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapTerrainConstV13 = [\"tokenName\", \"uint32\", \"value\", [\"[]\", \"float32\", 4]];\n\n        this.PackMapTerrainTexV13 = [\n          \"tokenName\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          [\"[]\", \"uint32\", 2],\n          \"layer\",\n          \"uint32\",\n        ];\n\n        this.PackMapTerrainMaterialV13 = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"fvf\",\n          \"uint32\",\n          \"constIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapTerrainChunkUVDataV13 = [\n          \"translation\",\n          [\"[]\", \"float32\", 2],\n          \"xScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"yScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"scaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          \"float32\",\n        ];\n\n        this.PackMapTerrrainChunkMaterialV13 = [\n          \"tiling\",\n          [\"[]\", \"uint8\", 3],\n          \"hiResMaterial\",\n          this.PackMapTerrainMaterialV13,\n          \"loResMaterial\",\n          this.PackMapTerrainMaterialV13,\n          \"faderMaterial\",\n          this.PackMapTerrainMaterialV13,\n          \"uvData\",\n          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV13),\n        ];\n\n        this.PackMapTerrainMaterialsV13 = [\n          \"pagedImage\",\n          Utils.getFileNameReader(),\n          \"constArray\",\n          Utils.getArrayReader(this.PackMapTerrainConstV13),\n          \"texFileArray\",\n          Utils.getArrayReader(this.PackMapTerrainTexV13),\n          \"materials\",\n          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV13),\n          \"midFade\",\n          [\"[]\", \"float32\", 2],\n          \"farFade\",\n          [\"[]\", \"float32\", 2],\n        ];\n\n        this.__root = this.PackMapTerrainV13 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"swapDistance\",\n          \"float32\",\n          \"heightMapArray\",\n          Utils.getArrayReader(\"float32\"),\n          \"tileFlagArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapTerrainChunkV13),\n          \"materials\",\n          Utils.getPointerReader(this.PackMapTerrainMaterialsV13),\n          \"typeArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n\n      // => Version: 12, ReferencedFunction: 0xEBAE60\n      12: function () {\n        this.PackMapTerrainChunkV12 = [\"chunkFlags\", \"uint32\", \"tileTableArray\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapTerrainConstV12 = [\"tokenName\", \"uint32\", \"value\", [\"[]\", \"float32\", 4]];\n\n        this.PackMapTerrainTexV12 = [\n          \"tokenName\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          [\"[]\", \"uint32\", 2],\n          \"layer\",\n          \"uint32\",\n        ];\n\n        this.PackMapTerrainMaterialV12 = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"fvf\",\n          \"uint32\",\n          \"constIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapTerrainChunkUVDataV12 = [\n          \"translation\",\n          [\"[]\", \"float32\", 2],\n          \"xScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"yScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"scaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          \"float32\",\n        ];\n\n        this.PackMapTerrrainChunkMaterialV12 = [\n          \"tiling\",\n          [\"[]\", \"uint8\", 3],\n          \"hiResMaterial\",\n          this.PackMapTerrainMaterialV12,\n          \"loResMaterial\",\n          this.PackMapTerrainMaterialV12,\n          \"uvData\",\n          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV12),\n        ];\n\n        this.PackMapTerrainMaterialsV12 = [\n          \"pagedImage\",\n          Utils.getFileNameReader(),\n          \"constArray\",\n          Utils.getArrayReader(this.PackMapTerrainConstV12),\n          \"texFileArray\",\n          Utils.getArrayReader(this.PackMapTerrainTexV12),\n          \"materials\",\n          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV12),\n        ];\n\n        this.__root = this.PackMapTerrainV12 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"swapDistance\",\n          \"float32\",\n          \"heightMapArray\",\n          Utils.getArrayReader(\"float32\"),\n          \"tileFlagArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapTerrainChunkV12),\n          \"materials\",\n          Utils.getPointerReader(this.PackMapTerrainMaterialsV12),\n          \"typeArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n\n      // => Version: 11, ReferencedFunction: 0xEBADD0\n      11: function () {\n        this.PackMapTerrainChunkV11 = [\"chunkFlags\", \"uint32\", \"tileTableArray\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapTerrainConstV11 = [\"tokenName\", \"uint32\", \"value\", [\"[]\", \"float32\", 4]];\n\n        this.PackMapTerrainTexV11 = [\n          \"tokenName\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          [\"[]\", \"uint32\", 2],\n          \"layer\",\n          \"uint32\",\n        ];\n\n        this.PackMapTerrainMaterialV11 = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"fvf\",\n          \"uint32\",\n          \"constIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapTerrainChunkUVDataV11 = [\n          \"translation\",\n          [\"[]\", \"float32\", 2],\n          \"xScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"yScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"scaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          \"float32\",\n        ];\n\n        this.PackMapTerrrainChunkMaterialV11 = [\n          \"tiling\",\n          [\"[]\", \"uint8\", 3],\n          \"hiResMaterial\",\n          this.PackMapTerrainMaterialV11,\n          \"loResMaterial\",\n          this.PackMapTerrainMaterialV11,\n          \"uvData\",\n          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV11),\n        ];\n\n        this.PackMapTerrainMaterialsV11 = [\n          \"pagedImage\",\n          Utils.getFileNameReader(),\n          \"constArray\",\n          Utils.getArrayReader(this.PackMapTerrainConstV11),\n          \"texFileArray\",\n          Utils.getArrayReader(this.PackMapTerrainTexV11),\n          \"materials\",\n          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV11),\n        ];\n\n        this.__root = this.PackMapTerrainV11 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"swapDistance\",\n          \"float32\",\n          \"heightMapArray\",\n          Utils.getArrayReader(\"float32\"),\n          \"tileFlagArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapTerrainChunkV11),\n          \"materials\",\n          Utils.getPointerReader(this.PackMapTerrainMaterialsV11),\n          \"typeArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n\n      // => Version: 10\n      10: function () {\n        this.PackMapTerrainChunkV10 = [\"chunkFlags\", \"uint32\", \"tileTableArray\", Utils.getArrayReader(\"uint8\")];\n\n        this.PackMapTerrainConstV10 = [\"tokenName\", \"uint32\", \"value\", [\"[]\", \"float32\", 4]];\n\n        this.PackMapTerrainTexV10 = [\n          \"tokenName\",\n          \"uint32\",\n          \"flags\",\n          \"uint32\",\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          [\"[]\", \"uint32\", 2],\n          \"layer\",\n          \"uint32\",\n        ];\n\n        this.PackMapTerrainMaterialV10 = [\n          \"materialFile\",\n          Utils.getFileNameReader(),\n          \"fvf\",\n          \"uint32\",\n          \"constIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"texIndexArray\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapTerrainChunkUVDataV10 = [\n          \"translation\",\n          [\"[]\", \"float32\", 2],\n          \"xScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"yScaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"scaleSpeed\",\n          [\"[]\", \"float32\", 2],\n          \"rotation\",\n          \"float32\",\n        ];\n\n        this.PackMapTerrrainChunkMaterialV10 = [\n          \"tiling\",\n          \"uint8\",\n          \"hiResMaterial\",\n          this.PackMapTerrainMaterialV10,\n          \"loResMaterial\",\n          this.PackMapTerrainMaterialV10,\n          \"uvData\",\n          Utils.getPointerReader(this.PackMapTerrainChunkUVDataV10),\n        ];\n\n        this.PackMapTerrainMaterialsV10 = [\n          \"pagedImage\",\n          Utils.getFileNameReader(),\n          \"constArray\",\n          Utils.getArrayReader(this.PackMapTerrainConstV10),\n          \"texFileArray\",\n          Utils.getArrayReader(this.PackMapTerrainTexV10),\n          \"materials\",\n          Utils.getArrayReader(this.PackMapTerrrainChunkMaterialV10),\n        ];\n\n        this.__root = this.PackMapTerrainV10 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"swapDistance\",\n          \"float32\",\n          \"heightMapArray\",\n          Utils.getArrayReader(\"float32\"),\n          \"tileFlagArray\",\n          Utils.getArrayReader(\"uint32\"),\n          \"chunkArray\",\n          Utils.getArrayReader(this.PackMapTerrainChunkV10),\n          \"materials\",\n          Utils.getPointerReader(this.PackMapTerrainMaterialsV10),\n          \"typeArray\",\n          Utils.getArrayReader(Utils.getQWordReader()),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: trni, versions: 4, strucTab: 0x1723418\n  /// ==================================================\n\n  {\n    name: \"trni\",\n    versions: {\n      // => Version: 3, ReferencedFunction: 0xEBAFE0\n      3: function () {\n        this.PagedImageLayerDataV3 = [\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"strippedDims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n          \"diskFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV3 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"solidColor\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PagedImageTableDataV3 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV3),\n          \"rawPages\",\n          Utils.getArrayReader(this.PagedImagePageDataV3),\n          \"strippedPages\",\n          Utils.getArrayReader(this.PagedImagePageDataV3),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PagedImageEmbeddedPageDataV3 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"data\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PagedImageEmbeddedPagesDataV3 = [\n          \"rawPages\",\n          Utils.getArrayReader(this.PagedImageEmbeddedPageDataV3),\n          \"strippedPages\",\n          Utils.getArrayReader(this.PagedImageEmbeddedPageDataV3),\n        ];\n\n        this.__root = this.MapTerrainImg = [\n          \"tableData\",\n          Utils.getPointerReader(this.PagedImageTableDataV3),\n          \"pageData\",\n          Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV3),\n        ];\n      },\n\n      // => Version: 2\n      2: function () {\n        this.PagedImageLayerDataV2 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"diskFormat\",\n          \"uint32\",\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV2 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"solidColor\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PagedImageTableDataV2 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV2),\n          \"pages\",\n          Utils.getArrayReader(this.PagedImagePageDataV2),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PagedImageEmbeddedPageDataV2 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"rawData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"compressedData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PagedImageEmbeddedPagesDataV2 = [\"pages\", Utils.getArrayReader(this.PagedImageEmbeddedPageDataV2)];\n\n        this.__root = this.MapTerrainImg = [\n          \"tableData\",\n          Utils.getPointerReader(this.PagedImageTableDataV2),\n          \"pageData\",\n          Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV2),\n        ];\n      },\n\n      // => Version: 1\n      1: function () {\n        this.PagedImageLayerDataV1 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"diskFormat\",\n          \"uint32\",\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV1 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n          \"solidColor\",\n          [\"[]\", \"uint8\", 4],\n        ];\n\n        this.PagedImageTableDataV1 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV1),\n          \"pages\",\n          Utils.getArrayReader(this.PagedImagePageDataV1),\n        ];\n\n        this.PagedImageEmbeddedPageDataV1 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"rawData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"compressedData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PagedImageEmbeddedPagesDataV1 = [\"pages\", Utils.getArrayReader(this.PagedImageEmbeddedPageDataV1)];\n\n        this.__root = this.MapTerrainImg = [\n          \"tableData\",\n          Utils.getPointerReader(this.PagedImageTableDataV1),\n          \"pageData\",\n          Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV1),\n        ];\n      },\n\n      // => Version: 0\n      0: function () {\n        this.PagedImageLayerDataV0 = [\n          \"dims\",\n          [\"[]\", \"uint32\", 2],\n          \"rawDims\",\n          [\"[]\", \"uint32\", 2],\n          \"diskFormat\",\n          \"uint32\",\n          \"rawFormat\",\n          \"uint32\",\n          \"strippedFormat\",\n          \"uint32\",\n        ];\n\n        this.PagedImagePageDataV0 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"flags\",\n          \"uint32\",\n        ];\n\n        this.PagedImageTableDataV0 = [\n          \"layers\",\n          Utils.getArrayReader(this.PagedImageLayerDataV0),\n          \"pages\",\n          Utils.getArrayReader(this.PagedImagePageDataV0),\n        ];\n\n        this.PagedImageEmbeddedPageDataV0 = [\n          \"layer\",\n          \"uint32\",\n          \"coord\",\n          [\"[]\", \"uint32\", 2],\n          \"rawData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"compressedData\",\n          Utils.getArrayReader(\"uint8\"),\n        ];\n\n        this.PagedImageEmbeddedPagesDataV0 = [\"pages\", Utils.getArrayReader(this.PagedImageEmbeddedPageDataV0)];\n\n        this.__root = this.MapTerrainImg = [\n          \"tableData\",\n          Utils.getPointerReader(this.PagedImageTableDataV0),\n          \"pageData\",\n          Utils.getPointerReader(this.PagedImageEmbeddedPagesDataV0),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: txtm, versions: 1, strucTab: 0x15657D4\n  /// ==================================================\n\n  {\n    name: \"txtm\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.TextPackLanguage = [\"filenames\", Utils.getArrayReader(Utils.getFileNameReader())];\n\n        this.__root = this.TextPackManifest = [\n          \"stringsPerFile\",\n          \"uint32\",\n          \"languages\",\n          Utils.getArrayReader(this.TextPackLanguage),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: txtp, versions: 1, strucTab: 0x15657EC\n  /// ==================================================\n\n  {\n    name: \"txtp\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.TextPackPassword = [\"textId\", \"uint32\", \"password\", Utils.getQWordReader()];\n\n        this.__root = this.TextPackPasswords = [\n          \"stringCount\",\n          \"uint32\",\n          \"passwords\",\n          Utils.getArrayReader(this.TextPackPassword),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: txtv, versions: 1, strucTab: 0x1565804\n  /// ==================================================\n\n  {\n    name: \"txtv\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.TextPackVoice = [\"textId\", \"uint32\", \"voiceId\", \"uint32\"];\n\n        this.__root = this.TextPackVoices = [\"voices\", Utils.getArrayReader(this.TextPackVoice)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: UPDA, versions: 1, strucTab: 0x1528BB8\n  /// ==================================================\n\n  {\n    name: \"UPDA\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.AmatAppleUPDBentry = [\n          \"originalSize\",\n          \"uint32\",\n          \"compressedData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"originalName\",\n          Utils.getStringReader(),\n        ];\n\n        this.__root = this.AmatAppleUPDBinfo = [\"uPDBarray\", Utils.getArrayReader(this.AmatAppleUPDBentry)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: UPDB, versions: 1, strucTab: 0x1528BC4\n  /// ==================================================\n\n  {\n    name: \"UPDB\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.AmatXbxUPDBentry = [\n          \"originalSize\",\n          \"uint32\",\n          \"compressedData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"originalName\",\n          Utils.getStringReader(),\n        ];\n\n        this.__root = this.AmatXbxUPDBinfo = [\"uPDBarray\", Utils.getArrayReader(this.AmatXbxUPDBentry)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: vari, versions: 1, strucTab: 0x156581C\n  /// ==================================================\n\n  {\n    name: \"vari\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.TextPackVariant = [\"textId\", \"uint32\", \"variantTextIds\", Utils.getArrayReader(\"uint32\")];\n\n        this.__root = this.TextPackVariants = [\"variants\", Utils.getArrayReader(this.TextPackVariant)];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: watr, versions: 1, strucTab: 0x172335C\n  /// ==================================================\n\n  {\n    name: \"watr\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.__root = this.PackMapWaterV0 = [\n          \"waterFoamData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"waterChunks\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: XBXS, versions: 1, strucTab: 0x1528BAC\n  /// ==================================================\n\n  {\n    name: \"XBXS\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.AmatXbxShaderConstant = [\"token\", \"uint32\", \"regIndex\", \"uint32\", \"regCount\", \"uint32\"];\n\n        this.AmatXbxSamplerConstant = [\"regIndex\", \"uint32\", \"stateIndex\", \"uint32\", \"texIndex\", \"uint32\"];\n\n        this.AmatXbxShader = [\n          \"isPixelShader\",\n          \"uint32\",\n          \"cachedData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"physicalData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"constants\",\n          Utils.getArrayReader(this.AmatXbxShaderConstant),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatXbxSamplerConstant),\n        ];\n\n        this.AmatXbxRenderState = [\n          \"cullMode\",\n          \"uint32\",\n          \"blendControl\",\n          \"uint32\",\n          \"alphaTestAndMask\",\n          \"uint32\",\n          \"alphaTestRef\",\n          \"uint32\",\n          \"colorWrite_ARGB\",\n          \"uint32\",\n          \"depthWriteEnable\",\n          \"uint32\",\n          \"depthFunction\",\n          \"uint32\",\n          \"depthBias\",\n          \"float32\",\n        ];\n\n        this.AmatXbxPass = [\n          \"renderState\",\n          this.AmatXbxRenderState,\n          \"pixelShader\",\n          \"uint32\",\n          \"vertexShader\",\n          \"uint32\",\n          \"psFileFame\",\n          Utils.getFileNameReader(),\n          \"vsFileName\",\n          Utils.getFileNameReader(),\n        ];\n\n        this.AmatXbxEffect = [\"token\", Utils.getQWordReader(), \"passes\", Utils.getArrayReader(this.AmatXbxPass)];\n\n        this.AmatXbxSamplerState = [\n          \"addressU\",\n          \"uint32\",\n          \"addressV\",\n          \"uint32\",\n          \"addressW\",\n          \"uint32\",\n          \"borderColor\",\n          \"uint32\",\n          \"magFilter\",\n          \"uint32\",\n          \"maxAnisotropy\",\n          \"uint32\",\n          \"maxMipLevel\",\n          \"uint32\",\n          \"minFilter\",\n          \"uint32\",\n          \"mipFilter\",\n          \"uint32\",\n          \"mipMapLodBias\",\n          \"float32\",\n        ];\n\n        this.__root = this.AmatXbxMaterial = [\n          \"name\",\n          Utils.getStringReader(),\n          \"shaders\",\n          Utils.getArrayReader(this.AmatXbxShader),\n          \"effects\",\n          Utils.getArrayReader(this.AmatXbxEffect),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatXbxSamplerState),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: XSHD, versions: 1, strucTab: 0x1528BE8\n  /// ==================================================\n\n  {\n    name: \"XSHD\",\n    versions: {\n      // => Version: 0\n      0: function () {\n        this.AmatXbxShaderConstant = [\"token\", \"uint32\", \"regIndex\", \"uint32\", \"regCount\", \"uint32\"];\n\n        this.AmatXbxSamplerConstant = [\"regIndex\", \"uint32\", \"stateIndex\", \"uint32\", \"texIndex\", \"uint32\"];\n\n        this.__root = this.AmatXbxShader = [\n          \"isPixelShader\",\n          \"uint32\",\n          \"cachedData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"physicalData\",\n          Utils.getArrayReader(\"uint8\"),\n          \"constants\",\n          Utils.getArrayReader(this.AmatXbxShaderConstant),\n          \"samplers\",\n          Utils.getArrayReader(this.AmatXbxSamplerConstant),\n        ];\n      },\n    },\n  },\n];\n","let Utils = require(\"../../util/ParserUtils.js\");\n\nmodule.exports = [\n  /// ==================================================\n  /// Chunk: zon2, versions: 22, strucTab: 0x1723840\n  /// ==================================================\n\n  {\n    name: \"zon2\",\n    versions: {\n      // => Version: 21\n      21: function () {\n        this.PackMapZoneModelV22 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"probability\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"hslOffset\",\n          [\"[]\", \"float32\", 3],\n          \"zOffsets\",\n          [\"[]\", \"uint8\", 2],\n        ];\n\n        this.PackMapZoneLayerDefV22 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"hslRanges\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"instanceScaleJitter\",\n          \"float32\",\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"materialname\",\n          Utils.getFileNameReader(),\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV22),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV22),\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapZonePageV10 = [\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"seed\",\n          \"uint8\",\n          \"paintFlags\",\n          Utils.getArrayReader(\"uint32\"),\n          \"string\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapZonePageTableV10 = [\"pageArray\", Utils.getArrayReader(this.PackMapZonePageV10), \"flags\", \"uint32\"];\n\n        this.PackMapZoneDefV22 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV22),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n          \"pageTable\",\n          Utils.getPointerReader(this.PackMapZonePageTableV10),\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackMapZoneEncodingDataV22 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV22 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV22 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV22),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV22),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"broadId\",\n          \"uint16\",\n          \"reserved\",\n          Utils.getString16Reader(),\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapZonesV22 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV22),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV22),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n          \"string\",\n          Utils.getString16Reader(),\n        ];\n      },\n\n      // => Version: 20, ReferencedFunction: 0xEB7610\n      20: function () {\n        this.PackMapZoneModelV21 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"probability\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"hslOffset\",\n          [\"[]\", \"float32\", 3],\n          \"zOffsets\",\n          [\"[]\", \"uint8\", 2],\n        ];\n\n        this.PackMapZoneLayerDefV21 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"hslRanges\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"instanceScaleJitter\",\n          \"float32\",\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"materialname\",\n          Utils.getFileNameReader(),\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV21),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV21),\n        ];\n\n        this.PackMapZonePageV9 = [\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"seed\",\n          \"uint8\",\n          \"paintFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapZonePageTableV9 = [\"pageArray\", Utils.getArrayReader(this.PackMapZonePageV9), \"flags\", \"uint32\"];\n\n        this.PackMapZoneDefV21 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV21),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n          \"pageTable\",\n          Utils.getPointerReader(this.PackMapZonePageTableV9),\n        ];\n\n        this.PackMapZoneEncodingDataV21 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV21 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV21 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV21),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV21),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapZonesV21 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV21),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV21),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 19, ReferencedFunction: 0x452AB0\n      19: function () {\n        this.PackMapZoneModelV20 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"probability\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"hslOffset\",\n          [\"[]\", \"float32\", 3],\n          \"zOffsets\",\n          [\"[]\", \"uint8\", 2],\n        ];\n\n        this.PackMapZoneLayerDefV20 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"hslRanges\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"instanceScaleJitter\",\n          \"float32\",\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"materialname\",\n          Utils.getFileNameReader(),\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV20),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV20),\n        ];\n\n        this.PackMapZonePageV8 = [\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"seed\",\n          \"uint8\",\n          \"paintFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapZonePageTableV8 = [\"pageArray\", Utils.getArrayReader(this.PackMapZonePageV8), \"flags\", \"uint32\"];\n\n        this.PackMapZoneDefV20 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV20),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n          \"pageTable\",\n          Utils.getPointerReader(this.PackMapZonePageTableV8),\n        ];\n\n        this.PackMapZoneEncodingDataV20 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV20 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV20 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV20),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV20),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapZonesV20 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV20),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV20),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 18, ReferencedFunction: 0xEB7580\n      18: function () {\n        this.PackMapZoneModelV19 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"probability\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"hslOffset\",\n          [\"[]\", \"float32\", 3],\n          \"zOffsets\",\n          [\"[]\", \"uint8\", 2],\n        ];\n\n        this.PackMapZoneLayerDefV19 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"hslRanges\",\n          [\"[]\", [\"[]\", \"float32\", 2], 4],\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"materialname\",\n          Utils.getFileNameReader(),\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV19),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV19),\n        ];\n\n        this.PackMapZonePageV7 = [\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"seed\",\n          \"uint8\",\n          \"paintFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapZonePageTableV7 = [\"pageArray\", Utils.getArrayReader(this.PackMapZonePageV7), \"flags\", \"uint32\"];\n\n        this.PackMapZoneDefV19 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV19),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n          \"pageTable\",\n          Utils.getPointerReader(this.PackMapZonePageTableV7),\n        ];\n\n        this.PackMapZoneEncodingDataV19 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV19 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV19 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV19),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV19),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapZonesV19 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV19),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV19),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 17, ReferencedFunction: 0xEB74C0\n      17: function () {\n        this.PackMapZoneModelV18 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"probability\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"hslOffset\",\n          [\"[]\", \"float32\", 3],\n          \"zOffsets\",\n          [\"[]\", \"uint8\", 2],\n        ];\n\n        this.PackMapZoneLayerDefV18 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"hslRanges\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"materialname\",\n          Utils.getFileNameReader(),\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV18),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV18),\n        ];\n\n        this.PackMapZonePageV6 = [\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"seed\",\n          \"uint8\",\n          \"paintFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapZonePageTableV6 = [\"pageArray\", Utils.getArrayReader(this.PackMapZonePageV6), \"flags\", \"uint32\"];\n\n        this.PackMapZoneDefV18 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV18),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n          \"pageTable\",\n          Utils.getPointerReader(this.PackMapZonePageTableV6),\n        ];\n\n        this.PackMapZoneEncodingDataV18 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV18 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV18 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV18),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV18),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapZonesV18 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV18),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV18),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 16, ReferencedFunction: 0xEB72D0\n      16: function () {\n        this.PackMapZoneModelV17 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"probability\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"hslOffset\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapZoneLayerDefV17 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV17),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV17),\n        ];\n\n        this.PackMapZonePageV5 = [\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"seed\",\n          \"uint8\",\n          \"paintFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapZonePageTableV5 = [\"pageArray\", Utils.getArrayReader(this.PackMapZonePageV5), \"flags\", \"uint32\"];\n\n        this.PackMapZoneDefV17 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV17),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n          \"pageTable\",\n          Utils.getPointerReader(this.PackMapZonePageTableV5),\n        ];\n\n        this.PackMapZoneEncodingDataV17 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV17 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV17 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV17),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV17),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapZonesV17 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV17),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV17),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 15, ReferencedFunction: 0xEB72D0\n      15: function () {\n        this.PackMapZoneModelV16 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"probability\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"hslOffset\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapZoneLayerDefV16 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV16),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV16),\n        ];\n\n        this.PackMapZonePageV4 = [\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"seed\",\n          \"uint8\",\n          \"paintFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapZonePageTableV4 = [\"pageArray\", Utils.getArrayReader(this.PackMapZonePageV4), \"flags\", \"uint32\"];\n\n        this.PackMapZoneDefV16 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV16),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n          \"pageTable\",\n          Utils.getPointerReader(this.PackMapZonePageTableV4),\n        ];\n\n        this.PackMapZoneEncodingDataV16 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV16 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV16 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV16),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV16),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n          \"broadId\",\n          \"uint16\",\n        ];\n\n        this.PackBroadphaseType = [\"broadphaseData\", Utils.getArrayReader(\"uint8\")];\n\n        this.__root = this.PackMapZonesV16 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV16),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV16),\n          \"broadPhase\",\n          this.PackBroadphaseType,\n          \"maxBroadId\",\n          \"uint16\",\n        ];\n      },\n\n      // => Version: 14\n      14: function () {\n        this.PackMapZoneModelV15 = [\n          \"filename\",\n          Utils.getFileNameReader(),\n          \"probability\",\n          \"float32\",\n          \"flags\",\n          \"uint32\",\n          \"hslOffset\",\n          [\"[]\", \"float32\", 3],\n        ];\n\n        this.PackMapZoneLayerDefV15 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV15),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV15),\n        ];\n\n        this.PackMapZonePageV3 = [\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"seed\",\n          \"uint8\",\n          \"paintFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapZonePageTableV3 = [\"pageArray\", Utils.getArrayReader(this.PackMapZonePageV3), \"flags\", \"uint32\"];\n\n        this.PackMapZoneDefV15 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV15),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n          \"pageTable\",\n          Utils.getPointerReader(this.PackMapZonePageTableV3),\n        ];\n\n        this.PackMapZoneEncodingDataV15 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV15 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV15 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV15),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV15),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.__root = this.PackMapZonesV15 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV15),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV15),\n        ];\n      },\n\n      // => Version: 13\n      13: function () {\n        this.PackMapZoneModelV14 = [\"filename\", Utils.getFileNameReader(), \"probability\", \"float32\", \"flags\", \"uint32\"];\n\n        this.PackMapZoneLayerDefV14 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV14),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV14),\n        ];\n\n        this.PackMapZonePageV2 = [\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"chunkCoord\",\n          [\"[]\", \"uint32\", 2],\n          \"seed\",\n          \"uint8\",\n          \"paintFlags\",\n          Utils.getArrayReader(\"uint32\"),\n        ];\n\n        this.PackMapZonePageTableV2 = [\"pageArray\", Utils.getArrayReader(this.PackMapZonePageV2), \"flags\", \"uint32\"];\n\n        this.PackMapZoneDefV14 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV14),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n          \"pageTable\",\n          Utils.getPointerReader(this.PackMapZonePageTableV2),\n        ];\n\n        this.PackMapZoneEncodingDataV14 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV14 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV14 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV14),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV14),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.__root = this.PackMapZonesV14 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV14),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV14),\n        ];\n      },\n\n      // => Version: 12\n      12: function () {\n        this.PackMapZoneModelV13 = [\"filename\", Utils.getFileNameReader(), \"probability\", \"float32\", \"flags\", \"uint32\"];\n\n        this.PackMapZoneLayerDefV13 = [\n          \"type\",\n          \"uint8\",\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV13),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV13),\n        ];\n\n        this.PackMapZoneDefV13 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV13),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapZoneEncodingDataV13 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV13 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV13 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV13),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV13),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.__root = this.PackMapZonesV13 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV13),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV13),\n        ];\n      },\n\n      // => Version: 11\n      11: function () {\n        this.PackMapZoneModelV12 = [\"filename\", Utils.getFileNameReader(), \"probability\", \"float32\", \"flags\", \"uint32\"];\n\n        this.PackMapZoneLayerDefV12 = [\n          \"height\",\n          \"uint8\",\n          \"width\",\n          \"uint8\",\n          \"radiusGround\",\n          \"uint8\",\n          \"sortGroup\",\n          \"uint8\",\n          \"tiling\",\n          \"uint8\",\n          \"scaleRange\",\n          [\"[]\", \"float32\", 2],\n          \"probability\",\n          \"float32\",\n          \"fadeRange\",\n          [\"[]\", \"float32\", 2],\n          \"rotRange\",\n          [\"[]\", [\"[]\", \"float32\", 2], 3],\n          \"noise\",\n          \"uint8\",\n          \"layerFlags\",\n          \"uint32\",\n          \"modelArray\",\n          Utils.getArrayReader(this.PackMapZoneModelV12),\n          \"subModel\",\n          Utils.getPointerReader(this.PackMapZoneModelV12),\n        ];\n\n        this.PackMapZoneDefV12 = [\n          \"defFilename\",\n          Utils.getFileNameReader(),\n          \"token\",\n          \"uint32\",\n          \"layerDefArray\",\n          Utils.getArrayReader(this.PackMapZoneLayerDefV12),\n          \"timeStamp\",\n          Utils.getQWordReader(),\n        ];\n\n        this.PackMapZoneEncodingDataV12 = [\"index\", \"uint16\", \"offset\", \"uint8\"];\n\n        this.PackMapZoneCollideDataV12 = [\"normalX\", \"float32\", \"normalY\", \"float32\", \"zPos\", \"float32\"];\n\n        this.PackMapZoneV12 = [\n          \"zoneFlags\",\n          \"uint32\",\n          \"vertRect\",\n          [\"[]\", \"uint32\", 4],\n          \"waterHeight\",\n          \"float32\",\n          \"seed\",\n          \"uint8\",\n          \"defToken\",\n          \"uint32\",\n          \"range\",\n          [\"[]\", \"float32\", 2],\n          \"zPos\",\n          \"float32\",\n          \"flags\",\n          Utils.getArrayReader(\"uint8\"),\n          \"encodeData\",\n          Utils.getArrayReader(this.PackMapZoneEncodingDataV12),\n          \"collideData\",\n          Utils.getArrayReader(this.PackMapZoneCollideDataV12),\n          \"offsetData\",\n          Utils.getArrayReader(\"uint16\"),\n          \"vertices\",\n          Utils.getArrayReader([\"[]\", \"float32\", 2]),\n        ];\n\n        this.__root = this.PackMapZonesV12 = [\n          \"zoneDefArray\",\n          Utils.getArrayReader(this.PackMapZoneDefV12),\n          \"zoneArray\",\n          Utils.getArrayReader(this.PackMapZoneV12),\n        ];\n      },\n    },\n  },\n];\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst HEAD_STRUCT = [\n  \"type\",\n  \"cstring:4\",\n  \"chunkDataSize\",\n  \"uint32\",\n  \"chunkVersion\",\n  \"uint16\",\n  \"chunkHeaderSize\",\n  \"uint16\",\n  \"offsetTableOffset\",\n  \"uint32\",\n];\n\n/**\n * Settings for resolving conflicting chunk names in different files.\n * @private\n * @property DUPLICATE_SETTINGS\n * @type {Object}\n */\nlet DUPLICATE_SETTINGS;\n\n// Replacement for DUPLICATE_SETTINGS, based on the name of the root property.\nconst PACKTOCHUNK = [\n  { pack: \"MODL\", chunk: \"ANIM\", root: \"ModelFileAnimation\" },\n  { pack: \"MODL\", chunk: \"GAME\", root: \"ModelFileGame\" },\n  { pack: \"MODL\", chunk: \"SKEL\", root: \"ModelFileSkeleton\" },\n  { pack: \"MODL\", chunk: \"TOOL\", root: \"ModelFileTool\" },\n  { pack: \"cntc\", chunk: \"Main\", root: \"PackContent\" },\n  { pack: \"mMet\", chunk: \"Main\", root: \"PackMapMetadata\" },\n  { pack: \"AMAT\", chunk: \"TOOL\", root: \"AmatToolParams\" },\n  { pack: \"cmaC\", chunk: \"main\", root: \"CollideModelManifest\" },\n];\n\n// Builds the DUPLICATE_SETTINGS based on the provided T3D.formats.\n// Required to be done dynamically since the 32 bit and 64bits have different ordering\nfunction genDuplicateSettings() {\n  // Early return if the settings have been already generated\n  if (DUPLICATE_SETTINGS) return;\n\n  function getRootName(definition) {\n    let a = new definition();\n    return Object.keys(a).filter((v) => {\n      return a[v] === a.__root && v !== \"__root\";\n    })[0];\n  }\n\n  DUPLICATE_SETTINGS = {};\n  for (let setting of PACKTOCHUNK) {\n    let regex = new RegExp(`^${setting.root}(V[0-9]*)?$`);\n    let chunkDef = T3D.formats.filter((v) => {\n      return v.name === setting.chunk;\n    });\n\n    for (let defsIdx in chunkDef) {\n      let defs = chunkDef[defsIdx].versions;\n      let lastVersion = defs[Object.keys(defs).pop()];\n      let rootName = getRootName(lastVersion);\n      if (rootName.match(regex)) {\n        if (!DUPLICATE_SETTINGS[setting.chunk]) {\n          DUPLICATE_SETTINGS[setting.chunk] = [];\n        }\n        DUPLICATE_SETTINGS[setting.chunk][defsIdx] = setting.pack;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Basic chunk parsing functionality for Guild Wars 2 file chunks\n *\n * @constructor\n * @param {DataStream} ds A DataStream containing deflated chunk binary data.\n * @param {Number} addr Offset of chunk start within the DataStream\n */\nclass GW2Chunk {\n  constructor(ds, addr) {\n    // Early returns if already called, it defines the DUPLICATE_SETTINGS variable\n    genDuplicateSettings();\n\n    /**\n     * @property {DataStream} ds The DataStream data source used by this chunk.\n     */\n    this.ds = ds;\n\n    /**\n     * @property {Number} addr The address to this Chunk within ds.\n     */\n    this.addr = addr;\n\n    /**\n     * @property {Object} data The typed data read from the body of this chunk.\n     */\n    this.data = null;\n\n    /**\n     * @property {Number} headerLength The length in bytes of the chunk header.\n     */\n    this.headerLength = NaN;\n\n    /**\n     * @property {Object} header Chunk header data.\n     */\n    this.loadHead();\n  }\n\n  /**\n   * Parses the chunk header data, populating the header property.\n   */\n  loadHead() {\n    this.ds.seek(this.addr);\n    this.header = this.ds.readStruct(HEAD_STRUCT);\n\n    this.headerLength = this.ds.position - this.addr;\n  }\n\n  /**\n   * @param  {String} fileType The main type of the pack file containing this chunk.\n   * Used for resolving chunk naming conflicts between pack file types.\n   * @return {Array}  DataStream formatted array describing the data\n   * sctructures of this chunk\n   */\n  getDefinition(fileType) {\n    /// Normally we're looking for the 0th occurance\n    /// But some chunk names occur multiple times and we're interrested\n    /// in the N:th occurance of the definition.\n    ///\n    /// I've no idea how this is automated, for now just use the\n    /// settings object I've put together from experience.\n    let useNthIndex = 0;\n\n    /// If this chunk has multiple definitions\n    /// get to know what def to use...\n    let fileTypes = DUPLICATE_SETTINGS[this.header.type];\n    if (fileTypes) {\n      useNthIndex = -1;\n\n      /// Check what file name entry matches this file name\n      for (let i = 0; i < fileTypes.length && useNthIndex === -1; i++) {\n        let ft = fileTypes[i];\n\n        if (ft === fileType) {\n          useNthIndex = i;\n        }\n      }\n\n      /// We didnt find this file name!\n      /// TODO: if you get this error, please update the DUPLICATE_SETTINGS above\n      if (useNthIndex === -1) {\n        throw new Error(\"We didnt find this file name!\");\n        //debugger;\n      }\n    }\n\n    let defsFound = 0;\n    for (let i = 0; i < T3D.formats.length; i++) {\n      let f = T3D.formats[i];\n\n      /// Chunk name needs to match\n      if (f.name === this.header.type) {\n        /// There needs to be a chunk def version matching the one specifiend\n        ///\n        /// AND If this is the Nth occurance of the chunk definition\n        /// and we're looking for the Nth occurance, return it.\n        ///\n        /// chunkVersion in the dat uses 0 indexing\n        if (defsFound === useNthIndex && f.versions[this.header.chunkVersion]) {\n          return new f.versions[this.header.chunkVersion]().__root;\n        }\n\n        defsFound++;\n      }\n    }\n  }\n\n  /**\n   * Parses the chunk main data, populating the data property.\n   *\n   * @param  {String} fileType The main type of the pack file containing this chunk.\n   * Used for resolving chunk naming conflicts between pack file types when\n   * looking up the structure definition for this chunk.\n   */\n  loadData(fileType) {\n    let def = this.getDefinition(fileType);\n\n    if (def) {\n      this.ds.seek(this.addr + this.headerLength);\n      this.data = this.ds.readStruct(def);\n    } else {\n      T3D.Logger.log(\n        T3D.Logger.TYPE_WARNING,\n        \"Could not find a definition for chunk\",\n        this.header.type,\n        \"version\",\n        this.header.chunkVersion,\n        \"file name\",\n        fileType\n      );\n    }\n  }\n\n  /**\n   * Retrieves the next chunk is the datastream. In practice this means the next chunk\n   * within the same pack file.\n   *\n   * @return {GW2Chunk} The next chunk if any, otherwise null.\n   */\n  next() {\n    try {\n      // Calculate actual data size, as mChunkDataSize\n      // does not count the size of some header variables\n      return new GW2Chunk(this.ds, this.addr + 8 + this.header.chunkDataSize);\n    } catch (e) {\n      /// Out of bounds probably\n    }\n    return null;\n  }\n}\n\nmodule.exports = GW2Chunk;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst Chunk = require(\"./GW2Chunk\");\n\nconst HEAD_STRUCT = [\n  \"identifier\",\n  \"cstring:2\",\n  \"unknownField1\",\n  \"uint16\",\n  \"unknownField2\",\n  \"uint16\",\n  \"pkFileVersion\",\n  \"uint16\",\n  \"type\",\n  \"cstring:4\",\n];\n\n/**\n * Basic header and chunk parsing functionality for Guild Wars 2 pack files (PF)\n *\n * @constructor\n * @param {DataStream} ds A DataStream containing deflated file binary data.\n * @param {Number} addr Offset of file start within the DataStream\n * @param {boolean} noChunks If true, the file does not parse its\n * chunks on creation.\n */\nclass GW2File {\n  constructor(ds, addr, noChunks) {\n    /**\n     * @property {DataStream} ds The DataStream data source used by this file.\n     */\n    this.ds = ds;\n\n    /**\n     * @property {Number} addr The address to this File within ds.\n     */\n    this.addr = addr;\n\n    /// Not used anymore I think\n    this.data = null;\n\n    /**\n     * @property {Number} headerLength The length in bytes of the file header.\n     */\n    this.headerLength = NaN;\n\n    /**\n     * All {{#crossLink \"GW2Chunk\"}}chunks{{/crossLink}} contained in the file.\n     *\n     * @property chunks\n     * @type GW2Chunk[]\n     */\n    this.chunks = [];\n\n    /**\n     * @property {Object} header Chunk header data.\n     */\n    this.readHead();\n\n    if (!noChunks) {\n      this.readChunks();\n    }\n  }\n\n  /**\n   * Parses the file header data, populating the header property.\n   */\n  readHead() {\n    this.ds.seek(this.addr);\n    this.header = this.ds.readStruct(HEAD_STRUCT);\n    this.headerLength = this.ds.position - this.addr;\n  }\n\n  /**\n   * Parses the file headers and populates the chunks property.\n   */\n  readChunks() {\n    /// Reset chunks\n    this.chunks = [];\n\n    // var structs = this.getChunkStructs && this.getChunkStructs();\n\n    /// Load basic Chunk in order to read the chunk header.\n    let ch = new Chunk(this.ds, this.headerLength + this.addr);\n\n    // while(structs && ch!=null && ch.header.type){\n    while (ch !== null && ch.header.type) {\n      /// Load data and pass file type if we need to determine what chunk entry to use\n      /// (Some chunks in different files share the same chunk name)\n      ch.loadData(this.header.type);\n      this.chunks.push(ch);\n\n      /// Load next basic Chunk in order to read the chunk header.\n      ch = ch.next();\n    }\n  }\n\n  /**\n   * Get a GW2Chunk from this file\n   *\n   * @param  {String} type The name, or type of the desired chunk.\n   * @return {GW2Chunk} The first GW2Chunk in this file matching the type name, or null if no matching GW2Chunk was found.\n   */\n  getChunk(type) {\n    for (let i = 0; i < this.chunks.length; i++) {\n      if (this.chunks[i].header.type.toLowerCase() === type.toLowerCase()) {\n        return this.chunks[i];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Provides a list of known header types and their parsing structure. Should be defined by each file type individually.\n   *\n   * @return {Object} An object mapping chunk identifiers to DataStream structure descriptors.\n   */\n  getChunkStructs() {\n    return {};\n  }\n}\n\nmodule.exports = GW2File;\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/*\n  guid 1683952224941671000 is fucked up floor in SAB HUB\n  materialFilename for that mesh is 564821, shared with lots of stuff\n  lod 1 and 2 are both 0\n  material flags is 2056\n*/\n\n/**\n * Collection of methods for generating THREE materials and textures\n * from Guild Wars 2 data formats.\n * @namespace MaterialUtils\n */\n\n/**\n * Builds a custom vertex shader for a given number of uv cannels.\n * WIP not implemented yet!\n *\n * @memberof MaterialUtils\n * @param  {Number} numUv Number of UV channels used by this shader\n * @return {String}       Genereted vertex shader source\n */\nfunction buildVS(numUv) {\n  let vdefs = \"\";\n  let adefs = \"\";\n  let reads = \"\";\n  for (let i = 0; i < numUv; i++) {\n    vdefs += \"varying vec2 vUv_\" + (i + 1) + \";\\n\";\n\n    /// uv and uv2 are defined by THREE\n    if (i > 1) adefs += \"attribute vec2 uv\" + (i + 1) + \";\\n\";\n\n    reads += \"vUv_\" + (i + 1) + \" = uv\" + (i > 0 ? i + 1 : \"\") + \";\\n\";\n  }\n\n  return (\n    adefs +\n    vdefs +\n    \"void main()\\n\" +\n    \"{\\n\" +\n    reads +\n    \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\" +\n    \"gl_Position = projectionMatrix * mvPosition;\\n\" +\n    \"}\"\n  );\n}\n\n/**\n * Generate a texture of a specified color, used to be part of THREEjs\n *\n * @memberof MaterialUtils\n * @param {Number} width\n * @param {Number} height\n * @param {THREE.Color} color\n * @returns {THREE.DataTexture}\n */\nfunction generateDataTexture(width, height, color) {\n  // create a buffer with color data\n  let size = width * height;\n  let data = new Uint8Array(4 * size);\n  let r = Math.floor(color.r * 255);\n  let g = Math.floor(color.g * 255);\n  let b = Math.floor(color.b * 255);\n  let a = 255;\n\n  for (let i = 0; i < size; i++) {\n    let stride = i * 4;\n\n    data[stride] = r;\n    data[stride + 1] = g;\n    data[stride + 2] = b;\n    data[stride + 3] = a;\n  }\n  // used the buffer to create a DataTexture\n  return new THREE.DataTexture(data, width, height, THREE.RGBAFormat);\n}\n\n/**\n * Builds a custom pixel shader for a given number of uv cannels.\n * WIP not implemented yet!\n *\n * @memberof MaterialUtils\n * @param  {Array}  textures  THREE textures\n * @param  {Number} numUv     Number of UV channels used by this shader\n * @param  {Number} alphaTest Texture see-trough alpha treshold\n * @param  {any} lightMap  TODO\n * @returns {string}\n */\nfunction buildPS(textures, numUv, alphaTest, lightMap) {\n  let t1uv = \"vUv_\" + (textures[0].uvIdx + 1);\n\n  let discard = \"\";\n\n  if (alphaTest) {\n    discard = \"    if (c1.a < 0.5) \\n\" + \"       discard;\\n\";\n  }\n\n  /// Color from 1st text or lighted by 2nd?\n  let writeColor = \"gl_FragColor = c1;\\n\";\n\n  if (lightMap) {\n    let texIdx = 0;\n    // var t2uv = \"vUv_4\";//+(3-textures[texIdx].uvIdx+1);\n    let t2uv = \"vUv_1\"; // + (textures[texIdx].uvIdx+1);\n    // console.log(\"t2uv\",t2uv);\n\n    writeColor = \"   vec4 c2 = texture2D( texture\" + (texIdx + 1) + \", \" + t2uv + \" );\\n\" + \"     gl_FragColor = c2;\\n\";\n    // \"     gl_FragColor = vec4(c2.rgb * c1.r/.5, c2.a);\\n\";\n  }\n\n  let uniforms = \"\";\n  textures.forEach(function (t, idx) {\n    uniforms += \"uniform sampler2D texture\" + (idx + 1) + \";\\n\";\n  });\n  /* uniforms += \"uniform sampler2D texture1;\\n\";\n  if(lightMap)\n    uniforms += \"uniform sampler2D texture2;\\n\"; */\n\n  let varyings = \"\";\n  for (let i = 0; i < numUv; i++) {\n    varyings += \"varying vec2 vUv_\" + (i + 1) + \";\\n\";\n  }\n\n  return (\n    uniforms +\n    varyings +\n    \"void main( void ) {\\n\" +\n    \"    vec4 c1 = texture2D( texture1, \" +\n    t1uv +\n    \" );\\n\" +\n    discard +\n    writeColor +\n    \"}\"\n  );\n}\n\n/**\n * WIP, concept for generatin materials to render multi UV chanelled meshes.\n *\n * @memberof MaterialUtils\n * @param  {Array}   textures  THREE texture\n * @param  {Number} numUV     Number of UV channels used by this shader\n * @param  {Number} alphaTest Texture see-trough alpha treshold\n * @return {THREE.ShaderMaterial} Generated shader\n */\nfunction getUVMat(textures, numUV, alphaTest) {\n  let lightMap = false;\n  let uniforms = {};\n\n  textures.forEach(function (t, idx) {\n    uniforms[\"texture\" + idx] = { type: \"t\", value: t };\n  });\n\n  if (textures.length > 1) {\n    lightMap = true;\n  }\n\n  let attributes = {};\n\n  for (let i = 2; i < numUV; i++) {\n    attributes[\"uv\" + (i + 1)] = { type: \"v2\", value: [] };\n  }\n\n  let vs = buildVS(numUV);\n\n  return new THREE.ShaderMaterial({\n    uniforms: uniforms,\n    vertexShader: vs,\n    fragmentShader: buildPS(textures, numUV, alphaTest, lightMap),\n    attributes: attributes,\n    side: THREE.FrontSide,\n  });\n}\n\n/**\n * Builds a THREE texture from a ModelMaterialData by reading settings and\n * loading any required data from the localReader. Uses sharedTextures for\n * texture caching.\n *\n * This method is full of guesses and estimations, and could be improved on\n * a lot, allowing rendering of multi UV channeled materials, or special\n * materials like custom color chanelled gear.\n *\n * @memberof MaterialUtils\n * @param  {ModelMaterialData} material   A value object often automaticaly\n *                                         generated by a\n *                                         {{#crossLink \"GW2Chunk\"}}{{/crossLink}}\n *                                         structure definitions can be found in\n *                                         AllFormats.js, look for the latest\n *                                         version of ModelMaterialData\n *\n * @param  {GW2File} materialFile   A GW2File instance, must be of type AMAT\n * @param  {LocalReader} localReader The LocalReader to load the file contents from.\n * @param  {Object} sharedTextures  Value Object for keeping the texture cache\n * @return {THREE.Material}         A THREE Material with the generated contents and settings.\n */\nfunction getMaterial(material, materialFile, localReader, sharedTextures) {\n  if (!materialFile) return;\n\n  let dxChunk = materialFile.getChunk(\"dx9s\");\n  let grChunk = materialFile.getChunk(\"grmt\");\n\n  /// Append all textures to the custom material\n  let finalTextures = [];\n\n  // Some materials don't use textures..\n  if (material && material.textures.length && dxChunk.data.techniques.length > 0) {\n    /// TODO: check for flags!\n    ///\n    /// techinques[] -> passes[] -> effects[] -> samplerIndex[]\n    ///\n    // console.log(\"num effects\",dxChunk.data.techniques[0].passes[0].effects.length);\n\n    // if(grChunk.data.flags!=76)\n    //  return;\n\n    /// 3 teqs : high medium low                GRAPHICS LEVEL SETTINGS\n    /// 1 passes                        DON'T CARE\n    /// 15 effects      Each effect has a pixel shader     HOW??\n    /// 1 or 2 sampler indices                   USE ALL! (Multi material)\n\n    let effects = dxChunk.data.techniques[0].passes[0].effects;\n    // var effect = effects[10];\n    let effect = effects[0];\n\n    //let shader = dxChunk.data.shaders[effect.pixelShader];\n\n    /* effects.forEach(function (eff) {\n      if(eff.samplerIndex.length > effect.samplerIndex.length)\n        effect = eff;\n    }); */\n    // var samplerIdx = effect.samplerIndex[0];\n\n    let samplerTextures = [];\n    let textureToken;\n    let samplerTex;\n    for (let i = 0; i < effect.samplerIndex.length; i++) {\n      let samplerIdx = effect.samplerIndex[i];\n      let sampler = dxChunk.data.samplers[samplerIdx];\n\n      /// SHOULD NEVER HAPPEN, hide mesh!\n      if (!sampler) continue; // return;\n\n      textureToken = sampler && grChunk.data.texTokens[sampler.textureIndex];\n      if (!textureToken) textureToken = \"0-0\";\n      /* else\n        textureToken =textureToken.val; */\n\n      /// Find the texture reffered by this sampler\n      samplerTex = null;\n\n      material.textures.forEach(function (tex /*, index*/) {\n        /// Seems like only 1st part of token is used...\n        if (!samplerTex && tex.token.split(\"-\")[0] === textureToken.split(\"-\")[0]) {\n          // console.log(\"TEX match\",tex.token, textureToken)\n          samplerTex = tex;\n        }\n      });\n\n      /// Add this sampler's texture to the collection of all textures\n      if (samplerTex) {\n        samplerTextures.push(samplerTex);\n      } else {\n        /// FALLBACK, just guess what texture we should use\n        if (sampler) {\n          samplerTextures.push(material.textures[sampler.textureIndex]);\n        } else if (material.textures.length > 0) {\n          samplerTextures.push(material.textures[0]);\n        } else {\n          return;\n        }\n      }\n    } /// END for each sampler index in effect\n\n    /// We now have all textures\n    // console.log(\"textures from sampler\", samplerTextures);\n\n    /// Fallback to using whatever texture there is.\n    if (samplerTextures.length <= 0) {\n      return;\n      // mainTex =  material.textures[0];\n    }\n\n    // console.log(\"num samplers \",samplerTextures.length);\n    samplerTextures.forEach(function (texture, idx) {\n      if (!texture) return;\n\n      /// Set texture \"URL\"\n      let texURL = texture && texture.filename;\n\n      /// Load texture from RAM or local reader:\n      finalTextures[idx] = getTexture(texURL, localReader, sharedTextures);\n      if (finalTextures[idx]) {\n        finalTextures[idx].uvIdx = texture.uvPSInputIndex;\n      }\n    });\n  } /// End if material and texture\n\n  let finalMaterial;\n\n  /// Create custom shader material if there are textures\n  if (finalTextures) {\n    // TODO: make this work!\n    //eslint-disable-next-line no-constant-condition\n    if (false && finalTextures.length > 0) {\n      finalMaterial = getUVMat(finalTextures, material.texCoordCount, grChunk.data.flags !== 16460);\n    } else {\n      let ft = false;\n      let nt = false;\n      material.textures.forEach(function (t) {\n        // Flag for diffuse map\n        if (!ft && t.token.split(\"-\")[0] === \"1733499172\") ft = t;\n\n        // Flag for normal map\n        if (!nt && t.token.split(\"-\")[0] === \"404146670\") nt = t;\n      });\n\n      if (!ft || ft.filename <= 0) return;\n\n      finalMaterial = new THREE.MeshPhongMaterial({\n        side: THREE.FrontSide,\n        map: getTexture(ft.filename, localReader, sharedTextures),\n      });\n      if (nt) {\n        let normalMap = getTexture(nt.filename, localReader, sharedTextures);\n        normalMap.flipY = true;\n        finalMaterial.normalMap = normalMap;\n      }\n\n      finalMaterial.textureFilename = ft.filename;\n      if (grChunk.data.flags !== 16460) {\n        // console.log(\"Setting alpha flag for \",grChunk.data.flags)\n        finalMaterial.alphaTest = 0.05;\n      }\n    }\n  }\n\n  /// Fallback material is monocolored red\n  else {\n    finalMaterial = new THREE.MeshBasicMaterial({\n      side: THREE.FrontSide,\n      color: 0xff0000,\n      shading: THREE.FlatShading,\n    });\n  }\n\n  finalMaterial.needsUpdate = true;\n\n  /// Set material props\n  /// disable for now in order for custom shaders not to fuck up\n\n  if (material) {\n    let alphaMask0 = 0x0001; // + 0x0100 + 0x0200;\n    let alphaMask1 = 0x0010;\n    let alphaMask2 = 0x0100 + 0x0200;\n    //let alphaMask2b = 0x0200;\n\n    grChunk = materialFile.getChunk(\"grmt\");\n\n    // Enable alpha test for transparent flags\n    if (\n      material.materialFlags & alphaMask0 ||\n      material.materialFlags & alphaMask1 ||\n      material.materialFlags & alphaMask2 // && solidColor != null\n    ) {\n      // return;\n      // mesh.material.transparent = true;\n      // mesh.material.opacity = 2.0;\n      // var clr = solidColor;\n      // var propAlpha = 0;\n      /// Backgroud color adds to alpha\n      // if( mesh.materialFlags == 2569  ){\n      /// This is rly just guesswork\n      /// Check material flag  2568 (as int) and compare material filename 27353 to 20041\n      /// Same flags but some have alpha and some don't\n      // if( mesh.materialFlags & alphaMask2b  ){\n      //  propAlpha =  (clr[3] - 128)/128;\n      //  //propAlpha = Math.max(0,propAlpha);\n      // }\n      // mesh.material.alphaTest = Math.max(0, 0.1 );//- propAlpha*2);\n    }\n\n    /// GRCHUNK -> DATA -> FLAGS\n\n    /// HAS LIGHT - TEX - ? - EMISSIVE16460\n    ///\n\n    /// 56533 LOD FOR TOMBSTONE?\n\n    //  16460      0100 0000 0100 1100      \"standard\" stuff rendering OK in SAB (no alpha test)\n\n    //\n    //  16452(SAB)    0100 0000 0100 0100      yellow numbers in sab signs\n    //  16448(SAB)    0100 0000 0100 0000      faces on rocks, cloudmen, skybox portal images, holes in walls, floor plates...\n    //                        no lighting??\n    //\n    //   8268      0010 0000 0100 1100\n    //   3392      0000 1101 0100 0000      Moto machine light bulbs\n    //   2380      0000 1001 0100 1100\n    //   2368      0000 1001 0100 0000      Fountain water with rings, portal border and circular \"light\"\n    //    332      0000 0001 0100 1100\n    //    324      0000 0001 0100 0100      Moto face sprites\n    //\n    //    320(SAB)    0000 0001 0100 0000      portal textures (normal maps ish)\n    //\n    //     76      0000 0000 0100 1100      LOTS OF STUFF\n    //                           Tree leaves, ground, hills, some roofs, flags, street lights\n    //                           sheild textures, some fences, water tops, waterfall\n    //\n    //                           IN KHYLO \"everything with alpha\"\n    //\n    //\n    //     68      0000 0000 0100 0100      Some flowers (lo res?) fountain edges foam\n    //\n    //     64(SAB)    0000 0000 0100 0000      clouds, sun iamge\n\n    let lightMask = 8;\n\n    let knownFileFlags = [16460, 16452, 16448, 8268, 3392, 2380, 2368, 332, 324, 320, 76, 68, 64];\n\n    if (knownFileFlags.indexOf(grChunk.data.flags) < 0) {\n      T3D.Logger.log(T3D.Logger.TYPE_WARNING, \"unknown GR flag\", grChunk.data.flags);\n    }\n\n    if (!(grChunk.data.flags & lightMask)) {\n      // debugger;\n      // console.log(\"no light\");\n      finalMaterial = new THREE.MeshBasicMaterial({\n        side: THREE.FrontSide,\n        map: finalMaterial.map,\n      });\n    }\n\n    if (grChunk.data.flags !== 16460) {\n      finalMaterial.alphaTest = 0.05;\n    }\n  } /// End if material\n\n  return finalMaterial;\n}\n\n/**\n * Load image data into a THREE.Texture from a texture file in the .dat file, using a LocalReader.\n * Any loaded tetures are added to sharedTextures, allowing for texture caching and fewer reads.\n *\n * @memberof MaterialUtils\n * @param  {Number} texURL         The fileId or baseId of the file to load image data from.\n * @param  {LocalReader} localReader    The LocalReader to load the file contents from.\n * @param  {Object} sharedTextures Value Object for keeping the texture cache\n * @return {THREE.Texture} A texture that will be populated by the file data when it is loaded.\n */\nfunction getTexture(texURL, localReader, sharedTextures) {\n  let finalTexture;\n\n  /// Read texture from shared array of loaded textures\n  /// or read it from URL and add to shared ones!\n  if (texURL && sharedTextures[texURL]) {\n    /// Just read from already loaded textures.\n    finalTexture = sharedTextures[texURL];\n  } else if (texURL) {\n    /// Load and add to shared array.\n    finalTexture = loadLocalTexture(localReader, texURL);\n\n    /// Set standard texture functionality.\n    finalTexture.wrapT = THREE.RepeatWrapping;\n    finalTexture.wrapS = THREE.RepeatWrapping;\n    finalTexture.flipY = false;\n\n    sharedTextures[texURL] = finalTexture;\n  }\n\n  return finalTexture;\n}\n\n/**\n * Load image data into a THREE.Texture from a texture file in the .dat file, using a LocalReader.\n * If you're loading multiple textures, make sure to use\n * {{#crossLink \"MaterialUtils/getTexture\"}}{{/crossLink}} that allows you to cache textures.\n *\n * @memberof MaterialUtils\n * @param {LocalReader} localReader - The LocalReader to load the file contents from.\n * @param {Number} fileId - The fileId or baseId of the file to load image data from.\n * @param {Number} mapping - What THREE mapping the returned texture will use, not implemented.\n\n * @return {THREE.Texture} A texture that will be populated by the file data when it is loaded.\n */\nfunction loadLocalTexture(localReader, fileId, mapping, defaultColor, onerror) {\n  if (defaultColor === undefined) {\n    defaultColor = Math.floor(0xffffff * Math.random());\n  }\n\n  /// Temporary texture that will be returned by the function.\n  /// Color is randomized in order to differentiate different textures during loading.\n  let texture = generateDataTexture(\n    1, // Width\n    1, // Height\n    new THREE.Color(defaultColor) // Color\n  );\n\n  // Threejs r71 is using these settings by default, r72+ changed it\n  texture.minFilter = THREE.LinearMipMapLinearFilter;\n  texture.magFilter = THREE.LinearFilter;\n  texture.generateMipmaps = true;\n  texture.flipY = true;\n\n  /// Only allow non-zero fileId, otherwise jsut return static texture\n  if (parseInt(fileId) <= 0) {\n    if (onerror) onerror();\n    return texture;\n  }\n\n  /// Load file using LocalReader.\n  localReader.loadFile(\n    fileId,\n    function (inflatedData, dxtType, imageWidth, imageHeigth) {\n      /// Require infalted data to be returned.\n      if (!inflatedData) {\n        if (onerror) onerror();\n        return;\n      }\n\n      /// Create image using returned data.\n      let image = {\n        data: new Uint8Array(inflatedData),\n        width: imageWidth,\n        height: imageHeigth,\n      };\n\n      /// Use RGBA for all textures for now...\n      /// TODO: don't use alpha for some formats!\n      texture.format =\n        //eslint-disable-next-line no-constant-condition\n        dxtType === 3 || dxtType === 5 || true ? THREE.RGBAFormat : THREE.RGBFormat;\n\n      /// Update texture with the loaded image.\n      texture.image = image;\n      texture.needsUpdate = true;\n    },\n    true\n  );\n\n  /// Return texture with temporary content.\n  return texture;\n}\n\nmodule.exports = {\n  buildVS: buildVS,\n  generateDataTexture: generateDataTexture,\n  buildPS: buildPS,\n  getUVMat: getUVMat,\n  getMaterial: getMaterial,\n  loadLocalTexture: loadLocalTexture,\n};\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst base32Max = Math.pow(2, 32);\n\n/**\n * Collection Math and sorting methods\n * @namespace MathUtils\n */\n\n/**\n * Takes an integer and calculates what the 16 bit float\n * representation of the binary data used to read the integer is.\n *\n * @memberof MathUtils\n * @param  {Number} h Integer value\n * @return {Number} Float value\n */\nfunction f16(h) {\n  let s = (h & 0x8000) >> 15;\n  let e = (h & 0x7c00) >> 10;\n  let f = h & 0x03ff;\n\n  if (e === 0) {\n    return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));\n  } else if (e === 0x1f) {\n    return f ? NaN : (s ? -1 : 1) * Infinity;\n  }\n\n  return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));\n}\n\n/**\n * Calculates the number of binary ones present in the data used to\n * generate the input integer.\n *\n * @memberof MathUtils\n * @param  {Number} bits Integer\n * @return {Number}      Number of binary ones in the data\n */\nfunction popcount(bits) {\n  let SK5 = 0x55555555;\n  let SK3 = 0x33333333;\n  let SKF0 = 0x0f0f0f0f;\n  // let SKFF = 0xff00ff\n\n  bits -= (bits >> 1) & SK5;\n  bits = (bits & SK3) + ((bits >> 2) & SK3);\n  bits = (bits & SKF0) + ((bits >> 4) & SKF0);\n  bits += bits >> 8;\n\n  return (bits + (bits >> 15)) & 63;\n}\n\n/**\n * Calculates the 64 bit integer value of two 32 bit integers. Only works up to\n * the limit of the javascript Number maximum value.\n *\n * @memberof MathUtils\n * @param  {Number[]} arr     Input integers, length should be 2.\n * @return {Number}      64 bit representation of the two integers.\n */\nfunction arr32To64(arr) {\n  /// Re-read as uint64 (still little endian)\n  /// Warn: this will not work for ~50+ bit longs cus all JS numbers are 64 bit floats...\n  return base32Max * arr[1] + arr[0];\n}\n\n/**\n * Sorts an array and returns unique values only.\n *\n * @memberof MathUtils\n * @param  {Array} arr_in     Input array\n * @param  {Function} comparator A comparator function between the objects in arr_in\n * @return {Array}            Sorted and unique value.\n */\nfunction sort_unique(arr_in, comparator) {\n  let arr = Array.prototype.sort.call(arr_in, comparator);\n\n  let u = {};\n  let a = [];\n  for (let i = 0, l = arr.length; i < l; ++i) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (u.hasOwnProperty(arr[i])) {\n      continue;\n    }\n    a.push(arr[i]);\n    u[arr[i]] = 1;\n  }\n\n  return a;\n}\n\nmodule.exports = {\n  f16: f16,\n  popcount: popcount,\n  arr32To64: arr32To64,\n  sort_unique: sort_unique,\n};\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @namespace ParserUtils\n */\n\n/**\n * Collection of methods used for parsing complex data types from the .dat\n *\n * Most of these methods are only refered by the automatically generated script\n * AllFormats.js\n *\n */\n\nmodule.exports = {\n  /**\n   * Generates a function for reading an array using DataStream\n   *\n   * @param  {Array} structDef DataStream formatted structure definition\n   *                           for the items in the array.\n   * @param  {Number} maxCount The maximum allowed length of the array.\n   *                           Allows any length if left unspecified.\n   * @return {Function}        The generated parsing function.\n   */\n  getArrayReader: function (structDef, maxCount) {\n    return function (ds, struct) {\n      let ret = [];\n      try {\n        let arr_len = ds.readUint32();\n        let offset = ds.readUint32();\n        if (offset === 0) {\n          return ret;\n        }\n        let arr_ptr = ds.position - 4 + offset;\n        let pos = ds.position;\n\n        if (maxCount && arr_len > maxCount) {\n          throw \"Array length \" + arr_len + \" exceeded allowed maximum \" + maxCount;\n        }\n\n        ds.seek(arr_ptr);\n        ret = ds.readType([\"[]\", structDef, arr_len], struct);\n        ds.seek(pos);\n      } catch (e) {\n        console.warn(\"getArrayReader Failed loading array\", e);\n        console.warn(\"getArrayReader Failed loading array, structDef\", structDef);\n      }\n      return ret;\n    };\n  },\n\n  /**\n   * Generates a function for reading a refered array using DataStream\n   *\n   * @param  {Array} structDef DataStream formatted structure definition\n   *                           for the items in the array.\n   * @return {Function}        The generated parsing function.\n   */\n  getRefArrayReader: function (structDef) {\n    return function (ds) {\n      let ret_arr = [];\n\n      /// Read array of offsets\n      let arr_len = ds.readUint32();\n      let arr_ptr = ds.position + ds.readUint32();\n\n      if (arr_len === 0) {\n        return ret_arr;\n      }\n\n      let orgPos = ds.position;\n\n      /// Go to pointer and read an array of offsets!\n      ds.seek(arr_ptr);\n      let offsets = ds.readInt32Array(arr_len);\n\n      // p_data is after having read array\n      // var pointer = p_data - 4;\n      let pointer = orgPos - 4;\n\n      // auto offset  = *reinterpret_cast<const int32*>(pointer);\n      ds.seek(pointer);\n      let offset = ds.readUint32(); /// this should be the same as arr_ptr\n\n      // pointer     += offset;\n      pointer += offset;\n\n      for (let i = 0; i < offsets.length; i++) {\n        if (offsets[i] !== 0) {\n          let pos = pointer + i * 4 + offsets[i];\n          ds.seek(pos);\n\n          try {\n            ret_arr.push(ds.readStruct(structDef));\n          } catch (e) {\n            // debugger;\n            ret_arr.push(null);\n            console.warn(\"getRefArrayReader could not find refered data at offset\", offsets[i], e);\n          }\n        }\n      } /// End for each offset\n\n      ds.seek(orgPos);\n      return ret_arr;\n    };\n  },\n\n  /**\n   * Generates a function for reading a 64bit initeger. For now just reads each\n   * 32 bit integer and glues together as a string.\n   *\n   * @return {Function}        The generated parsing function.\n   */\n  getQWordReader: function () {\n    // let base32Max = 4294967296;\n    return function (ds /*, struct */) {\n      return ds.readUint32() + \"-\" + ds.readUint32();\n\n      // let p0 = ds.readUint32();\n      // let p1 = ds.readUint32();\n      // return base32Max * p1 + p0;\n    };\n  },\n\n  /**\n   * Generates a function for reading a string of 8 bit chars.\n   *\n   * @return {Function}        The generated parsing function.\n   */\n  getStringReader: function () {\n    return function (ds /*, struct*/) {\n      let ptr = ds.position + ds.readUint32();\n      let pos = ds.position;\n\n      /// Go to pointer\n      ds.seek(ptr);\n\n      let ret = ds.readCString();\n\n      /// Go back to where we were\n      ds.seek(pos);\n\n      return ret;\n    };\n  },\n\n  /**\n   * Generates a function for reading a string of 16 bit chars.\n   *\n   * @return {Function}        The generated parsing function.\n   */\n  getString16Reader: function (stringOffset) {\n    return function (ds /*, struct*/) {\n      let ptr = ds.position + ds.readUint32() + (stringOffset || 0);\n      let pos = ds.position;\n\n      /// Go to pointer\n      ds.seek(ptr);\n\n      let ret = \"\";\n      let num;\n      while (ds.position + 2 < ds.byteLength && (num = ds.readUint16()) !== 0) {\n        ret += String.fromCharCode(num);\n      }\n      // ds.readCString();\n\n      /// Go back to where we were\n      ds.seek(pos);\n\n      return ret;\n    };\n  },\n\n  /**\n   * Generates a function for reading a pointer.\n   *\n   * @param  {Array} structDef DataStream formatted structure definition\n   *                           for the item pointed to.\n   * @return {Function}        The generated parsing function.\n   */\n  getPointerReader: function (structDef) {\n    return function (ds /*, struct*/) {\n      let offset = ds.readUint32();\n\n      if (offset === 0) {\n        return {};\n      }\n\n      let ptr = ds.position - 4 + offset;\n      let pos = ds.position;\n\n      /// Go to pointer\n      ds.seek(ptr);\n\n      let ret = ds.readStruct(structDef);\n\n      /// Go back to where we were\n      ds.seek(pos);\n\n      return ret;\n    };\n  },\n\n  /**\n   * Generates a function for reading a filename/file Id.\n   *\n   * @return {Function}        The generated parsing function.\n   */\n  getFileNameReader: function () {\n    return function (ds /*, struct*/) {\n      let pos;\n      try {\n        let ptr = ds.position + ds.readUint32();\n        pos = ds.position;\n\n        /// Go to pointer\n        ds.seek(ptr);\n\n        let fileRef = ds.readStruct([\n          \"m_lowPart\",\n          \"uint16\", // uint16 m_lowPart;\n          \"m_highPart\",\n          \"uint16\", // uint16 m_highPart;\n          \"m_terminator\",\n          \"uint16\", // uint16 m_terminator;\n        ]);\n\n        /// Getting the file name...\n        /// Both need to be >= than 256 (terminator is 0)\n        let ret = 0xff00 * (fileRef.m_highPart - 0x100) + (fileRef.m_lowPart - 0x100) + 1;\n        // var ret = (fileRef.m_highPart - 0x100) * 0xff00 + (fileRef.m_lowPart - 0xff);\n\n        if (ret < 0) {\n          ret = 0;\n          // console.log(\"FR negative\", fileRef.m_highPart, fileRef.m_lowPart, fileRef.m_terminator);\n          // debugger;\n        }\n\n        /// Go back to where we were\n        ds.seek(pos);\n\n        return ret;\n      } catch (e) {\n        /// Go back to where we were\n        ds.seek(pos);\n\n        return -1;\n      }\n    };\n  },\n};\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst GW2File = require(\"../format/file/GW2File\");\nconst MaterialUtils = require(\"./MaterialUtils\");\nconst MathUtils = require(\"./MathUtils\");\n\n// TODO: Remove this local cache!!\nlet matFiles = {};\n\n/**\n * Object describing the meaning of the bits in fvf integers.\n * @property fvfFormat\n * @private\n * @type {Object}\n */\nlet fvfFormat = {\n  Position: 0x00000001 /** < 12 bytes. Position as three 32-bit floats in the order x, y, z. */,\n  Weights: 0x00000002 /** < 4 bytes. Contains bone weights. */,\n  Group: 0x00000004 /** < 4 bytes. Related to bone weights. */,\n  Normal: 0x00000008 /** < 12 bytes. Normal as three 32-bit floats in the order x, y, z. */,\n  Color: 0x00000010 /** < 4 bytes. Vertex color. */,\n  Tangent: 0x00000020 /** < 12 bytes. Tangent as three 32-bit floats in the order x, y, z. */,\n  Bitangent: 0x00000040 /** < 12 bytes. Bitangent as three 32-bit floats in the order x, y, z. */,\n  TangentFrame: 0x00000080 /** < 12 bytes. */,\n  UV32Mask: 0x0000ff00 /** < 8 bytes for each set bit. Contains UV-coords as two 32-bit floats in the order u, v. */,\n  UV16Mask: 0x00ff0000 /** < 4 bytes for each set bit. Contains UV-coords as two 16-bit floats in the order u, v. */,\n  Unknown1: 0x01000000 /** < 48 bytes. Unknown data. */,\n  Unknown2: 0x02000000 /** < 4 bytes. Unknown data. */,\n  Unknown3: 0x04000000 /** < 4 bytes. Unknown data. */,\n  Unknown4: 0x08000000 /** < 16 bytes. Unknown data. */,\n  PositionCompressed: 0x10000000 /** < 6 bytes. Position as three 16-bit floats in the order x, y, z. */,\n  Unknown5: 0x20000000 /** < 12 bytes. Unknown data. **/,\n};\n\n/**\n * Collection of methods used for generating THREE meshes from Guild Wars 2 data formats.\n * @namespace RenderUtils\n */\n\n/**\n * Creates a mesh representing a single plane.\n *\n * @memberof RenderUtils\n * @param  {Object} rect     An object with x1,x2,y1 and y2 properties.\n * @param  {Number} yPos     Vertical position of the rectangle.\n * @param  {THREE.Material} material   Mesh material to apply.\n * @param  {Number} dy       Mesh height.\n * @return {THREE.Mesh}      The generated mesh.\n */\nfunction renderRect(rect, yPos, material, dy) {\n  let dx = rect.x1 - rect.x2;\n  let dz = rect.y1 - rect.y2;\n  if (!dy) dy = 1;\n\n  let cx = (rect.x1 + rect.x2) / 2;\n  let cz = (rect.y1 + rect.y2) / 2;\n  let cy = yPos;\n\n  let geometry = new THREE.BoxGeometry(dx, dy, dz);\n\n  material =\n    material ||\n    new THREE.MeshBasicMaterial({\n      color: 0xff0000,\n      wireframe: true,\n    });\n  let plane = new THREE.Mesh(geometry, material);\n  plane.overdraw = true;\n\n  plane.position.x = cx;\n  plane.position.y = cy;\n  plane.position.z = cz;\n\n  return plane;\n}\n\n/**\n * Returns a THREE representation of the data contained by a GW2 model file.\n * The data is read using a LocalReader reference into the GW2 .dat.\n *\n * @memberof RenderUtils\n * @param {LocalReader} localReader The LocalReader to load the file contents from.\n * @param {Object} chunk Model GEOM chunk.\n * @param {Object} modelDataChunk Model MODL chunk.\n * @param {Object} sharedTextures  Value Object for keeping the texture cache.\n * @param {boolean} showUnmaterialed If false does not render any models with missing materials.\n *\n * @return {Array} Each geometry in the model file represented by a textured THREE.Mesh object\n */\nfunction renderGeomChunk(localReader, chunk, modelDataChunk, sharedTextures, showUnmaterialed) {\n  let rawMeshes = chunk.data.meshes;\n  let meshes = [];\n  let mats = modelDataChunk.data.permutations[0].materials;\n\n  rawMeshes.forEach(function (rawMesh) {\n    let rawGeom = rawMesh.geometry;\n    let fvf = rawGeom.verts.mesh.fvf; // rawGeom.fvf;\n\n    let numVerts = rawGeom.verts.vertexCount; // rawGeom.vertexCount;\n\n    let rawVerts = rawGeom.verts.mesh.vertices; // rawGeom.vertices\n\n    let indices = rawGeom.indices.indices;\n\n    let geom = new THREE.BufferGeometry();\n\n    let vertDS = new DataStream(rawVerts.buffer);\n\n    // Dirty step length for now:\n    let stride = rawVerts.length / numVerts;\n\n    // Each vertex\n    // DO UV as well\n    let vertices = new Float32Array(numVerts * 3);\n    // let tangents = null;\n    let normals = null;\n    let uvs = [];\n\n    /// Calculate the distance to the first pair of UV data from the\n    /// start of the vertex entry\n    ///\n    let distToNormals =\n      !!(fvf & fvfFormat.Position) * 12 + !!(fvf & fvfFormat.Weights) * 4 + !!(fvf & fvfFormat.Group) * 4;\n\n    let distToTangent = distToNormals + !!(fvf & fvfFormat.Normal) * 12 + !!(fvf & fvfFormat.Color) * 4;\n\n    let distToBittangent = distToTangent + !!(fvf & fvfFormat.Tangent) * 12;\n\n    let distToTangentFrame = distToBittangent + !!(fvf & fvfFormat.Bitangent) * 12;\n\n    let distToUV = distToTangentFrame + !!(fvf & fvfFormat.TangentFrame) * 12;\n\n    /// Check if the UV is 32 bit float or 16 bit float.\n    let uv32Flag = (fvf & fvfFormat.UV32Mask) >> 8;\n    let uv16Flag = (fvf & fvfFormat.UV16Mask) >> 16;\n    let isUV32 = !!uv32Flag;\n    let hasUV = !!uv16Flag || !!uv32Flag;\n\n    /// Popcount (count the number of binary 1's) in the UV flag\n    /// to get the number of UV pairs used in this vertex format.\n    let masked = isUV32 ? uv32Flag : uv16Flag;\n    let numUV = MathUtils.popcount(masked);\n\n    numUV = Math.min(numUV, 1.0);\n\n    /// Create typed UV arrays\n    if (hasUV) {\n      for (let i = 0; i < numUV; i++) {\n        uvs[i] = new Float32Array(numVerts * 2);\n      }\n    }\n\n    if (fvf & fvfFormat.Normal) {\n      // console.log(\"HAS Normal\");\n    }\n\n    if (fvf & fvfFormat.Tangent) {\n      // console.log(\"HAS Tangent\");\n    }\n\n    if (fvf & fvfFormat.Bitangent) {\n      // console.log(\"HAS Bitangent\");\n    }\n    if (fvf & fvfFormat.TangentFrame) {\n      // console.log(\"HAS TangentFrame\");\n    }\n\n    /// Read data from each vertex data entry\n    for (let i = 0; i < numVerts; i++) {\n      /// Go to vertex memory position\n      vertDS.seek(i * stride);\n\n      /// Read position data\n      /// (we just hope all meshes has 32 bit position...)\n      let x = vertDS.readFloat32();\n      let z = vertDS.readFloat32();\n      let y = vertDS.readFloat32();\n\n      /// Write position data, transformed to Tyria3D coordinate system.\n      vertices[i * 3 + 0] = x; // - c.x;\n      vertices[i * 3 + 1] = -y; // + c.y;\n      vertices[i * 3 + 2] = -z; // + c.z;\n\n      /// Read data at UV position\n      if (hasUV) {\n        for (let uvIdx = 0; uvIdx < numUV; uvIdx++) {\n          vertDS.seek(i * stride + distToUV + uvIdx * (isUV32 ? 8 : 4));\n\n          /// Add one UV pair:\n\n          let u, v;\n          if (isUV32) {\n            u = vertDS.readUint32();\n            v = vertDS.readUint32();\n          } else {\n            u = MathUtils.f16(vertDS.readUint16());\n            v = MathUtils.f16(vertDS.readUint16());\n          }\n\n          /// Push to correct UV array\n          uvs[uvIdx][i * 2 + 0] = u;\n          uvs[uvIdx][i * 2 + 1] = v;\n        }\n      } /// End if has UV\n    } /// End each vertex\n\n    /// Each face descripbed in indices\n    let faces = new Uint16Array(indices.length);\n    for (let i = 0; i < indices.length; i += 3) {\n      // This is ONE face\n      faces[i + 0] = indices[i + 2];\n      faces[i + 1] = indices[i + 1];\n      faces[i + 2] = indices[i + 0];\n    } // End each index aka \"face\"\n\n    /// Add position, index and uv props to buffered geometry\n    geom.addAttribute(\"position\", new THREE.BufferAttribute(vertices, 3));\n    // geom.addAttribute( 'index', new THREE.BufferAttribute( faces, 1) );\n    geom.setIndex(new THREE.BufferAttribute(faces, 1));\n\n    if (normals) {\n      console.log(\"adding normals\");\n      geom.addAttribute(\"normal\", new THREE.BufferAttribute(normals, 3));\n      geom.normalizeNormals();\n      geom.normalsNeedUpdate = true;\n    } else {\n      /// Calculate normals\n      geom.computeVertexNormals();\n    }\n\n    if (hasUV) {\n      for (let uvIdx = 0; uvIdx < numUV; uvIdx++) {\n        /// Names are \"uv\", \"uv2\", \"uv3\", ... , \"uvN\"\n        let uvName = \"uv\" + (uvIdx > 0 ? uvIdx + 1 : \"\");\n\n        /// Set \"custom\" attribute uvN\n        geom.addAttribute(uvName, new THREE.BufferAttribute(uvs[uvIdx], 2));\n\n        /// Flag for update\n        geom.attributes[uvName].needsUpdate = true;\n      }\n\n      /// Not needed anymore?\n      geom.uvsNeedUpdate = true;\n    }\n\n    /// Tell geometry to update its UVs and buffers\n    geom.buffersNeedUpdate = true;\n\n    /// DONE READING VERTEX DATA\n\n    /// Get material used for this mesh\n    let matIdx = rawMesh.materialIndex;\n    let mat = mats[matIdx];\n    let materialFile = null;\n\n    if (mat && matFiles[mat.filename]) {\n      materialFile = matFiles[mat.filename];\n    }\n\n    let finalMaterial = MaterialUtils.getMaterial(mat, materialFile, localReader, sharedTextures);\n\n    /// IF we could not find a material abort OR use a wireframe placeholder.\n    if (!finalMaterial) {\n      if (showUnmaterialed) {\n        finalMaterial = new THREE.MeshLambertMaterial({\n          color: 0x5bb1e8,\n          wireframe: false,\n          side: THREE.DoubleSide,\n        });\n      } else {\n        return;\n      }\n    }\n\n    /// Create the final mesh from the BufferedGeometry and MeshBasicMaterial\n    let finalMesh = new THREE.Mesh(geom, finalMaterial);\n\n    /// Set material info on the returned mesh\n    if (mat) {\n      finalMesh.materialFlags = mat.materialFlags;\n      finalMesh.materialFilename = mat.filename;\n    }\n\n    finalMesh.materialName = rawMesh.materialName;\n\n    /// Use materialFilename, materialName, and material.textureFilename in order to build export\n\n    /// Set lod info on the returned mesh\n    finalMesh.numLods = rawMesh.geometry.lods.length;\n    finalMesh.lodOverride = modelDataChunk.data.lodOverride;\n\n    /// Set flag and UV info on the returned mehs\n    finalMesh.flags = rawMesh.flags;\n    finalMesh.numUV = numUV;\n\n    /// Add mesh to returned Array\n    meshes.push(finalMesh);\n  }); /// End rawMeshes forEach\n\n  return meshes;\n}\n\n/**\n * Loads mesh array from Model file and sends as argument to callback.\n *\n * @memberof RenderUtils\n * @async\n * @param  {Number} filename Name of the model file to load data from.\n * @param  {Array} solidColor RGBA array of 4 integers\n * @param {LocalReader} localReader The LocalReader to load the file contents from.\n * @param {Object} sharedTextures  Value Object for keeping the texture cache.\n * @param {boolean} showUnmaterialed If false does not render any models with missing materials.\n\n * @param  {Function} callback Fired once all meshes have been loaded.\n * two arguments are passed to the callback function.\n *\n * The first argument is an Array with each textured THREE.Mesh objects.\n *\n * The second argument is the bounding spehere of this model file.\n *\n */\n\nfunction loadMeshFromModelFile(filename, solidColor, localReader, sharedTextures, showUnmaterialed, callback) {\n  // Short handles prop attributes\n  let finalMeshes = [];\n\n  /// Load file\n  localReader.loadFile(filename, function (inflatedData) {\n    try {\n      if (!inflatedData) {\n        throw \"Could not find MFT entry for \" + filename;\n      }\n\n      let ds = new DataStream(inflatedData);\n\n      let modelFile = new GW2File(ds, 0);\n\n      // MODL for materials -> textures\n      let modelDataChunk = modelFile.getChunk(\"modl\");\n\n      // GEOM for geometry\n      let geometryDataChunk = modelFile.getChunk(\"geom\");\n\n      /// Hacky fix for not being able to adjust for position\n      let boundingSphere = modelDataChunk.data.boundingSphere;\n      let bsc = boundingSphere.center;\n      boundingSphere.radius += Math.sqrt(bsc[0] * bsc[0] + Math.sqrt(bsc[1] * bsc[1] + bsc[2] * bsc[2]));\n\n      /// Load all material files\n      let allMats = modelDataChunk.data.permutations[0].materials;\n\n      //eslint-disable-next-line no-inner-declarations\n      function loadMaterialIndex(mIdx, matCallback) {\n        if (mIdx >= allMats.length) {\n          matCallback();\n          return;\n        }\n\n        let mat = allMats[mIdx];\n\n        /// Skip if file is loaded\n        if (matFiles[mat.filename]) {\n          loadMaterialIndex(mIdx + 1, matCallback);\n          return;\n        }\n\n        localReader.loadFile(mat.filename, function (inflatedData) {\n          if (inflatedData) {\n            let ds = new DataStream(inflatedData);\n            let materialFile = new GW2File(ds, 0);\n            matFiles[mat.filename] = materialFile;\n          }\n\n          loadMaterialIndex(mIdx + 1, matCallback);\n        });\n      }\n\n      loadMaterialIndex(0, function () {\n        /// Create meshes\n        let meshes = renderGeomChunk(localReader, geometryDataChunk, modelDataChunk, sharedTextures, showUnmaterialed);\n\n        // Build mesh group\n        meshes.forEach(function (mesh) {\n          /// Material flags\n          let knownflags = [\n            /*\n              1-5\n              Has Tex?  IDK      Light?    Alpha?\n\n              5-8\n              0      0       IDK       Water?\n\n              9-12\n              Has Tex?  0      Alpha?    Alpha?\n\n              13\n              IDK KEV\n              */\n\n            0, // 0 0000 0000 0000    Ground / Wall splashes\n            8, // 0 0000 0000 1000    Broken Khylo roof DDS\n            9, // 0 0000 0000 1001    Tree leaves\n\n            520, // 0 0010 0000 1000    Some LOD modules, fires, smoke, inside of tents (some DSS textures)\n\n            2056, // 0 1000 0000 1000    Solid objects, also broken animations\n\n            /// Solids here are unhappy, or are they? could be animations etc\n            2057, // 0 1000 0000 1001    Windmill sails, bushes, trees, but also a statue and a few pieces of wall\n\n            2060, // 0 1000 0000 1100    A few solid objects, like wooden barricades, one(!) painting\n            2061, // 0 1000 0000 1101    A few bushes, two paintings\n\n            2312, // 0 1001 0000 1000    Opaque Clock tower main walls AND IVY\n            2316, // 0 1001 0000 1100    Bushes, inner flower walkway a ramp and a box\n\n            // Number 10\n            2568, // 0 1010 0000 1000    Lots of solids; walls, tents also some tent details WITH alpa\n\n            // Number 11\n            2569, // 0 1010 0000 1001    Solids like walls and roofs and appernt non solids like ropes\n\n            2572, // 0 1010 0000 1100    Solid wooden beems, lamp posts\n            2573, // 0 1010 0000 1101    Lamp holders, bushes, fences, apparent non solids\n            2584, // 0 1010 0001 1000    Fountain Well water\n\n            2824, // 0 1011 0000 1000    Windows, sign arrows, cloth roofs (non solids) BUT straw roofs\n            2828, // 0 1011 0000 1100    A few fence post (non solids)\n            2840, // 0 1011 0001 1000    Fountain running water + pipe water\n\n            4617, // 1 0010 0000 1001    Found nothing\n            6664, // 1 1010 0000 1000    Two groups of solid boxes\n          ];\n\n          // let alphaMask0 = 0x0001 // + 0x0100 + 0x0200;\n          // let alphaMask1 = 0x0010\n          // let alphaMask2 = 0x0100 + 0x0200\n          // let alphaMask2b = 0x0200\n\n          let texMask = 0x8 + 0x0800;\n\n          if (knownflags.indexOf(mesh.materialFlags) !== 11) {\n            // return;\n          }\n\n          // No smoke etc\n          if (mesh.materialFlags === 520) {\n            // return;\n          }\n\n          // Must have texture\n          if (!showUnmaterialed && !(mesh.materialFlags & texMask)) {\n            return;\n          }\n\n          // NO lods\n          if (mesh.flags === 4 || mesh.flags === 1 || mesh.flags === 0) {\n            // return;\n          }\n\n          // Add to final colection\n          finalMeshes.push(mesh);\n        }); /// END FOR EACH meshes\n\n        callback(finalMeshes, boundingSphere);\n      }); /// END LOAD MATERIALS CALLBACK\n    } catch (e) {\n      console.warn(\"Failed rendering model \" + filename, e);\n      let mesh = new THREE.Mesh(new THREE.BoxGeometry(200, 2000, 200), new THREE.MeshNormalMaterial());\n      mesh.flags = 4;\n      mesh.materialFlags = 2056;\n      mesh.lodOverride = [1000000, 1000000];\n      finalMeshes.push(mesh);\n\n      /// Send the final meshes to callback function\n      callback(finalMeshes);\n    }\n  }); /// END FILE LOADED CALLBACK FUNCTION\n}\n\n/**\n * Gets a mesh array from Model file and sends as argument to callback. Uses a cache of meshes in order\n * to never read the same model file twice.\n *\n * @memberof RenderUtils\n * @async\n * @param  {Number} filename The fileId or baseId of the Model file to load\n * @param  {Array} color RGBA array of 4 integers\n * @param  {LocalReader} localReader The LocalReader object used to read data from the GW2 .dat file.\n * @param {Object} sharedMeshes  Value Object for keeping the texture cache.\n * @param {Object} sharedTextures  Value Object for keeping the texture cache.\n * @param {boolean} showUnmaterialed If false does not render any models with missing materials.\n * @param  {Function} callback Fired once all meshes have been loaded.\n * three arguments are passed to the callback function.\n *\n * The first argument is an Array with each textured THREE.Mesh objects.\n *\n * The second argument is a boolean, true indicates that these meshes were not\n * loaded from the dat file, but retrieved from the run time cache.\n *\n * The third argument is the bounding spehere of this model file.\n */\nfunction getMeshesForFilename(filename, color, localReader, sharedMeshes, sharedTextures, showUnmaterialed, callback) {\n  /// If this file has already been loaded, just return a reference to the meshes.\n  /// isCached will be set to true to inform the caller the meshes will probably\n  /// have to be cloned in some way.\n  if (sharedMeshes[filename]) {\n    callback(sharedMeshes[filename].meshes, true, sharedMeshes[filename].boundingSphere);\n  }\n\n  /// If this file has never been loaded, load it using loadMeshFromModelFile\n  /// the resulting mesh array will be cached within this model's scope.\n  else {\n    loadMeshFromModelFile(filename, color, localReader, sharedTextures, showUnmaterialed, function (\n      meshes,\n      boundingSphere\n    ) {\n      /// Cache result if any.\n      if (meshes) {\n        sharedMeshes[filename] = {\n          meshes: meshes,\n          boundingSphere: boundingSphere,\n        };\n      }\n\n      /// Allways fire callback.\n      callback(meshes, false, boundingSphere);\n    });\n  }\n}\n\n/**\n * WIP, Tries to find all fileIds refered by a model file.\n *\n * @memberof RenderUtils\n * @async\n * @param  {Number}   filename    Model file Id\n * @param  {LocalReader}   localReader LocalReader instance to read from\n * @param  {Function} callback   First argument is list of used file IDs\n */\nfunction getFilesUsedByModel(filename, localReader, callback) {\n  let fileIds = [filename];\n\n  /// Load model file\n  localReader.loadFile(filename, function (inflatedData) {\n    try {\n      if (!inflatedData) {\n        throw \"Could not find MFT entry for \" + filename;\n      }\n\n      let ds = new DataStream(inflatedData);\n      let modelFile = new GW2File(ds, 0);\n\n      // MODL for materials -> textures\n      let modelDataChunk = modelFile.getChunk(\"modl\");\n\n      /// Get materials used by model\n      let mats = modelDataChunk.data.permutations[0].materials;\n\n      /// Add each material file AND referenced TEXTURES\n      mats.forEach(function (mat) {\n        /// Add material file id\n        let matFileName = mat.filename;\n        fileIds.push(matFileName);\n\n        /// Add each texture file id\n        mat.textures.forEach(function (tex) {\n          fileIds.push(tex.filename);\n        });\n      });\n    } catch (e) {\n      console.warn(\"Could not export any data\", e);\n    }\n\n    callback(fileIds);\n  });\n}\n\nmodule.exports = {\n  renderRect: renderRect,\n  renderGeomChunk: renderGeomChunk,\n  loadMeshFromModelFile: loadMeshFromModelFile,\n  getMeshesForFilename: getMeshesForFilename,\n  getFilesUsedByModel: getFilesUsedByModel,\n};\n","/*\nCopyright © Tyria3DLibrary project contributors\n\nThis file is part of the Tyria 3D Library.\n\nTyria 3D Library is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nTyria 3D Library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with the Tyria 3D Library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = {\n  /// TODO: port fog from in-engine\n\n  getFragmentShader: function () {\n    return [\n      \"uniform vec2 uvScale;\",\n      \"uniform vec2 offset;\",\n      \"uniform sampler2D texturePicker;\",\n      \"uniform sampler2D texturePicker2;\",\n      \"uniform sampler2D texture1;\",\n      \"uniform sampler2D texture2;\",\n      \"uniform sampler2D texture3;\",\n      \"uniform sampler2D texture4;\",\n\n      THREE.ShaderChunk[\"logdepthbuf_pars_fragment\"],\n\n      \"varying vec2 vUv;\",\n      \"varying vec3 vecNormal;\",\n\n      \"vec3 blend(\",\n      \"vec4 texture1, float a1, vec4 texture2, float a2,\",\n      \"vec4 texture3, float a3, vec4 texture4, float a4)\",\n      \"{\",\n      \"float depth = 2.0;\",\n      \"float alphaMult = 1.0;\",\n      \"float alphaAdd  = 0.0;\",\n      \"a1 *= 4.0;\",\n      \"a2 *= 4.0;\",\n      \"a3 *= 4.0;\",\n      \"a4 *= 4.0;\",\n      \"a1 =  a1+(1.5+texture1.a);\",\n      \"a2 =  a2+(1.5+texture2.a);\",\n      \"a3 =  a3+(1.5+texture3.a);\",\n      \"a4 =  a4+(1.5+texture4.a);\",\n      \"float ma = max(a1,a2);\",\n      \"ma = max(ma,a3);\",\n      \"ma = max(ma,a4);\",\n      \"ma -= depth;\",\n      \"float b1 = max(a1 - ma, 0.0);\",\n      \"float b2 = max(a2 - ma, 0.0);\",\n      \"float b3 = max(a3 - ma, 0.0);\",\n      \"float b4 = max(a4 - ma, 0.0);\",\n      \"return (\",\n      \"texture1.rgb * b1 + texture2.rgb * b2 +\",\n      \"texture3.rgb * b3 + texture4.rgb * b4 \",\n      \") / (b1 + b2 + b3 + b4);\",\n      \"}\",\n\n      \"void main( void ) {\",\n      \"vec2 position = vUv*uvScale;\",\n      \"float edge = 1.0/1024.0;\",\n      \"vec2 compPos = edge + (vUv*0.25 + offset) * (1.0-edge*2.0);\",\n      \"vec4 tp1 = texture2D( texturePicker, compPos);\",\n      \"vec4 tp2 = texture2D( texturePicker2, compPos);\",\n      \"vec4 composite = tp1;\",\n      \"vec4 t1 = texture2D( texture1, position );\",\n      \"vec4 t2 = texture2D( texture2, position );\",\n      \"vec4 t3 = texture2D( texture3, position );\",\n      \"vec4 t4 = texture2D( texture4, position );\",\n      \"vec3 color = blend(\",\n      \"t1, tp1.a,\",\n      \"t2, tp1.b,\",\n      \"t3, tp1.g,\",\n      \"t4, tp1.r\",\n      \");\",\n      \"color *= 0.5+tp2.r;\",\n      \"gl_FragColor = vec4(color,1.0);\",\n      THREE.ShaderChunk[\"logdepthbuf_fragment\"],\n      \"}\",\n    ].join(\"\\n\");\n  },\n  getVertexShader: function () {\n    return [\n      \"varying vec2 vUv;\",\n      \"varying vec3 vecNormal;\",\n      THREE.ShaderChunk[\"logdepthbuf_pars_vertex\"],\n      \"void main()\",\n      \"{\",\n\n      \"vUv =  uv;\",\n      \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\",\n      \"vecNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\",\n      \"gl_Position = projectionMatrix * mvPosition;\",\n      THREE.ShaderChunk[\"logdepthbuf_vertex\"],\n      \"}\",\n    ].join(\"\\n\");\n  },\n};\n"]}